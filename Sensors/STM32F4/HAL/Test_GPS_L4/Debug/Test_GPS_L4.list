
Test_GPS_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f00  08008f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08008f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000734  2000000c  08008f14  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000740  08008f14  00020740  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c739  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001bf4  00000000  00000000  0002c775  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001e8  00000000  00000000  0002e370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003bc3  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003ac8  00000000  00000000  0003211b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00035be3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002794  00000000  00000000  00035c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e80 	.word	0x08008e80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008e80 	.word	0x08008e80

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d2:	4a0c      	ldr	r2, [pc, #48]	; (8000204 <HAL_Init+0x3c>)
 80001d4:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <HAL_Init+0x3c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001de:	2003      	movs	r0, #3
 80001e0:	f000 fc64 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 f849 	bl	800027c <HAL_InitTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	e001      	b.n	80001fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001f6:	f008 fa29 	bl	800864c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40022000 	.word	0x40022000

08000208 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <HAL_DeInit+0x54>)
 800020e:	f04f 32ff 	mov.w	r2, #4294967295
 8000212:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <HAL_DeInit+0x54>)
 8000216:	2200      	movs	r2, #0
 8000218:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <HAL_DeInit+0x54>)
 800021c:	f04f 32ff 	mov.w	r2, #4294967295
 8000220:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <HAL_DeInit+0x54>)
 8000224:	2200      	movs	r2, #0
 8000226:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <HAL_DeInit+0x54>)
 800022a:	f04f 32ff 	mov.w	r2, #4294967295
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_DeInit+0x54>)
 8000232:	2200      	movs	r2, #0
 8000234:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <HAL_DeInit+0x54>)
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <HAL_DeInit+0x54>)
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <HAL_DeInit+0x54>)
 8000246:	f04f 32ff 	mov.w	r2, #4294967295
 800024a:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <HAL_DeInit+0x54>)
 800024e:	2200      	movs	r2, #0
 8000250:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000252:	f000 f80c 	bl	800026e <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000284:	2300      	movs	r3, #0
 8000286:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <HAL_InitTick+0x68>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d022      	beq.n	80002d6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <HAL_InitTick+0x6c>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_InitTick+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800029c:	fbb1 f3f3 	udiv	r3, r1, r3
 80002a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc48 	bl	8000b3a <HAL_SYSTICK_Config>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d10f      	bne.n	80002d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b0f      	cmp	r3, #15
 80002b4:	d809      	bhi.n	80002ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b6:	2200      	movs	r2, #0
 80002b8:	6879      	ldr	r1, [r7, #4]
 80002ba:	f04f 30ff 	mov.w	r0, #4294967295
 80002be:	f000 fc00 	bl	8000ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <HAL_InitTick+0x70>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6013      	str	r3, [r2, #0]
 80002c8:	e007      	b.n	80002da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80002ca:	2301      	movs	r3, #1
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e004      	b.n	80002da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e001      	b.n	80002da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002da:	7bfb      	ldrb	r3, [r7, #15]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000004 	.word	0x20000004
 80002e8:	20000008 	.word	0x20000008
 80002ec:	20000000 	.word	0x20000000

080002f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_IncTick+0x1c>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HAL_IncTick+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4413      	add	r3, r2
 80002fe:	4a03      	ldr	r2, [pc, #12]	; (800030c <HAL_IncTick+0x1c>)
 8000300:	6013      	str	r3, [r2, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	20000028 	.word	0x20000028
 8000310:	20000004 	.word	0x20000004

08000314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  return uwTick;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <HAL_GetTick+0x14>)
 800031a:	681b      	ldr	r3, [r3, #0]
}
 800031c:	4618      	mov	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028

0800032c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <HAL_GetTickPrio+0x14>)
 8000332:	681b      	ldr	r3, [r3, #0]
}
 8000334:	4618      	mov	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000000 	.word	0x20000000

08000344 <HAL_SetTickFreq>:
  * @brief Set new tick Freq.
  * @param Freq tick frequency
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status  = HAL_OK;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <HAL_SetTickFreq+0x3c>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	429a      	cmp	r2, r3
 8000358:	d00c      	beq.n	8000374 <HAL_SetTickFreq+0x30>
  {
    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <HAL_SetTickFreq+0x40>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff8c 	bl	800027c <HAL_InitTick>
 8000364:	4603      	mov	r3, r0
 8000366:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <HAL_SetTickFreq+0x30>
    {
      uwTickFreq = Freq;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <HAL_SetTickFreq+0x3c>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	6013      	str	r3, [r2, #0]
    }
  }

  return status;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000004 	.word	0x20000004
 8000384:	20000000 	.word	0x20000000

08000388 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
uint32_t HAL_GetTickFreq(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <HAL_GetTickFreq+0x14>)
 800038e:	681b      	ldr	r3, [r3, #0]
}
 8000390:	4618      	mov	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000004 	.word	0x20000004

080003a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff ffb4 	bl	8000314 <HAL_GetTick>
 80003ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003b8:	d004      	beq.n	80003c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_Delay+0x40>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	4413      	add	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80003c4:	bf00      	nop
 80003c6:	f7ff ffa5 	bl	8000314 <HAL_GetTick>
 80003ca:	4602      	mov	r2, r0
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	1ad2      	subs	r2, r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d3f7      	bcc.n	80003c6 <HAL_Delay+0x26>
  {
  }
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000004 	.word	0x20000004

080003e4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80003e8:	4a05      	ldr	r2, [pc, #20]	; (8000400 <HAL_SuspendTick+0x1c>)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <HAL_SuspendTick+0x1c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0302 	bic.w	r3, r3, #2
 80003f2:	6013      	str	r3, [r2, #0]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e010 	.word	0xe000e010

08000404 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <HAL_ResumeTick+0x1c>)
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <HAL_ResumeTick+0x1c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000e010 	.word	0xe000e010

08000424 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8000428:	f04f 7385 	mov.w	r3, #17432576	; 0x10a0000
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <HAL_GetREVID>:
/**
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <HAL_GetREVID+0x16>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	0c1b      	lsrs	r3, r3, #16
 8000440:	b29b      	uxth	r3, r3
}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e0042000 	.word	0xe0042000

08000450 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <HAL_GetDEVID+0x18>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e0042000 	.word	0xe0042000

0800046c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <HAL_GetUIDw0+0x14>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	1fff7590 	.word	0x1fff7590

08000484 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <HAL_GetUIDw1+0x14>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	1fff7594 	.word	0x1fff7594

0800049c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <HAL_GetUIDw2+0x14>)
 80004a2:	681b      	ldr	r3, [r3, #0]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	1fff7598 	.word	0x1fff7598

080004b4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6053      	str	r3, [r2, #4]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e0042000 	.word	0xe0042000

080004d4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	f023 0301 	bic.w	r3, r3, #1
 80004e2:	6053      	str	r3, [r2, #4]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e0042000 	.word	0xe0042000

080004f4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6053      	str	r3, [r2, #4]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e0042000 	.word	0xe0042000

08000514 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	f023 0302 	bic.w	r3, r3, #2
 8000522:	6053      	str	r3, [r2, #4]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e0042000 	.word	0xe0042000

08000534 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6053      	str	r3, [r2, #4]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e0042000 	.word	0xe0042000

08000554 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f023 0304 	bic.w	r3, r3, #4
 8000562:	6053      	str	r3, [r2, #4]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e0042000 	.word	0xe0042000

08000574 <HAL_SYSCFG_SRAM2Erase>:
  * @note   As long as SRAM2 is not erased the SRAM2ER bit will be set.
  *         This bit is automatically reset at the end of the SRAM2 erase operation.
  * @retval None
  */
void HAL_SYSCFG_SRAM2Erase(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* unlock the write protection of the SRAM2ER bit */
  SYSCFG->SKR = 0xCA;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_SYSCFG_SRAM2Erase+0x20>)
 800057a:	22ca      	movs	r2, #202	; 0xca
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  SYSCFG->SKR = 0x53;
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_SYSCFG_SRAM2Erase+0x20>)
 8000580:	2253      	movs	r2, #83	; 0x53
 8000582:	625a      	str	r2, [r3, #36]	; 0x24
  /* Starts a hardware SRAM2 erase operation*/
  *(__IO uint32_t *) SCSR_SRAM2ER_BB = 0x00000001UL;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_SYSCFG_SRAM2Erase+0x24>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40010000 	.word	0x40010000
 8000598:	42200300 	.word	0x42200300

0800059c <HAL_SYSCFG_EnableMemorySwappingBank>:
  *         and Flash Bank1 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_EnableMemorySwappingBank(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)FB_MODE_BB = 0x00000001UL;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_SYSCFG_EnableMemorySwappingBank+0x14>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	42200020 	.word	0x42200020

080005b4 <HAL_SYSCFG_DisableMemorySwappingBank>:
  *         and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)
  *
  * @retval None
  */
void HAL_SYSCFG_DisableMemorySwappingBank(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  *(__IO uint32_t *)FB_MODE_BB = 0x00000000UL;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_SYSCFG_DisableMemorySwappingBank+0x14>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	42200020 	.word	0x42200020

080005cc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE1: VREF_OUT2 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f023 0204 	bic.w	r2, r3, #4
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	600b      	str	r3, [r1, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40010030 	.word	0x40010030

080005f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80005fc:	4906      	ldr	r1, [pc, #24]	; (8000618 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f023 0202 	bic.w	r2, r3, #2
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	600b      	str	r3, [r1, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40010030 	.word	0x40010030

0800061c <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8000624:	4906      	ldr	r1, [pc, #24]	; (8000640 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	604b      	str	r3, [r1, #4]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40010030 	.word	0x40010030

08000644 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000656:	f7ff fe5d 	bl	8000314 <HAL_GetTick>
 800065a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 800065c:	e008      	b.n	8000670 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800065e:	f7ff fe59 	bl	8000314 <HAL_GetTick>
 8000662:	4602      	mov	r2, r0
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	2b0a      	cmp	r3, #10
 800066a:	d901      	bls.n	8000670 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800066c:	2303      	movs	r3, #3
 800066e:	e006      	b.n	800067e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f0      	beq.n	800065e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010030 	.word	0x40010030

0800068c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40010030 	.word	0x40010030

080006ac <HAL_SYSCFG_EnableIOAnalogSwitchBooster>:
  * @brief  Enable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_EnableIOAnalogSwitchBooster(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_SYSCFG_EnableIOAnalogSwitchBooster+0x1c>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6053      	str	r3, [r2, #4]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_SYSCFG_DisableIOAnalogSwitchBooster>:
  * @brief  Disable the I/O analog switch voltage booster
  *
  * @retval None
  */
void HAL_SYSCFG_DisableIOAnalogSwitchBooster(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOSTEN);
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_SYSCFG_DisableIOAnalogSwitchBooster+0x1c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006da:	6053      	str	r3, [r2, #4]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40010000 	.word	0x40010000

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <__NVIC_EnableIRQ+0x38>)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	095b      	lsrs	r3, r3, #5
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	f002 021f 	and.w	r2, r2, #31
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db10      	blt.n	80007c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	490b      	ldr	r1, [pc, #44]	; (80007cc <__NVIC_DisableIRQ+0x40>)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	095b      	lsrs	r3, r3, #5
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	f002 021f 	and.w	r2, r2, #31
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	3320      	adds	r3, #32
 80007b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db0e      	blt.n	8000800 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <__NVIC_GetPendingIRQ+0x40>)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	095b      	lsrs	r3, r3, #5
 80007ea:	3340      	adds	r3, #64	; 0x40
 80007ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 031f 	and.w	r3, r3, #31
 80007f6:	fa22 f303 	lsr.w	r3, r2, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	e000      	b.n	8000802 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000800:	2300      	movs	r3, #0
  }
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0c      	blt.n	8000840 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	4909      	ldr	r1, [pc, #36]	; (800084c <__NVIC_SetPendingIRQ+0x38>)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	095b      	lsrs	r3, r3, #5
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	f002 021f 	and.w	r2, r2, #31
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	3340      	adds	r3, #64	; 0x40
 800083c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0c      	blt.n	800087c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	4909      	ldr	r1, [pc, #36]	; (8000888 <__NVIC_ClearPendingIRQ+0x38>)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	095b      	lsrs	r3, r3, #5
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	f002 021f 	and.w	r2, r2, #31
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	3360      	adds	r3, #96	; 0x60
 8000878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0e      	blt.n	80008bc <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <__NVIC_GetActive+0x40>)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	3380      	adds	r3, #128	; 0x80
 80008a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f003 031f 	and.w	r3, r3, #31
 80008b2:	fa22 f303 	lsr.w	r3, r2, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	e000      	b.n	80008be <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80008bc:	2300      	movs	r3, #0
  }
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	490d      	ldr	r1, [pc, #52]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	4909      	ldr	r1, [pc, #36]	; (8000920 <__NVIC_SetPriority+0x50>)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db09      	blt.n	800094a <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <__NVIC_GetPriority+0x48>)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	4413      	add	r3, r2
 800093e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000942:	b2db      	uxtb	r3, r3
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	b2db      	uxtb	r3, r3
 8000948:	e009      	b.n	800095e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <__NVIC_GetPriority+0x4c>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	4413      	add	r3, r2
 8000956:	7e1b      	ldrb	r3, [r3, #24]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
  }
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	2201      	movs	r2, #1
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	401a      	ands	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ba:	2101      	movs	r1, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	1e59      	subs	r1, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b089      	sub	sp, #36	; 0x24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_DecodePriority+0x32>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_DecodePriority+0x34>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	40da      	lsrs	r2, r3
 8000a12:	2101      	movs	r1, #1
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	1e5a      	subs	r2, r3, #1
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	401a      	ands	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3724      	adds	r7, #36	; 0x24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a48:	4905      	ldr	r1, [pc, #20]	; (8000a60 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <__NVIC_SystemReset+0x20>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_SystemReset+0x24>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60cb      	str	r3, [r1, #12]
 8000a58:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <__NVIC_SystemReset+0x1c>
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	05fa0004 	.word	0x05fa0004

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff20 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fe19 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff fe2e 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff48 	bl	8000974 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff feef 	bl	80008d0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe21 	bl	8000750 <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe31 	bl	800078c <__NVIC_DisableIRQ>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000b36:	f7ff ff83 	bl	8000a40 <__NVIC_SystemReset>

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff90 	bl	8000a68 <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Get the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8000b56:	f7ff fded 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000b5a:	4603      	mov	r3, r0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8000b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fed5 	bl	8000924 <__NVIC_GetPriority>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	f7ff ff29 	bl	80009d6 <NVIC_DecodePriority>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe3a 	bl	8000814 <__NVIC_SetPendingIRQ>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe0a 	bl	80007d0 <__NVIC_GetPendingIRQ>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe3b 	bl	8000850 <__NVIC_ClearPendingIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fe4b 	bl	800088c <__NVIC_GetActive>
 8000bf6:	4603      	mov	r3, r0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d106      	bne.n	8000c1c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c1a:	e005      	b.n	8000c28 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c1c:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 0304 	bic.w	r3, r3, #4
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c3c:	f000 f802 	bl	8000c44 <HAL_SYSTICK_Callback>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c56:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_MPU_Disable+0x26>)
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MPU_Disable+0x26>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_MPU_Disable+0x2a>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	e000ed90 	.word	0xe000ed90

08000c80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_MPU_Enable+0x34>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <HAL_MPU_Enable+0x38>)
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_MPU_Enable+0x38>)
 8000c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ca2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU settings take effects */
  __DSB();
  __ISB();
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed90 	.word	0xe000ed90
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init: Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cc4:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d028      	beq.n	8000d26 <HAL_MPU_ConfigRegion+0x6a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8000cdc:	4918      	ldr	r1, [pc, #96]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7b1b      	ldrb	r3, [r3, #12]
 8000ce2:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7adb      	ldrb	r3, [r3, #11]
 8000ce8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8000cea:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7a9b      	ldrb	r3, [r3, #10]
 8000cf0:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 8000cf2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7b5b      	ldrb	r3, [r3, #13]
 8000cf8:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField       << MPU_RASR_TEX_Pos)  |
 8000cfa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b9b      	ldrb	r3, [r3, #14]
 8000d00:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 8000d02:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7bdb      	ldrb	r3, [r3, #15]
 8000d08:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 8000d0a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7a5b      	ldrb	r3, [r3, #9]
 8000d10:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 8000d12:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7a1b      	ldrb	r3, [r3, #8]
 8000d18:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 8000d1a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	7812      	ldrb	r2, [r2, #0]
                ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 8000d20:	4313      	orrs	r3, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 8000d22:	610b      	str	r3, [r1, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000d24:	e005      	b.n	8000d32 <HAL_MPU_ConfigRegion+0x76>
    MPU->RBAR = 0x00;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_MPU_ConfigRegion+0x84>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed90 	.word	0xe000ed90

08000d44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e098      	b.n	8000e88 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <HAL_DMA_Init+0x150>)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d80f      	bhi.n	8000d82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <HAL_DMA_Init+0x154>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <HAL_DMA_Init+0x158>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	009a      	lsls	r2, r3, #2
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_DMA_Init+0x15c>)
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	e00e      	b.n	8000da0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_DMA_Init+0x160>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a43      	ldr	r2, [pc, #268]	; (8000e9c <HAL_DMA_Init+0x158>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	009a      	lsls	r2, r3, #2
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a42      	ldr	r2, [pc, #264]	; (8000ea8 <HAL_DMA_Init+0x164>)
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2202      	movs	r2, #2
 8000da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dfa:	d039      	beq.n	8000e70 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_DMA_Init+0x15c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d11a      	bne.n	8000e3c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e06:	4929      	ldr	r1, [pc, #164]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	f003 031c 	and.w	r3, r3, #28
 8000e14:	200f      	movs	r0, #15
 8000e16:	fa00 f303 	lsl.w	r3, r0, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e20:	4822      	ldr	r0, [pc, #136]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_DMA_Init+0x168>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6859      	ldr	r1, [r3, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f003 031c 	and.w	r3, r3, #28
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	6003      	str	r3, [r0, #0]
 8000e3a:	e019      	b.n	8000e70 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e3c:	491c      	ldr	r1, [pc, #112]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f003 031c 	and.w	r3, r3, #28
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	fa00 f303 	lsl.w	r3, r0, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4013      	ands	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_DMA_Init+0x16c>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6859      	ldr	r1, [r3, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f003 031c 	and.w	r3, r3, #28
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40020407 	.word	0x40020407
 8000e98:	bffdfff8 	.word	0xbffdfff8
 8000e9c:	cccccccd 	.word	0xcccccccd
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	bffdfbf8 	.word	0xbffdfbf8
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	400200a8 	.word	0x400200a8
 8000eb0:	400204a8 	.word	0x400204a8

08000eb4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e072      	b.n	8000fac <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <HAL_DMA_DeInit+0x104>)
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d80f      	bhi.n	8000f02 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <HAL_DMA_DeInit+0x108>)
 8000eea:	4413      	add	r3, r2
 8000eec:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <HAL_DMA_DeInit+0x10c>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	009a      	lsls	r2, r3, #2
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_DMA_DeInit+0x110>)
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40
 8000f00:	e00e      	b.n	8000f20 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_DMA_DeInit+0x114>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <HAL_DMA_DeInit+0x10c>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	009a      	lsls	r2, r3, #2
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <HAL_DMA_DeInit+0x118>)
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f30:	f002 021c 	and.w	r2, r2, #28
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <HAL_DMA_DeInit+0x110>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f46:	4922      	ldr	r1, [pc, #136]	; (8000fd0 <HAL_DMA_DeInit+0x11c>)
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_DMA_DeInit+0x11c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f50:	f003 031c 	and.w	r3, r3, #28
 8000f54:	200f      	movs	r0, #15
 8000f56:	fa00 f303 	lsl.w	r3, r0, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e00c      	b.n	8000f7c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f62:	491c      	ldr	r1, [pc, #112]	; (8000fd4 <HAL_DMA_DeInit+0x120>)
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_DMA_DeInit+0x120>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6c:	f003 031c 	and.w	r3, r3, #28
 8000f70:	200f      	movs	r0, #15
 8000f72:	fa00 f303 	lsl.w	r3, r0, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40020407 	.word	0x40020407
 8000fbc:	bffdfff8 	.word	0xbffdfff8
 8000fc0:	cccccccd 	.word	0xcccccccd
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	bffdfbf8 	.word	0xbffdfbf8
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	400200a8 	.word	0x400200a8
 8000fd4:	400204a8 	.word	0x400204a8

08000fd8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_DMA_Start+0x20>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	e02e      	b.n	8001056 <HAL_DMA_Start+0x7e>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d11d      	bne.n	8001048 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 fb03 	bl	800163c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e005      	b.n	8001054 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8001050:	2302      	movs	r3, #2
 8001052:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001054:	7dfb      	ldrb	r3, [r7, #23]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_DMA_Start_IT+0x20>
 800107a:	2302      	movs	r3, #2
 800107c:	e04b      	b.n	8001116 <HAL_DMA_Start_IT+0xb8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d13a      	bne.n	8001108 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 fac0 	bl	800163c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f042 020e 	orr.w	r2, r2, #14
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e00f      	b.n	80010f6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f022 0204 	bic.w	r2, r2, #4
 80010e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	f042 020a 	orr.w	r2, r2, #10
 80010f4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	f042 0201 	orr.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e005      	b.n	8001114 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001110:	2302      	movs	r3, #2
 8001112:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d008      	beq.n	8001148 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e022      	b.n	800118e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f022 020e 	bic.w	r2, r2, #14
 8001156:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001170:	f002 021c 	and.w	r2, r2, #28
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d005      	beq.n	80011be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2204      	movs	r2, #4
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e029      	b.n	8001212 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	f022 020e 	bic.w	r2, r2, #14
 80011cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011e6:	f002 021c 	and.w	r2, r2, #28
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
    }
  }
  return status;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	460b      	mov	r3, r1
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d008      	beq.n	8001248 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2204      	movs	r2, #4
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e08c      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07f      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f003 031c 	and.w	r3, r3, #28
 8001270:	2202      	movs	r2, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e007      	b.n	800128a <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 031c 	and.w	r3, r3, #28
 8001282:	2204      	movs	r2, #4
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800128a:	f7ff f843 	bl	8000314 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8001290:	e03f      	b.n	8001312 <HAL_DMA_PollForTransfer+0xf6>
  {
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f003 031c 	and.w	r3, r3, #28
 80012a0:	2108      	movs	r1, #8
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d016      	beq.n	80012da <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012b4:	f002 021c 	and.w	r2, r2, #28
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f202 	lsl.w	r2, r1, r2
 80012be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e043      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d017      	beq.n	8001312 <HAL_DMA_PollForTransfer+0xf6>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 80012e2:	f7ff f817 	bl	8000314 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d802      	bhi.n	80012f8 <HAL_DMA_PollForTransfer+0xdc>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10c      	bne.n	8001312 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2220      	movs	r2, #32
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e027      	b.n	8001362 <HAL_DMA_PollForTransfer+0x146>
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0b8      	beq.n	8001292 <HAL_DMA_PollForTransfer+0x76>
    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
  }
#endif /* DMAMUX1 */

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10e      	bne.n	8001344 <HAL_DMA_PollForTransfer+0x128>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800132e:	f002 021c 	and.w	r2, r2, #28
 8001332:	2102      	movs	r1, #2
 8001334:	fa01 f202 	lsl.w	r2, r1, r2
 8001338:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001342:	e009      	b.n	8001358 <HAL_DMA_PollForTransfer+0x13c>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800134c:	f002 021c 	and.w	r2, r2, #28
 8001350:	2104      	movs	r1, #4
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	2204      	movs	r2, #4
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d026      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x7a>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d021      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	f022 0204 	bic.w	r2, r2, #4
 80013bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013c6:	f002 021c 	and.w	r2, r2, #28
 80013ca:	2104      	movs	r1, #4
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d071      	beq.n	80014be <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80013e2:	e06c      	b.n	80014be <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f003 031c 	and.w	r3, r3, #28
 80013ec:	2202      	movs	r2, #2
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d02e      	beq.n	8001456 <HAL_DMA_IRQHandler+0xec>
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d029      	beq.n	8001456 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10b      	bne.n	8001428 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f022 020a 	bic.w	r2, r2, #10
 800141e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001430:	f002 021c 	and.w	r2, r2, #28
 8001434:	2102      	movs	r1, #2
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
 800143a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d038      	beq.n	80014be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001454:	e033      	b.n	80014be <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f003 031c 	and.w	r3, r3, #28
 800145e:	2208      	movs	r2, #8
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d02a      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x156>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d025      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800148c:	f002 021c 	and.w	r2, r2, #28
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	460b      	mov	r3, r1
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_DMA_RegisterCallback+0x20>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e032      	b.n	800154e <HAL_DMA_RegisterCallback+0x86>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d121      	bne.n	8001540 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d81a      	bhi.n	8001538 <HAL_DMA_RegisterCallback+0x70>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_DMA_RegisterCallback+0x40>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001519 	.word	0x08001519
 800150c:	08001521 	.word	0x08001521
 8001510:	08001529 	.word	0x08001529
 8001514:	08001531 	.word	0x08001531
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800151e:	e011      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8001526:	e00d      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800152e:	e009      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8001536:	e005      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>

     default:
           status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
           break;
 800153c:	bf00      	nop
 800153e:	e001      	b.n	8001544 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800154c:	7dfb      	ldrb	r3, [r7, #23]
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

    /* Process locked */
  __HAL_LOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_DMA_UnRegisterCallback+0x1e>
 8001574:	2302      	movs	r3, #2
 8001576:	e041      	b.n	80015fc <HAL_DMA_UnRegisterCallback+0xa2>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d130      	bne.n	80015ee <HAL_DMA_UnRegisterCallback+0x94>
  {
    switch (CallbackID)
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d829      	bhi.n	80015e6 <HAL_DMA_UnRegisterCallback+0x8c>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <HAL_DMA_UnRegisterCallback+0x3e>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015bd 	.word	0x080015bd
 80015a4:	080015c5 	.word	0x080015c5
 80015a8:	080015cd 	.word	0x080015cd
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80015b2:	e01e      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 80015ba:	e01a      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 80015c2:	e016      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80015ca:	e012      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferHalfCpltCallback = NULL;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferErrorCallback = NULL;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
           hdma->XferAbortCallback = NULL;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80015e4:	e005      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>

    default:
           status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
           break;
 80015ea:	bf00      	nop
 80015ec:	e001      	b.n	80015f2 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001616:	b2db      	uxtb	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001652:	f002 021c 	and.w	r2, r2, #28
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d108      	bne.n	8001680 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800167e:	e007      	b.n	8001690 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	e17f      	b.n	80019ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8171 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x38>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b12      	cmp	r3, #18
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00b      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001764:	2b11      	cmp	r3, #17
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b12      	cmp	r3, #18
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d118      	bne.n	8001810 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80ac 	beq.w	80019a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6613      	str	r3, [r2, #96]	; 0x60
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001866:	4a59      	ldr	r2, [pc, #356]	; (80019cc <HAL_GPIO_Init+0x330>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x242>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4e      	ldr	r2, [pc, #312]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x23e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_GPIO_Init+0x338>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x23a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x33c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x236>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_GPIO_Init+0x340>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x232>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_GPIO_Init+0x344>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x22e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <HAL_GPIO_Init+0x348>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x22a>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x244>
 80018de:	2300      	movs	r3, #0
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f0:	4936      	ldr	r1, [pc, #216]	; (80019cc <HAL_GPIO_Init+0x330>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194c:	4a26      	ldr	r2, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f ae78 	bne.w	80016ac <HAL_GPIO_Init+0x10>
  }
}
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	48001800 	.word	0x48001800
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80019fa:	e0cd      	b.n	8001b98 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80019fc:	2201      	movs	r2, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	409a      	lsls	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80c1 	beq.w	8001b92 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a10:	4a68      	ldr	r2, [pc, #416]	; (8001bb4 <HAL_GPIO_DeInit+0x1c8>)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_DeInit+0x9a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_GPIO_DeInit+0x1cc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_DeInit+0x96>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_GPIO_DeInit+0x1d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_DeInit+0x92>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_GPIO_DeInit+0x1d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_DeInit+0x8e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <HAL_GPIO_DeInit+0x1d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_DeInit+0x8a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <HAL_GPIO_DeInit+0x1dc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_DeInit+0x86>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a59      	ldr	r2, [pc, #356]	; (8001bcc <HAL_GPIO_DeInit+0x1e0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_DeInit+0x82>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_DeInit+0x9c>
 8001a86:	2300      	movs	r3, #0
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	fa03 f202 	lsl.w	r2, r3, r2
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d132      	bne.n	8001b00 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001a9a:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001aa8:	4949      	ldr	r1, [pc, #292]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001ab6:	4946      	ldr	r1, [pc, #280]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ac4:	4942      	ldr	r1, [pc, #264]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <HAL_GPIO_DeInit+0x1e4>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001ae2:	4834      	ldr	r0, [pc, #208]	; (8001bb4 <HAL_GPIO_DeInit+0x1c8>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	4932      	ldr	r1, [pc, #200]	; (8001bb4 <HAL_GPIO_DeInit+0x1c8>)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	0892      	lsrs	r2, r2, #2
 8001aee:	3202      	adds	r2, #2
 8001af0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	43d2      	mvns	r2, r2
 8001af8:	400a      	ands	r2, r1
 8001afa:	3302      	adds	r3, #2
 8001afc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2103      	movs	r1, #3
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08d9      	lsrs	r1, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3108      	adds	r1, #8
 8001b20:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	fa00 f303 	lsl.w	r3, r0, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	4019      	ands	r1, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2103      	movs	r1, #3
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2103      	movs	r1, #3
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b82:	2101      	movs	r1, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f af2b 	bne.w	80019fc <HAL_GPIO_DeInit+0x10>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	48001000 	.word	0x48001000
 8001bc8:	48001400 	.word	0x48001400
 8001bcc:	48001800 	.word	0x48001800
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c76:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
  }
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f807 	bl	8001ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop

08001d00 <HAL_PWR_DeInit>:
/**
  * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_PWR_RELEASE_RESET();
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_PWR_DeInit+0x28>)
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d30:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40007000 	.word	0x40007000

08001d4c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8001d74:	492b      	ldr	r1, [pc, #172]	; (8001e24 <HAL_PWR_ConfigPVD+0xb8>)
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_PWR_ConfigPVD+0xb8>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 020e 	bic.w	r2, r3, #14
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d90:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001dc2:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_PWR_ConfigPVD+0xbc>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40007000 	.word	0x40007000
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_PWR_EnablePVD+0x1c>)
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_PWR_EnablePVD+0x1c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6053      	str	r3, [r2, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_PWR_DisablePVD+0x1c>)
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_PWR_DisablePVD+0x1c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6053      	str	r3, [r2, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000

08001e6c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001e74:	490c      	ldr	r1, [pc, #48]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	43db      	mvns	r3, r3
 8001e82:	401a      	ands	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8001e8c:	4906      	ldr	r1, [pc, #24]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]


}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40007000 	.word	0x40007000

08001eac <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef6:	d10e      	bne.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001ef8:	f000 fdd0 	bl	8002a9c <HAL_PWREx_DisableLowPowerRunMode>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001f02:	e016      	b.n	8001f32 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f10:	d001      	beq.n	8001f16 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001f12:	f000 fdb3 	bl	8002a7c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001f28:	bf30      	wfi
 8001f2a:	e002      	b.n	8001f32 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001f2c:	bf40      	sev
    __WFE();
 8001f2e:	bf20      	wfe
    __WFE();
 8001f30:	bf20      	wfe
  }

}
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f52:	d104      	bne.n	8001f5e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fe02 	bl	8002b60 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fdd3 	bl	8002b0c <HAL_PWREx_EnterSTOP0Mode>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_PWR_EnterSTANDBYMode+0x2e>)
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_PWR_EnterSTANDBYMode+0x2e>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0307 	bic.w	r3, r3, #7
 8001f7c:	f043 0303 	orr.w	r3, r3, #3
 8001f80:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f82:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_PWR_EnterSTANDBYMode+0x32>)
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_PWR_EnterSTANDBYMode+0x32>)
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001f8e:	bf30      	wfi
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001fa8:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	6113      	str	r3, [r2, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	6113      	str	r3, [r2, #16]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <HAL_PWR_EnableSEVOnPend>:
  * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6113      	str	r3, [r2, #16]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <HAL_PWR_DisableSEVOnPend>:
  * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_PWR_DisableSEVOnPend+0x1c>)
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_PWR_DisableSEVOnPend+0x1c>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f023 0310 	bic.w	r3, r3, #16
 8002012:	6113      	str	r3, [r2, #16]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_PWREx_GetVoltageRange+0x18>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205e:	d130      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d038      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2232      	movs	r2, #50	; 0x32
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9b      	lsrs	r3, r3, #18
 8002090:	3301      	adds	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002094:	e002      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a8:	d102      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f2      	bne.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d110      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e00f      	b.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ce:	d007      	beq.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40007000 	.word	0x40007000
 80020f4:	20000008 	.word	0x20000008
 80020f8:	431bde83 	.word	0x431bde83

080020fc <HAL_PWREx_EnableBatteryCharging>:
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
  *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
  * @retval None
  */
void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));

  /* Specify resistor selection */
  MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 8002104:	4909      	ldr	r1, [pc, #36]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]

  /* Enable battery charging */
  SET_BIT(PWR->CR4, PWR_CR4_VBE);
 8002114:	4a05      	ldr	r2, [pc, #20]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_PWREx_EnableBatteryCharging+0x30>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	60d3      	str	r3, [r2, #12]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable battery charging.
  * @retval None
  */
void HAL_PWREx_DisableBatteryCharging(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_PWREx_DisableBatteryCharging+0x1c>)
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_PWREx_DisableBatteryCharging+0x1c>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000

08002150 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	6053      	str	r3, [r2, #4]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_PWREx_DisableVddUSB>:
/**
  * @brief Disable VDDUSB supply.
  * @retval None
  */
void HAL_PWREx_DisableVddUSB(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8002174:	4a05      	ldr	r2, [pc, #20]	; (800218c <HAL_PWREx_DisableVddUSB+0x1c>)
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PWREx_DisableVddUSB+0x1c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800217e:	6053      	str	r3, [r2, #4]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002194:	4a05      	ldr	r2, [pc, #20]	; (80021ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6053      	str	r3, [r2, #4]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000

080021b0 <HAL_PWREx_DisableVddIO2>:
/**
  * @brief Disable VDDIO2 supply.
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021b4:	4a05      	ldr	r2, [pc, #20]	; (80021cc <HAL_PWREx_DisableVddIO2+0x1c>)
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_PWREx_DisableVddIO2+0x1c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021be:	6053      	str	r3, [r2, #4]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000

080021d0 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000

080021f0 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021fe:	6093      	str	r3, [r2, #8]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_PWREx_EnableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b07      	cmp	r3, #7
 8002222:	f200 808d 	bhi.w	8002340 <HAL_PWREx_EnableGPIOPullUp+0x130>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_PWREx_EnableGPIOPullUp+0x1c>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800224d 	.word	0x0800224d
 8002230:	08002271 	.word	0x08002271
 8002234:	08002291 	.word	0x08002291
 8002238:	080022ad 	.word	0x080022ad
 800223c:	080022c9 	.word	0x080022c9
 8002240:	080022e5 	.word	0x080022e5
 8002244:	08002301 	.word	0x08002301
 8002248:	0800231d 	.word	0x0800231d
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 800224c:	4941      	ldr	r1, [pc, #260]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002258:	4313      	orrs	r3, r2
 800225a:	620b      	str	r3, [r1, #32]
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 800225c:	493d      	ldr	r1, [pc, #244]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002268:	43db      	mvns	r3, r3
 800226a:	4013      	ands	r3, r2
 800226c:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 800226e:	e06a      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PUCRB, GPIONumber);
 8002270:	4938      	ldr	r1, [pc, #224]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	628b      	str	r3, [r1, #40]	; 0x28
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 800227c:	4935      	ldr	r1, [pc, #212]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800227e:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f023 0310 	bic.w	r3, r3, #16
 8002288:	43db      	mvns	r3, r3
 800228a:	4013      	ands	r3, r2
 800228c:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 800228e:	e05a      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PUCRC, GPIONumber);
 8002290:	4930      	ldr	r1, [pc, #192]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	630b      	str	r3, [r1, #48]	; 0x30
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 800229c:	492d      	ldr	r1, [pc, #180]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4013      	ands	r3, r2
 80022a8:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80022aa:	e04c      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PUCRD, GPIONumber);
 80022ac:	4929      	ldr	r1, [pc, #164]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	638b      	str	r3, [r1, #56]	; 0x38
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80022b8:	4926      	ldr	r1, [pc, #152]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4013      	ands	r3, r2
 80022c4:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80022c6:	e03e      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PUCRE, GPIONumber);
 80022c8:	4922      	ldr	r1, [pc, #136]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	640b      	str	r3, [r1, #64]	; 0x40
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 80022d4:	491f      	ldr	r1, [pc, #124]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	43db      	mvns	r3, r3
 80022de:	4013      	ands	r3, r2
 80022e0:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 80022e2:	e030      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PUCRF, GPIONumber);
 80022e4:	491b      	ldr	r1, [pc, #108]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	648b      	str	r3, [r1, #72]	; 0x48
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 80022f0:	4918      	ldr	r1, [pc, #96]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 80022f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4013      	ands	r3, r2
 80022fc:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 80022fe:	e022      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PUCRG, GPIONumber);
 8002300:	4914      	ldr	r1, [pc, #80]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	650b      	str	r3, [r1, #80]	; 0x50
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	43db      	mvns	r3, r3
 8002316:	4013      	ands	r3, r2
 8002318:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 800231a:	e014      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
#endif
    case PWR_GPIO_H:
       SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 800231c:	490d      	ldr	r1, [pc, #52]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	4313      	orrs	r3, r2
 800232a:	658b      	str	r3, [r1, #88]	; 0x58
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_PWREx_EnableGPIOPullUp+0x144>)
 8002330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	43db      	mvns	r3, r3
 800233a:	4013      	ands	r3, r2
 800233c:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 800233e:	e002      	b.n	8002346 <HAL_PWREx_EnableGPIOPullUp+0x136>
       SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	bf00      	nop
  }

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40007000 	.word	0x40007000

08002358 <HAL_PWREx_DisableGPIOPullUp>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b07      	cmp	r3, #7
 800236a:	d857      	bhi.n	800241c <HAL_PWREx_DisableGPIOPullUp+0xc4>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <HAL_PWREx_DisableGPIOPullUp+0x1c>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002395 	.word	0x08002395
 8002378:	080023a9 	.word	0x080023a9
 800237c:	080023b9 	.word	0x080023b9
 8002380:	080023c9 	.word	0x080023c9
 8002384:	080023d9 	.word	0x080023d9
 8002388:	080023e9 	.word	0x080023e9
 800238c:	080023f9 	.word	0x080023f9
 8002390:	08002409 	.word	0x08002409
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8002394:	4926      	ldr	r1, [pc, #152]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4013      	ands	r3, r2
 80023a4:	620b      	str	r3, [r1, #32]
       break;
 80023a6:	e03c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80023a8:	4921      	ldr	r1, [pc, #132]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4013      	ands	r3, r2
 80023b4:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 80023b6:	e034      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80023b8:	491d      	ldr	r1, [pc, #116]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4013      	ands	r3, r2
 80023c4:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 80023c6:	e02c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80023c8:	4919      	ldr	r1, [pc, #100]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4013      	ands	r3, r2
 80023d4:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 80023d6:	e024      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80023d8:	4915      	ldr	r1, [pc, #84]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4013      	ands	r3, r2
 80023e4:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 80023e6:	e01c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 80023e8:	4911      	ldr	r1, [pc, #68]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4013      	ands	r3, r2
 80023f4:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 80023f6:	e014      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80023f8:	490d      	ldr	r1, [pc, #52]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	43db      	mvns	r3, r3
 8002402:	4013      	ands	r3, r2
 8002404:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 8002406:	e00c      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
#endif
    case PWR_GPIO_H:
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002408:	4909      	ldr	r1, [pc, #36]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_PWREx_DisableGPIOPullUp+0xd8>)
 800240c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	43db      	mvns	r3, r3
 8002416:	4013      	ands	r3, r2
 8002418:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 800241a:	e002      	b.n	8002422 <HAL_PWREx_DisableGPIOPullUp+0xca>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
       status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
       break;
 8002420:	bf00      	nop
  }

  return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40007000 	.word	0x40007000

08002434 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b07      	cmp	r3, #7
 8002446:	f200 808d 	bhi.w	8002564 <HAL_PWREx_EnableGPIOPullDown+0x130>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002471 	.word	0x08002471
 8002454:	08002495 	.word	0x08002495
 8002458:	080024b5 	.word	0x080024b5
 800245c:	080024d1 	.word	0x080024d1
 8002460:	080024ed 	.word	0x080024ed
 8002464:	08002509 	.word	0x08002509
 8002468:	08002525 	.word	0x08002525
 800246c:	08002541 	.word	0x08002541
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8002470:	4941      	ldr	r1, [pc, #260]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800247c:	4313      	orrs	r3, r2
 800247e:	624b      	str	r3, [r1, #36]	; 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8002480:	493d      	ldr	r1, [pc, #244]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800248c:	43db      	mvns	r3, r3
 800248e:	4013      	ands	r3, r2
 8002490:	620b      	str	r3, [r1, #32]
       break;
 8002492:	e06a      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8002494:	4938      	ldr	r1, [pc, #224]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f023 0310 	bic.w	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	62cb      	str	r3, [r1, #44]	; 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80024a4:	4934      	ldr	r1, [pc, #208]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4013      	ands	r3, r2
 80024b0:	628b      	str	r3, [r1, #40]	; 0x28
       break;
 80024b2:	e05a      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 80024b4:	4930      	ldr	r1, [pc, #192]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	634b      	str	r3, [r1, #52]	; 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 80024c0:	492d      	ldr	r1, [pc, #180]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4013      	ands	r3, r2
 80024cc:	630b      	str	r3, [r1, #48]	; 0x30
       break;
 80024ce:	e04c      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 80024d0:	4929      	ldr	r1, [pc, #164]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	63cb      	str	r3, [r1, #60]	; 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 80024dc:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4013      	ands	r3, r2
 80024e8:	638b      	str	r3, [r1, #56]	; 0x38
       break;
 80024ea:	e03e      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 80024ec:	4922      	ldr	r1, [pc, #136]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	644b      	str	r3, [r1, #68]	; 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80024f8:	491f      	ldr	r1, [pc, #124]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024fa:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	43db      	mvns	r3, r3
 8002502:	4013      	ands	r3, r2
 8002504:	640b      	str	r3, [r1, #64]	; 0x40
       break;
 8002506:	e030      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 8002508:	491b      	ldr	r1, [pc, #108]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800250c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	64cb      	str	r3, [r1, #76]	; 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8002514:	4918      	ldr	r1, [pc, #96]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	43db      	mvns	r3, r3
 800251e:	4013      	ands	r3, r2
 8002520:	648b      	str	r3, [r1, #72]	; 0x48
       break;
 8002522:	e022      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 8002524:	4914      	ldr	r1, [pc, #80]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	654b      	str	r3, [r1, #84]	; 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8002530:	4911      	ldr	r1, [pc, #68]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	43db      	mvns	r3, r3
 800253a:	4013      	ands	r3, r2
 800253c:	650b      	str	r3, [r1, #80]	; 0x50
       break;
 800253e:	e014      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002540:	490d      	ldr	r1, [pc, #52]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	4313      	orrs	r3, r2
 800254e:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8002554:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	43db      	mvns	r3, r3
 800255e:	4013      	ands	r3, r2
 8002560:	658b      	str	r3, [r1, #88]	; 0x58
       break;
 8002562:	e002      	b.n	800256a <HAL_PWREx_EnableGPIOPullDown+0x136>
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	bf00      	nop
  }

  return status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40007000 	.word	0x40007000

0800257c <HAL_PWREx_DisableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b07      	cmp	r3, #7
 800258e:	d859      	bhi.n	8002644 <HAL_PWREx_DisableGPIOPullDown+0xc8>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <HAL_PWREx_DisableGPIOPullDown+0x1c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025b9 	.word	0x080025b9
 800259c:	080025cd 	.word	0x080025cd
 80025a0:	080025e1 	.word	0x080025e1
 80025a4:	080025f1 	.word	0x080025f1
 80025a8:	08002601 	.word	0x08002601
 80025ac:	08002611 	.word	0x08002611
 80025b0:	08002621 	.word	0x08002621
 80025b4:	08002631 	.word	0x08002631
  {
    case PWR_GPIO_A:
       CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80025b8:	4927      	ldr	r1, [pc, #156]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025ba:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4013      	ands	r3, r2
 80025c8:	624b      	str	r3, [r1, #36]	; 0x24
       break;
 80025ca:	e03e      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_B:
       CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80025cc:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f023 0310 	bic.w	r3, r3, #16
 80025d8:	43db      	mvns	r3, r3
 80025da:	4013      	ands	r3, r2
 80025dc:	62cb      	str	r3, [r1, #44]	; 0x2c
       break;
 80025de:	e034      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_C:
       CLEAR_BIT(PWR->PDCRC, GPIONumber);
 80025e0:	491d      	ldr	r1, [pc, #116]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4013      	ands	r3, r2
 80025ec:	634b      	str	r3, [r1, #52]	; 0x34
       break;
 80025ee:	e02c      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#if defined(GPIOD)
    case PWR_GPIO_D:
       CLEAR_BIT(PWR->PDCRD, GPIONumber);
 80025f0:	4919      	ldr	r1, [pc, #100]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 80025f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4013      	ands	r3, r2
 80025fc:	63cb      	str	r3, [r1, #60]	; 0x3c
       break;
 80025fe:	e024      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       CLEAR_BIT(PWR->PDCRE, GPIONumber);
 8002600:	4915      	ldr	r1, [pc, #84]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	43db      	mvns	r3, r3
 800260a:	4013      	ands	r3, r2
 800260c:	644b      	str	r3, [r1, #68]	; 0x44
       break;
 800260e:	e01c      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       CLEAR_BIT(PWR->PDCRF, GPIONumber);
 8002610:	4911      	ldr	r1, [pc, #68]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002614:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	43db      	mvns	r3, r3
 800261a:	4013      	ands	r3, r2
 800261c:	64cb      	str	r3, [r1, #76]	; 0x4c
       break;
 800261e:	e014      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       CLEAR_BIT(PWR->PDCRG, GPIONumber);
 8002620:	490d      	ldr	r1, [pc, #52]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	43db      	mvns	r3, r3
 800262a:	4013      	ands	r3, r2
 800262c:	654b      	str	r3, [r1, #84]	; 0x54
       break;
 800262e:	e00c      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8002630:	4909      	ldr	r1, [pc, #36]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_PWREx_DisableGPIOPullDown+0xdc>)
 8002634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	43db      	mvns	r3, r3
 800263e:	4013      	ands	r3, r2
 8002640:	65cb      	str	r3, [r1, #92]	; 0x5c
#endif
       break;
 8002642:	e002      	b.n	800264a <HAL_PWREx_DisableGPIOPullDown+0xce>
    case PWR_GPIO_I:
       CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	bf00      	nop
  }

  return status;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40007000 	.word	0x40007000

0800265c <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6093      	str	r3, [r2, #8]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40007000 	.word	0x40007000

0800267c <HAL_PWREx_DisablePullUpPullDownConfig>:
  * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
  *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
  * @retval None
  */
void HAL_PWREx_DisablePullUpPullDownConfig(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 8002680:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_PWREx_DisablePullUpPullDownConfig+0x1c>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800268a:	6093      	str	r3, [r2, #8]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_PWREx_EnableSRAM2ContentRetention>:
  * @note  When RRS bit is set, SRAM2 is powered by the low-power regulator in
  *         Standby mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80026a0:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_PWREx_EnableSRAM2ContentRetention+0x1c>)
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_PWREx_EnableSRAM2ContentRetention+0x1c>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6093      	str	r3, [r2, #8]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40007000 	.word	0x40007000

080026bc <HAL_PWREx_DisableSRAM2ContentRetention>:
  * @note  When RRS bit is reset, SRAM2 is powered off in Standby mode
  *        and its content is lost.
  * @retval None
  */
void HAL_PWREx_DisableSRAM2ContentRetention(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <HAL_PWREx_DisableSRAM2ContentRetention+0x1c>)
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_PWREx_DisableSRAM2ContentRetention+0x1c>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ca:	6093      	str	r3, [r2, #8]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_PWREx_EnablePVM1>:
/**
  * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM1(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_1);
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_PWREx_EnablePVM1+0x1c>)
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_PWREx_EnablePVM1+0x1c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f043 0310 	orr.w	r3, r3, #16
 80026ea:	6053      	str	r3, [r2, #4]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_PWREx_DisablePVM1>:
/**
  * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM1(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_PWREx_DisablePVM1+0x1c>)
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_PWREx_DisablePVM1+0x1c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 0310 	bic.w	r3, r3, #16
 800270a:	6053      	str	r3, [r2, #4]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40007000 	.word	0x40007000

0800271c <HAL_PWREx_EnablePVM2>:
/**
  * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_EnablePVM2(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_2);
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_PWREx_EnablePVM2+0x1c>)
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_PWREx_EnablePVM2+0x1c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	6053      	str	r3, [r2, #4]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000

0800273c <HAL_PWREx_DisablePVM2>:
/**
  * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
  * @retval None
  */
void HAL_PWREx_DisablePVM2(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_PWREx_DisablePVM2+0x1c>)
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_PWREx_DisablePVM2+0x1c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f023 0320 	bic.w	r3, r3, #32
 800274a:	6053      	str	r3, [r2, #4]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40007000 	.word	0x40007000

0800275c <HAL_PWREx_EnablePVM3>:
/**
  * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_EnablePVM3(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_3);
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <HAL_PWREx_EnablePVM3+0x1c>)
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_PWREx_EnablePVM3+0x1c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800276a:	6053      	str	r3, [r2, #4]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_PWREx_DisablePVM3>:
/**
  * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
  * @retval None
  */
void HAL_PWREx_DisablePVM3(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_PWREx_DisablePVM3+0x1c>)
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_PWREx_DisablePVM3+0x1c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278a:	6053      	str	r3, [r2, #4]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000

0800279c <HAL_PWREx_EnablePVM4>:
/**
  * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_EnablePVM4(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_PVM_4);
 80027a0:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <HAL_PWREx_EnablePVM4+0x1c>)
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_PWREx_EnablePVM4+0x1c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027aa:	6053      	str	r3, [r2, #4]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000

080027bc <HAL_PWREx_DisablePVM4>:
/**
  * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
  * @retval None
  */
void HAL_PWREx_DisablePVM4(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_PWREx_DisablePVM4+0x1c>)
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_PWREx_DisablePVM4+0x1c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ca:	6053      	str	r3, [r2, #4]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40007000 	.word	0x40007000

080027dc <HAL_PWREx_ConfigPVM>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level and to each monitored supply.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]


  /* Configure EXTI 35 to 38 interrupts if so required:
     scan thru PVMType to detect which PVMx is set and
     configure the corresponding EXTI line accordingly. */
  switch (sConfigPVM->PVMType)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d055      	beq.n	800289c <HAL_PWREx_ConfigPVM+0xc0>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d802      	bhi.n	80027fa <HAL_PWREx_ConfigPVM+0x1e>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d007      	beq.n	8002808 <HAL_PWREx_ConfigPVM+0x2c>
 80027f8:	e12c      	b.n	8002a54 <HAL_PWREx_ConfigPVM+0x278>
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	f000 8098 	beq.w	8002930 <HAL_PWREx_ConfigPVM+0x154>
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	f000 80de 	beq.w	80029c2 <HAL_PWREx_ConfigPVM+0x1e6>
 8002806:	e125      	b.n	8002a54 <HAL_PWREx_ConfigPVM+0x278>
  {
#if defined(PWR_CR2_PVME1)
    case PWR_PVM_1:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 8002808:	4a9b      	ldr	r2, [pc, #620]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800280a:	4b9b      	ldr	r3, [pc, #620]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f023 0308 	bic.w	r3, r3, #8
 8002812:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 8002814:	4a98      	ldr	r2, [pc, #608]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002816:	4b98      	ldr	r3, [pc, #608]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0308 	bic.w	r3, r3, #8
 800281e:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 8002820:	4a95      	ldr	r2, [pc, #596]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002822:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f023 0308 	bic.w	r3, r3, #8
 800282a:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 800282c:	4a92      	ldr	r2, [pc, #584]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800282e:	4b92      	ldr	r3, [pc, #584]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	f023 0308 	bic.w	r3, r3, #8
 8002836:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_PWREx_ConfigPVM+0x74>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 8002844:	4a8c      	ldr	r2, [pc, #560]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002846:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_PWREx_ConfigPVM+0x8c>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 800285c:	4a86      	ldr	r2, [pc, #536]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800285e:	4b86      	ldr	r3, [pc, #536]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_PWREx_ConfigPVM+0xa4>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 8002874:	4a80      	ldr	r2, [pc, #512]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002876:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f043 0308 	orr.w	r3, r3, #8
 800287e:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80e6 	beq.w	8002a5a <HAL_PWREx_ConfigPVM+0x27e>
      {
        __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 800288e:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002890:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800289a:	e0de      	b.n	8002a5a <HAL_PWREx_ConfigPVM+0x27e>
#endif /* PWR_CR2_PVME1 */

#if defined(PWR_CR2_PVME2)
    case PWR_PVM_2:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
 800289c:	4a76      	ldr	r2, [pc, #472]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800289e:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f023 0310 	bic.w	r3, r3, #16
 80028a6:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM2_EXTI_DISABLE_IT();
 80028a8:	4a73      	ldr	r2, [pc, #460]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0310 	bic.w	r3, r3, #16
 80028b2:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
 80028b4:	4a70      	ldr	r2, [pc, #448]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f023 0310 	bic.w	r3, r3, #16
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
 80028c0:	4a6d      	ldr	r2, [pc, #436]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f023 0310 	bic.w	r3, r3, #16
 80028ca:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_PWREx_ConfigPVM+0x108>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_IT();
 80028d8:	4a67      	ldr	r2, [pc, #412]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f043 0310 	orr.w	r3, r3, #16
 80028e2:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_PWREx_ConfigPVM+0x120>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028f2:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_PWREx_ConfigPVM+0x138>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
 8002908:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 809e 	beq.w	8002a5e <HAL_PWREx_ConfigPVM+0x282>
      {
        __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
 8002922:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002924:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f043 0310 	orr.w	r3, r3, #16
 800292c:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 800292e:	e096      	b.n	8002a5e <HAL_PWREx_ConfigPVM+0x282>
#endif /* PWR_CR2_PVME2 */

    case PWR_PVM_3:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 8002930:	4a51      	ldr	r2, [pc, #324]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002932:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f023 0320 	bic.w	r3, r3, #32
 800293a:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 800293c:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0320 	bic.w	r3, r3, #32
 8002946:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800294a:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f023 0320 	bic.w	r3, r3, #32
 8002952:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002956:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f023 0320 	bic.w	r3, r3, #32
 800295e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_PWREx_ConfigPVM+0x19c>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 800296c:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800296e:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_PWREx_ConfigPVM+0x1b4>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 8002984:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002986:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_PWREx_ConfigPVM+0x1cc>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 800299c:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d056      	beq.n	8002a62 <HAL_PWREx_ConfigPVM+0x286>
      {
        __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 80029b4:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f043 0320 	orr.w	r3, r3, #32
 80029be:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 80029c0:	e04f      	b.n	8002a62 <HAL_PWREx_ConfigPVM+0x286>

    case PWR_PVM_4:
      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
      __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029cc:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 80029ce:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029d0:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d8:	6213      	str	r3, [r2, #32]
      __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 80029da:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Configure interrupt mode */
      if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_PWREx_ConfigPVM+0x22e>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a08:	6213      	str	r3, [r2, #32]
      }

      /* Configure event mode */
      if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_PWREx_ConfigPVM+0x246>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a20:	6253      	str	r3, [r2, #36]	; 0x24
      }

      /* Configure the edge */
      if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_PWREx_ConfigPVM+0x25e>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a38:	6293      	str	r3, [r2, #40]	; 0x28
      }

      if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00f      	beq.n	8002a66 <HAL_PWREx_ConfigPVM+0x28a>
      {
        __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_PWREx_ConfigPVM+0x29c>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c
      }
      break;
 8002a52:	e008      	b.n	8002a66 <HAL_PWREx_ConfigPVM+0x28a>

    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e006      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e004      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HAL_PWREx_ConfigPVM+0x28c>
      break;
 8002a66:	bf00      	nop
  }

  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010400 	.word	0x40010400

08002a7c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002a80:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aac:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2232      	movs	r2, #50	; 0x32
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002ac4:	e002      	b.n	8002acc <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad8:	d102      	bne.n	8002ae0 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f2      	bne.n	8002ac6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d101      	bne.n	8002af2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e000      	b.n	8002af4 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40007000 	.word	0x40007000
 8002b04:	20000008 	.word	0x20000008
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8002b16:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
 8002b20:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b22:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002b34:	bf30      	wfi
 8002b36:	e002      	b.n	8002b3e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002b38:	bf40      	sev
    __WFE();
 8002b3a:	bf20      	wfe
    __WFE();
 8002b3c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6113      	str	r3, [r2, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8002b6a:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 0307 	bic.w	r3, r3, #7
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f043 0304 	orr.w	r3, r3, #4
 8002b84:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002b8c:	bf30      	wfi
 8002b8e:	e002      	b.n	8002b96 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002b90:	bf40      	sev
    __WFE();
 8002b92:	bf20      	wfe
    __WFE();
 8002b94:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6113      	str	r3, [r2, #16]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 0307 	bic.w	r3, r3, #7
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002be4:	bf30      	wfi
 8002be6:	e002      	b.n	8002bee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002be8:	bf40      	sev
    __WFE();
 8002bea:	bf20      	wfe
    __WFE();
 8002bec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002bee:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6113      	str	r3, [r2, #16]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002c30:	bf30      	wfi
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002c54:	f7ff f9e6 	bl	8002024 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c5e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8002c6c:	f000 f828 	bl	8002cc0 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c72:	2208      	movs	r2, #8
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8002c82:	f000 f824 	bl	8002cce <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c88:	2210      	movs	r2, #16
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8002c98:	f000 f820 	bl	8002cdc <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8002cae:	f000 f81c 	bl	8002cea <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8002cb2:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40010400 	.word	0x40010400

08002cc0 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002d0a:	f7fd fb03 	bl	8000314 <HAL_GetTick>
 8002d0e:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d12:	f7fd faff 	bl	8000314 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e07c      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8002d30:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_DeInit+0x134>)
 8002d48:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <HAL_RCC_DeInit+0x138>)
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_DeInit+0x13c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fa93 	bl	800027c <HAL_InitTick>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e05e      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002d60:	f7fd fad8 	bl	8000314 <HAL_GetTick>
 8002d64:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fd fad4 	bl	8000314 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ee      	bne.n	8002d68 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8002d8a:	4927      	ldr	r1, [pc, #156]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_DeInit+0x140>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002d96:	f7fd fabd 	bl	8000314 <HAL_GetTick>
 8002d9a:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fd fab9 	bl	8000314 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e036      	b.n	8002e1e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dcc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dde:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002df0:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002df2:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0a:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002e0c:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_DeInit+0x130>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	20000008 	.word	0x20000008
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	20000000 	.word	0x20000000
 8002e38:	eafef4ff 	.word	0xeafef4ff

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e39d      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4ba4      	ldr	r3, [pc, #656]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4ba1      	ldr	r3, [pc, #644]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80e1 	beq.w	8003032 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	f040 8088 	bne.w	8002f8e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 8084 	bne.w	8002f8e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e86:	4b96      	ldr	r3, [pc, #600]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e375      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x7c>
 8002eae:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_OscConfig+0x88>
 8002eb8:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d923      	bls.n	8002f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fe60 	bl	8003b92 <RCC_SetFlashLatencyFromMSIRange>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e356      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ede:	4b80      	ldr	r3, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f043 0308 	orr.w	r3, r3, #8
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	497d      	ldr	r1, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eea:	4b7d      	ldr	r3, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efa:	4979      	ldr	r1, [pc, #484]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002efc:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 8002f0e:	e022      	b.n	8002f56 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4a73      	ldr	r2, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f12:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4970      	ldr	r1, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f1e:	4b70      	ldr	r3, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	496c      	ldr	r1, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f30:	4b6b      	ldr	r3, [pc, #428]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fe23 	bl	8003b92 <RCC_SetFlashLatencyFromMSIRange>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e319      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f56:	f000 fc37 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	4a5f      	ldr	r2, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x2a8>)
 8002f68:	5cd3      	ldrb	r3, [r2, r3]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f72:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f76:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <HAL_RCC_OscConfig+0x2b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd f97e 	bl	800027c <HAL_InitTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d052      	beq.n	8003030 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	e2fd      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d032      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f98:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa2:	f7fd f9b7 	bl	8000314 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002faa:	f7fd f9b3 	bl	8000314 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e2e6      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc8:	4a45      	ldr	r2, [pc, #276]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	4b45      	ldr	r3, [pc, #276]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4942      	ldr	r1, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe6:	493e      	ldr	r1, [pc, #248]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]
 8002ffa:	e01a      	b.n	8003032 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ffc:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003008:	f7fd f984 	bl	8000314 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003010:	f7fd f980 	bl	8000314 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e2b3      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1d4>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d074      	beq.n	8003128 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x214>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d10e      	bne.n	8003068 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d064      	beq.n	8003126 <HAL_RCC_OscConfig+0x2ea>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d160      	bne.n	8003126 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e290      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x244>
 8003072:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0x280>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x268>
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0x280>
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x2a4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01c      	beq.n	80030fe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd f926 	bl	8000314 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	e011      	b.n	80030f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd f922 	bl	8000314 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d90a      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e255      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08008eb0 	.word	0x08008eb0
 80030e8:	20000008 	.word	0x20000008
 80030ec:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f0:	4bae      	ldr	r3, [pc, #696]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0e7      	beq.n	80030cc <HAL_RCC_OscConfig+0x290>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd f909 	bl	8000314 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003106:	f7fd f905 	bl	8000314 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e238      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003118:	4ba4      	ldr	r3, [pc, #656]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x2ca>
 8003124:	e000      	b.n	8003128 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003126:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d060      	beq.n	80031f6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x30a>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d119      	bne.n	8003174 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003146:	4b99      	ldr	r3, [pc, #612]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x322>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e215      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4993      	ldr	r1, [pc, #588]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003172:	e040      	b.n	80031f6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4a8b      	ldr	r2, [pc, #556]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800317e:	4b8b      	ldr	r3, [pc, #556]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fd f8c4 	bl	8000314 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fd f8c0 	bl	8000314 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1f3      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a2:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	497f      	ldr	r1, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031b0:	4b7e      	ldr	r3, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e018      	b.n	80031f6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c4:	4a79      	ldr	r2, [pc, #484]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031c6:	4b79      	ldr	r3, [pc, #484]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd f8a0 	bl	8000314 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd f89c 	bl	8000314 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1cf      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ea:	4b70      	ldr	r3, [pc, #448]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03c      	beq.n	800327c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01c      	beq.n	8003244 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800320c:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fd f87b 	bl	8000314 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fd f877 	bl	8000314 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1aa      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003234:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ef      	beq.n	8003222 <HAL_RCC_OscConfig+0x3e6>
 8003242:	e01b      	b.n	800327c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4a59      	ldr	r2, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003246:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd f85e 	bl	8000314 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd f85a 	bl	8000314 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e18d      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ef      	bne.n	800325c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a5 	beq.w	80033d4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800328e:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4a44      	ldr	r2, [pc, #272]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032c4:	4b3a      	ldr	r3, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fd f821 	bl	8000314 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fd f81d 	bl	8000314 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e150      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e8:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x574>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d108      	bne.n	800330e <HAL_RCC_OscConfig+0x4d2>
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330c:	e024      	b.n	8003358 <HAL_RCC_OscConfig+0x51c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d110      	bne.n	8003338 <HAL_RCC_OscConfig+0x4fc>
 8003316:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003336:	e00f      	b.n	8003358 <HAL_RCC_OscConfig+0x51c>
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fc ffd8 	bl	8000314 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fc ffd4 	bl	8000314 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e105      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x570>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ed      	beq.n	8003368 <HAL_RCC_OscConfig+0x52c>
 800338c:	e019      	b.n	80033c2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fc ffc1 	bl	8000314 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003394:	e00e      	b.n	80033b4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fc ffbd 	bl	8000314 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d905      	bls.n	80033b4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e0ee      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b4:	4b77      	ldr	r3, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e9      	bne.n	8003396 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4a72      	ldr	r2, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033ca:	4b72      	ldr	r3, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80d5 	beq.w	8003588 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	f000 808e 	beq.w	8003502 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d15b      	bne.n	80034a6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fc ff8b 	bl	8000314 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fc ff87 	bl	8000314 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0ba      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	485c      	ldr	r0, [pc, #368]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003422:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x75c>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003432:	3a01      	subs	r2, #1
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0552      	lsls	r2, r2, #21
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0652      	lsls	r2, r2, #25
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345c:	0912      	lsrs	r2, r2, #4
 800345e:	0452      	lsls	r2, r2, #17
 8003460:	430a      	orrs	r2, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003466:	4a4b      	ldr	r2, [pc, #300]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003468:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003472:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003474:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fc ff49 	bl	8000314 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fc ff45 	bl	8000314 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e078      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x64a>
 80034a4:	e070      	b.n	8003588 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80034b2:	4b38      	ldr	r3, [pc, #224]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034be:	4a35      	ldr	r2, [pc, #212]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f023 0303 	bic.w	r3, r3, #3
 80034c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ca:	4a32      	ldr	r2, [pc, #200]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034cc:	4b31      	ldr	r3, [pc, #196]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fc ff1b 	bl	8000314 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fc ff17 	bl	8000314 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e04a      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x6a6>
 8003500:	e042      	b.n	8003588 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e03d      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_RCC_OscConfig+0x758>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0203 	and.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	429a      	cmp	r2, r3
 8003520:	d130      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	3b01      	subs	r3, #1
 800352e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d127      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d11f      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800354e:	2a07      	cmp	r2, #7
 8003550:	bf14      	ite	ne
 8003552:	2201      	movne	r2, #1
 8003554:	2200      	moveq	r2, #0
 8003556:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d113      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d109      	bne.n	8003584 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	f99d808c 	.word	0xf99d808c

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0c8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0207 	and.w	r2, r3, #7
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d210      	bcs.n	80035e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4963      	ldr	r1, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 0207 	bic.w	r2, r3, #7
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0207 	and.w	r2, r3, #7
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b0      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d04c      	beq.n	8003686 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d121      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e09e      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d115      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e092      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003624:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e086      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003634:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e07e      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003644:	4942      	ldr	r1, [pc, #264]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003656:	f7fc fe5d 	bl	8000314 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365c:	e00a      	b.n	8003674 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365e:	f7fc fe59 	bl	8000314 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3288 	movw	r2, #5000	; 0x1388
 800366c:	4293      	cmp	r3, r2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e066      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 020c 	and.w	r2, r3, #12
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	429a      	cmp	r2, r3
 8003684:	d1eb      	bne.n	800365e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003692:	492f      	ldr	r1, [pc, #188]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0207 	and.w	r2, r3, #7
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4926      	ldr	r1, [pc, #152]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 0207 	bic.w	r2, r3, #7
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1b0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e036      	b.n	8003742 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4914      	ldr	r1, [pc, #80]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003712:	f000 f859 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8003716:	4601      	mov	r1, r0
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	fa21 f303 	lsr.w	r3, r1, r3
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fda0 	bl	800027c <HAL_InitTick>
 800373c:	4603      	mov	r3, r0
 800373e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003740:	7afb      	ldrb	r3, [r7, #11]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40022000 	.word	0x40022000
 8003750:	40021000 	.word	0x40021000
 8003754:	08008eb0 	.word	0x08008eb0
 8003758:	20000008 	.word	0x20000008
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800376c:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8003784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378e:	2302      	movs	r3, #2
 8003790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003796:	2300      	movs	r3, #0
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a4:	f7fd ff7a 	bl	800169c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80037a8:	4806      	ldr	r0, [pc, #24]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_MCOConfig+0x64>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	430b      	orrs	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	6083      	str	r3, [r0, #8]
}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x34>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d121      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d11e      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037fc:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003808:	4b30      	ldr	r3, [pc, #192]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e005      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003818:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d102      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e004      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b08      	cmp	r3, #8
 800384a:	d101      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800384e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d133      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d002      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xa4>
 8003866:	2b03      	cmp	r3, #3
 8003868:	d003      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0xaa>
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800386c:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800386e:	617b      	str	r3, [r7, #20]
      break;
 8003870:	e005      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003874:	617b      	str	r3, [r7, #20]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	617b      	str	r3, [r7, #20]
      break;
 800387c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	3301      	adds	r3, #1
 800388a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	fb02 f203 	mul.w	r2, r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_GetSysClockFreq+0x104>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0e5b      	lsrs	r3, r3, #25
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038be:	69bb      	ldr	r3, [r7, #24]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08008ec8 	.word	0x08008ec8
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	007a1200 	.word	0x007a1200

080038dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000008 	.word	0x20000008

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4601      	mov	r1, r0
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_RCC_GetPCLK1Freq+0x28>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	08008ec0 	.word	0x08008ec0

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003924:	f7ff ffda 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003928:	4601      	mov	r1, r0
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0adb      	lsrs	r3, r3, #11
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	08008ec0 	.word	0x08008ec0

0800394c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;
#else
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	221f      	movs	r2, #31
 8003958:	601a      	str	r2, [r3, #0]
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800395a:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003966:	d104      	bne.n	8003972 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e00e      	b.n	8003990 <HAL_RCC_GetOscConfig+0x44>
  }
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 8003972:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d104      	bne.n	800398a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	e002      	b.n	8003990 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	605a      	str	r2, [r3, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d103      	bne.n	80039a4 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	619a      	str	r2, [r3, #24]
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 80039aa:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 80039c2:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d104      	bne.n	80039da <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	e002      	b.n	80039e0 <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 80039e0:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0e1b      	lsrs	r3, r3, #24
 80039e6:	f003 021f 	and.w	r2, r3, #31
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d103      	bne.n	8003a04 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2205      	movs	r2, #5
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	e00d      	b.n	8003a20 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8003a04:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d103      	bne.n	8003a1a <HAL_RCC_GetOscConfig+0xce>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e002      	b.n	8003a20 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d103      	bne.n	8003a36 <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	615a      	str	r2, [r3, #20]
 8003a34:	e002      	b.n	8003a3c <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
  }
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4e:	d103      	bne.n	8003a58 <HAL_RCC_GetOscConfig+0x10c>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_GetOscConfig+0x112>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0d5b      	lsrs	r3, r3, #21
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005a      	lsls	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	0e5b      	lsrs	r3, r3, #25
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	005a      	lsls	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#else
  if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_GetOscConfig+0x188>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCC_GetOscConfig+0x174>
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2211      	movs	r2, #17
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
  }
#endif /* RCC_PLLP_DIV_2_31_SUPPORT */
#endif /* RCC_PLLP_SUPPORT */
}
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetOscConfig+0x17a>
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_GetClockConfig+0x5c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	08db      	lsrs	r3, r3, #3
 8003b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <HAL_RCC_GetClockConfig+0x60>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0207 	and.w	r2, r3, #7
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40022000 	.word	0x40022000

08003b3c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003b40:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <HAL_RCC_EnableCSS+0x1c>)
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_EnableCSS+0x1c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003b6e:	f000 f809 	bl	8003b84 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b78:	621a      	str	r2, [r3, #32]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000

08003b84 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003baa:	f7fe fa43 	bl	8002034 <HAL_PWREx_GetVoltageRange>
 8003bae:	6178      	str	r0, [r7, #20]
 8003bb0:	e014      	b.n	8003bdc <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bca:	f7fe fa33 	bl	8002034 <HAL_PWREx_GetVoltageRange>
 8003bce:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0xba>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be2:	d10b      	bne.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d919      	bls.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2ba0      	cmp	r3, #160	; 0xa0
 8003bee:	d902      	bls.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e013      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e010      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d902      	bls.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c02:	2303      	movs	r3, #3
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e00a      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d102      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0e:	2302      	movs	r3, #2
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e004      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b70      	cmp	r3, #112	; 0x70
 8003c18:	d101      	bne.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c1e:	490c      	ldr	r1, [pc, #48]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbe>)
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbe>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 0207 	bic.w	r2, r3, #7
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xbe>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40022000 	.word	0x40022000

08003c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c60:	2300      	movs	r3, #0
 8003c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d01c      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7e:	d802      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c84:	e01f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8a:	d003      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c94:	4a85      	ldr	r2, [pc, #532]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c96:	4b85      	ldr	r3, [pc, #532]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca0:	e015      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 fac3 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb2:	e00c      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fbaa 	bl	8005414 <RCCEx_PLLSAI2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd4:	4975      	ldr	r1, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd6:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d04:	d01c      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0a:	d802      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d10:	e01f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003d1e:	e018      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d20:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d22:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2c:	e015      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fa7d 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3320      	adds	r3, #32
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fb64 	bl	8005414 <RCCEx_PLLSAI2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	74fb      	strb	r3, [r7, #19]
      break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d60:	4952      	ldr	r1, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d62:	4b52      	ldr	r3, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a0 	beq.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	4a41      	ldr	r2, [pc, #260]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dae:	6593      	str	r3, [r2, #88]	; 0x58
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dcc:	f7fc faa2 	bl	8000314 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7fc fa9e 	bl	8000314 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	74fb      	strb	r3, [r7, #19]
        break;
 8003de6:	e005      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d15c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d019      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e24:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fc fa5d 	bl	8000314 <HAL_GetTick>
 8003e5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5c:	e00b      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fc fa59 	bl	8000314 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d902      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	74fb      	strb	r3, [r7, #19]
            break;
 8003e74:	e006      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ec      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8a:	4908      	ldr	r1, [pc, #32]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea2:	e009      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
 8003ea8:	e006      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb8:	7c7b      	ldrb	r3, [r7, #17]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4a9e      	ldr	r2, [pc, #632]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec0:	4b9d      	ldr	r3, [pc, #628]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed6:	4998      	ldr	r1, [pc, #608]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed8:	4b97      	ldr	r3, [pc, #604]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef8:	498f      	ldr	r1, [pc, #572]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efa:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f023 020c 	bic.w	r2, r3, #12
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1a:	4987      	ldr	r1, [pc, #540]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1c:	4b86      	ldr	r3, [pc, #536]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f3c:	497e      	ldr	r1, [pc, #504]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f3e:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5e:	4976      	ldr	r1, [pc, #472]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f60:	4b75      	ldr	r3, [pc, #468]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f80:	496d      	ldr	r1, [pc, #436]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f82:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	4965      	ldr	r1, [pc, #404]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa4:	4b64      	ldr	r3, [pc, #400]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc4:	495c      	ldr	r1, [pc, #368]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe6:	4954      	ldr	r1, [pc, #336]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004008:	494b      	ldr	r1, [pc, #300]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400a:	4b4b      	ldr	r3, [pc, #300]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402a:	4943      	ldr	r1, [pc, #268]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402c:	4b42      	ldr	r3, [pc, #264]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d028      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404c:	493a      	ldr	r1, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406a:	d106      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4a32      	ldr	r2, [pc, #200]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800406e:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
 8004078:	e011      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f8d2 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d028      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040aa:	4923      	ldr	r1, [pc, #140]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c8:	d106      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ca:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d4:	60d3      	str	r3, [r2, #12]
 80040d6:	e011      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 f8a3 	bl	8005234 <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02b      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004108:	490b      	ldr	r1, [pc, #44]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4a03      	ldr	r2, [pc, #12]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412a:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
 8004134:	e014      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004144:	d10c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f871 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02f      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800416c:	492b      	ldr	r1, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800416e:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418a:	d10d      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f001 f84e 	bl	8005234 <RCCEx_PLLSAI1_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d014      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	74bb      	strb	r3, [r7, #18]
 80041a6:	e011      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d10c      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3320      	adds	r3, #32
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 f92b 	bl	8005414 <RCCEx_PLLSAI2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d8:	4910      	ldr	r1, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fa:	4908      	ldr	r1, [pc, #32]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004212:	7cbb      	ldrb	r3, [r7, #18]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000

08004220 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(SAI1, SAI2, LPTIM1, LPTIM2, I2C1, I2C2, I2C3, I2C4, LPUART,
  *         USART1, USART2, USART3, UART4, UART5, RTC, ADCx, DFSDMx, SWPMI1, USB, SDMMC1 and RNG).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
                                        RCC_PERIPHCLK_SDMMC1  | RCC_PERIPHCLK_RNG    | RCC_PERIPHCLK_ADC    | RCC_PERIPHCLK_SWPMI1 | RCC_PERIPHCLK_DFSDM1 | \
                                        RCC_PERIPHCLK_RTC ;

#elif defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1  | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5  | \
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a73      	ldr	r2, [pc, #460]	; (80043f8 <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
 800422c:	601a      	str	r2, [r3, #0]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Get the PLLSAI1 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI1.PLLSAI1Source = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC) >> RCC_PLLCFGR_PLLSRC_Pos;
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0203 	and.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	605a      	str	r2, [r3, #4]
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI1.PLLSAI1M = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI1.PLLSAI1N = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800424a:	4b6c      	ldr	r3, [pc, #432]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLSAI1.PLLSAI1P = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) >> RCC_PLLSAI1CFGR_PLLSAI1P_Pos) << 4U) + 7U;
 8004258:	4b68      	ldr	r3, [pc, #416]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	0c5b      	lsrs	r3, r3, #17
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	1dda      	adds	r2, r3, #7
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI1.PLLSAI1Q = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) * 2U;
 800426a:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	0d5b      	lsrs	r3, r3, #21
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	3301      	adds	r3, #1
 8004276:	005a      	lsls	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI1.PLLSAI1R = ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) * 2U;
 800427c:	4b5f      	ldr	r3, [pc, #380]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	0e5b      	lsrs	r3, r3, #25
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	3301      	adds	r3, #1
 8004288:	005a      	lsls	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Get the PLLSAI2 Clock configuration -----------------------------------------------*/

  PeriphClkInit->PLLSAI2.PLLSAI2Source = PeriphClkInit->PLLSAI1.PLLSAI1Source;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2M = (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U;
#else
  PeriphClkInit->PLLSAI2.PLLSAI2M = PeriphClkInit->PLLSAI1.PLLSAI1M;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2N = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800429e:	4b57      	ldr	r3, [pc, #348]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAI2.PLLSAI2P = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) >> RCC_PLLSAI2CFGR_PLLSAI2P_Pos) << 4U) + 7U;
 80042ac:	4b53      	ldr	r3, [pc, #332]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	0c5b      	lsrs	r3, r3, #17
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	1dda      	adds	r2, r3, #7
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  PeriphClkInit->PLLSAI2.PLLSAI2Q = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2Q) >> RCC_PLLSAI2CFGR_PLLSAI2Q_Pos) + 1U) * 2U;
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  PeriphClkInit->PLLSAI2.PLLSAI2R = ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R)>> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) * 2U;
 80042be:	4b4f      	ldr	r3, [pc, #316]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	0e5b      	lsrs	r3, r3, #25
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	3301      	adds	r3, #1
 80042ca:	005a      	lsls	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Get the USART1 clock source ---------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
 80042d0:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f003 0203 	and.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f003 020c 	and.w	r2, r3, #12
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c

#if defined(USART3)
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection  = __HAL_RCC_GET_USART3_SOURCE();
 80042ec:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* USART3 */

#if defined(UART4)
  /* Get the UART4 clock source ----------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection   = __HAL_RCC_GET_UART4_SOURCE();
 80042fa:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* UART4 */

#if defined(UART5)
  /* Get the UART5 clock source ----------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection   = __HAL_RCC_GET_UART5_SOURCE();
 8004308:	4b3c      	ldr	r3, [pc, #240]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* UART5 */

  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	; 0x50

#if defined(I2C2)
   /* Get the I2C2 clock source ----------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection    = __HAL_RCC_GET_I2C2_SOURCE();
 8004332:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* I2C2 */

  /* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the I2C4 clock source -----------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection    = __HAL_RCC_GET_I2C4_SOURCE();
#endif /* I2C4 */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection  = __HAL_RCC_GET_LPTIM1_SOURCE();
 800434e:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection  = __HAL_RCC_GET_LPTIM2_SOURCE();
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(SAI1)
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection    = __HAL_RCC_GET_SAI1_SOURCE();
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	665a      	str	r2, [r3, #100]	; 0x64
#endif /* SAI1 */

#if defined(SAI2)
  /* Get the SAI2 clock source -----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection    = __HAL_RCC_GET_SAI2_SOURCE();
 8004378:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	669a      	str	r2, [r3, #104]	; 0x68
#endif /* SAI2 */

  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USB_OTG_FS) || defined(USB)
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection   = __HAL_RCC_GET_USB_SOURCE();
 8004396:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	66da      	str	r2, [r3, #108]	; 0x6c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)
  /* Get the SDMMC1 clock source ---------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection   = __HAL_RCC_GET_SDMMC1_SOURCE();
 80043a4:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* SDMMC1 */

  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection   = __HAL_RCC_GET_RNG_SOURCE();
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	675a      	str	r2, [r3, #116]	; 0x74

#if !defined(STM32L412xx) && !defined(STM32L422xx)
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection     = __HAL_RCC_GET_ADC_SOURCE();
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection  = __HAL_RCC_GET_SWPMI1_SOURCE();
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection  = __HAL_RCC_GET_DFSDM1_SOURCE();
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OctoSPIclock source --------------------------------------------*/
  PeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	000fffff 	.word	0x000fffff
 80043fc:	40021000 	.word	0x40021000

08004400 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004412:	d137      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004414:	4bb8      	ldr	r3, [pc, #736]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	617b      	str	r3, [r7, #20]

    switch(srcclk)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004426:	d014      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442c:	d01e      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d001      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004434:	f000 bc53 	b.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004438:	4baf      	ldr	r3, [pc, #700]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	f040 8446 	bne.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        frequency = LSE_VALUE;
 8004448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444c:	61fb      	str	r3, [r7, #28]
      break;
 800444e:	f000 bc41 	b.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004452:	4ba9      	ldr	r3, [pc, #676]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	f040 843b 	bne.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          frequency = LSI_VALUE;
 8004462:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004466:	61fb      	str	r3, [r7, #28]
      break;
 8004468:	f000 bc36 	b.w	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800446c:	4ba2      	ldr	r3, [pc, #648]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004478:	f040 8430 	bne.w	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        frequency = HSE_VALUE / 32U;
 800447c:	4b9f      	ldr	r3, [pc, #636]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800447e:	61fb      	str	r3, [r7, #28]
      break;
 8004480:	f000 bc2c 	b.w	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004484:	4b9c      	ldr	r3, [pc, #624]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d023      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004494:	2b03      	cmp	r3, #3
 8004496:	d02e      	beq.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d139      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800449c:	4b96      	ldr	r3, [pc, #600]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d116      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80044a8:	4b93      	ldr	r3, [pc, #588]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80044b4:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	e005      	b.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80044c0:	4b8d      	ldr	r3, [pc, #564]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	4a8c      	ldr	r2, [pc, #560]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80044ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044d4:	e01f      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
      break;
 80044da:	e01c      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044dc:	4b86      	ldr	r3, [pc, #536]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d102      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 80044ea:	4b86      	ldr	r3, [pc, #536]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80044ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044ee:	e012      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
      break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044f6:	4b80      	ldr	r3, [pc, #512]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	d102      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8004504:	4b80      	ldr	r3, [pc, #512]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8004506:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004508:	e005      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]
      break;
 800450e:	e002      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
      break;
 8004514:	bf00      	nop
    }

    switch(PeriphClk)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451c:	f000 8337 	beq.w	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d825      	bhi.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004526:	2b10      	cmp	r3, #16
 8004528:	f000 81df 	beq.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800452c:	2b10      	cmp	r3, #16
 800452e:	d80f      	bhi.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004530:	2b02      	cmp	r3, #2
 8004532:	f000 8128 	beq.w	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004536:	2b02      	cmp	r3, #2
 8004538:	d803      	bhi.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800453a:	2b01      	cmp	r3, #1
 800453c:	f000 80ec 	beq.w	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004540:	e3cd      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004542:	2b04      	cmp	r3, #4
 8004544:	f000 8169 	beq.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8004548:	2b08      	cmp	r3, #8
 800454a:	f000 819a 	beq.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 800454e:	e3c6      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	f000 82b3 	beq.w	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d803      	bhi.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 800455a:	2b20      	cmp	r3, #32
 800455c:	f000 81fd 	beq.w	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8004560:	e3bd      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	f000 82cd 	beq.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	f000 82ec 	beq.w	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
      break;
 8004570:	e3b5      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004576:	f000 822d 	beq.w	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800457a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457e:	d811      	bhi.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004584:	d021      	beq.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458a:	d804      	bhi.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	f000 833e 	beq.w	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
      break;
 8004594:	e3a3      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d01d      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d021      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80045a2:	e39c      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	f000 8277 	beq.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d804      	bhi.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	f000 8371 	beq.w	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
      break;
 80045ba:	e390      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    switch(PeriphClk)
 80045bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045c0:	d011      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80045c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045c6:	d00e      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 80045c8:	e389      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80045d0:	f000 fffa 	bl	80055c8 <RCCEx_GetSAIxPeriphCLKFreq>
 80045d4:	61f8      	str	r0, [r7, #28]
      break;
 80045d6:	e382      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80045de:	f000 fff3 	bl	80055c8 <RCCEx_GetSAIxPeriphCLKFreq>
 80045e2:	61f8      	str	r0, [r7, #28]
      break;
 80045e4:	e37b      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80045e6:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80045f0:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f8:	d023      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 80045fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004604:	d04a      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8004606:	e086      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004608:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d17b      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	e005      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	4a31      	ldr	r2, [pc, #196]	; (8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463e:	61fb      	str	r3, [r7, #28]
          break;
 8004640:	e064      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004642:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800464e:	d15f      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465c:	d158      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	fb02 f203 	mul.w	r2, r2, r3
 8004672:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	3301      	adds	r3, #1
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0d5b      	lsrs	r3, r3, #21
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	3301      	adds	r3, #1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	61fb      	str	r3, [r7, #28]
          break;
 800469a:	e039      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a8:	d134      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d12d      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fb02 f203 	mul.w	r2, r2, r3
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	3301      	adds	r3, #1
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	0d5b      	lsrs	r3, r3, #21
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	3301      	adds	r3, #1
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	61fb      	str	r3, [r7, #28]
          break;
 80046f4:	e00e      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0003d090 	.word	0x0003d090
 8004700:	08008ec8 	.word	0x08008ec8
 8004704:	00f42400 	.word	0x00f42400
 8004708:	007a1200 	.word	0x007a1200
          break;
 800470c:	bf00      	nop
 800470e:	e2e6      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004710:	bf00      	nop
 8004712:	e2e4      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004714:	bf00      	nop
        break;
 8004716:	e2e2      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004718:	4bac      	ldr	r3, [pc, #688]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d827      	bhi.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004741 	.word	0x08004741
 8004734:	08004749 	.word	0x08004749
 8004738:	08004751 	.word	0x08004751
 800473c:	08004765 	.word	0x08004765
          frequency = HAL_RCC_GetPCLK2Freq();
 8004740:	f7ff f8ee 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8004744:	61f8      	str	r0, [r7, #28]
          break;
 8004746:	e01d      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8004748:	f7ff f83e 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800474c:	61f8      	str	r0, [r7, #28]
          break;
 800474e:	e019      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b9e      	ldr	r3, [pc, #632]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d10f      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 800475e:	4b9c      	ldr	r3, [pc, #624]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004760:	61fb      	str	r3, [r7, #28]
          break;
 8004762:	e00c      	b.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004764:	4b99      	ldr	r3, [pc, #612]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d107      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	61fb      	str	r3, [r7, #28]
          break;
 8004778:	e003      	b.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800477a:	bf00      	nop
 800477c:	e2af      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800477e:	bf00      	nop
 8004780:	e2ad      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004782:	bf00      	nop
        break;
 8004784:	e2ab      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004786:	4b91      	ldr	r3, [pc, #580]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d83a      	bhi.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	0800480f 	.word	0x0800480f
 80047a8:	0800480f 	.word	0x0800480f
 80047ac:	0800480f 	.word	0x0800480f
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	0800480f 	.word	0x0800480f
 80047b8:	0800480f 	.word	0x0800480f
 80047bc:	0800480f 	.word	0x0800480f
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	0800480f 	.word	0x0800480f
 80047c8:	0800480f 	.word	0x0800480f
 80047cc:	0800480f 	.word	0x0800480f
 80047d0:	080047f9 	.word	0x080047f9
          frequency = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7ff f88e 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
          break;
 80047da:	e01d      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80047dc:	f7fe fff4 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 80047e0:	61f8      	str	r0, [r7, #28]
          break;
 80047e2:	e019      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047e4:	4b79      	ldr	r3, [pc, #484]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d10f      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 80047f2:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80047f4:	61fb      	str	r3, [r7, #28]
          break;
 80047f6:	e00c      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047f8:	4b74      	ldr	r3, [pc, #464]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b02      	cmp	r3, #2
 8004804:	d107      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61fb      	str	r3, [r7, #28]
          break;
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 800480e:	bf00      	nop
 8004810:	e265      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004812:	bf00      	nop
 8004814:	e263      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004816:	bf00      	nop
        break;
 8004818:	e261      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800481a:	4b6c      	ldr	r3, [pc, #432]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004824:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d00d      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d802      	bhi.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8004834:	e024      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8004836:	2b20      	cmp	r3, #32
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800483a:	2b30      	cmp	r3, #48	; 0x30
 800483c:	d012      	beq.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 800483e:	e01f      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff f858 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004844:	61f8      	str	r0, [r7, #28]
          break;
 8004846:	e01b      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8004848:	f7fe ffbe 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800484c:	61f8      	str	r0, [r7, #28]
          break;
 800484e:	e017      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004850:	4b5e      	ldr	r3, [pc, #376]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485c:	d10d      	bne.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004860:	61fb      	str	r3, [r7, #28]
          break;
 8004862:	e00a      	b.n	800487a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d105      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	61fb      	str	r3, [r7, #28]
          break;
 8004878:	e001      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800487a:	bf00      	nop
 800487c:	e22f      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800487e:	bf00      	nop
        break;
 8004880:	e22d      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004882:	4b52      	ldr	r3, [pc, #328]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800488c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d00d      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d802      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 800489c:	e024      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d00a      	beq.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80048a2:	2bc0      	cmp	r3, #192	; 0xc0
 80048a4:	d012      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80048a6:	e01f      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7ff f824 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
          break;
 80048ae:	e01b      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80048b0:	f7fe ff8a 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 80048b4:	61f8      	str	r0, [r7, #28]
          break;
 80048b6:	e017      	b.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b44      	ldr	r3, [pc, #272]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d10d      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80048c8:	61fb      	str	r3, [r7, #28]
          break;
 80048ca:	e00a      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048cc:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d105      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
          break;
 80048e0:	e001      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80048e2:	bf00      	nop
 80048e4:	e1fb      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80048e6:	bf00      	nop
        break;
 80048e8:	e1f9      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f4:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fc:	d010      	beq.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d802      	bhi.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8004908:	e026      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 800490a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004914:	d012      	beq.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8004916:	e01f      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004918:	f7fe ffec 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800491c:	61f8      	str	r0, [r7, #28]
          break;
 800491e:	e01b      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8004920:	f7fe ff52 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004924:	61f8      	str	r0, [r7, #28]
          break;
 8004926:	e017      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004928:	4b28      	ldr	r3, [pc, #160]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d10d      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8004938:	61fb      	str	r3, [r7, #28]
          break;
 800493a:	e00a      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800493c:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d105      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	61fb      	str	r3, [r7, #28]
          break;
 8004950:	e001      	b.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8004952:	bf00      	nop
 8004954:	e1c3      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004956:	bf00      	nop
        break;
 8004958:	e1c1      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800495a:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004964:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d010      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004972:	d802      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8004978:	e026      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800497a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497e:	d00b      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004984:	d012      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8004986:	e01f      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe ffb4 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 800498c:	61f8      	str	r0, [r7, #28]
          break;
 800498e:	e01b      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004990:	f7fe ff1a 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004994:	61f8      	str	r0, [r7, #28]
          break;
 8004996:	e017      	b.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d10d      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80049a8:	61fb      	str	r3, [r7, #28]
          break;
 80049aa:	e00a      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d105      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
          break;
 80049c0:	e001      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80049c2:	bf00      	nop
 80049c4:	e18b      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 80049c6:	bf00      	nop
        break;
 80049c8:	e189      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80049d4:	4bae      	ldr	r3, [pc, #696]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049de:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d02f      	beq.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80049e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ec:	d003      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80049ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f2:	d004      	beq.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 80049f4:	e050      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fe fee7 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 80049fa:	61f8      	str	r0, [r7, #28]
          break;
 80049fc:	e04c      	b.n	8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 80049fe:	4ba4      	ldr	r3, [pc, #656]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d043      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004a0a:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a14:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	fb02 f203 	mul.w	r2, r2, r3
 8004a1e:	4b9c      	ldr	r3, [pc, #624]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	3301      	adds	r3, #1
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004a30:	4b97      	ldr	r3, [pc, #604]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	0e5b      	lsrs	r3, r3, #25
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	61fb      	str	r3, [r7, #28]
          break;
 8004a46:	e024      	b.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U)
 8004a48:	4b91      	ldr	r3, [pc, #580]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004a54:	4b8e      	ldr	r3, [pc, #568]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	fb02 f203 	mul.w	r2, r2, r3
 8004a68:	4b89      	ldr	r3, [pc, #548]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	3301      	adds	r3, #1
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004a7a:	4b85      	ldr	r3, [pc, #532]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	0e5b      	lsrs	r3, r3, #25
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	3301      	adds	r3, #1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	61fb      	str	r3, [r7, #28]
          break;
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          break;
 8004a92:	bf00      	nop
 8004a94:	e123      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004a96:	bf00      	nop
        break;
 8004a98:	e121      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004a9a:	4b7d      	ldr	r3, [pc, #500]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	617b      	str	r3, [r7, #20]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d103      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fe ff38 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8004ab0:	61f8      	str	r0, [r7, #28]
        break;
 8004ab2:	e114      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ab4:	f7fe fe88 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e110      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004abc:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ac6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d009      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d000      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          break;
 8004ada:	e011      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe ff0a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
          break;
 8004ae2:	e00d      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ae4:	f7fe fe70 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004ae8:	61f8      	str	r0, [r7, #28]
          break;
 8004aea:	e009      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aec:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
            frequency = HSI_VALUE;
 8004afa:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004afc:	61fb      	str	r3, [r7, #28]
          break;
 8004afe:	bf00      	nop
        break;
 8004b00:	e0ed      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004b02:	4b63      	ldr	r3, [pc, #396]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b0c:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	d009      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d000      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 8004b20:	e011      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b22:	f7fe fee7 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004b26:	61f8      	str	r0, [r7, #28]
          break;
 8004b28:	e00d      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b2a:	f7fe fe4d 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004b2e:	61f8      	str	r0, [r7, #28]
          break;
 8004b30:	e009      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
            frequency = HSI_VALUE;
 8004b40:	4b54      	ldr	r3, [pc, #336]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004b42:	61fb      	str	r3, [r7, #28]
          break;
 8004b44:	bf00      	nop
        break;
 8004b46:	e0ca      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004b48:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b52:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d009      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d000      	beq.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          break;
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fec4 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	61f8      	str	r0, [r7, #28]
          break;
 8004b6e:	e00d      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b70:	f7fe fe2a 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8004b74:	61f8      	str	r0, [r7, #28]
          break;
 8004b76:	e009      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = HSI_VALUE;
 8004b86:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004b88:	61fb      	str	r3, [r7, #28]
          break;
 8004b8a:	bf00      	nop
        break;
 8004b8c:	e0a7      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b8e:	4b40      	ldr	r3, [pc, #256]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b98:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba0:	d010      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba6:	d802      	bhi.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
          break;
 8004bac:	e02f      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
        switch(srcclk)
 8004bae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bb2:	d012      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004bb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bb8:	d019      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004bba:	e028      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f7fe fe9a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	61f8      	str	r0, [r7, #28]
          break;
 8004bc2:	e024      	b.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d118      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
              frequency = LSI_VALUE;
 8004bd2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bd6:	61fb      	str	r3, [r7, #28]
          break;
 8004bd8:	e014      	b.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bda:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d10f      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
            frequency = HSI_VALUE;
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004bea:	61fb      	str	r3, [r7, #28]
          break;
 8004bec:	e00c      	b.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bee:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
            frequency = LSE_VALUE;
 8004bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c00:	61fb      	str	r3, [r7, #28]
          break;
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          break;
 8004c04:	bf00      	nop
 8004c06:	e06a      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c08:	bf00      	nop
 8004c0a:	e068      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c0c:	bf00      	nop
        break;
 8004c0e:	e066      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004c10:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c1a:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c22:	d010      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c28:	d802      	bhi.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          break;
 8004c2e:	e034      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
        switch(srcclk)
 8004c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c34:	d012      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8004c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c3a:	d019      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          break;
 8004c3c:	e02d      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7fe fe59 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004c42:	61f8      	str	r0, [r7, #28]
          break;
 8004c44:	e029      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d118      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = LSI_VALUE;
 8004c54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c58:	61fb      	str	r3, [r7, #28]
          break;
 8004c5a:	e014      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d10f      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
            frequency = HSI_VALUE;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004c6c:	61fb      	str	r3, [r7, #28]
          break;
 8004c6e:	e00c      	b.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
            frequency = LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	61fb      	str	r3, [r7, #28]
          break;
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          break;
 8004c86:	bf00      	nop
 8004c88:	e029      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c8a:	bf00      	nop
 8004c8c:	e027      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	00f42400 	.word	0x00f42400
          break;
 8004c98:	bf00      	nop
        break;
 8004c9a:	e020      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004c9c:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ca6:	617b      	str	r3, [r7, #20]
        switch(srcclk)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d004      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8004cb4:	e00d      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cb6:	f7fe fe1d 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004cba:	61f8      	str	r0, [r7, #28]
          break;
 8004cbc:	e009      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
            frequency = HSI_VALUE;
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
 8004cce:	61fb      	str	r3, [r7, #28]
          break;
 8004cd0:	bf00      	nop
        break;
 8004cd2:	e004      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004cd4:	bf00      	nop
 8004cd6:	e002      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
      break;
 8004cdc:	bf00      	nop
    }
  }

  return(frequency);
 8004cde:	69fb      	ldr	r3, [r7, #28]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	00f42400 	.word	0x00f42400

08004cf0 <HAL_RCCEx_EnablePLLSAI1>:
  * @param  PLLSAI1Init  pointer to an RCC_PLLSAI1InitTypeDef structure that
  *         contains the configuration information for the PLLSAI1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI1(RCC_PLLSAI1InitTypeDef  *PLLSAI1Init)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1Q_VALUE(PLLSAI1Init->PLLSAI1Q));
  assert_param(IS_RCC_PLLSAI1R_VALUE(PLLSAI1Init->PLLSAI1R));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1Init->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004cfc:	4a2e      	ldr	r2, [pc, #184]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d08:	f7fb fb04 	bl	8000314 <HAL_GetTick>
 8004d0c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d0e:	e009      	b.n	8004d24 <HAL_RCCEx_EnablePLLSAI1+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d10:	f7fb fb00 	bl	8000314 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d902      	bls.n	8004d24 <HAL_RCCEx_EnablePLLSAI1+0x34>
    {
      status = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	73fb      	strb	r3, [r7, #15]
      break;
 8004d22:	e005      	b.n	8004d30 <HAL_RCCEx_EnablePLLSAI1+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ef      	bne.n	8004d10 <HAL_RCCEx_EnablePLLSAI1+0x20>
    }
  }

  if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d13b      	bne.n	8004dae <HAL_RCCEx_EnablePLLSAI1+0xbe>
    /* Configure the PLLSAI1 Division factors M, P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1M, PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
#else
    /* Configure the PLLSAI1 Multiplication factor N */
    /* Configure the PLLSAI1 Division factors P, Q and R */
    __HAL_RCC_PLLSAI1_CONFIG(PLLSAI1Init->PLLSAI1N, PLLSAI1Init->PLLSAI1P, PLLSAI1Init->PLLSAI1Q, PLLSAI1Init->PLLSAI1R);
 8004d36:	4820      	ldr	r0, [pc, #128]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d38:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <HAL_RCCEx_EnablePLLSAI1+0xcc>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	0211      	lsls	r1, r2, #8
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6912      	ldr	r2, [r2, #16]
 8004d4a:	0852      	lsrs	r2, r2, #1
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0552      	lsls	r2, r2, #21
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6952      	ldr	r2, [r2, #20]
 8004d56:	0852      	lsrs	r2, r2, #1
 8004d58:	3a01      	subs	r2, #1
 8004d5a:	0652      	lsls	r2, r2, #25
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0912      	lsrs	r2, r2, #4
 8004d64:	0452      	lsls	r2, r2, #17
 8004d66:	430a      	orrs	r2, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	6103      	str	r3, [r0, #16]
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
    /* Configure the PLLSAI1 Clock output(s) */
    __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1Init->PLLSAI1ClockOut);
 8004d6c:	4912      	ldr	r1, [pc, #72]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d86:	f7fb fac5 	bl	8000314 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d8c:	e009      	b.n	8004da2 <HAL_RCCEx_EnablePLLSAI1+0xb2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8e:	f7fb fac1 	bl	8000314 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d902      	bls.n	8004da2 <HAL_RCCEx_EnablePLLSAI1+0xb2>
      {
        status = HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004da0:	e005      	b.n	8004dae <HAL_RCCEx_EnablePLLSAI1+0xbe>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCCEx_EnablePLLSAI1+0xc8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ef      	beq.n	8004d8e <HAL_RCCEx_EnablePLLSAI1+0x9e>
      }
    }
  }

  return status;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	f99d80ff 	.word	0xf99d80ff

08004dc0 <HAL_RCCEx_DisablePLLSAI1>:
/**
  * @brief  Disable PLLSAI1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI1(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004dca:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dd6:	f7fb fa9d 	bl	8000314 <HAL_GetTick>
 8004dda:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI1 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ddc:	e009      	b.n	8004df2 <HAL_RCCEx_DisablePLLSAI1+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dde:	f7fb fa99 	bl	8000314 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d902      	bls.n	8004df2 <HAL_RCCEx_DisablePLLSAI1+0x32>
    {
      status = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	71fb      	strb	r3, [r7, #7]
      break;
 8004df0:	e005      	b.n	8004dfe <HAL_RCCEx_DisablePLLSAI1+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ef      	bne.n	8004dde <HAL_RCCEx_DisablePLLSAI1+0x1e>
    }
  }

  /* Disable the PLLSAI1 Clock outputs */
  __HAL_RCC_PLLSAI1CLKOUT_DISABLE(RCC_PLLSAI1CFGR_PLLSAI1PEN|RCC_PLLSAI1CFGR_PLLSAI1QEN|RCC_PLLSAI1CFGR_PLLSAI1REN);
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0c:	6113      	str	r3, [r2, #16]

  /* Reset PLL source to save power if no PLLs on */
#if defined(RCC_PLLSAI2_SUPPORT)
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 5308 	and.w	r3, r3, #570425344	; 0x22000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_RCCEx_DisablePLLSAI1+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_RCCEx_DisablePLLSAI1+0x70>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	60d3      	str	r3, [r2, #12]
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
  }
#endif /* RCC_PLLSAI2_SUPPORT */

  return status;
 8004e26:	79fb      	ldrb	r3, [r7, #7]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000

08004e34 <HAL_RCCEx_EnablePLLSAI2>:
  * @param  PLLSAI2Init  pointer to an RCC_PLLSAI2InitTypeDef structure that
  *         contains the configuration information for the PLLSAI2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI2(RCC_PLLSAI2InitTypeDef  *PLLSAI2Init)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
  assert_param(IS_RCC_PLLSAI2R_VALUE(PLLSAI2Init->PLLSAI2R));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PLLSAI2Init->PLLSAI2ClockOut));

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e4c:	f7fb fa62 	bl	8000314 <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI2 is ready to be updated */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e52:	e009      	b.n	8004e68 <HAL_RCCEx_EnablePLLSAI2+0x34>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e54:	f7fb fa5e 	bl	8000314 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d902      	bls.n	8004e68 <HAL_RCCEx_EnablePLLSAI2+0x34>
    {
      status = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	73fb      	strb	r3, [r7, #15]
      break;
 8004e66:	e005      	b.n	8004e74 <HAL_RCCEx_EnablePLLSAI2+0x40>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ef      	bne.n	8004e54 <HAL_RCCEx_EnablePLLSAI2+0x20>
    }
  }

  if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d135      	bne.n	8004ee6 <HAL_RCCEx_EnablePLLSAI2+0xb2>
    /* Configure the PLLSAI2 Division factors P, Q and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2Q, PLLSAI2Init->PLLSAI2R);
#else
    /* Configure the PLLSAI2 Multiplication factor N */
    /* Configure the PLLSAI2 Division factors P and R */
    __HAL_RCC_PLLSAI2_CONFIG(PLLSAI2Init->PLLSAI2N, PLLSAI2Init->PLLSAI2P, PLLSAI2Init->PLLSAI2R);
 8004e7a:	481d      	ldr	r0, [pc, #116]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <HAL_RCCEx_EnablePLLSAI2+0xc0>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	0211      	lsls	r1, r2, #8
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6912      	ldr	r2, [r2, #16]
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0652      	lsls	r2, r2, #25
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68d2      	ldr	r2, [r2, #12]
 8004e9a:	0912      	lsrs	r2, r2, #4
 8004e9c:	0452      	lsls	r2, r2, #17
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	6143      	str	r3, [r0, #20]
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */
    /* Configure the PLLSAI2 Clock output(s) */
    __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PLLSAI2Init->PLLSAI2ClockOut);
 8004ea4:	4912      	ldr	r1, [pc, #72]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	614b      	str	r3, [r1, #20]

    /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
    __HAL_RCC_PLLSAI2_ENABLE();
 8004eb2:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fb fa29 	bl	8000314 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ec4:	e009      	b.n	8004eda <HAL_RCCEx_EnablePLLSAI2+0xa6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec6:	f7fb fa25 	bl	8000314 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d902      	bls.n	8004eda <HAL_RCCEx_EnablePLLSAI2+0xa6>
      {
        status = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCCEx_EnablePLLSAI2+0xb2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCCEx_EnablePLLSAI2+0xbc>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ef      	beq.n	8004ec6 <HAL_RCCEx_EnablePLLSAI2+0x92>
      }
    }
  }

  return status;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	f9fd80ff 	.word	0xf9fd80ff

08004ef8 <HAL_RCCEx_DisablePLLSAI2>:
/**
  * @brief  Disable PLLISAI2.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI2(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	71fb      	strb	r3, [r7, #7]

  /* Disable the PLLSAI2 */
  __HAL_RCC_PLLSAI2_DISABLE();
 8004f02:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f04:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f0e:	f7fb fa01 	bl	8000314 <HAL_GetTick>
 8004f12:	6038      	str	r0, [r7, #0]

  /* Wait till PLLSAI2 is ready */
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f14:	e009      	b.n	8004f2a <HAL_RCCEx_DisablePLLSAI2+0x32>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f16:	f7fb f9fd 	bl	8000314 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d902      	bls.n	8004f2a <HAL_RCCEx_DisablePLLSAI2+0x32>
    {
      status = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	71fb      	strb	r3, [r7, #7]
      break;
 8004f28:	e005      	b.n	8004f36 <HAL_RCCEx_DisablePLLSAI2+0x3e>
  while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1ef      	bne.n	8004f16 <HAL_RCCEx_DisablePLLSAI2+0x1e>

  /* Disable the PLLSAI2 Clock outputs */
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2QEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
#else
  __HAL_RCC_PLLSAI2CLKOUT_DISABLE(RCC_PLLSAI2CFGR_PLLSAI2PEN|RCC_PLLSAI2CFGR_PLLSAI2REN);
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f44:	6153      	str	r3, [r2, #20]
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT && RCC_PLLSAI2Q_DIV_SUPPORT */

  /* Reset PLL source to save power if no PLLs on */
  if(READ_BIT(RCC->CR, (RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY)) == 0U)
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_RCCEx_DisablePLLSAI2+0x66>
  {
    MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_RCCEx_DisablePLLSAI2+0x70>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f023 0303 	bic.w	r3, r3, #3
 8004f5c:	60d3      	str	r3, [r2, #12]
  }

  return status;
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	608b      	str	r3, [r1, #8]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_RCCEx_StandbyMSIRangeConfig>:
  *            @arg @ref RCC_MSIRANGE_6  Range 6 around 4 MHz (reset value)
  *            @arg @ref RCC_MSIRANGE_7  Range 7 around 8 MHz
  * @retval None
  */
void HAL_RCCEx_StandbyMSIRangeConfig(uint32_t MSIRange)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_MSI_STANDBY_CLOCK_RANGE(MSIRange));

  __HAL_RCC_MSI_STANDBY_RANGE_CONFIG(MSIRange);
 8004f9c:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_RCCEx_StandbyMSIRangeConfig+0x2c>)
 8004fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004fc8:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <HAL_RCCEx_EnableLSECSS+0x20>)
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCCEx_EnableLSECSS+0x20>)
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disable the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004fec:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f023 0320 	bic.w	r3, r3, #32
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCCEx_DisableLSECSS+0x2c>)
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005006:	6193      	str	r3, [r2, #24]
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on RTC EXTI line 19
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800501c:	4a0f      	ldr	r2, [pc, #60]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005036:	6193      	str	r3, [r2, #24]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 8005038:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005042:	6013      	str	r3, [r2, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 8005044:	4a06      	ldr	r2, [pc, #24]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCCEx_EnableLSECSS_IT+0x48>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800504e:	6093      	str	r3, [r2, #8]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	40010400 	.word	0x40010400

08005064 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005074:	d105      	bne.n	8005082 <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {
    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
 8005076:	f000 f809 	bl	800508c <HAL_RCCEx_LSECSS_Callback>

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800507c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005080:	621a      	str	r2, [r3, #32]
  }
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b08a      	sub	sp, #40	; 0x28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FlagStatus       backupchanged = RESET;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 80050ae:	4a2d      	ldr	r2, [pc, #180]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050b0:	4b2c      	ldr	r3, [pc, #176]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

  /* Configue the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 80050c6:	2304      	movs	r3, #4
 80050c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ca:	2303      	movs	r3, #3
 80050cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e0:	f7fc fadc 	bl	800169c <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10e      	bne.n	800510e <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	; 0x58
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCCEx_EnableLSCO+0xce>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 800511a:	f7fc fe07 	bl	8001d2c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8005124:	490f      	ldr	r1, [pc, #60]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

  if(backupchanged == SET)
 800513c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 8005144:	f7fc fe02 	bl	8001d4c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 8005148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005152:	4b04      	ldr	r3, [pc, #16]	; (8005164 <HAL_RCCEx_EnableLSCO+0xca>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 800515c:	bf00      	nop
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_RCCEx_DisableLSCO>:
/**
  * @brief  Disable the Low Speed clock output.
  * @retval None
  */
void HAL_RCCEx_DisableLSCO(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  FlagStatus       pwrclkchanged = RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	71fb      	strb	r3, [r7, #7]
  FlagStatus       backupchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	71bb      	strb	r3, [r7, #6]

  /* Update LSCOEN bit in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_RCCEx_DisableLSCO+0x36>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 8005188:	4b18      	ldr	r3, [pc, #96]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	6593      	str	r3, [r2, #88]	; 0x58
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
    pwrclkchanged = SET;
 800519e:	2301      	movs	r3, #1
 80051a0:	71fb      	strb	r3, [r7, #7]
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_RCCEx_DisableLSCO+0x84>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <HAL_RCCEx_DisableLSCO+0x4a>
  {
    /* Enable access to the backup domain */
    HAL_PWR_EnableBkUpAccess();
 80051ae:	f7fc fdbd 	bl	8001d2c <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 80051b2:	2301      	movs	r3, #1
 80051b4:	71bb      	strb	r3, [r7, #6]
  }

  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSCOEN);
 80051b6:	4a0d      	ldr	r2, [pc, #52]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /* Restore previous configuration */
  if(backupchanged == SET)
 80051c6:	79bb      	ldrb	r3, [r7, #6]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_RCCEx_DisableLSCO+0x64>
  {
    /* Disable access to the backup domain */
    HAL_PWR_DisableBkUpAccess();
 80051cc:	f7fc fdbe 	bl	8001d4c <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_DisableLSCO+0x76>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCCEx_DisableLSCO+0x80>)
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000

080051f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051f8:	4a05      	ldr	r2, [pc, #20]	; (8005210 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6013      	str	r3, [r2, #0]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000

08005214 <HAL_RCCEx_DisableMSIPLLMode>:
  * @brief  Disable the PLL-mode of the MSI.
  * @note   PLL-mode of the MSI is automatically reset when LSE oscillator is disabled.
  * @retval None
  */
void HAL_RCCEx_DisableMSIPLLMode(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005218:	4a05      	ldr	r2, [pc, #20]	; (8005230 <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCCEx_DisableMSIPLLMode+0x1c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0304 	bic.w	r3, r3, #4
 8005222:	6013      	str	r3, [r2, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000

08005234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005242:	4b73      	ldr	r3, [pc, #460]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800524e:	4b70      	ldr	r3, [pc, #448]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0203 	and.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d10d      	bne.n	800527a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
       ||
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005266:	4b6a      	ldr	r3, [pc, #424]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
       ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d044      	beq.n	8005304 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	73fb      	strb	r3, [r7, #15]
 800527e:	e041      	b.n	8005304 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d00c      	beq.n	80052a2 <RCCEx_PLLSAI1_Config+0x6e>
 8005288:	2b03      	cmp	r3, #3
 800528a:	d013      	beq.n	80052b4 <RCCEx_PLLSAI1_Config+0x80>
 800528c:	2b01      	cmp	r3, #1
 800528e:	d120      	bne.n	80052d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005290:	4b5f      	ldr	r3, [pc, #380]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11d      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e01a      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052a2:	4b5b      	ldr	r3, [pc, #364]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d116      	bne.n	80052dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b2:	e013      	b.n	80052dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052b4:	4b56      	ldr	r3, [pc, #344]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10f      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052c0:	4b53      	ldr	r3, [pc, #332]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052d0:	e006      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
      break;
 80052d6:	e004      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80052d8:	bf00      	nop
 80052da:	e002      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80052e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10d      	bne.n	8005304 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052e8:	4849      	ldr	r0, [pc, #292]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ea:	4b49      	ldr	r3, [pc, #292]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	430b      	orrs	r3, r1
 8005300:	4313      	orrs	r3, r2
 8005302:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d17d      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800530a:	4a41      	ldr	r2, [pc, #260]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800530c:	4b40      	ldr	r3, [pc, #256]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005316:	f7fa fffd 	bl	8000314 <HAL_GetTick>
 800531a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800531c:	e009      	b.n	8005332 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800531e:	f7fa fff9 	bl	8000314 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d902      	bls.n	8005332 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	73fb      	strb	r3, [r7, #15]
        break;
 8005330:	e005      	b.n	800533e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005332:	4b37      	ldr	r3, [pc, #220]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ef      	bne.n	800531e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d160      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d111      	bne.n	800536e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800534a:	4831      	ldr	r0, [pc, #196]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800534c:	4b30      	ldr	r3, [pc, #192]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	0211      	lsls	r1, r2, #8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68d2      	ldr	r2, [r2, #12]
 8005362:	0912      	lsrs	r2, r2, #4
 8005364:	0452      	lsls	r2, r2, #17
 8005366:	430a      	orrs	r2, r1
 8005368:	4313      	orrs	r3, r2
 800536a:	6103      	str	r3, [r0, #16]
 800536c:	e027      	b.n	80053be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d112      	bne.n	800539a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005374:	4826      	ldr	r0, [pc, #152]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005376:	4b26      	ldr	r3, [pc, #152]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800537e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6892      	ldr	r2, [r2, #8]
 8005386:	0211      	lsls	r1, r2, #8
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6912      	ldr	r2, [r2, #16]
 800538c:	0852      	lsrs	r2, r2, #1
 800538e:	3a01      	subs	r2, #1
 8005390:	0552      	lsls	r2, r2, #21
 8005392:	430a      	orrs	r2, r1
 8005394:	4313      	orrs	r3, r2
 8005396:	6103      	str	r3, [r0, #16]
 8005398:	e011      	b.n	80053be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800539a:	481d      	ldr	r0, [pc, #116]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	0211      	lsls	r1, r2, #8
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6952      	ldr	r2, [r2, #20]
 80053b2:	0852      	lsrs	r2, r2, #1
 80053b4:	3a01      	subs	r2, #1
 80053b6:	0652      	lsls	r2, r2, #25
 80053b8:	430a      	orrs	r2, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053be:	4a14      	ldr	r2, [pc, #80]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ca:	f7fa ffa3 	bl	8000314 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d0:	e009      	b.n	80053e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d2:	f7fa ff9f 	bl	8000314 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d902      	bls.n	80053e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	73fb      	strb	r3, [r7, #15]
          break;
 80053e4:	e005      	b.n	80053f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0ef      	beq.n	80053d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053f8:	4905      	ldr	r1, [pc, #20]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005406:	7bfb      	ldrb	r3, [r7, #15]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000

08005414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005422:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d018      	beq.n	8005460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0203 	and.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d10d      	bne.n	800545a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
       ||
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
       ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d044      	beq.n	80054e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
 800545e:	e041      	b.n	80054e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d00c      	beq.n	8005482 <RCCEx_PLLSAI2_Config+0x6e>
 8005468:	2b03      	cmp	r3, #3
 800546a:	d013      	beq.n	8005494 <RCCEx_PLLSAI2_Config+0x80>
 800546c:	2b01      	cmp	r3, #1
 800546e:	d120      	bne.n	80054b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005470:	4b54      	ldr	r3, [pc, #336]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11d      	bne.n	80054b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005480:	e01a      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005482:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005492:	e013      	b.n	80054bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005494:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10f      	bne.n	80054c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054a0:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054b0:	e006      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
      break;
 80054b6:	e004      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80054c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054c8:	483e      	ldr	r0, [pc, #248]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ca:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	430b      	orrs	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d167      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054ea:	4a36      	ldr	r2, [pc, #216]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f6:	f7fa ff0d 	bl	8000314 <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054fc:	e009      	b.n	8005512 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054fe:	f7fa ff09 	bl	8000314 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d902      	bls.n	8005512 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	73fb      	strb	r3, [r7, #15]
        break;
 8005510:	e005      	b.n	800551e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005512:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ef      	bne.n	80054fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d14a      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d111      	bne.n	800554e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800552a:	4826      	ldr	r0, [pc, #152]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6892      	ldr	r2, [r2, #8]
 800553c:	0211      	lsls	r1, r2, #8
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68d2      	ldr	r2, [r2, #12]
 8005542:	0912      	lsrs	r2, r2, #4
 8005544:	0452      	lsls	r2, r2, #17
 8005546:	430a      	orrs	r2, r1
 8005548:	4313      	orrs	r3, r2
 800554a:	6143      	str	r3, [r0, #20]
 800554c:	e011      	b.n	8005572 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800554e:	481d      	ldr	r0, [pc, #116]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005550:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005558:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6892      	ldr	r2, [r2, #8]
 8005560:	0211      	lsls	r1, r2, #8
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6912      	ldr	r2, [r2, #16]
 8005566:	0852      	lsrs	r2, r2, #1
 8005568:	3a01      	subs	r2, #1
 800556a:	0652      	lsls	r2, r2, #25
 800556c:	430a      	orrs	r2, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005572:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fa fec9 	bl	8000314 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005584:	e009      	b.n	800559a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005586:	f7fa fec5 	bl	8000314 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d902      	bls.n	800559a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	73fb      	strb	r3, [r7, #15]
          break;
 8005598:	e005      	b.n	80055a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055ac:	4905      	ldr	r1, [pc, #20]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000

080055c8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e4:	d10c      	bne.n	8005600 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80055e6:	4b62      	ldr	r3, [pc, #392]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055f0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055f8:	d112      	bne.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055fa:	4b5e      	ldr	r3, [pc, #376]	; (8005774 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e00f      	b.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005606:	d10b      	bne.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005608:	4b59      	ldr	r3, [pc, #356]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005612:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800561a:	d101      	bne.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800561c:	4b55      	ldr	r3, [pc, #340]	; (8005774 <RCCEx_GetSAIxPeriphCLKFreq+0x1ac>)
 800561e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 809c 	bne.w	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
  {
    pllvco = InputFrequency;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005632:	d003      	beq.n	800563c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800563a:	d12d      	bne.n	8005698 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 808b 	beq.w	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800564a:	4b49      	ldr	r3, [pc, #292]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	3301      	adds	r3, #1
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	fbb2 f3f3 	udiv	r3, r2, r3
 800565c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800565e:	4b44      	ldr	r3, [pc, #272]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005668:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005670:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <RCCEx_GetSAIxPeriphCLKFreq+0xba>
          {
            pllp = 17U;
 800567c:	2311      	movs	r3, #17
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e001      	b.n	8005686 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          }
          else
          {
            pllp = 7U;
 8005682:	2307      	movs	r3, #7
 8005684:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	fb02 f203 	mul.w	r2, r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8005696:	e063      	b.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d12c      	bne.n	80056f8 <RCCEx_GetSAIxPeriphCLKFreq+0x130>
    {
      if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800569e:	4b34      	ldr	r3, [pc, #208]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d05a      	beq.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056aa:	4b31      	ldr	r3, [pc, #196]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	3301      	adds	r3, #1
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80056be:	4b2c      	ldr	r3, [pc, #176]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80056d0:	4b27      	ldr	r3, [pc, #156]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <RCCEx_GetSAIxPeriphCLKFreq+0x11a>
          {
            pllp = 17U;
 80056dc:	2311      	movs	r3, #17
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e001      	b.n	80056e6 <RCCEx_GetSAIxPeriphCLKFreq+0x11e>
          }
          else
          {
            pllp = 7U;
 80056e2:	2307      	movs	r3, #7
 80056e4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	fb02 f203 	mul.w	r2, r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e033      	b.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fe:	d003      	beq.n	8005708 <RCCEx_GetSAIxPeriphCLKFreq+0x140>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005706:	d12b      	bne.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
    {
      if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d025      	beq.n	8005760 <RCCEx_GetSAIxPeriphCLKFreq+0x198>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005714:	4b16      	ldr	r3, [pc, #88]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	3301      	adds	r3, #1
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	fbb2 f3f3 	udiv	r3, r2, r3
 8005726:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005732:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <RCCEx_GetSAIxPeriphCLKFreq+0x1a8>)
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <RCCEx_GetSAIxPeriphCLKFreq+0x184>
          {
            pllp = 17U;
 8005746:	2311      	movs	r3, #17
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	e001      	b.n	8005750 <RCCEx_GetSAIxPeriphCLKFreq+0x188>
          }
          else
          {
            pllp = 7U;
 800574c:	2307      	movs	r3, #7
 800574e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	fb02 f203 	mul.w	r2, r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	61fb      	str	r3, [r7, #28]
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005760:	69fb      	ldr	r3, [r7, #28]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3724      	adds	r7, #36	; 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000
 8005774:	001fff68 	.word	0x001fff68

08005778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e040      	b.n	800580c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f002 ff7a 	bl	8008694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fb39 	bl	8006e2e <UART_SetConfig>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e022      	b.n	800580c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fe68 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	6852      	ldr	r2, [r2, #4]
 80057de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 feef 	bl	80075e8 <UART_CheckIdleState>
 800580a:	4603      	mov	r3, r0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e048      	b.n	80058b8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f002 ff2c 	bl	8008694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2224      	movs	r2, #36	; 0x24
 8005840:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 faeb 	bl	8006e2e <UART_SetConfig>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02a      	b.n	80058b8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fe1a 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6812      	ldr	r2, [r2, #0]
 8005878:	6852      	ldr	r2, [r2, #4]
 800587a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	6892      	ldr	r2, [r2, #8]
 800588a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800588e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fe99 	bl	80075e8 <UART_CheckIdleState>
 80058b6:	4603      	mov	r3, r0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e05f      	b.n	8005994 <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058dc:	d101      	bne.n	80058e2 <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e058      	b.n	8005994 <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e052      	b.n	8005994 <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f002 fec8 	bl	8008694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	; 0x24
 8005908:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 fa87 	bl	8006e2e <UART_SetConfig>
 8005920:	4603      	mov	r3, r0
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_LIN_Init+0x6a>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e034      	b.n	8005994 <HAL_LIN_Init+0xd4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_LIN_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 fdb6 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	6852      	ldr	r2, [r2, #4]
 8005942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	6892      	ldr	r2, [r2, #8]
 8005952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005956:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	6852      	ldr	r2, [r2, #4]
 8005962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005966:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	6852      	ldr	r2, [r2, #4]
 8005972:	f022 0120 	bic.w	r1, r2, #32
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fe2b 	bl	80075e8 <UART_CheckIdleState>
 8005992:	4603      	mov	r3, r0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	460b      	mov	r3, r1
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e059      	b.n	8005a68 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f002 fe65 	bl	8008694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2224      	movs	r2, #36	; 0x24
 80059ce:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f001 fa24 	bl	8006e2e <UART_SetConfig>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e03b      	b.n	8005a68 <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f001 fd53 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	6852      	ldr	r2, [r2, #4]
 8005a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a1c:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	d10a      	bne.n	8005a3c <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	6852      	ldr	r2, [r2, #4]
 8005a30:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 8005a34:	7afa      	ldrb	r2, [r7, #11]
 8005a36:	0612      	lsls	r2, r2, #24
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f001 fdc1 	bl	80075e8 <UART_CheckIdleState>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e027      	b.n	8005ad2 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2224      	movs	r2, #36	; 0x24
 8005a86:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f002 fe95 	bl	80087e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	; 0x28
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	f040 8081 	bne.w	8005c1e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Transmit+0x26>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e079      	b.n	8005c20 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_UART_Transmit+0x38>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e072      	b.n	8005c20 <HAL_UART_Transmit+0x11e>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2221      	movs	r2, #33	; 0x21
 8005b4c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fa fbe1 	bl	8000314 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d108      	bne.n	8005b80 <HAL_UART_Transmit+0x7e>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e003      	b.n	8005b88 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b88:	e02d      	b.n	8005be6 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f001 fd6c 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e03d      	b.n	8005c20 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e008      	b.n	8005bd4 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	b292      	uxth	r2, r2
 8005bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1cb      	bne.n	8005b8a <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2140      	movs	r1, #64	; 0x40
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f001 fd38 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e009      	b.n	8005c20 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
  }
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	f040 80bb 	bne.w	8005db8 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_UART_Receive+0x26>
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0b3      	b.n	8005dba <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Receive+0x38>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e0ac      	b.n	8005dba <HAL_UART_Receive+0x192>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2222      	movs	r2, #34	; 0x22
 8005c72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c74:	f7fa fb4e 	bl	8000314 <HAL_GetTick>
 8005c78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	88fa      	ldrh	r2, [r7, #6]
 8005c86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c92:	d10e      	bne.n	8005cb2 <HAL_UART_Receive+0x8a>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_UART_Receive+0x80>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ca6:	e02d      	b.n	8005d04 <HAL_UART_Receive+0xdc>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	22ff      	movs	r2, #255	; 0xff
 8005cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb0:	e028      	b.n	8005d04 <HAL_UART_Receive+0xdc>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <HAL_UART_Receive+0xae>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <HAL_UART_Receive+0xa4>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	22ff      	movs	r2, #255	; 0xff
 8005cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cca:	e01b      	b.n	8005d04 <HAL_UART_Receive+0xdc>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	227f      	movs	r2, #127	; 0x7f
 8005cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd4:	e016      	b.n	8005d04 <HAL_UART_Receive+0xdc>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cde:	d10d      	bne.n	8005cfc <HAL_UART_Receive+0xd4>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_UART_Receive+0xca>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	227f      	movs	r2, #127	; 0x7f
 8005cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf0:	e008      	b.n	8005d04 <HAL_UART_Receive+0xdc>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	223f      	movs	r2, #63	; 0x3f
 8005cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cfa:	e003      	b.n	8005d04 <HAL_UART_Receive+0xdc>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d108      	bne.n	8005d28 <HAL_UART_Receive+0x100>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	e003      	b.n	8005d30 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d30:	e033      	b.n	8005d9a <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2120      	movs	r1, #32
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 fc98 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e036      	b.n	8005dba <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	8a7b      	ldrh	r3, [r7, #18]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	3302      	adds	r3, #2
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e00d      	b.n	8005d88 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	8a7b      	ldrh	r3, [r7, #18]
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1c5      	bne.n	8005d32 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d144      	bne.n	8005e62 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_UART_Transmit_IT+0x22>
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e03d      	b.n	8005e64 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Transmit_IT+0x34>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e036      	b.n	8005e64 <HAL_UART_Transmit_IT+0xa2>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	88fa      	ldrh	r2, [r7, #6]
 8005e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2221      	movs	r2, #33	; 0x21
 8005e24:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d107      	bne.n	8005e40 <HAL_UART_Transmit_IT+0x7e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <HAL_UART_Transmit_IT+0xae>)
 8005e3c:	665a      	str	r2, [r3, #100]	; 0x64
 8005e3e:	e002      	b.n	8005e46 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <HAL_UART_Transmit_IT+0xb2>)
 8005e44:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	08007ac1 	.word	0x08007ac1
 8005e74:	08007a4d 	.word	0x08007a4d

08005e78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	f040 808a 	bne.w	8005fa4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_Receive_IT+0x24>
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e082      	b.n	8005fa6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Receive_IT+0x36>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e07b      	b.n	8005fa6 <HAL_UART_Receive_IT+0x12e>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eda:	d10e      	bne.n	8005efa <HAL_UART_Receive_IT+0x82>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <HAL_UART_Receive_IT+0x78>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eee:	e02d      	b.n	8005f4c <HAL_UART_Receive_IT+0xd4>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22ff      	movs	r2, #255	; 0xff
 8005ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ef8:	e028      	b.n	8005f4c <HAL_UART_Receive_IT+0xd4>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10d      	bne.n	8005f1e <HAL_UART_Receive_IT+0xa6>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Receive_IT+0x9c>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f12:	e01b      	b.n	8005f4c <HAL_UART_Receive_IT+0xd4>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	227f      	movs	r2, #127	; 0x7f
 8005f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f1c:	e016      	b.n	8005f4c <HAL_UART_Receive_IT+0xd4>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f26:	d10d      	bne.n	8005f44 <HAL_UART_Receive_IT+0xcc>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d104      	bne.n	8005f3a <HAL_UART_Receive_IT+0xc2>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	227f      	movs	r2, #127	; 0x7f
 8005f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f38:	e008      	b.n	8005f4c <HAL_UART_Receive_IT+0xd4>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	223f      	movs	r2, #63	; 0x3f
 8005f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f42:	e003      	b.n	8005f4c <HAL_UART_Receive_IT+0xd4>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2222      	movs	r2, #34	; 0x22
 8005f56:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	6892      	ldr	r2, [r2, #8]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d107      	bne.n	8005f82 <HAL_UART_Receive_IT+0x10a>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a0d      	ldr	r2, [pc, #52]	; (8005fb4 <HAL_UART_Receive_IT+0x13c>)
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
 8005f80:	e002      	b.n	8005f88 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a0c      	ldr	r2, [pc, #48]	; (8005fb8 <HAL_UART_Receive_IT+0x140>)
 8005f86:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005f9e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	08007c19 	.word	0x08007c19
 8005fb8:	08007b6f 	.word	0x08007b6f

08005fbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d164      	bne.n	800609c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_UART_Transmit_DMA+0x22>
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e05d      	b.n	800609e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Transmit_DMA+0x34>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e056      	b.n	800609e <HAL_UART_Transmit_DMA+0xe2>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2221      	movs	r2, #33	; 0x21
 8006018:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601e:	2b00      	cmp	r3, #0
 8006020:	d02a      	beq.n	8006078 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006026:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <HAL_UART_Transmit_DMA+0xec>)
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602e:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_UART_Transmit_DMA+0xf0>)
 8006030:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_UART_Transmit_DMA+0xf4>)
 8006038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800603e:	2200      	movs	r2, #0
 8006040:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	4619      	mov	r1, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3328      	adds	r3, #40	; 0x28
 8006052:	461a      	mov	r2, r3
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	f7fb f802 	bl	800105e <HAL_DMA_Start_IT>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2210      	movs	r2, #16
 8006064:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e012      	b.n	800609e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	6892      	ldr	r2, [r2, #8]
 8006092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006096:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	0800776d 	.word	0x0800776d
 80060ac:	080077c1 	.word	0x080077c1
 80060b0:	08007861 	.word	0x08007861

080060b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d16c      	bne.n	80061a4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_UART_Receive_DMA+0x22>
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e065      	b.n	80061a6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Receive_DMA+0x34>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e05e      	b.n	80061a6 <HAL_UART_Receive_DMA+0xf2>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	88fa      	ldrh	r2, [r7, #6]
 80060fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2222      	movs	r2, #34	; 0x22
 8006108:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800610e:	2b00      	cmp	r3, #0
 8006110:	d02a      	beq.n	8006168 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <HAL_UART_Receive_DMA+0xfc>)
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <HAL_UART_Receive_DMA+0x100>)
 8006120:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006126:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <HAL_UART_Receive_DMA+0x104>)
 8006128:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612e:	2200      	movs	r2, #0
 8006130:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3324      	adds	r3, #36	; 0x24
 800613c:	4619      	mov	r1, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	461a      	mov	r2, r3
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	f7fa ff8a 	bl	800105e <HAL_DMA_Start_IT>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2210      	movs	r2, #16
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e01e      	b.n	80061a6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	6892      	ldr	r2, [r2, #8]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	6892      	ldr	r2, [r2, #8]
 800619a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	080077dd 	.word	0x080077dd
 80061b4:	08007845 	.word	0x08007845
 80061b8:	08007861 	.word	0x08007861

080061bc <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ce:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_UART_DMAPause+0x22>
 80061da:	2302      	movs	r3, #2
 80061dc:	e03c      	b.n	8006258 <HAL_UART_DMAPause+0x9c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f0:	2b80      	cmp	r3, #128	; 0x80
 80061f2:	d10a      	bne.n	800620a <HAL_UART_DMAPause+0x4e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b21      	cmp	r3, #33	; 0x21
 80061f8:	d107      	bne.n	800620a <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	6892      	ldr	r2, [r2, #8]
 8006204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006208:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d11a      	bne.n	800624e <HAL_UART_DMAPause+0x92>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b22      	cmp	r3, #34	; 0x22
 800621c:	d117      	bne.n	800624e <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	6892      	ldr	r2, [r2, #8]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	6892      	ldr	r2, [r2, #8]
 8006248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624c:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_UART_DMAResume+0x16>
 8006276:	2302      	movs	r3, #2
 8006278:	e034      	b.n	80062e4 <HAL_UART_DMAResume+0x80>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006286:	2b21      	cmp	r3, #33	; 0x21
 8006288:	d107      	bne.n	800629a <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	6892      	ldr	r2, [r2, #8]
 8006294:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006298:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629e:	2b22      	cmp	r3, #34	; 0x22
 80062a0:	d11b      	bne.n	80062da <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2208      	movs	r2, #8
 80062a8:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6812      	ldr	r2, [r2, #0]
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	6892      	ldr	r2, [r2, #8]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6892      	ldr	r2, [r2, #8]
 80062d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d8:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fc:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006302:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d126      	bne.n	8006360 <HAL_UART_DMAStop+0x70>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b21      	cmp	r3, #33	; 0x21
 8006316:	d123      	bne.n	8006360 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	6892      	ldr	r2, [r2, #8]
 8006322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006326:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632c:	2b00      	cmp	r3, #0
 800632e:	d014      	beq.n	800635a <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006334:	4618      	mov	r0, r3
 8006336:	f7fa fef2 	bl	800111e <HAL_DMA_Abort>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00c      	beq.n	800635a <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006344:	4618      	mov	r0, r3
 8006346:	f7fb f96d 	bl	8001624 <HAL_DMA_GetError>
 800634a:	4603      	mov	r3, r0
 800634c:	2b20      	cmp	r3, #32
 800634e:	d104      	bne.n	800635a <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2210      	movs	r2, #16
 8006354:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e031      	b.n	80063be <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 f9d1 	bl	8007702 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d126      	bne.n	80063bc <HAL_UART_DMAStop+0xcc>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b22      	cmp	r3, #34	; 0x22
 8006372:	d123      	bne.n	80063bc <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	6892      	ldr	r2, [r2, #8]
 800637e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006382:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d014      	beq.n	80063b6 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006390:	4618      	mov	r0, r3
 8006392:	f7fa fec4 	bl	800111e <HAL_DMA_Abort>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fb f93f 	bl	8001624 <HAL_DMA_GetError>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d104      	bne.n	80063b6 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2210      	movs	r2, #16
 80063b0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e003      	b.n	80063be <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f9b8 	bl	800772c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80063dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	6892      	ldr	r2, [r2, #8]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d124      	bne.n	8006446 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	6892      	ldr	r2, [r2, #8]
 8006406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800640a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	2b00      	cmp	r3, #0
 8006412:	d018      	beq.n	8006446 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006418:	2200      	movs	r2, #0
 800641a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006420:	4618      	mov	r0, r3
 8006422:	f7fa fe7c 	bl	800111e <HAL_DMA_Abort>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006430:	4618      	mov	r0, r3
 8006432:	f7fb f8f7 	bl	8001624 <HAL_DMA_GetError>
 8006436:	4603      	mov	r3, r0
 8006438:	2b20      	cmp	r3, #32
 800643a:	d104      	bne.n	8006446 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2210      	movs	r2, #16
 8006440:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e04b      	b.n	80064de <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006450:	2b40      	cmp	r3, #64	; 0x40
 8006452:	d124      	bne.n	800649e <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	6892      	ldr	r2, [r2, #8]
 800645e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006462:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d018      	beq.n	800649e <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006470:	2200      	movs	r2, #0
 8006472:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006478:	4618      	mov	r0, r3
 800647a:	f7fa fe50 	bl	800111e <HAL_DMA_Abort>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006488:	4618      	mov	r0, r3
 800648a:	f7fb f8cb 	bl	8001624 <HAL_DMA_GetError>
 800648e:	4603      	mov	r3, r0
 8006490:	2b20      	cmp	r3, #32
 8006492:	d104      	bne.n	800649e <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2210      	movs	r2, #16
 8006498:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e01f      	b.n	80064de <HAL_UART_Abort+0x118>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	220f      	movs	r2, #15
 80064b4:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	8b12      	ldrh	r2, [r2, #24]
 80064c0:	b292      	uxth	r2, r2
 80064c2:	f042 0208 	orr.w	r2, r2, #8
 80064c6:	b292      	uxth	r2, r2
 80064c8:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	679a      	str	r2, [r3, #120]	; 0x78

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	67da      	str	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	d124      	bne.n	8006556 <HAL_UART_AbortTransmit+0x70>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	6892      	ldr	r2, [r2, #8]
 8006516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800651a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006520:	2b00      	cmp	r3, #0
 8006522:	d018      	beq.n	8006556 <HAL_UART_AbortTransmit+0x70>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006528:	2200      	movs	r2, #0
 800652a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006530:	4618      	mov	r0, r3
 8006532:	f7fa fdf4 	bl	800111e <HAL_DMA_Abort>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_UART_AbortTransmit+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006540:	4618      	mov	r0, r3
 8006542:	f7fb f86f 	bl	8001624 <HAL_DMA_GetError>
 8006546:	4603      	mov	r3, r0
 8006548:	2b20      	cmp	r3, #32
 800654a:	d104      	bne.n	8006556 <HAL_UART_AbortTransmit+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2210      	movs	r2, #16
 8006550:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e007      	b.n	8006566 <HAL_UART_AbortTransmit+0x80>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006584:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	6892      	ldr	r2, [r2, #8]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d124      	bne.n	80065ee <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	6892      	ldr	r2, [r2, #8]
 80065ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d018      	beq.n	80065ee <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c0:	2200      	movs	r2, #0
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fa fda8 	bl	800111e <HAL_DMA_Abort>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fb f823 	bl	8001624 <HAL_DMA_GetError>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d104      	bne.n	80065ee <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2210      	movs	r2, #16
 80065e8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e015      	b.n	800661a <HAL_UART_AbortReceive+0xac>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	220f      	movs	r2, #15
 80065fc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	8b12      	ldrh	r2, [r2, #24]
 8006608:	b292      	uxth	r2, r2
 800660a:	f042 0208 	orr.w	r2, r2, #8
 800660e:	b292      	uxth	r2, r2
 8006610:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800662a:	2301      	movs	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800663c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	6892      	ldr	r2, [r2, #8]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00f      	beq.n	8006676 <HAL_UART_Abort_IT+0x54>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d104      	bne.n	800666e <HAL_UART_Abort_IT+0x4c>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006668:	4a48      	ldr	r2, [pc, #288]	; (800678c <HAL_UART_Abort_IT+0x16a>)
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
 800666c:	e003      	b.n	8006676 <HAL_UART_Abort_IT+0x54>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006672:	2200      	movs	r2, #0
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00f      	beq.n	800669e <HAL_UART_Abort_IT+0x7c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d104      	bne.n	8006696 <HAL_UART_Abort_IT+0x74>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006690:	4a3f      	ldr	r2, [pc, #252]	; (8006790 <HAL_UART_Abort_IT+0x16e>)
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
 8006694:	e003      	b.n	800669e <HAL_UART_Abort_IT+0x7c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669a:	2200      	movs	r2, #0
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d11a      	bne.n	80066e2 <HAL_UART_Abort_IT+0xc0>
  {
    /* Disable DMA Tx at UART level */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	6892      	ldr	r2, [r2, #8]
 80066b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ba:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <HAL_UART_Abort_IT+0xc0>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fa fd66 	bl	800119a <HAL_DMA_Abort_IT>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <HAL_UART_Abort_IT+0xbc>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d8:	2200      	movs	r2, #0
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
 80066dc:	e001      	b.n	80066e2 <HAL_UART_Abort_IT+0xc0>
      }
      else
      {
        abortcplt = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d11c      	bne.n	800672a <HAL_UART_Abort_IT+0x108>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	6892      	ldr	r2, [r2, #8]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fe:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d010      	beq.n	800672a <HAL_UART_Abort_IT+0x108>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670c:	4618      	mov	r0, r3
 800670e:	f7fa fd44 	bl	800119a <HAL_DMA_Abort_IT>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d006      	beq.n	8006726 <HAL_UART_Abort_IT+0x104>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671c:	2200      	movs	r2, #0
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8006720:	2301      	movs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e001      	b.n	800672a <HAL_UART_Abort_IT+0x108>
      }
      else
      {
        abortcplt = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d127      	bne.n	8006780 <HAL_UART_Abort_IT+0x15e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	661a      	str	r2, [r3, #96]	; 0x60
    huart->TxISR = NULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	220f      	movs	r2, #15
 8006758:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	8b12      	ldrh	r2, [r2, #24]
 8006764:	b292      	uxth	r2, r2
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	b292      	uxth	r2, r2
 800676c:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	675a      	str	r2, [r3, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa32 	bl	8006be4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	08007905 	.word	0x08007905
 8006790:	08007967 	.word	0x08007967

08006794 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067aa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d12d      	bne.n	8006816 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6892      	ldr	r2, [r2, #8]
 80067c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c8:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d013      	beq.n	80067fa <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d6:	4a19      	ldr	r2, [pc, #100]	; (800683c <HAL_UART_AbortTransmit_IT+0xa8>)
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fa fcdb 	bl	800119a <HAL_DMA_Abort_IT>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d022      	beq.n	8006830 <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	e01a      	b.n	8006830 <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9f2 	bl	8006bf8 <HAL_UART_AbortTransmitCpltCallback>
 8006814:	e00c      	b.n	8006830 <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9e4 	bl	8006bf8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	080079dd 	.word	0x080079dd

08006840 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006856:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	6892      	ldr	r2, [r2, #8]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d13b      	bne.n	80068ee <HAL_UART_AbortReceive_IT+0xae>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	6892      	ldr	r2, [r2, #8]
 8006880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006884:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d013      	beq.n	80068b6 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006892:	4a22      	ldr	r2, [pc, #136]	; (800691c <HAL_UART_AbortReceive_IT+0xdc>)
 8006894:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689a:	4618      	mov	r0, r3
 800689c:	f7fa fc7d 	bl	800119a <HAL_DMA_Abort_IT>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d034      	beq.n	8006910 <HAL_UART_AbortReceive_IT+0xd0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	e02c      	b.n	8006910 <HAL_UART_AbortReceive_IT+0xd0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	220f      	movs	r2, #15
 80068ca:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	8b12      	ldrh	r2, [r2, #24]
 80068d6:	b292      	uxth	r2, r2
 80068d8:	f042 0208 	orr.w	r2, r2, #8
 80068dc:	b292      	uxth	r2, r2
 80068de:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f990 	bl	8006c0c <HAL_UART_AbortReceiveCpltCallback>
 80068ec:	e010      	b.n	8006910 <HAL_UART_AbortReceive_IT+0xd0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	220f      	movs	r2, #15
 8006902:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f97e 	bl	8006c0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	08007a07 	.word	0x08007a07

08006920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d113      	bne.n	8006976 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00e      	beq.n	8006976 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 80ff 	beq.w	8006b6a <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
      }
      return;
 8006974:	e0f9      	b.n	8006b6a <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80c1 	beq.w	8006b00 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d105      	bne.n	8006994 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80b6 	beq.w	8006b00 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <HAL_UART_IRQHandler+0x9c>
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b4:	f043 0201 	orr.w	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00e      	beq.n	80069e4 <HAL_UART_IRQHandler+0xc4>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2202      	movs	r2, #2
 80069d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069dc:	f043 0204 	orr.w	r2, r3, #4
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00e      	beq.n	8006a0c <HAL_UART_IRQHandler+0xec>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d009      	beq.n	8006a0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2204      	movs	r2, #4
 80069fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a04:	f043 0202 	orr.w	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d013      	beq.n	8006a3e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2208      	movs	r2, #8
 8006a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a36:	f043 0208 	orr.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8093 	beq.w	8006b6e <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d004      	beq.n	8006a8a <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d031      	beq.n	8006aee <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fe4e 	bl	800772c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d123      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	6892      	ldr	r2, [r2, #8]
 8006aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d013      	beq.n	8006ade <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aba:	4a30      	ldr	r2, [pc, #192]	; (8006b7c <HAL_UART_IRQHandler+0x25c>)
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fa fb69 	bl	800119a <HAL_DMA_Abort_IT>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	e00e      	b.n	8006afc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f876 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	e00a      	b.n	8006afc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f872 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	e006      	b.n	8006afc <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f86e 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006afa:	e038      	b.n	8006b6e <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	bf00      	nop
    return;
 8006afe:	e036      	b.n	8006b6e <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <HAL_UART_IRQHandler+0x206>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 f937 	bl	8007d92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b24:	e026      	b.n	8006b74 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00d      	beq.n	8006b4c <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d017      	beq.n	8006b72 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
    }
    return;
 8006b4a:	e012      	b.n	8006b72 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00e      	beq.n	8006b74 <HAL_UART_IRQHandler+0x254>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 ffeb 	bl	8007b3c <UART_EndTransmit_IT>
    return;
 8006b66:	bf00      	nop
 8006b68:	e004      	b.n	8006b74 <HAL_UART_IRQHandler+0x254>
      return;
 8006b6a:	bf00      	nop
 8006b6c:	e002      	b.n	8006b74 <HAL_UART_IRQHandler+0x254>
    return;
 8006b6e:	bf00      	nop
 8006b70:	e000      	b.n	8006b74 <HAL_UART_IRQHandler+0x254>
    return;
 8006b72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	080078d9 	.word	0x080078d9

08006b80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_MultiProcessor_EnableMuteMode>:
  *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_MultiProcessor_EnableMuteMode+0x16>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e015      	b.n	8006c62 <HAL_MultiProcessor_EnableMuteMode+0x42>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	; 0x24
 8006c42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Enable USART mute mode by setting the MME bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	675a      	str	r2, [r3, #116]	; 0x74

  return (UART_CheckIdleState(huart));
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fcc4 	bl	80075e8 <UART_CheckIdleState>
 8006c60:	4603      	mov	r3, r0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_MultiProcessor_DisableMuteMode>:
  *         as it may not have been in mute mode at this very moment).
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_MultiProcessor_DisableMuteMode+0x16>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e015      	b.n	8006cac <HAL_MultiProcessor_DisableMuteMode+0x42>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable USART mute mode by clearing the MME bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	675a      	str	r2, [r3, #116]	; 0x74

  return (UART_CheckIdleState(huart));
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc9f 	bl	80075e8 <UART_CheckIdleState>
 8006caa:	4603      	mov	r3, r0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_MultiProcessor_EnterMuteMode>:
  * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
  * @param huart UART handle.
  * @retval None
  */
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	8b12      	ldrh	r2, [r2, #24]
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	f042 0204 	orr.w	r2, r2, #4
 8006ccc:	b292      	uxth	r2, r2
 8006cce:	831a      	strh	r2, [r3, #24]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e01e      	b.n	8006d30 <HAL_HalfDuplex_EnableTransmitter+0x54>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2224      	movs	r2, #36	; 0x24
 8006cfe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clear TE and RE bits */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	f022 020c 	bic.w	r2, r2, #12
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	f042 0208 	orr.w	r2, r2, #8
 8006d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UNLOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_HalfDuplex_EnableReceiver+0x16>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e01e      	b.n	8006d90 <HAL_HalfDuplex_EnableReceiver+0x54>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  huart->gState = HAL_UART_STATE_BUSY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2224      	movs	r2, #36	; 0x24
 8006d5e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Clear TE and RE bits */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	f022 020c 	bic.w	r2, r2, #12
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	f042 0204 	orr.w	r2, r2, #4
 8006d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UNLOCK(huart);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_LIN_SendBreak>:
  * @brief  Transmit break characters.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));

  __HAL_LOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_LIN_SendBreak+0x16>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e018      	b.n	8006de4 <HAL_LIN_SendBreak+0x48>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2224      	movs	r2, #36	; 0x24
 8006dbe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Send break characters */
  __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6812      	ldr	r2, [r2, #0]
 8006dc8:	8b12      	ldrh	r2, [r2, #24]
 8006dca:	b292      	uxth	r2, r2
 8006dcc:	f042 0202 	orr.w	r2, r2, #2
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	831a      	strh	r2, [r3, #24]

  huart->gState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UNLOCK(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e02:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4313      	orrs	r3, r2
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e2e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6819      	ldr	r1, [r3, #0]
 8006e66:	4bac      	ldr	r3, [pc, #688]	; (8007118 <UART_SetConfig+0x2ea>)
 8006e68:	400b      	ands	r3, r1
 8006e6a:	69f9      	ldr	r1, [r7, #28]
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	6852      	ldr	r2, [r2, #4]
 8006e7a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	68d2      	ldr	r2, [r2, #12]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4aa2      	ldr	r2, [pc, #648]	; (800711c <UART_SetConfig+0x2ee>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	6892      	ldr	r2, [r2, #8]
 8006eaa:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a99      	ldr	r2, [pc, #612]	; (8007120 <UART_SetConfig+0x2f2>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d122      	bne.n	8006f04 <UART_SetConfig+0xd6>
 8006ebe:	4b99      	ldr	r3, [pc, #612]	; (8007124 <UART_SetConfig+0x2f6>)
 8006ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d817      	bhi.n	8006efc <UART_SetConfig+0xce>
 8006ecc:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <UART_SetConfig+0xa6>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006ee5 	.word	0x08006ee5
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006eeb 	.word	0x08006eeb
 8006ee0:	08006ef7 	.word	0x08006ef7
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	76fb      	strb	r3, [r7, #27]
 8006ee8:	e0e8      	b.n	80070bc <UART_SetConfig+0x28e>
 8006eea:	2302      	movs	r3, #2
 8006eec:	76fb      	strb	r3, [r7, #27]
 8006eee:	e0e5      	b.n	80070bc <UART_SetConfig+0x28e>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	76fb      	strb	r3, [r7, #27]
 8006ef4:	e0e2      	b.n	80070bc <UART_SetConfig+0x28e>
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	76fb      	strb	r3, [r7, #27]
 8006efa:	e0df      	b.n	80070bc <UART_SetConfig+0x28e>
 8006efc:	2310      	movs	r3, #16
 8006efe:	76fb      	strb	r3, [r7, #27]
 8006f00:	bf00      	nop
 8006f02:	e0db      	b.n	80070bc <UART_SetConfig+0x28e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a87      	ldr	r2, [pc, #540]	; (8007128 <UART_SetConfig+0x2fa>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d134      	bne.n	8006f78 <UART_SetConfig+0x14a>
 8006f0e:	4b85      	ldr	r3, [pc, #532]	; (8007124 <UART_SetConfig+0x2f6>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f14:	f003 030c 	and.w	r3, r3, #12
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d829      	bhi.n	8006f70 <UART_SetConfig+0x142>
 8006f1c:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <UART_SetConfig+0xf6>)
 8006f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f22:	bf00      	nop
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006f71 	.word	0x08006f71
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f71 	.word	0x08006f71
 8006f34:	08006f65 	.word	0x08006f65
 8006f38:	08006f71 	.word	0x08006f71
 8006f3c:	08006f71 	.word	0x08006f71
 8006f40:	08006f71 	.word	0x08006f71
 8006f44:	08006f5f 	.word	0x08006f5f
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f71 	.word	0x08006f71
 8006f54:	08006f6b 	.word	0x08006f6b
 8006f58:	2300      	movs	r3, #0
 8006f5a:	76fb      	strb	r3, [r7, #27]
 8006f5c:	e0ae      	b.n	80070bc <UART_SetConfig+0x28e>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	76fb      	strb	r3, [r7, #27]
 8006f62:	e0ab      	b.n	80070bc <UART_SetConfig+0x28e>
 8006f64:	2304      	movs	r3, #4
 8006f66:	76fb      	strb	r3, [r7, #27]
 8006f68:	e0a8      	b.n	80070bc <UART_SetConfig+0x28e>
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	76fb      	strb	r3, [r7, #27]
 8006f6e:	e0a5      	b.n	80070bc <UART_SetConfig+0x28e>
 8006f70:	2310      	movs	r3, #16
 8006f72:	76fb      	strb	r3, [r7, #27]
 8006f74:	bf00      	nop
 8006f76:	e0a1      	b.n	80070bc <UART_SetConfig+0x28e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6b      	ldr	r2, [pc, #428]	; (800712c <UART_SetConfig+0x2fe>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d120      	bne.n	8006fc4 <UART_SetConfig+0x196>
 8006f82:	4b68      	ldr	r3, [pc, #416]	; (8007124 <UART_SetConfig+0x2f6>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d00f      	beq.n	8006fb0 <UART_SetConfig+0x182>
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d802      	bhi.n	8006f9a <UART_SetConfig+0x16c>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <UART_SetConfig+0x176>
 8006f98:	e010      	b.n	8006fbc <UART_SetConfig+0x18e>
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d005      	beq.n	8006faa <UART_SetConfig+0x17c>
 8006f9e:	2b30      	cmp	r3, #48	; 0x30
 8006fa0:	d009      	beq.n	8006fb6 <UART_SetConfig+0x188>
 8006fa2:	e00b      	b.n	8006fbc <UART_SetConfig+0x18e>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	76fb      	strb	r3, [r7, #27]
 8006fa8:	e088      	b.n	80070bc <UART_SetConfig+0x28e>
 8006faa:	2302      	movs	r3, #2
 8006fac:	76fb      	strb	r3, [r7, #27]
 8006fae:	e085      	b.n	80070bc <UART_SetConfig+0x28e>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	76fb      	strb	r3, [r7, #27]
 8006fb4:	e082      	b.n	80070bc <UART_SetConfig+0x28e>
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	76fb      	strb	r3, [r7, #27]
 8006fba:	e07f      	b.n	80070bc <UART_SetConfig+0x28e>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	76fb      	strb	r3, [r7, #27]
 8006fc0:	bf00      	nop
 8006fc2:	e07b      	b.n	80070bc <UART_SetConfig+0x28e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a59      	ldr	r2, [pc, #356]	; (8007130 <UART_SetConfig+0x302>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d120      	bne.n	8007010 <UART_SetConfig+0x1e2>
 8006fce:	4b55      	ldr	r3, [pc, #340]	; (8007124 <UART_SetConfig+0x2f6>)
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d00f      	beq.n	8006ffc <UART_SetConfig+0x1ce>
 8006fdc:	2b40      	cmp	r3, #64	; 0x40
 8006fde:	d802      	bhi.n	8006fe6 <UART_SetConfig+0x1b8>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <UART_SetConfig+0x1c2>
 8006fe4:	e010      	b.n	8007008 <UART_SetConfig+0x1da>
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d005      	beq.n	8006ff6 <UART_SetConfig+0x1c8>
 8006fea:	2bc0      	cmp	r3, #192	; 0xc0
 8006fec:	d009      	beq.n	8007002 <UART_SetConfig+0x1d4>
 8006fee:	e00b      	b.n	8007008 <UART_SetConfig+0x1da>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	76fb      	strb	r3, [r7, #27]
 8006ff4:	e062      	b.n	80070bc <UART_SetConfig+0x28e>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	76fb      	strb	r3, [r7, #27]
 8006ffa:	e05f      	b.n	80070bc <UART_SetConfig+0x28e>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	76fb      	strb	r3, [r7, #27]
 8007000:	e05c      	b.n	80070bc <UART_SetConfig+0x28e>
 8007002:	2308      	movs	r3, #8
 8007004:	76fb      	strb	r3, [r7, #27]
 8007006:	e059      	b.n	80070bc <UART_SetConfig+0x28e>
 8007008:	2310      	movs	r3, #16
 800700a:	76fb      	strb	r3, [r7, #27]
 800700c:	bf00      	nop
 800700e:	e055      	b.n	80070bc <UART_SetConfig+0x28e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a47      	ldr	r2, [pc, #284]	; (8007134 <UART_SetConfig+0x306>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d124      	bne.n	8007064 <UART_SetConfig+0x236>
 800701a:	4b42      	ldr	r3, [pc, #264]	; (8007124 <UART_SetConfig+0x2f6>)
 800701c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007028:	d012      	beq.n	8007050 <UART_SetConfig+0x222>
 800702a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702e:	d802      	bhi.n	8007036 <UART_SetConfig+0x208>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <UART_SetConfig+0x216>
 8007034:	e012      	b.n	800705c <UART_SetConfig+0x22e>
 8007036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703a:	d006      	beq.n	800704a <UART_SetConfig+0x21c>
 800703c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007040:	d009      	beq.n	8007056 <UART_SetConfig+0x228>
 8007042:	e00b      	b.n	800705c <UART_SetConfig+0x22e>
 8007044:	2300      	movs	r3, #0
 8007046:	76fb      	strb	r3, [r7, #27]
 8007048:	e038      	b.n	80070bc <UART_SetConfig+0x28e>
 800704a:	2302      	movs	r3, #2
 800704c:	76fb      	strb	r3, [r7, #27]
 800704e:	e035      	b.n	80070bc <UART_SetConfig+0x28e>
 8007050:	2304      	movs	r3, #4
 8007052:	76fb      	strb	r3, [r7, #27]
 8007054:	e032      	b.n	80070bc <UART_SetConfig+0x28e>
 8007056:	2308      	movs	r3, #8
 8007058:	76fb      	strb	r3, [r7, #27]
 800705a:	e02f      	b.n	80070bc <UART_SetConfig+0x28e>
 800705c:	2310      	movs	r3, #16
 800705e:	76fb      	strb	r3, [r7, #27]
 8007060:	bf00      	nop
 8007062:	e02b      	b.n	80070bc <UART_SetConfig+0x28e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a2c      	ldr	r2, [pc, #176]	; (800711c <UART_SetConfig+0x2ee>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d124      	bne.n	80070b8 <UART_SetConfig+0x28a>
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <UART_SetConfig+0x2f6>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707c:	d012      	beq.n	80070a4 <UART_SetConfig+0x276>
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007082:	d802      	bhi.n	800708a <UART_SetConfig+0x25c>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <UART_SetConfig+0x26a>
 8007088:	e012      	b.n	80070b0 <UART_SetConfig+0x282>
 800708a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708e:	d006      	beq.n	800709e <UART_SetConfig+0x270>
 8007090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007094:	d009      	beq.n	80070aa <UART_SetConfig+0x27c>
 8007096:	e00b      	b.n	80070b0 <UART_SetConfig+0x282>
 8007098:	2300      	movs	r3, #0
 800709a:	76fb      	strb	r3, [r7, #27]
 800709c:	e00e      	b.n	80070bc <UART_SetConfig+0x28e>
 800709e:	2302      	movs	r3, #2
 80070a0:	76fb      	strb	r3, [r7, #27]
 80070a2:	e00b      	b.n	80070bc <UART_SetConfig+0x28e>
 80070a4:	2304      	movs	r3, #4
 80070a6:	76fb      	strb	r3, [r7, #27]
 80070a8:	e008      	b.n	80070bc <UART_SetConfig+0x28e>
 80070aa:	2308      	movs	r3, #8
 80070ac:	76fb      	strb	r3, [r7, #27]
 80070ae:	e005      	b.n	80070bc <UART_SetConfig+0x28e>
 80070b0:	2310      	movs	r3, #16
 80070b2:	76fb      	strb	r3, [r7, #27]
 80070b4:	bf00      	nop
 80070b6:	e001      	b.n	80070bc <UART_SetConfig+0x28e>
 80070b8:	2310      	movs	r3, #16
 80070ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a16      	ldr	r2, [pc, #88]	; (800711c <UART_SetConfig+0x2ee>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f040 80ed 	bne.w	80072a2 <UART_SetConfig+0x474>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c8:	7efb      	ldrb	r3, [r7, #27]
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d836      	bhi.n	800713c <UART_SetConfig+0x30e>
 80070ce:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <UART_SetConfig+0x2a6>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	0800713d 	.word	0x0800713d
 80070dc:	08007101 	.word	0x08007101
 80070e0:	0800713d 	.word	0x0800713d
 80070e4:	08007107 	.word	0x08007107
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	0800713d 	.word	0x0800713d
 80070f0:	0800713d 	.word	0x0800713d
 80070f4:	0800710f 	.word	0x0800710f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80070f8:	f7fc fbfc 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80070fc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80070fe:	e020      	b.n	8007142 <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007100:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <UART_SetConfig+0x30a>)
 8007102:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007104:	e01d      	b.n	8007142 <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007106:	f7fc fb5f 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800710a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800710c:	e019      	b.n	8007142 <UART_SetConfig+0x314>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800710e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007112:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007114:	e015      	b.n	8007142 <UART_SetConfig+0x314>
 8007116:	bf00      	nop
 8007118:	efff69f3 	.word	0xefff69f3
 800711c:	40008000 	.word	0x40008000
 8007120:	40013800 	.word	0x40013800
 8007124:	40021000 	.word	0x40021000
 8007128:	40004400 	.word	0x40004400
 800712c:	40004800 	.word	0x40004800
 8007130:	40004c00 	.word	0x40004c00
 8007134:	40005000 	.word	0x40005000
 8007138:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	74fb      	strb	r3, [r7, #19]
        break;
 8007140:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 819e 	beq.w	8007486 <UART_SetConfig+0x658>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	441a      	add	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	429a      	cmp	r2, r3
 8007158:	d805      	bhi.n	8007166 <UART_SetConfig+0x338>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	429a      	cmp	r2, r3
 8007164:	d202      	bcs.n	800716c <UART_SetConfig+0x33e>
      {
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	74fb      	strb	r3, [r7, #19]
 800716a:	e18c      	b.n	8007486 <UART_SetConfig+0x658>
      }
      else
      {
        switch (clocksource)
 800716c:	7efb      	ldrb	r3, [r7, #27]
 800716e:	2b08      	cmp	r3, #8
 8007170:	f200 8084 	bhi.w	800727c <UART_SetConfig+0x44e>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0x34e>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	080071a1 	.word	0x080071a1
 8007180:	0800727d 	.word	0x0800727d
 8007184:	080071e1 	.word	0x080071e1
 8007188:	0800727d 	.word	0x0800727d
 800718c:	08007215 	.word	0x08007215
 8007190:	0800727d 	.word	0x0800727d
 8007194:	0800727d 	.word	0x0800727d
 8007198:	0800727d 	.word	0x0800727d
 800719c:	08007253 	.word	0x08007253
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80071a0:	f7fc fba8 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f04f 0400 	mov.w	r4, #0
 80071aa:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80071ae:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80071b2:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	eb18 0003 	adds.w	r0, r8, r3
 80071c4:	eb49 0104 	adc.w	r1, r9, r4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f04f 0400 	mov.w	r4, #0
 80071d0:	461a      	mov	r2, r3
 80071d2:	4623      	mov	r3, r4
 80071d4:	f001 fc76 	bl	8008ac4 <__aeabi_uldivmod>
 80071d8:	4603      	mov	r3, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80071de:	e050      	b.n	8007282 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	f04f 0400 	mov.w	r4, #0
 80071ea:	49ad      	ldr	r1, [pc, #692]	; (80074a0 <UART_SetConfig+0x672>)
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	eb13 0801 	adds.w	r8, r3, r1
 80071f4:	eb44 0902 	adc.w	r9, r4, r2
 80071f8:	4640      	mov	r0, r8
 80071fa:	4649      	mov	r1, r9
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f04f 0400 	mov.w	r4, #0
 8007204:	461a      	mov	r2, r3
 8007206:	4623      	mov	r3, r4
 8007208:	f001 fc5c 	bl	8008ac4 <__aeabi_uldivmod>
 800720c:	4603      	mov	r3, r0
 800720e:	460c      	mov	r4, r1
 8007210:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007212:	e036      	b.n	8007282 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007214:	f7fc fad8 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	021d      	lsls	r5, r3, #8
 8007222:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8007226:	0214      	lsls	r4, r2, #8
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	461a      	mov	r2, r3
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	18a0      	adds	r0, r4, r2
 8007236:	eb45 0103 	adc.w	r1, r5, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f04f 0400 	mov.w	r4, #0
 8007242:	461a      	mov	r2, r3
 8007244:	4623      	mov	r3, r4
 8007246:	f001 fc3d 	bl	8008ac4 <__aeabi_uldivmod>
 800724a:	4603      	mov	r3, r0
 800724c:	460c      	mov	r4, r1
 800724e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007250:	e017      	b.n	8007282 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	f04f 0400 	mov.w	r4, #0
 800725c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007260:	f144 0100 	adc.w	r1, r4, #0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f04f 0400 	mov.w	r4, #0
 800726c:	461a      	mov	r2, r3
 800726e:	4623      	mov	r3, r4
 8007270:	f001 fc28 	bl	8008ac4 <__aeabi_uldivmod>
 8007274:	4603      	mov	r3, r0
 8007276:	460c      	mov	r4, r1
 8007278:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800727a:	e002      	b.n	8007282 <UART_SetConfig+0x454>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	74fb      	strb	r3, [r7, #19]
            break;
 8007280:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007288:	d308      	bcc.n	800729c <UART_SetConfig+0x46e>
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007290:	d204      	bcs.n	800729c <UART_SetConfig+0x46e>
        {
          huart->Instance->BRR = usartdiv;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	e0f4      	b.n	8007486 <UART_SetConfig+0x658>
        }
        else
        {
          ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	74fb      	strb	r3, [r7, #19]
 80072a0:	e0f1      	b.n	8007486 <UART_SetConfig+0x658>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072aa:	d17e      	bne.n	80073aa <UART_SetConfig+0x57c>
  {
    switch (clocksource)
 80072ac:	7efb      	ldrb	r3, [r7, #27]
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d85b      	bhi.n	800736a <UART_SetConfig+0x53c>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x48a>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072fb 	.word	0x080072fb
 80072c0:	08007319 	.word	0x08007319
 80072c4:	0800736b 	.word	0x0800736b
 80072c8:	08007335 	.word	0x08007335
 80072cc:	0800736b 	.word	0x0800736b
 80072d0:	0800736b 	.word	0x0800736b
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	08007353 	.word	0x08007353
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80072dc:	f7fc fb0a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80072e0:	4603      	mov	r3, r0
 80072e2:	005a      	lsls	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	441a      	add	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80072f8:	e03a      	b.n	8007370 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80072fa:	f7fc fb11 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 80072fe:	4603      	mov	r3, r0
 8007300:	005a      	lsls	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007312:	b29b      	uxth	r3, r3
 8007314:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007316:	e02b      	b.n	8007370 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007322:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6852      	ldr	r2, [r2, #4]
 800732a:	fbb3 f3f2 	udiv	r3, r3, r2
 800732e:	b29b      	uxth	r3, r3
 8007330:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007332:	e01d      	b.n	8007370 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007334:	f7fc fa48 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8007338:	4603      	mov	r3, r0
 800733a:	005a      	lsls	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	441a      	add	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	b29b      	uxth	r3, r3
 800734e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007350:	e00e      	b.n	8007370 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007368:	e002      	b.n	8007370 <UART_SetConfig+0x542>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	74fb      	strb	r3, [r7, #19]
        break;
 800736e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b0f      	cmp	r3, #15
 8007374:	d916      	bls.n	80073a4 <UART_SetConfig+0x576>
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737c:	d212      	bcs.n	80073a4 <UART_SetConfig+0x576>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	b29b      	uxth	r3, r3
 8007382:	f023 030f 	bic.w	r3, r3, #15
 8007386:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	b29b      	uxth	r3, r3
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	b29a      	uxth	r2, r3
 8007394:	897b      	ldrh	r3, [r7, #10]
 8007396:	4313      	orrs	r3, r2
 8007398:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	897a      	ldrh	r2, [r7, #10]
 80073a0:	60da      	str	r2, [r3, #12]
 80073a2:	e070      	b.n	8007486 <UART_SetConfig+0x658>
    }
    else
    {
      ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	74fb      	strb	r3, [r7, #19]
 80073a8:	e06d      	b.n	8007486 <UART_SetConfig+0x658>
    }
  }
  else
  {
    switch (clocksource)
 80073aa:	7efb      	ldrb	r3, [r7, #27]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d859      	bhi.n	8007464 <UART_SetConfig+0x636>
 80073b0:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <UART_SetConfig+0x58a>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073f9 	.word	0x080073f9
 80073c0:	08007415 	.word	0x08007415
 80073c4:	08007465 	.word	0x08007465
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007465 	.word	0x08007465
 80073d0:	08007465 	.word	0x08007465
 80073d4:	08007465 	.word	0x08007465
 80073d8:	0800744d 	.word	0x0800744d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80073dc:	f7fc fa8a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80073f6:	e038      	b.n	800746a <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80073f8:	f7fc fa92 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	b29b      	uxth	r3, r3
 8007410:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007412:	e02a      	b.n	800746a <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800741e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6852      	ldr	r2, [r2, #4]
 8007426:	fbb3 f3f2 	udiv	r3, r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800742e:	e01c      	b.n	800746a <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007430:	f7fc f9ca 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8007434:	4602      	mov	r2, r0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	fbb2 f3f3 	udiv	r3, r2, r3
 8007446:	b29b      	uxth	r3, r3
 8007448:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800744a:	e00e      	b.n	800746a <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	b29b      	uxth	r3, r3
 8007460:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007462:	e002      	b.n	800746a <UART_SetConfig+0x63c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	74fb      	strb	r3, [r7, #19]
        break;
 8007468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b0f      	cmp	r3, #15
 800746e:	d908      	bls.n	8007482 <UART_SetConfig+0x654>
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007476:	d204      	bcs.n	8007482 <UART_SetConfig+0x654>
    {
      huart->Instance->BRR = usartdiv;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	e001      	b.n	8007486 <UART_SetConfig+0x658>
    }
    else
    {
      ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007492:	7cfb      	ldrb	r3, [r7, #19]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800749e:	bf00      	nop
 80074a0:	f4240000 	.word	0xf4240000

080074a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	6852      	ldr	r2, [r2, #4]
 80074c2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	6852      	ldr	r2, [r2, #4]
 80074e4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074ec:	430a      	orrs	r2, r1
 80074ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	6852      	ldr	r2, [r2, #4]
 8007506:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	6852      	ldr	r2, [r2, #4]
 8007528:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007530:	430a      	orrs	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	6892      	ldr	r2, [r2, #8]
 800754a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007552:	430a      	orrs	r2, r1
 8007554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	6892      	ldr	r2, [r2, #8]
 800756c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007574:	430a      	orrs	r2, r1
 8007576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01a      	beq.n	80075ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	6852      	ldr	r2, [r2, #4]
 800758e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007596:	430a      	orrs	r2, r1
 8007598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a2:	d10a      	bne.n	80075ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	6852      	ldr	r2, [r2, #4]
 80075ae:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6852      	ldr	r2, [r2, #4]
 80075d0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80075f6:	f7f8 fe8d 	bl	8000314 <HAL_GetTick>
 80075fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b08      	cmp	r3, #8
 8007608:	d10e      	bne.n	8007628 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f82a 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e020      	b.n	800766a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b04      	cmp	r3, #4
 8007634:	d10e      	bne.n	8007654 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f814 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e00a      	b.n	800766a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	4613      	mov	r3, r2
 8007680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007682:	e02a      	b.n	80076da <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d026      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768c:	f7f8 fe42 	bl	8000314 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	1ad2      	subs	r2, r2, r3
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	429a      	cmp	r2, r3
 800769a:	d802      	bhi.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d11b      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	6812      	ldr	r2, [r2, #0]
 80076ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	6812      	ldr	r2, [r2, #0]
 80076ba:	6892      	ldr	r2, [r2, #8]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2220      	movs	r2, #32
 80076c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e00f      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	401a      	ands	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d0c5      	beq.n	8007684 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007718:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007742:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	6892      	ldr	r2, [r2, #8]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	d114      	bne.n	80077b2 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	6812      	ldr	r2, [r2, #0]
 8007798:	6892      	ldr	r2, [r2, #8]
 800779a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ae:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077b0:	e002      	b.n	80077b8 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff f9e4 	bl	8006b80 <HAL_UART_TxCpltCallback>
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff f9e0 	bl	8006b94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11e      	bne.n	8007836 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800780e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	6892      	ldr	r2, [r2, #8]
 800781a:	f022 0201 	bic.w	r2, r2, #1
 800781e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	6892      	ldr	r2, [r2, #8]
 800782a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800782e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff f9b6 	bl	8006ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff f9b2 	bl	8006bbc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007872:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007878:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d109      	bne.n	800789c <UART_DMAError+0x3c>
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b21      	cmp	r3, #33	; 0x21
 800788c:	d106      	bne.n	800789c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007896:	6978      	ldr	r0, [r7, #20]
 8007898:	f7ff ff33 	bl	8007702 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d109      	bne.n	80078be <UART_DMAError+0x5e>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b22      	cmp	r3, #34	; 0x22
 80078ae:	d106      	bne.n	80078be <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f7ff ff37 	bl	800772c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c2:	f043 0210 	orr.w	r2, r3, #16
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ca:	6978      	ldr	r0, [r7, #20]
 80078cc:	f7ff f980 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff f96a 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007916:	2200      	movs	r2, #0
 8007918:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d118      	bne.n	800795e <UART_DMATxAbortCallback+0x5a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	220f      	movs	r2, #15
 8007948:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff f944 	bl	8006be4 <HAL_UART_AbortCpltCallback>
 800795c:	e000      	b.n	8007960 <UART_DMATxAbortCallback+0x5c>
      return;
 800795e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007978:	2200      	movs	r2, #0
 800797a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	2b00      	cmp	r3, #0
 800798c:	d122      	bne.n	80079d4 <UART_DMARxAbortCallback+0x6e>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	220f      	movs	r2, #15
 80079aa:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	8b12      	ldrh	r2, [r2, #24]
 80079b6:	b292      	uxth	r2, r2
 80079b8:	f042 0208 	orr.w	r2, r2, #8
 80079bc:	b292      	uxth	r2, r2
 80079be:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f7ff f909 	bl	8006be4 <HAL_UART_AbortCpltCallback>
 80079d2:	e000      	b.n	80079d6 <UART_DMARxAbortCallback+0x70>
      return;
 80079d4:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7ff f8fd 	bl	8006bf8 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	220f      	movs	r2, #15
 8007a22:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	8b12      	ldrh	r2, [r2, #24]
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	f042 0208 	orr.w	r2, r2, #8
 8007a34:	b292      	uxth	r2, r2
 8007a36:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff f8e4 	bl	8006c0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a58:	2b21      	cmp	r3, #33	; 0x21
 8007a5a:	d12b      	bne.n	8007ab4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d110      	bne.n	8007a8a <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	6812      	ldr	r2, [r2, #0]
 8007a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a76:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a86:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a88:	e014      	b.n	8007ab4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	b292      	uxth	r2, r2
 8007a96:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007acc:	2b21      	cmp	r3, #33	; 0x21
 8007ace:	d12f      	bne.n	8007b30 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d110      	bne.n	8007afe <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	6812      	ldr	r2, [r2, #0]
 8007ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007afc:	e018      	b.n	8007b30 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	8812      	ldrh	r2, [r2, #0]
 8007b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b10:	b292      	uxth	r2, r2
 8007b12:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b18:	1c9a      	adds	r2, r3, #2
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b52:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff f80d 	bl	8006b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b7c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b82:	2b22      	cmp	r3, #34	; 0x22
 8007b84:	d13a      	bne.n	8007bfc <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b8c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	89ba      	ldrh	r2, [r7, #12]
 8007b94:	b2d1      	uxtb	r1, r2
 8007b96:	89fa      	ldrh	r2, [r7, #14]
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d123      	bne.n	8007c10 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bd6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	6892      	ldr	r2, [r2, #8]
 8007be2:	f022 0201 	bic.w	r2, r2, #1
 8007be6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe ffd7 	bl	8006ba8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bfa:	e009      	b.n	8007c10 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	8b12      	ldrh	r2, [r2, #24]
 8007c06:	b292      	uxth	r2, r2
 8007c08:	f042 0208 	orr.w	r2, r2, #8
 8007c0c:	b292      	uxth	r2, r2
 8007c0e:	831a      	strh	r2, [r3, #24]
}
 8007c10:	bf00      	nop
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c26:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c2c:	2b22      	cmp	r3, #34	; 0x22
 8007c2e:	d13a      	bne.n	8007ca6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c36:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c3e:	89ba      	ldrh	r2, [r7, #12]
 8007c40:	89fb      	ldrh	r3, [r7, #14]
 8007c42:	4013      	ands	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4e:	1c9a      	adds	r2, r3, #2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d123      	bne.n	8007cba <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c80:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	6892      	ldr	r2, [r2, #8]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe ff82 	bl	8006ba8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ca4:	e009      	b.n	8007cba <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	8b12      	ldrh	r2, [r2, #24]
 8007cb0:	b292      	uxth	r2, r2
 8007cb2:	f042 0208 	orr.w	r2, r2, #8
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	831a      	strh	r2, [r3, #24]
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop

08007cc4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e056      	b.n	8007d8a <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fcd1 	bl	8008694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2224      	movs	r2, #36	; 0x24
 8007cf6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff f890 	bl	8006e2e <UART_SetConfig>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e038      	b.n	8007d8a <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fbbf 	bl	80074a4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	6892      	ldr	r2, [r2, #8]
 8007d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d34:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	6892      	ldr	r2, [r2, #8]
 8007d40:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	055b      	lsls	r3, r3, #21
 8007d4e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8007d68:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	6812      	ldr	r2, [r2, #0]
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	f042 0201 	orr.w	r2, r2, #1
 8007d80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff fc30 	bl	80075e8 <UART_CheckIdleState>
 8007d88:	4603      	mov	r3, r0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_UARTEx_EnableClockStopMode>:
  *         and desired baud rate is 9600 baud, the bit UCESM bit in LPUART_CR3 control register must be set.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <HAL_UARTEx_EnableClockStopMode+0x16>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e010      	b.n	8007dde <HAL_UARTEx_EnableClockStopMode+0x38>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Set UCESM bit */
  SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	6892      	ldr	r2, [r2, #8]
 8007dce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007dd2:	609a      	str	r2, [r3, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_UARTEx_DisableClockStopMode>:
  * @brief  Disable UART Clock when in Stop Mode.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_UARTEx_DisableClockStopMode+0x16>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e010      	b.n	8007e22 <HAL_UARTEx_DisableClockStopMode+0x38>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Clear UCESM bit */
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	6892      	ldr	r2, [r2, #8]
 8007e12:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007e16:	609a      	str	r2, [r3, #8]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <HAL_MultiProcessorEx_AddressLength_Set>:
  *          @arg @ref UART_ADDRESS_DETECT_4B 4-bit long address
  *          @arg @ref UART_ADDRESS_DETECT_7B 6-, 7- or 8-bit long address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_MultiProcessorEx_AddressLength_Set+0x14>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e020      	b.n	8007e84 <HAL_MultiProcessorEx_AddressLength_Set+0x56>
  }

  /* Check the address length parameter */
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));

  huart->gState = HAL_UART_STATE_BUSY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2224      	movs	r2, #36	; 0x24
 8007e46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	f022 0201 	bic.w	r2, r2, #1
 8007e56:	601a      	str	r2, [r3, #0]

  /* Set the address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6812      	ldr	r2, [r2, #0]
 8007e60:	6852      	ldr	r2, [r2, #4]
 8007e62:	f022 0110 	bic.w	r1, r2, #16
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState to Ready */
  return (UART_CheckIdleState(huart));
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fbb3 	bl	80075e8 <UART_CheckIdleState>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e044      	b.n	8007f36 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xaa>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2224      	movs	r2, #36	; 0x24
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	6892      	ldr	r2, [r2, #8]
 8007ed4:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d105      	bne.n	8007ef0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x64>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007ee4:	1d3b      	adds	r3, r7, #4
 8007ee6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f86b 	bl	8007fc6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f00:	f7f8 fa08 	bl	8000314 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fbac 	bl	8007672 <UART_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9a>
  {
    status = HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	75fb      	strb	r3, [r7, #23]
 8007f24:	e002      	b.n	8007f2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa0>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return status;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_UARTEx_EnableStopMode+0x16>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e010      	b.n	8007f76 <HAL_UARTEx_EnableStopMode+0x38>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	6812      	ldr	r2, [r2, #0]
 8007f66:	f042 0202 	orr.w	r2, r2, #2
 8007f6a:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_UARTEx_DisableStopMode>:
  * @brief Disable UART Stop Mode.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_UARTEx_DisableStopMode+0x16>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e010      	b.n	8007fba <HAL_UARTEx_DisableStopMode+0x38>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* Clear UESM bit */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	f022 0202 	bic.w	r2, r2, #2
 8007fae:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	1d3b      	adds	r3, r7, #4
 8007fd0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	6852      	ldr	r2, [r2, #4]
 8007fde:	f022 0210 	bic.w	r2, r2, #16
 8007fe2:	8939      	ldrh	r1, [r7, #8]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	6812      	ldr	r2, [r2, #0]
 8007ff0:	6852      	ldr	r2, [r2, #4]
 8007ff2:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 8007ff6:	7aba      	ldrb	r2, [r7, #10]
 8007ff8:	0612      	lsls	r2, r2, #24
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
}
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008012:	f7f8 f8d9 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008016:	f000 f82d 	bl	8008074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800801a:	f000 f925 	bl	8008268 <MX_GPIO_Init>
  MX_DMA_Init();
 800801e:	f000 f8fd 	bl	800821c <MX_DMA_Init>
  MX_UART4_Init();
 8008022:	f000 f89c 	bl	800815e <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DMA_ENABLE_IT(&hdma_uart4_rx, DMA_IT_TC);
 8008026:	4b11      	ldr	r3, [pc, #68]	; (800806c <main+0x60>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a10      	ldr	r2, [pc, #64]	; (800806c <main+0x60>)
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	f042 0202 	orr.w	r2, r2, #2
 8008034:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_IDLE);
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <main+0x64>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a0d      	ldr	r2, [pc, #52]	; (8008070 <main+0x64>)
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	f042 0210 	orr.w	r2, r2, #16
 8008044:	601a      	str	r2, [r3, #0]
  UBX_MSG_t ack_state = UBX_Send_Ack();
 8008046:	f000 fa4f 	bl	80084e8 <UBX_Send_Ack>
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
   if(ack_state == UBX_ACK_ACK)
 800804e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d108      	bne.n	8008068 <main+0x5c>
   {
	 uint32_t baud = huart4.Init.BaudRate;
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <main+0x64>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	603b      	str	r3, [r7, #0]
  	 HAL_GPIO_WritePin(GPIOA,LD2_Pin, GPIO_PIN_SET);
 800805c:	2201      	movs	r2, #1
 800805e:	2120      	movs	r1, #32
 8008060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008064:	f7f9 fdce 	bl	8001c04 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i;
  while (1)
 8008068:	e7fe      	b.n	8008068 <main+0x5c>
 800806a:	bf00      	nop
 800806c:	2000002c 	.word	0x2000002c
 8008070:	20000484 	.word	0x20000484

08008074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b0b8      	sub	sp, #224	; 0xe0
 8008078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800807a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800807e:	2244      	movs	r2, #68	; 0x44
 8008080:	2100      	movs	r1, #0
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fef4 	bl	8008e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008088:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	609a      	str	r2, [r3, #8]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008098:	463b      	mov	r3, r7
 800809a:	2288      	movs	r2, #136	; 0x88
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fee6 	bl	8008e70 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80080a4:	2302      	movs	r3, #2
 80080a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080b2:	2310      	movs	r3, #16
 80080b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080b8:	2302      	movs	r3, #2
 80080ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80080be:	2302      	movs	r3, #2
 80080c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 80080ca:	2309      	movs	r3, #9
 80080cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80080d0:	2307      	movs	r3, #7
 80080d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80080d6:	2302      	movs	r3, #2
 80080d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80080dc:	2306      	movs	r3, #6
 80080de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fa fea8 	bl	8002e3c <HAL_RCC_OscConfig>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80080f2:	f000 faa3 	bl	800863c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080f6:	230f      	movs	r3, #15
 80080f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080fc:	2303      	movs	r3, #3
 80080fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008102:	2300      	movs	r3, #0
 8008104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800810e:	2300      	movs	r3, #0
 8008110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008118:	2101      	movs	r1, #1
 800811a:	4618      	mov	r0, r3
 800811c:	f7fb fa3e 	bl	800359c <HAL_RCC_ClockConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8008126:	f000 fa89 	bl	800863c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800812a:	2308      	movs	r3, #8
 800812c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800812e:	2300      	movs	r3, #0
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008132:	463b      	mov	r3, r7
 8008134:	4618      	mov	r0, r3
 8008136:	f7fb fd8d 	bl	8003c54 <HAL_RCCEx_PeriphCLKConfig>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8008140:	f000 fa7c 	bl	800863c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008144:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008148:	f7f9 ff82 	bl	8002050 <HAL_PWREx_ControlVoltageScaling>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8008152:	f000 fa73 	bl	800863c <Error_Handler>
  }
}
 8008156:	bf00      	nop
 8008158:	37e0      	adds	r7, #224	; 0xe0
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */
  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008162:	4b2c      	ldr	r3, [pc, #176]	; (8008214 <MX_UART4_Init+0xb6>)
 8008164:	4a2c      	ldr	r2, [pc, #176]	; (8008218 <MX_UART4_Init+0xba>)
 8008166:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8008168:	4b2a      	ldr	r3, [pc, #168]	; (8008214 <MX_UART4_Init+0xb6>)
 800816a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800816e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008170:	4b28      	ldr	r3, [pc, #160]	; (8008214 <MX_UART4_Init+0xb6>)
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <MX_UART4_Init+0xb6>)
 8008178:	2200      	movs	r2, #0
 800817a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <MX_UART4_Init+0xb6>)
 800817e:	2200      	movs	r2, #0
 8008180:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008182:	4b24      	ldr	r3, [pc, #144]	; (8008214 <MX_UART4_Init+0xb6>)
 8008184:	220c      	movs	r2, #12
 8008186:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008188:	4b22      	ldr	r3, [pc, #136]	; (8008214 <MX_UART4_Init+0xb6>)
 800818a:	2200      	movs	r2, #0
 800818c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800818e:	4b21      	ldr	r3, [pc, #132]	; (8008214 <MX_UART4_Init+0xb6>)
 8008190:	2200      	movs	r2, #0
 8008192:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008194:	4b1f      	ldr	r3, [pc, #124]	; (8008214 <MX_UART4_Init+0xb6>)
 8008196:	2200      	movs	r2, #0
 8008198:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <MX_UART4_Init+0xb6>)
 800819c:	2200      	movs	r2, #0
 800819e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80081a0:	481c      	ldr	r0, [pc, #112]	; (8008214 <MX_UART4_Init+0xb6>)
 80081a2:	f7fd fae9 	bl	8005778 <HAL_UART_Init>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80081ac:	f000 fa46 	bl	800863c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // clear any additional errors
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_PE))
 80081b0:	4b18      	ldr	r3, [pc, #96]	; (8008214 <MX_UART4_Init+0xb6>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d103      	bne.n	80081c6 <MX_UART4_Init+0x68>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_PE);
 80081be:	4b15      	ldr	r3, [pc, #84]	; (8008214 <MX_UART4_Init+0xb6>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2201      	movs	r2, #1
 80081c4:	621a      	str	r2, [r3, #32]
  		}
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_NE))
 80081c6:	4b13      	ldr	r3, [pc, #76]	; (8008214 <MX_UART4_Init+0xb6>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d103      	bne.n	80081dc <MX_UART4_Init+0x7e>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_NE);
 80081d4:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <MX_UART4_Init+0xb6>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2204      	movs	r2, #4
 80081da:	621a      	str	r2, [r3, #32]
  		}
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_FE))
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <MX_UART4_Init+0xb6>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d103      	bne.n	80081f2 <MX_UART4_Init+0x94>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_FE);
 80081ea:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <MX_UART4_Init+0xb6>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2202      	movs	r2, #2
 80081f0:	621a      	str	r2, [r3, #32]
  		}
  		if(__HAL_UART_GET_FLAG(&huart4,UART_FLAG_ORE))
 80081f2:	4b08      	ldr	r3, [pc, #32]	; (8008214 <MX_UART4_Init+0xb6>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d103      	bne.n	8008208 <MX_UART4_Init+0xaa>
  		{
  			__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_ORE);
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <MX_UART4_Init+0xb6>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2208      	movs	r2, #8
 8008206:	621a      	str	r2, [r3, #32]
  		}
  		__HAL_UART_CLEAR_FLAG(&huart4,UART_FLAG_IDLE);
 8008208:	4b02      	ldr	r3, [pc, #8]	; (8008214 <MX_UART4_Init+0xb6>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2210      	movs	r2, #16
 800820e:	621a      	str	r2, [r3, #32]
  /* USER CODE END UART4_Init 2 */

}
 8008210:	bf00      	nop
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20000484 	.word	0x20000484
 8008218:	40004c00 	.word	0x40004c00

0800821c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008222:	4a10      	ldr	r2, [pc, #64]	; (8008264 <MX_DMA_Init+0x48>)
 8008224:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <MX_DMA_Init+0x48>)
 8008226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	6493      	str	r3, [r2, #72]	; 0x48
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <MX_DMA_Init+0x48>)
 8008230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	607b      	str	r3, [r7, #4]
 8008238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	203a      	movs	r0, #58	; 0x3a
 8008240:	f7f8 fc3f 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8008244:	203a      	movs	r0, #58	; 0x3a
 8008246:	f7f8 fc58 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	203c      	movs	r0, #60	; 0x3c
 8008250:	f7f8 fc37 	bl	8000ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8008254:	203c      	movs	r0, #60	; 0x3c
 8008256:	f7f8 fc50 	bl	8000afa <HAL_NVIC_EnableIRQ>

}
 800825a:	bf00      	nop
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40021000 	.word	0x40021000

08008268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800826e:	f107 0314 	add.w	r3, r7, #20
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	609a      	str	r2, [r3, #8]
 800827a:	60da      	str	r2, [r3, #12]
 800827c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800827e:	4a2b      	ldr	r2, [pc, #172]	; (800832c <MX_GPIO_Init+0xc4>)
 8008280:	4b2a      	ldr	r3, [pc, #168]	; (800832c <MX_GPIO_Init+0xc4>)
 8008282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008284:	f043 0304 	orr.w	r3, r3, #4
 8008288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800828a:	4b28      	ldr	r3, [pc, #160]	; (800832c <MX_GPIO_Init+0xc4>)
 800828c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	613b      	str	r3, [r7, #16]
 8008294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008296:	4a25      	ldr	r2, [pc, #148]	; (800832c <MX_GPIO_Init+0xc4>)
 8008298:	4b24      	ldr	r3, [pc, #144]	; (800832c <MX_GPIO_Init+0xc4>)
 800829a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082a2:	4b22      	ldr	r3, [pc, #136]	; (800832c <MX_GPIO_Init+0xc4>)
 80082a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ae:	4a1f      	ldr	r2, [pc, #124]	; (800832c <MX_GPIO_Init+0xc4>)
 80082b0:	4b1e      	ldr	r3, [pc, #120]	; (800832c <MX_GPIO_Init+0xc4>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082ba:	4b1c      	ldr	r3, [pc, #112]	; (800832c <MX_GPIO_Init+0xc4>)
 80082bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082c6:	4a19      	ldr	r2, [pc, #100]	; (800832c <MX_GPIO_Init+0xc4>)
 80082c8:	4b18      	ldr	r3, [pc, #96]	; (800832c <MX_GPIO_Init+0xc4>)
 80082ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082cc:	f043 0302 	orr.w	r3, r3, #2
 80082d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082d2:	4b16      	ldr	r3, [pc, #88]	; (800832c <MX_GPIO_Init+0xc4>)
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80082de:	2200      	movs	r2, #0
 80082e0:	2120      	movs	r1, #32
 80082e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082e6:	f7f9 fc8d 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80082ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80082f0:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <MX_GPIO_Init+0xc8>)
 80082f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80082f8:	f107 0314 	add.w	r3, r7, #20
 80082fc:	4619      	mov	r1, r3
 80082fe:	480d      	ldr	r0, [pc, #52]	; (8008334 <MX_GPIO_Init+0xcc>)
 8008300:	f7f9 f9cc 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008304:	2320      	movs	r3, #32
 8008306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008308:	2301      	movs	r3, #1
 800830a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830c:	2300      	movs	r3, #0
 800830e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008310:	2300      	movs	r3, #0
 8008312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	4619      	mov	r1, r3
 800831a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800831e:	f7f9 f9bd 	bl	800169c <HAL_GPIO_Init>

}
 8008322:	bf00      	nop
 8008324:	3728      	adds	r7, #40	; 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40021000 	.word	0x40021000
 8008330:	10210000 	.word	0x10210000
 8008334:	48000800 	.word	0x48000800

08008338 <USART_GPS_IRQHandler>:

/* USER CODE BEGIN 4 */
void  USART_GPS_IRQHandler( UART_HandleTypeDef* huart, DMA_HandleTypeDef* hdma )
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
	if(__HAL_UART_GET_IT_SOURCE(huart,UART_IT_IDLE))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0310 	and.w	r3, r3, #16
 800834c:	2b00      	cmp	r3, #0
 800834e:	d028      	beq.n	80083a2 <USART_GPS_IRQHandler+0x6a>
	{

		//clears IDLE AND OVERRUN ERROR FLAG
		uint32_t temp  = huart->Instance->RDR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008356:	b29b      	uxth	r3, r3
 8008358:	60fb      	str	r3, [r7, #12]
		temp = huart->Instance->ISR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	60fb      	str	r3, [r7, #12]

		//clear DMA stream
		//This code overcomes the errata in the DMA where
		//all three Transfer flags active causes the DMA Channel
		//To become disabled
		hdma->Instance->CCR |= DMA_CCR_EN;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	f042 0201 	orr.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]
		hdma->DmaBaseAddress->ISR &= ~(DMA_Rx_ISR_HTF| DMA_Rx_ISR_TE);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008380:	601a      	str	r2, [r3, #0]
		hdma->DmaBaseAddress->ISR |= DMA_Rx_ISR_TCF;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008390:	601a      	str	r2, [r3, #0]
		hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	f022 0201 	bic.w	r2, r2, #1
 80083a0:	601a      	str	r2, [r3, #0]


	}
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <DMA_Rx_IRQHandler>:

void DMA_Rx_IRQHandler( DMA_HandleTypeDef* hdma, UART_HandleTypeDef* huart )
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]


	if(__HAL_DMA_GET_IT_SOURCE(hdma,DMA_IT_TC))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d022      	beq.n	800840c <DMA_Rx_IRQHandler+0x5e>
	{
		//clear Transfer complete flag
		__HAL_DMA_CLEAR_FLAG(hdma,DMA_Rx_Flag_TCF);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <DMA_Rx_IRQHandler+0x6a>)
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d904      	bls.n	80083dc <DMA_Rx_IRQHandler+0x2e>
 80083d2:	4b12      	ldr	r3, [pc, #72]	; (800841c <DMA_Rx_IRQHandler+0x6e>)
 80083d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083d8:	605a      	str	r2, [r3, #4]
 80083da:	e003      	b.n	80083e4 <DMA_Rx_IRQHandler+0x36>
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <DMA_Rx_IRQHandler+0x72>)
 80083de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80083e2:	605a      	str	r2, [r3, #4]
		//get position

		/*****************************************************************/
		/*    	     TODO: Additional processing HERE    				 */
		/*****************************************************************/
		RX_COMPLETE_FLAG = 1;
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <DMA_Rx_IRQHandler+0x76>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
		/*****************************************************************/
		/*    	     					end				   				 */
		/*****************************************************************/

		/* Method to prepare for next DMA transfer*/
		hdma->DmaBaseAddress->IFCR = 0x3FU << hdma->ChannelIndex; // clear all interrupts
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80083f2:	213f      	movs	r1, #63	; 0x3f
 80083f4:	fa01 f202 	lsl.w	r2, r1, r2
 80083f8:	605a      	str	r2, [r3, #4]
		hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer; //reset the pointer
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a0a      	ldr	r2, [pc, #40]	; (8008428 <DMA_Rx_IRQHandler+0x7a>)
 8008400:	60da      	str	r2, [r3, #12]
		hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE; //set the number of bytes to expect
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800840a:	605a      	str	r2, [r3, #4]

	}

}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	40020080 	.word	0x40020080
 800841c:	40020400 	.word	0x40020400
 8008420:	40020000 	.word	0x40020000
 8008424:	2000027c 	.word	0x2000027c
 8008428:	20000290 	.word	0x20000290

0800842c <HAL_USART_Error_Handle>:

void HAL_USART_Error_Handle(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	uint32_t temp  = READ_REG(huart->Instance->ISR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	60fb      	str	r3, [r7, #12]
		 		temp =  READ_REG(huart->Instance->ISR);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	60fb      	str	r3, [r7, #12]
		 		(void)temp;
	 			__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	f022 0210 	bic.w	r2, r2, #16
 8008452:	601a      	str	r2, [r3, #0]
	 			CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008462:	601a      	str	r2, [r3, #0]
	 			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	6892      	ldr	r2, [r2, #8]
 800846e:	f022 0201 	bic.w	r2, r2, #1
 8008472:	609a      	str	r2, [r3, #8]
	 			huart4.Instance->ICR = 0xFFFF;
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <HAL_USART_Error_Handle+0xb8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800847c:	621a      	str	r2, [r3, #32]
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_ORE))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b08      	cmp	r3, #8
 800848a:	d103      	bne.n	8008494 <HAL_USART_Error_Handle+0x68>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_ORE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2208      	movs	r2, #8
 8008492:	621a      	str	r2, [r3, #32]
	 			}
	 			// clear any additional errors
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_PE))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d103      	bne.n	80084aa <HAL_USART_Error_Handle+0x7e>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_PE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2201      	movs	r2, #1
 80084a8:	621a      	str	r2, [r3, #32]
	 			}
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_NE))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d103      	bne.n	80084c0 <HAL_USART_Error_Handle+0x94>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_NE);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2204      	movs	r2, #4
 80084be:	621a      	str	r2, [r3, #32]
	 			}
	 			if(__HAL_UART_GET_FLAG(huart,UART_FLAG_FE))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d103      	bne.n	80084d6 <HAL_USART_Error_Handle+0xaa>
	 			{
	 				__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_FE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2202      	movs	r2, #2
 80084d4:	621a      	str	r2, [r3, #32]
	 			}
}
 80084d6:	bf00      	nop
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000484 	.word	0x20000484

080084e8 <UBX_Send_Ack>:
UBX_MSG_t UBX_Send_Ack(void)
{
 80084e8:	b5b0      	push	{r4, r5, r7, lr}
 80084ea:	b090      	sub	sp, #64	; 0x40
 80084ec:	af00      	add	r7, sp, #0
	uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 80084ee:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <UBX_Send_Ack+0x140>)
 80084f0:	f107 0410 	add.w	r4, r7, #16
 80084f4:	461d      	mov	r5, r3
 80084f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80084fe:	6020      	str	r0, [r4, #0]
 8008500:	3404      	adds	r4, #4
 8008502:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 8008504:	2315      	movs	r3, #21
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
	 for (int i = 0; i < size ; ++i)
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800850c:	e00c      	b.n	8008528 <UBX_Send_Ack+0x40>
	 {
		DMA_TX_Buffer[i] = ubx_ack_string[i];
 800850e:	f107 0210 	add.w	r2, r7, #16
 8008512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008514:	4413      	add	r3, r2
 8008516:	7819      	ldrb	r1, [r3, #0]
 8008518:	4a44      	ldr	r2, [pc, #272]	; (800862c <UBX_Send_Ack+0x144>)
 800851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851c:	4413      	add	r3, r2
 800851e:	460a      	mov	r2, r1
 8008520:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 8008522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008524:	3301      	adds	r3, #1
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	429a      	cmp	r2, r3
 800852e:	dbee      	blt.n	800850e <UBX_Send_Ack+0x26>
	 }

	 if(HAL_UART_Transmit_DMA(&huart4,DMA_TX_Buffer,size)== HAL_OK)
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	b29b      	uxth	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	493d      	ldr	r1, [pc, #244]	; (800862c <UBX_Send_Ack+0x144>)
 8008538:	483d      	ldr	r0, [pc, #244]	; (8008630 <UBX_Send_Ack+0x148>)
 800853a:	f7fd fd3f 	bl	8005fbc <HAL_UART_Transmit_DMA>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <UBX_Send_Ack+0x68>
	 {
		 HAL_UART_Receive_DMA(&huart4,DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 8008544:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008548:	493a      	ldr	r1, [pc, #232]	; (8008634 <UBX_Send_Ack+0x14c>)
 800854a:	4839      	ldr	r0, [pc, #228]	; (8008630 <UBX_Send_Ack+0x148>)
 800854c:	f7fd fdb2 	bl	80060b4 <HAL_UART_Receive_DMA>
	 }

	 uint32_t count = HAL_GetTick();
 8008550:	f7f7 fee0 	bl	8000314 <HAL_GetTick>
 8008554:	62b8      	str	r0, [r7, #40]	; 0x28
	 while(!RX_COMPLETE_FLAG)
 8008556:	bf00      	nop
 8008558:	4b37      	ldr	r3, [pc, #220]	; (8008638 <UBX_Send_Ack+0x150>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0fb      	beq.n	8008558 <UBX_Send_Ack+0x70>
//			 return UBX_ERROR;
//		 }
	 }
	 //wait for Rx to complete
	 char msg [10];
	 for (int i = 0; i < 10; ++i)
 8008560:	2300      	movs	r3, #0
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
 8008564:	e00b      	b.n	800857e <UBX_Send_Ack+0x96>
	 {
	 	 msg[i] = DMA_RX_Buffer[i];
 8008566:	4a33      	ldr	r2, [pc, #204]	; (8008634 <UBX_Send_Ack+0x14c>)
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	4413      	add	r3, r2
 800856c:	7819      	ldrb	r1, [r3, #0]
 800856e:	1d3a      	adds	r2, r7, #4
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	4413      	add	r3, r2
 8008574:	460a      	mov	r2, r1
 8008576:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < 10; ++i)
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	3301      	adds	r3, #1
 800857c:	63bb      	str	r3, [r7, #56]	; 0x38
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	2b09      	cmp	r3, #9
 8008582:	ddf0      	ble.n	8008566 <UBX_Send_Ack+0x7e>
	 }
	 UBX_MSG_t GPS_Acknowledgement_State;
	 uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 8008584:	793b      	ldrb	r3, [r7, #4]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	b21a      	sxth	r2, r3
 800858a:	797b      	ldrb	r3, [r7, #5]
 800858c:	b21b      	sxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b21b      	sxth	r3, r3
 8008592:	84fb      	strh	r3, [r7, #38]	; 0x26
	 if(header == 0xb562)
 8008594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008596:	f24b 5262 	movw	r2, #46434	; 0xb562
 800859a:	4293      	cmp	r3, r2
 800859c:	d13d      	bne.n	800861a <UBX_Send_Ack+0x132>
	 {
		 uint8_t ck_A =0, ck_B =0;
 800859e:	2300      	movs	r3, #0
 80085a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80085a4:	2300      	movs	r3, #0
 80085a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		 for (int i = 2; i < 8; ++i)
 80085aa:	2302      	movs	r3, #2
 80085ac:	633b      	str	r3, [r7, #48]	; 0x30
 80085ae:	e012      	b.n	80085d6 <UBX_Send_Ack+0xee>
		 {
		 	ck_A += (uint8_t)msg[i];
 80085b0:	1d3a      	adds	r2, r7, #4
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	4413      	add	r3, r2
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80085bc:	4413      	add	r3, r2
 80085be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		 	ck_B += ck_A;
 80085c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80085c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80085ca:	4413      	add	r3, r2
 80085cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		 for (int i = 2; i < 8; ++i)
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	3301      	adds	r3, #1
 80085d4:	633b      	str	r3, [r7, #48]	; 0x30
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b07      	cmp	r3, #7
 80085da:	dde9      	ble.n	80085b0 <UBX_Send_Ack+0xc8>
		 }
		 if((ck_A == msg[8])&& (ck_B == msg[9]))
 80085dc:	7b3b      	ldrb	r3, [r7, #12]
 80085de:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d116      	bne.n	8008614 <UBX_Send_Ack+0x12c>
 80085e6:	7b7b      	ldrb	r3, [r7, #13]
 80085e8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d111      	bne.n	8008614 <UBX_Send_Ack+0x12c>
		 {
		 	//acknowledgement
		 	if(msg[2] == 0x05)
 80085f0:	79bb      	ldrb	r3, [r7, #6]
 80085f2:	2b05      	cmp	r3, #5
 80085f4:	d111      	bne.n	800861a <UBX_Send_Ack+0x132>
		 	{
		 		switch (msg[3])
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <UBX_Send_Ack+0x11a>
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d004      	beq.n	800860a <UBX_Send_Ack+0x122>
		 	if(msg[2] == 0x05)
 8008600:	e00b      	b.n	800861a <UBX_Send_Ack+0x132>
		 		{
		 			case 0:
		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 8008602:	2300      	movs	r3, #0
 8008604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		 			break;
 8008608:	e003      	b.n	8008612 <UBX_Send_Ack+0x12a>
		 			case 1:
		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		 			break;
 8008610:	bf00      	nop
		 	if(msg[2] == 0x05)
 8008612:	e002      	b.n	800861a <UBX_Send_Ack+0x132>
		 		}
		 	}
		 }
		 else
		 {
		 	GPS_Acknowledgement_State = UBX_ERROR;
 8008614:	23ff      	movs	r3, #255	; 0xff
 8008616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		 }
	 }
	 return GPS_Acknowledgement_State;
 800861a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800861e:	4618      	mov	r0, r3
 8008620:	3740      	adds	r7, #64	; 0x40
 8008622:	46bd      	mov	sp, r7
 8008624:	bdb0      	pop	{r4, r5, r7, pc}
 8008626:	bf00      	nop
 8008628:	08008e98 	.word	0x08008e98
 800862c:	2000054c 	.word	0x2000054c
 8008630:	20000484 	.word	0x20000484
 8008634:	20000290 	.word	0x20000290
 8008638:	2000027c 	.word	0x2000027c

0800863c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008640:	bf00      	nop
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop

0800864c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008652:	4a0f      	ldr	r2, [pc, #60]	; (8008690 <HAL_MspInit+0x44>)
 8008654:	4b0e      	ldr	r3, [pc, #56]	; (8008690 <HAL_MspInit+0x44>)
 8008656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008658:	f043 0301 	orr.w	r3, r3, #1
 800865c:	6613      	str	r3, [r2, #96]	; 0x60
 800865e:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <HAL_MspInit+0x44>)
 8008660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800866a:	4a09      	ldr	r2, [pc, #36]	; (8008690 <HAL_MspInit+0x44>)
 800866c:	4b08      	ldr	r3, [pc, #32]	; (8008690 <HAL_MspInit+0x44>)
 800866e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008674:	6593      	str	r3, [r2, #88]	; 0x58
 8008676:	4b06      	ldr	r3, [pc, #24]	; (8008690 <HAL_MspInit+0x44>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40021000 	.word	0x40021000

08008694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	; 0x28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800869c:	f107 0314 	add.w	r3, r7, #20
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	609a      	str	r2, [r3, #8]
 80086a8:	60da      	str	r2, [r3, #12]
 80086aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a45      	ldr	r2, [pc, #276]	; (80087c8 <HAL_UART_MspInit+0x134>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	f040 8083 	bne.w	80087be <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80086b8:	4a44      	ldr	r2, [pc, #272]	; (80087cc <HAL_UART_MspInit+0x138>)
 80086ba:	4b44      	ldr	r3, [pc, #272]	; (80087cc <HAL_UART_MspInit+0x138>)
 80086bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086c2:	6593      	str	r3, [r2, #88]	; 0x58
 80086c4:	4b41      	ldr	r3, [pc, #260]	; (80087cc <HAL_UART_MspInit+0x138>)
 80086c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086cc:	613b      	str	r3, [r7, #16]
 80086ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086d0:	4a3e      	ldr	r2, [pc, #248]	; (80087cc <HAL_UART_MspInit+0x138>)
 80086d2:	4b3e      	ldr	r3, [pc, #248]	; (80087cc <HAL_UART_MspInit+0x138>)
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086dc:	4b3b      	ldr	r3, [pc, #236]	; (80087cc <HAL_UART_MspInit+0x138>)
 80086de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80086e8:	2303      	movs	r3, #3
 80086ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ec:	2302      	movs	r3, #2
 80086ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086f4:	2303      	movs	r3, #3
 80086f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80086f8:	2308      	movs	r3, #8
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086fc:	f107 0314 	add.w	r3, r7, #20
 8008700:	4619      	mov	r1, r3
 8008702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008706:	f7f8 ffc9 	bl	800169c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 800870c:	4a31      	ldr	r2, [pc, #196]	; (80087d4 <HAL_UART_MspInit+0x140>)
 800870e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8008710:	4b2f      	ldr	r3, [pc, #188]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008712:	2202      	movs	r2, #2
 8008714:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008716:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008718:	2200      	movs	r2, #0
 800871a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800871c:	4b2c      	ldr	r3, [pc, #176]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 800871e:	2200      	movs	r2, #0
 8008720:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008722:	4b2b      	ldr	r3, [pc, #172]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008724:	2280      	movs	r2, #128	; 0x80
 8008726:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 800872a:	2200      	movs	r2, #0
 800872c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800872e:	4b28      	ldr	r3, [pc, #160]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008730:	2200      	movs	r2, #0
 8008732:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008734:	4b26      	ldr	r3, [pc, #152]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008736:	2200      	movs	r2, #0
 8008738:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800873a:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 800873c:	2200      	movs	r2, #0
 800873e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008740:	4823      	ldr	r0, [pc, #140]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008742:	f7f8 faff 	bl	8000d44 <HAL_DMA_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800874c:	f7ff ff76 	bl	800863c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008754:	66da      	str	r2, [r3, #108]	; 0x6c
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <HAL_UART_MspInit+0x13c>)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 800875c:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <HAL_UART_MspInit+0x144>)
 800875e:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <HAL_UART_MspInit+0x148>)
 8008760:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_UART_MspInit+0x144>)
 8008764:	2202      	movs	r2, #2
 8008766:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008768:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <HAL_UART_MspInit+0x144>)
 800876a:	2210      	movs	r2, #16
 800876c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800876e:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <HAL_UART_MspInit+0x144>)
 8008770:	2200      	movs	r2, #0
 8008772:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008774:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <HAL_UART_MspInit+0x144>)
 8008776:	2280      	movs	r2, #128	; 0x80
 8008778:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800877a:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <HAL_UART_MspInit+0x144>)
 800877c:	2200      	movs	r2, #0
 800877e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008780:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <HAL_UART_MspInit+0x144>)
 8008782:	2200      	movs	r2, #0
 8008784:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <HAL_UART_MspInit+0x144>)
 8008788:	2200      	movs	r2, #0
 800878a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800878c:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <HAL_UART_MspInit+0x144>)
 800878e:	2200      	movs	r2, #0
 8008790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008792:	4811      	ldr	r0, [pc, #68]	; (80087d8 <HAL_UART_MspInit+0x144>)
 8008794:	f7f8 fad6 	bl	8000d44 <HAL_DMA_Init>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800879e:	f7ff ff4d 	bl	800863c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <HAL_UART_MspInit+0x144>)
 80087a6:	669a      	str	r2, [r3, #104]	; 0x68
 80087a8:	4a0b      	ldr	r2, [pc, #44]	; (80087d8 <HAL_UART_MspInit+0x144>)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80087ae:	2200      	movs	r2, #0
 80087b0:	2100      	movs	r1, #0
 80087b2:	2034      	movs	r0, #52	; 0x34
 80087b4:	f7f8 f985 	bl	8000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80087b8:	2034      	movs	r0, #52	; 0x34
 80087ba:	f7f8 f99e 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80087be:	bf00      	nop
 80087c0:	3728      	adds	r7, #40	; 0x28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40004c00 	.word	0x40004c00
 80087cc:	40021000 	.word	0x40021000
 80087d0:	2000002c 	.word	0x2000002c
 80087d4:	40020458 	.word	0x40020458
 80087d8:	20000504 	.word	0x20000504
 80087dc:	40020430 	.word	0x40020430

080087e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a0f      	ldr	r2, [pc, #60]	; (800882c <HAL_UART_MspDeInit+0x4c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d117      	bne.n	8008822 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80087f2:	4a0f      	ldr	r2, [pc, #60]	; (8008830 <HAL_UART_MspDeInit+0x50>)
 80087f4:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <HAL_UART_MspDeInit+0x50>)
 80087f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80087fc:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80087fe:	2103      	movs	r1, #3
 8008800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008804:	f7f9 f8f2 	bl	80019ec <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880c:	4618      	mov	r0, r3
 800880e:	f7f8 fb51 	bl	8000eb4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008816:	4618      	mov	r0, r3
 8008818:	f7f8 fb4c 	bl	8000eb4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800881c:	2034      	movs	r0, #52	; 0x34
 800881e:	f7f8 f97a 	bl	8000b16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	40004c00 	.word	0x40004c00
 8008830:	40021000 	.word	0x40021000

08008834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008838:	bf00      	nop
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008842:	b480      	push	{r7}
 8008844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008846:	e7fe      	b.n	8008846 <HardFault_Handler+0x4>

08008848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800884c:	e7fe      	b.n	800884c <MemManage_Handler+0x4>

0800884e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800884e:	b480      	push	{r7}
 8008850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008852:	e7fe      	b.n	8008852 <BusFault_Handler+0x4>

08008854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008858:	e7fe      	b.n	8008858 <UsageFault_Handler+0x4>

0800885a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800885a:	b480      	push	{r7}
 800885c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800885e:	bf00      	nop
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800886c:	bf00      	nop
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008876:	b480      	push	{r7}
 8008878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800887a:	bf00      	nop
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008888:	f7f7 fd32 	bl	80002f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800888c:	bf00      	nop
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
 USART_GPS_IRQHandler(&huart4,&hdma_uart4_rx);
 8008894:	4905      	ldr	r1, [pc, #20]	; (80088ac <UART4_IRQHandler+0x1c>)
 8008896:	4806      	ldr	r0, [pc, #24]	; (80088b0 <UART4_IRQHandler+0x20>)
 8008898:	f7ff fd4e 	bl	8008338 <USART_GPS_IRQHandler>
  /* USER CODE END UART4_IRQn 0 */
 // HAL_UART_IRQHandler(&huart4);


  /* USER CODE BEGIN UART4_IRQn 1 */
 if(RX_COMPLETE_FLAG)
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <UART4_IRQHandler+0x24>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <UART4_IRQHandler+0x18>
 {
	 HAL_USART_Error_Handle();
 80088a4:	f7ff fdc2 	bl	800842c <HAL_USART_Error_Handle>
 }
  /* USER CODE END UART4_IRQn 1 */
}
 80088a8:	bf00      	nop
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000002c 	.word	0x2000002c
 80088b0:	20000484 	.word	0x20000484
 80088b4:	2000027c 	.word	0x2000027c

080088b8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80088bc:	4802      	ldr	r0, [pc, #8]	; (80088c8 <DMA2_Channel3_IRQHandler+0x10>)
 80088be:	f7f8 fd54 	bl	800136a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */
  //disable HDMA channel and clear intterupts

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80088c2:	bf00      	nop
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000504 	.word	0x20000504

080088cc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */
	DMA_Rx_IRQHandler(&hdma_uart4_rx,&huart4);
 80088d0:	4902      	ldr	r1, [pc, #8]	; (80088dc <DMA2_Channel5_IRQHandler+0x10>)
 80088d2:	4803      	ldr	r0, [pc, #12]	; (80088e0 <DMA2_Channel5_IRQHandler+0x14>)
 80088d4:	f7ff fd6b 	bl	80083ae <DMA_Rx_IRQHandler>
  /* USER CODE END DMA2_Channel5_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_uart4_rx);
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80088d8:	bf00      	nop
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20000484 	.word	0x20000484
 80088e0:	2000002c 	.word	0x2000002c

080088e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088e8:	4a17      	ldr	r2, [pc, #92]	; (8008948 <SystemInit+0x64>)
 80088ea:	4b17      	ldr	r3, [pc, #92]	; (8008948 <SystemInit+0x64>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80088f8:	4a14      	ldr	r2, [pc, #80]	; (800894c <SystemInit+0x68>)
 80088fa:	4b14      	ldr	r3, [pc, #80]	; (800894c <SystemInit+0x68>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008904:	4b11      	ldr	r3, [pc, #68]	; (800894c <SystemInit+0x68>)
 8008906:	2200      	movs	r2, #0
 8008908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800890a:	4a10      	ldr	r2, [pc, #64]	; (800894c <SystemInit+0x68>)
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <SystemInit+0x68>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008914:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800891a:	4b0c      	ldr	r3, [pc, #48]	; (800894c <SystemInit+0x68>)
 800891c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <SystemInit+0x68>)
 8008924:	4b09      	ldr	r3, [pc, #36]	; (800894c <SystemInit+0x68>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800892c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800892e:	4b07      	ldr	r3, [pc, #28]	; (800894c <SystemInit+0x68>)
 8008930:	2200      	movs	r2, #0
 8008932:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <SystemInit+0x64>)
 8008936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800893a:	609a      	str	r2, [r3, #8]
#endif
}
 800893c:	bf00      	nop
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	e000ed00 	.word	0xe000ed00
 800894c:	40021000 	.word	0x40021000

08008950 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
 8008962:	2302      	movs	r3, #2
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	2300      	movs	r3, #0
 8008968:	607b      	str	r3, [r7, #4]
 800896a:	2302      	movs	r3, #2
 800896c:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800896e:	4b4f      	ldr	r3, [pc, #316]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d107      	bne.n	800898a <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800897a:	4b4c      	ldr	r3, [pc, #304]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 800897c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e005      	b.n	8008996 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800898a:	4b48      	ldr	r3, [pc, #288]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	091b      	lsrs	r3, r3, #4
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8008996:	4a46      	ldr	r2, [pc, #280]	; (8008ab0 <SystemCoreClockUpdate+0x160>)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089a0:	4b42      	ldr	r3, [pc, #264]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 030c 	and.w	r3, r3, #12
 80089a8:	2b0c      	cmp	r3, #12
 80089aa:	d865      	bhi.n	8008a78 <SystemCoreClockUpdate+0x128>
 80089ac:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <SystemCoreClockUpdate+0x64>)
 80089ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b2:	bf00      	nop
 80089b4:	080089e9 	.word	0x080089e9
 80089b8:	08008a79 	.word	0x08008a79
 80089bc:	08008a79 	.word	0x08008a79
 80089c0:	08008a79 	.word	0x08008a79
 80089c4:	080089f1 	.word	0x080089f1
 80089c8:	08008a79 	.word	0x08008a79
 80089cc:	08008a79 	.word	0x08008a79
 80089d0:	08008a79 	.word	0x08008a79
 80089d4:	080089f9 	.word	0x080089f9
 80089d8:	08008a79 	.word	0x08008a79
 80089dc:	08008a79 	.word	0x08008a79
 80089e0:	08008a79 	.word	0x08008a79
 80089e4:	08008a01 	.word	0x08008a01
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80089e8:	4a32      	ldr	r2, [pc, #200]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	6013      	str	r3, [r2, #0]
      break;
 80089ee:	e047      	b.n	8008a80 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80089f0:	4b30      	ldr	r3, [pc, #192]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 80089f2:	4a31      	ldr	r2, [pc, #196]	; (8008ab8 <SystemCoreClockUpdate+0x168>)
 80089f4:	601a      	str	r2, [r3, #0]
      break;
 80089f6:	e043      	b.n	8008a80 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80089f8:	4b2e      	ldr	r3, [pc, #184]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 80089fa:	4a30      	ldr	r2, [pc, #192]	; (8008abc <SystemCoreClockUpdate+0x16c>)
 80089fc:	601a      	str	r2, [r3, #0]
      break;
 80089fe:	e03f      	b.n	8008a80 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008a00:	4b2a      	ldr	r3, [pc, #168]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8008a0a:	4b28      	ldr	r3, [pc, #160]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	091b      	lsrs	r3, r3, #4
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	3301      	adds	r3, #1
 8008a16:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d002      	beq.n	8008a24 <SystemCoreClockUpdate+0xd4>
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d006      	beq.n	8008a30 <SystemCoreClockUpdate+0xe0>
 8008a22:	e00b      	b.n	8008a3c <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8008a24:	4a24      	ldr	r2, [pc, #144]	; (8008ab8 <SystemCoreClockUpdate+0x168>)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2c:	613b      	str	r3, [r7, #16]
          break;
 8008a2e:	e00b      	b.n	8008a48 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8008a30:	4a22      	ldr	r2, [pc, #136]	; (8008abc <SystemCoreClockUpdate+0x16c>)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	613b      	str	r3, [r7, #16]
          break;
 8008a3a:	e005      	b.n	8008a48 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a44:	613b      	str	r3, [r7, #16]
          break;
 8008a46:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8008a48:	4b18      	ldr	r3, [pc, #96]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8008a5a:	4b14      	ldr	r3, [pc, #80]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	0e5b      	lsrs	r3, r3, #25
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	3301      	adds	r3, #1
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 8008a74:	6013      	str	r3, [r2, #0]
      break;
 8008a76:	e003      	b.n	8008a80 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8008a78:	4a0e      	ldr	r2, [pc, #56]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6013      	str	r3, [r2, #0]
      break;
 8008a7e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <SystemCoreClockUpdate+0x15c>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	091b      	lsrs	r3, r3, #4
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	4a0d      	ldr	r2, [pc, #52]	; (8008ac0 <SystemCoreClockUpdate+0x170>)
 8008a8c:	5cd3      	ldrb	r3, [r2, r3]
 8008a8e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8008a90:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9a:	4a06      	ldr	r2, [pc, #24]	; (8008ab4 <SystemCoreClockUpdate+0x164>)
 8008a9c:	6013      	str	r3, [r2, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	08008ec8 	.word	0x08008ec8
 8008ab4:	20000008 	.word	0x20000008
 8008ab8:	00f42400 	.word	0x00f42400
 8008abc:	007a1200 	.word	0x007a1200
 8008ac0:	08008eb0 	.word	0x08008eb0

08008ac4 <__aeabi_uldivmod>:
 8008ac4:	b953      	cbnz	r3, 8008adc <__aeabi_uldivmod+0x18>
 8008ac6:	b94a      	cbnz	r2, 8008adc <__aeabi_uldivmod+0x18>
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	bf08      	it	eq
 8008acc:	2800      	cmpeq	r0, #0
 8008ace:	bf1c      	itt	ne
 8008ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8008ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8008ad8:	f000 b97a 	b.w	8008dd0 <__aeabi_idiv0>
 8008adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ae4:	f000 f806 	bl	8008af4 <__udivmoddi4>
 8008ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008af0:	b004      	add	sp, #16
 8008af2:	4770      	bx	lr

08008af4 <__udivmoddi4>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	468c      	mov	ip, r1
 8008afa:	460d      	mov	r5, r1
 8008afc:	4604      	mov	r4, r0
 8008afe:	9e08      	ldr	r6, [sp, #32]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d151      	bne.n	8008ba8 <__udivmoddi4+0xb4>
 8008b04:	428a      	cmp	r2, r1
 8008b06:	4617      	mov	r7, r2
 8008b08:	d96d      	bls.n	8008be6 <__udivmoddi4+0xf2>
 8008b0a:	fab2 fe82 	clz	lr, r2
 8008b0e:	f1be 0f00 	cmp.w	lr, #0
 8008b12:	d00b      	beq.n	8008b2c <__udivmoddi4+0x38>
 8008b14:	f1ce 0c20 	rsb	ip, lr, #32
 8008b18:	fa01 f50e 	lsl.w	r5, r1, lr
 8008b1c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008b20:	fa02 f70e 	lsl.w	r7, r2, lr
 8008b24:	ea4c 0c05 	orr.w	ip, ip, r5
 8008b28:	fa00 f40e 	lsl.w	r4, r0, lr
 8008b2c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8008b30:	0c25      	lsrs	r5, r4, #16
 8008b32:	fbbc f8fa 	udiv	r8, ip, sl
 8008b36:	fa1f f987 	uxth.w	r9, r7
 8008b3a:	fb0a cc18 	mls	ip, sl, r8, ip
 8008b3e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8008b42:	fb08 f309 	mul.w	r3, r8, r9
 8008b46:	42ab      	cmp	r3, r5
 8008b48:	d90a      	bls.n	8008b60 <__udivmoddi4+0x6c>
 8008b4a:	19ed      	adds	r5, r5, r7
 8008b4c:	f108 32ff 	add.w	r2, r8, #4294967295
 8008b50:	f080 8123 	bcs.w	8008d9a <__udivmoddi4+0x2a6>
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	f240 8120 	bls.w	8008d9a <__udivmoddi4+0x2a6>
 8008b5a:	f1a8 0802 	sub.w	r8, r8, #2
 8008b5e:	443d      	add	r5, r7
 8008b60:	1aed      	subs	r5, r5, r3
 8008b62:	b2a4      	uxth	r4, r4
 8008b64:	fbb5 f0fa 	udiv	r0, r5, sl
 8008b68:	fb0a 5510 	mls	r5, sl, r0, r5
 8008b6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008b70:	fb00 f909 	mul.w	r9, r0, r9
 8008b74:	45a1      	cmp	r9, r4
 8008b76:	d909      	bls.n	8008b8c <__udivmoddi4+0x98>
 8008b78:	19e4      	adds	r4, r4, r7
 8008b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7e:	f080 810a 	bcs.w	8008d96 <__udivmoddi4+0x2a2>
 8008b82:	45a1      	cmp	r9, r4
 8008b84:	f240 8107 	bls.w	8008d96 <__udivmoddi4+0x2a2>
 8008b88:	3802      	subs	r0, #2
 8008b8a:	443c      	add	r4, r7
 8008b8c:	eba4 0409 	sub.w	r4, r4, r9
 8008b90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008b94:	2100      	movs	r1, #0
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	d061      	beq.n	8008c5e <__udivmoddi4+0x16a>
 8008b9a:	fa24 f40e 	lsr.w	r4, r4, lr
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6034      	str	r4, [r6, #0]
 8008ba2:	6073      	str	r3, [r6, #4]
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	d907      	bls.n	8008bbc <__udivmoddi4+0xc8>
 8008bac:	2e00      	cmp	r6, #0
 8008bae:	d054      	beq.n	8008c5a <__udivmoddi4+0x166>
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	e886 0021 	stmia.w	r6, {r0, r5}
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	fab3 f183 	clz	r1, r3
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	f040 808e 	bne.w	8008ce2 <__udivmoddi4+0x1ee>
 8008bc6:	42ab      	cmp	r3, r5
 8008bc8:	d302      	bcc.n	8008bd0 <__udivmoddi4+0xdc>
 8008bca:	4282      	cmp	r2, r0
 8008bcc:	f200 80fa 	bhi.w	8008dc4 <__udivmoddi4+0x2d0>
 8008bd0:	1a84      	subs	r4, r0, r2
 8008bd2:	eb65 0503 	sbc.w	r5, r5, r3
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	46ac      	mov	ip, r5
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	d03f      	beq.n	8008c5e <__udivmoddi4+0x16a>
 8008bde:	e886 1010 	stmia.w	r6, {r4, ip}
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	b912      	cbnz	r2, 8008bee <__udivmoddi4+0xfa>
 8008be8:	2701      	movs	r7, #1
 8008bea:	fbb7 f7f2 	udiv	r7, r7, r2
 8008bee:	fab7 fe87 	clz	lr, r7
 8008bf2:	f1be 0f00 	cmp.w	lr, #0
 8008bf6:	d134      	bne.n	8008c62 <__udivmoddi4+0x16e>
 8008bf8:	1beb      	subs	r3, r5, r7
 8008bfa:	0c3a      	lsrs	r2, r7, #16
 8008bfc:	fa1f fc87 	uxth.w	ip, r7
 8008c00:	2101      	movs	r1, #1
 8008c02:	fbb3 f8f2 	udiv	r8, r3, r2
 8008c06:	0c25      	lsrs	r5, r4, #16
 8008c08:	fb02 3318 	mls	r3, r2, r8, r3
 8008c0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8008c10:	fb0c f308 	mul.w	r3, ip, r8
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	d907      	bls.n	8008c28 <__udivmoddi4+0x134>
 8008c18:	19ed      	adds	r5, r5, r7
 8008c1a:	f108 30ff 	add.w	r0, r8, #4294967295
 8008c1e:	d202      	bcs.n	8008c26 <__udivmoddi4+0x132>
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	f200 80d1 	bhi.w	8008dc8 <__udivmoddi4+0x2d4>
 8008c26:	4680      	mov	r8, r0
 8008c28:	1aed      	subs	r5, r5, r3
 8008c2a:	b2a3      	uxth	r3, r4
 8008c2c:	fbb5 f0f2 	udiv	r0, r5, r2
 8008c30:	fb02 5510 	mls	r5, r2, r0, r5
 8008c34:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8008c38:	fb0c fc00 	mul.w	ip, ip, r0
 8008c3c:	45a4      	cmp	ip, r4
 8008c3e:	d907      	bls.n	8008c50 <__udivmoddi4+0x15c>
 8008c40:	19e4      	adds	r4, r4, r7
 8008c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c46:	d202      	bcs.n	8008c4e <__udivmoddi4+0x15a>
 8008c48:	45a4      	cmp	ip, r4
 8008c4a:	f200 80b8 	bhi.w	8008dbe <__udivmoddi4+0x2ca>
 8008c4e:	4618      	mov	r0, r3
 8008c50:	eba4 040c 	sub.w	r4, r4, ip
 8008c54:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008c58:	e79d      	b.n	8008b96 <__udivmoddi4+0xa2>
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c62:	f1ce 0420 	rsb	r4, lr, #32
 8008c66:	fa05 f30e 	lsl.w	r3, r5, lr
 8008c6a:	fa07 f70e 	lsl.w	r7, r7, lr
 8008c6e:	fa20 f804 	lsr.w	r8, r0, r4
 8008c72:	0c3a      	lsrs	r2, r7, #16
 8008c74:	fa25 f404 	lsr.w	r4, r5, r4
 8008c78:	ea48 0803 	orr.w	r8, r8, r3
 8008c7c:	fbb4 f1f2 	udiv	r1, r4, r2
 8008c80:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8008c84:	fb02 4411 	mls	r4, r2, r1, r4
 8008c88:	fa1f fc87 	uxth.w	ip, r7
 8008c8c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8008c90:	fb01 f30c 	mul.w	r3, r1, ip
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	fa00 f40e 	lsl.w	r4, r0, lr
 8008c9a:	d909      	bls.n	8008cb0 <__udivmoddi4+0x1bc>
 8008c9c:	19ed      	adds	r5, r5, r7
 8008c9e:	f101 30ff 	add.w	r0, r1, #4294967295
 8008ca2:	f080 808a 	bcs.w	8008dba <__udivmoddi4+0x2c6>
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	f240 8087 	bls.w	8008dba <__udivmoddi4+0x2c6>
 8008cac:	3902      	subs	r1, #2
 8008cae:	443d      	add	r5, r7
 8008cb0:	1aeb      	subs	r3, r5, r3
 8008cb2:	fa1f f588 	uxth.w	r5, r8
 8008cb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cba:	fb02 3310 	mls	r3, r2, r0, r3
 8008cbe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8008cc2:	fb00 f30c 	mul.w	r3, r0, ip
 8008cc6:	42ab      	cmp	r3, r5
 8008cc8:	d907      	bls.n	8008cda <__udivmoddi4+0x1e6>
 8008cca:	19ed      	adds	r5, r5, r7
 8008ccc:	f100 38ff 	add.w	r8, r0, #4294967295
 8008cd0:	d26f      	bcs.n	8008db2 <__udivmoddi4+0x2be>
 8008cd2:	42ab      	cmp	r3, r5
 8008cd4:	d96d      	bls.n	8008db2 <__udivmoddi4+0x2be>
 8008cd6:	3802      	subs	r0, #2
 8008cd8:	443d      	add	r5, r7
 8008cda:	1aeb      	subs	r3, r5, r3
 8008cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008ce0:	e78f      	b.n	8008c02 <__udivmoddi4+0x10e>
 8008ce2:	f1c1 0720 	rsb	r7, r1, #32
 8008ce6:	fa22 f807 	lsr.w	r8, r2, r7
 8008cea:	408b      	lsls	r3, r1
 8008cec:	fa05 f401 	lsl.w	r4, r5, r1
 8008cf0:	ea48 0303 	orr.w	r3, r8, r3
 8008cf4:	fa20 fe07 	lsr.w	lr, r0, r7
 8008cf8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008cfc:	40fd      	lsrs	r5, r7
 8008cfe:	ea4e 0e04 	orr.w	lr, lr, r4
 8008d02:	fbb5 f9fc 	udiv	r9, r5, ip
 8008d06:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8008d0a:	fb0c 5519 	mls	r5, ip, r9, r5
 8008d0e:	fa1f f883 	uxth.w	r8, r3
 8008d12:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8008d16:	fb09 f408 	mul.w	r4, r9, r8
 8008d1a:	42ac      	cmp	r4, r5
 8008d1c:	fa02 f201 	lsl.w	r2, r2, r1
 8008d20:	fa00 fa01 	lsl.w	sl, r0, r1
 8008d24:	d908      	bls.n	8008d38 <__udivmoddi4+0x244>
 8008d26:	18ed      	adds	r5, r5, r3
 8008d28:	f109 30ff 	add.w	r0, r9, #4294967295
 8008d2c:	d243      	bcs.n	8008db6 <__udivmoddi4+0x2c2>
 8008d2e:	42ac      	cmp	r4, r5
 8008d30:	d941      	bls.n	8008db6 <__udivmoddi4+0x2c2>
 8008d32:	f1a9 0902 	sub.w	r9, r9, #2
 8008d36:	441d      	add	r5, r3
 8008d38:	1b2d      	subs	r5, r5, r4
 8008d3a:	fa1f fe8e 	uxth.w	lr, lr
 8008d3e:	fbb5 f0fc 	udiv	r0, r5, ip
 8008d42:	fb0c 5510 	mls	r5, ip, r0, r5
 8008d46:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8008d4a:	fb00 f808 	mul.w	r8, r0, r8
 8008d4e:	45a0      	cmp	r8, r4
 8008d50:	d907      	bls.n	8008d62 <__udivmoddi4+0x26e>
 8008d52:	18e4      	adds	r4, r4, r3
 8008d54:	f100 35ff 	add.w	r5, r0, #4294967295
 8008d58:	d229      	bcs.n	8008dae <__udivmoddi4+0x2ba>
 8008d5a:	45a0      	cmp	r8, r4
 8008d5c:	d927      	bls.n	8008dae <__udivmoddi4+0x2ba>
 8008d5e:	3802      	subs	r0, #2
 8008d60:	441c      	add	r4, r3
 8008d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d66:	eba4 0408 	sub.w	r4, r4, r8
 8008d6a:	fba0 8902 	umull	r8, r9, r0, r2
 8008d6e:	454c      	cmp	r4, r9
 8008d70:	46c6      	mov	lr, r8
 8008d72:	464d      	mov	r5, r9
 8008d74:	d315      	bcc.n	8008da2 <__udivmoddi4+0x2ae>
 8008d76:	d012      	beq.n	8008d9e <__udivmoddi4+0x2aa>
 8008d78:	b156      	cbz	r6, 8008d90 <__udivmoddi4+0x29c>
 8008d7a:	ebba 030e 	subs.w	r3, sl, lr
 8008d7e:	eb64 0405 	sbc.w	r4, r4, r5
 8008d82:	fa04 f707 	lsl.w	r7, r4, r7
 8008d86:	40cb      	lsrs	r3, r1
 8008d88:	431f      	orrs	r7, r3
 8008d8a:	40cc      	lsrs	r4, r1
 8008d8c:	6037      	str	r7, [r6, #0]
 8008d8e:	6074      	str	r4, [r6, #4]
 8008d90:	2100      	movs	r1, #0
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	4618      	mov	r0, r3
 8008d98:	e6f8      	b.n	8008b8c <__udivmoddi4+0x98>
 8008d9a:	4690      	mov	r8, r2
 8008d9c:	e6e0      	b.n	8008b60 <__udivmoddi4+0x6c>
 8008d9e:	45c2      	cmp	sl, r8
 8008da0:	d2ea      	bcs.n	8008d78 <__udivmoddi4+0x284>
 8008da2:	ebb8 0e02 	subs.w	lr, r8, r2
 8008da6:	eb69 0503 	sbc.w	r5, r9, r3
 8008daa:	3801      	subs	r0, #1
 8008dac:	e7e4      	b.n	8008d78 <__udivmoddi4+0x284>
 8008dae:	4628      	mov	r0, r5
 8008db0:	e7d7      	b.n	8008d62 <__udivmoddi4+0x26e>
 8008db2:	4640      	mov	r0, r8
 8008db4:	e791      	b.n	8008cda <__udivmoddi4+0x1e6>
 8008db6:	4681      	mov	r9, r0
 8008db8:	e7be      	b.n	8008d38 <__udivmoddi4+0x244>
 8008dba:	4601      	mov	r1, r0
 8008dbc:	e778      	b.n	8008cb0 <__udivmoddi4+0x1bc>
 8008dbe:	3802      	subs	r0, #2
 8008dc0:	443c      	add	r4, r7
 8008dc2:	e745      	b.n	8008c50 <__udivmoddi4+0x15c>
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	e708      	b.n	8008bda <__udivmoddi4+0xe6>
 8008dc8:	f1a8 0802 	sub.w	r8, r8, #2
 8008dcc:	443d      	add	r5, r7
 8008dce:	e72b      	b.n	8008c28 <__udivmoddi4+0x134>

08008dd0 <__aeabi_idiv0>:
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008dd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008dda:	e003      	b.n	8008de4 <LoopCopyDataInit>

08008ddc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008dde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008de0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008de2:	3104      	adds	r1, #4

08008de4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008de4:	480b      	ldr	r0, [pc, #44]	; (8008e14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008de6:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008de8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008dea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008dec:	d3f6      	bcc.n	8008ddc <CopyDataInit>
	ldr	r2, =_sbss
 8008dee:	4a0b      	ldr	r2, [pc, #44]	; (8008e1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8008df0:	e002      	b.n	8008df8 <LoopFillZerobss>

08008df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008df2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008df4:	f842 3b04 	str.w	r3, [r2], #4

08008df8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008df8:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <LoopForever+0x16>)
	cmp	r2, r3
 8008dfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008dfc:	d3f9      	bcc.n	8008df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008dfe:	f7ff fd71 	bl	80088e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e02:	f000 f811 	bl	8008e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008e06:	f7ff f901 	bl	800800c <main>

08008e0a <LoopForever>:

LoopForever:
    b LoopForever
 8008e0a:	e7fe      	b.n	8008e0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008e0c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008e10:	08008f08 	.word	0x08008f08
	ldr	r0, =_sdata
 8008e14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008e18:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8008e1c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8008e20:	20000740 	.word	0x20000740

08008e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008e24:	e7fe      	b.n	8008e24 <ADC1_2_IRQHandler>
	...

08008e28 <__libc_init_array>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4e0d      	ldr	r6, [pc, #52]	; (8008e60 <__libc_init_array+0x38>)
 8008e2c:	4c0d      	ldr	r4, [pc, #52]	; (8008e64 <__libc_init_array+0x3c>)
 8008e2e:	1ba4      	subs	r4, r4, r6
 8008e30:	10a4      	asrs	r4, r4, #2
 8008e32:	2500      	movs	r5, #0
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d109      	bne.n	8008e4c <__libc_init_array+0x24>
 8008e38:	4e0b      	ldr	r6, [pc, #44]	; (8008e68 <__libc_init_array+0x40>)
 8008e3a:	4c0c      	ldr	r4, [pc, #48]	; (8008e6c <__libc_init_array+0x44>)
 8008e3c:	f000 f820 	bl	8008e80 <_init>
 8008e40:	1ba4      	subs	r4, r4, r6
 8008e42:	10a4      	asrs	r4, r4, #2
 8008e44:	2500      	movs	r5, #0
 8008e46:	42a5      	cmp	r5, r4
 8008e48:	d105      	bne.n	8008e56 <__libc_init_array+0x2e>
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e50:	4798      	blx	r3
 8008e52:	3501      	adds	r5, #1
 8008e54:	e7ee      	b.n	8008e34 <__libc_init_array+0xc>
 8008e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e5a:	4798      	blx	r3
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	e7f2      	b.n	8008e46 <__libc_init_array+0x1e>
 8008e60:	08008f00 	.word	0x08008f00
 8008e64:	08008f00 	.word	0x08008f00
 8008e68:	08008f00 	.word	0x08008f00
 8008e6c:	08008f04 	.word	0x08008f04

08008e70 <memset>:
 8008e70:	4402      	add	r2, r0
 8008e72:	4603      	mov	r3, r0
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d100      	bne.n	8008e7a <memset+0xa>
 8008e78:	4770      	bx	lr
 8008e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7e:	e7f9      	b.n	8008e74 <memset+0x4>

08008e80 <_init>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr

08008e8c <_fini>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr
