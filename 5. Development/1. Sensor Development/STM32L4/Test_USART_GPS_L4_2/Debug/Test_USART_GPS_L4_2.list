
Test_USART_GPS_L4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800b088  0800b088  0001b088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000228  20000000  0800b5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a38  20000228  0800b7cc  00020228  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001c60  0800b7cc  00021c60  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001256f  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021ba  00000000  00000000  000327c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f80  00000000  00000000  00034988  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e78  00000000  00000000  00035908  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e4f  00000000  00000000  00036780  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005331  00000000  00000000  0003d5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042900  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005370  00000000  00000000  0004297c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000024  00000000  00000000  00047cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000004e  00000000  00000000  00047d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b070 	.word	0x0800b070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	0800b070 	.word	0x0800b070

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <__aeabi_uldivmod>:
 8000c74:	b953      	cbnz	r3, 8000c8c <__aeabi_uldivmod+0x18>
 8000c76:	b94a      	cbnz	r2, 8000c8c <__aeabi_uldivmod+0x18>
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	2800      	cmpeq	r0, #0
 8000c7e:	bf1c      	itt	ne
 8000c80:	f04f 31ff 	movne.w	r1, #4294967295
 8000c84:	f04f 30ff 	movne.w	r0, #4294967295
 8000c88:	f000 b97a 	b.w	8000f80 <__aeabi_idiv0>
 8000c8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c94:	f000 f806 	bl	8000ca4 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4770      	bx	lr

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	468c      	mov	ip, r1
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	9e08      	ldr	r6, [sp, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d151      	bne.n	8000d58 <__udivmoddi4+0xb4>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d96d      	bls.n	8000d96 <__udivmoddi4+0xf2>
 8000cba:	fab2 fe82 	clz	lr, r2
 8000cbe:	f1be 0f00 	cmp.w	lr, #0
 8000cc2:	d00b      	beq.n	8000cdc <__udivmoddi4+0x38>
 8000cc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000cc8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ccc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cd4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cdc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ce0:	0c25      	lsrs	r5, r4, #16
 8000ce2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ce6:	fa1f f987 	uxth.w	r9, r7
 8000cea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cf2:	fb08 f309 	mul.w	r3, r8, r9
 8000cf6:	42ab      	cmp	r3, r5
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x6c>
 8000cfa:	19ed      	adds	r5, r5, r7
 8000cfc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d00:	f080 8123 	bcs.w	8000f4a <__udivmoddi4+0x2a6>
 8000d04:	42ab      	cmp	r3, r5
 8000d06:	f240 8120 	bls.w	8000f4a <__udivmoddi4+0x2a6>
 8000d0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0e:	443d      	add	r5, r7
 8000d10:	1aed      	subs	r5, r5, r3
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d20:	fb00 f909 	mul.w	r9, r0, r9
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x98>
 8000d28:	19e4      	adds	r4, r4, r7
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	f080 810a 	bcs.w	8000f46 <__udivmoddi4+0x2a2>
 8000d32:	45a1      	cmp	r9, r4
 8000d34:	f240 8107 	bls.w	8000f46 <__udivmoddi4+0x2a2>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 0409 	sub.w	r4, r4, r9
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	2100      	movs	r1, #0
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d061      	beq.n	8000e0e <__udivmoddi4+0x16a>
 8000d4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d4e:	2300      	movs	r3, #0
 8000d50:	6034      	str	r4, [r6, #0]
 8000d52:	6073      	str	r3, [r6, #4]
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xc8>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d054      	beq.n	8000e0a <__udivmoddi4+0x166>
 8000d60:	2100      	movs	r1, #0
 8000d62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d66:	4608      	mov	r0, r1
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	fab3 f183 	clz	r1, r3
 8000d70:	2900      	cmp	r1, #0
 8000d72:	f040 808e 	bne.w	8000e92 <__udivmoddi4+0x1ee>
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xdc>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80fa 	bhi.w	8000f74 <__udivmoddi4+0x2d0>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb65 0503 	sbc.w	r5, r5, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	46ac      	mov	ip, r5
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d03f      	beq.n	8000e0e <__udivmoddi4+0x16a>
 8000d8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	b912      	cbnz	r2, 8000d9e <__udivmoddi4+0xfa>
 8000d98:	2701      	movs	r7, #1
 8000d9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d9e:	fab7 fe87 	clz	lr, r7
 8000da2:	f1be 0f00 	cmp.w	lr, #0
 8000da6:	d134      	bne.n	8000e12 <__udivmoddi4+0x16e>
 8000da8:	1beb      	subs	r3, r5, r7
 8000daa:	0c3a      	lsrs	r2, r7, #16
 8000dac:	fa1f fc87 	uxth.w	ip, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000db6:	0c25      	lsrs	r5, r4, #16
 8000db8:	fb02 3318 	mls	r3, r2, r8, r3
 8000dbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dc0:	fb0c f308 	mul.w	r3, ip, r8
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x134>
 8000dc8:	19ed      	adds	r5, r5, r7
 8000dca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x132>
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	f200 80d1 	bhi.w	8000f78 <__udivmoddi4+0x2d4>
 8000dd6:	4680      	mov	r8, r0
 8000dd8:	1aed      	subs	r5, r5, r3
 8000dda:	b2a3      	uxth	r3, r4
 8000ddc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000de0:	fb02 5510 	mls	r5, r2, r0, r5
 8000de4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000de8:	fb0c fc00 	mul.w	ip, ip, r0
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x15c>
 8000df0:	19e4      	adds	r4, r4, r7
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x15a>
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	f200 80b8 	bhi.w	8000f6e <__udivmoddi4+0x2ca>
 8000dfe:	4618      	mov	r0, r3
 8000e00:	eba4 040c 	sub.w	r4, r4, ip
 8000e04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e08:	e79d      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1ce 0420 	rsb	r4, lr, #32
 8000e16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000e22:	0c3a      	lsrs	r2, r7, #16
 8000e24:	fa25 f404 	lsr.w	r4, r5, r4
 8000e28:	ea48 0803 	orr.w	r8, r8, r3
 8000e2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e34:	fb02 4411 	mls	r4, r2, r1, r4
 8000e38:	fa1f fc87 	uxth.w	ip, r7
 8000e3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e40:	fb01 f30c 	mul.w	r3, r1, ip
 8000e44:	42ab      	cmp	r3, r5
 8000e46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e4a:	d909      	bls.n	8000e60 <__udivmoddi4+0x1bc>
 8000e4c:	19ed      	adds	r5, r5, r7
 8000e4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e52:	f080 808a 	bcs.w	8000f6a <__udivmoddi4+0x2c6>
 8000e56:	42ab      	cmp	r3, r5
 8000e58:	f240 8087 	bls.w	8000f6a <__udivmoddi4+0x2c6>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	1aeb      	subs	r3, r5, r3
 8000e62:	fa1f f588 	uxth.w	r5, r8
 8000e66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e72:	fb00 f30c 	mul.w	r3, r0, ip
 8000e76:	42ab      	cmp	r3, r5
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1e6>
 8000e7a:	19ed      	adds	r5, r5, r7
 8000e7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e80:	d26f      	bcs.n	8000f62 <__udivmoddi4+0x2be>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d96d      	bls.n	8000f62 <__udivmoddi4+0x2be>
 8000e86:	3802      	subs	r0, #2
 8000e88:	443d      	add	r5, r7
 8000e8a:	1aeb      	subs	r3, r5, r3
 8000e8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e90:	e78f      	b.n	8000db2 <__udivmoddi4+0x10e>
 8000e92:	f1c1 0720 	rsb	r7, r1, #32
 8000e96:	fa22 f807 	lsr.w	r8, r2, r7
 8000e9a:	408b      	lsls	r3, r1
 8000e9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea0:	ea48 0303 	orr.w	r3, r8, r3
 8000ea4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ea8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eac:	40fd      	lsrs	r5, r7
 8000eae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000eb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000eba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000ebe:	fa1f f883 	uxth.w	r8, r3
 8000ec2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ec6:	fb09 f408 	mul.w	r4, r9, r8
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x244>
 8000ed6:	18ed      	adds	r5, r5, r3
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d243      	bcs.n	8000f66 <__udivmoddi4+0x2c2>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d941      	bls.n	8000f66 <__udivmoddi4+0x2c2>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	441d      	add	r5, r3
 8000ee8:	1b2d      	subs	r5, r5, r4
 8000eea:	fa1f fe8e 	uxth.w	lr, lr
 8000eee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ef2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ef6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45a0      	cmp	r8, r4
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x26e>
 8000f02:	18e4      	adds	r4, r4, r3
 8000f04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f08:	d229      	bcs.n	8000f5e <__udivmoddi4+0x2ba>
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d927      	bls.n	8000f5e <__udivmoddi4+0x2ba>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	441c      	add	r4, r3
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba4 0408 	sub.w	r4, r4, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454c      	cmp	r4, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	464d      	mov	r5, r9
 8000f24:	d315      	bcc.n	8000f52 <__udivmoddi4+0x2ae>
 8000f26:	d012      	beq.n	8000f4e <__udivmoddi4+0x2aa>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x29c>
 8000f2a:	ebba 030e 	subs.w	r3, sl, lr
 8000f2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40cb      	lsrs	r3, r1
 8000f38:	431f      	orrs	r7, r3
 8000f3a:	40cc      	lsrs	r4, r1
 8000f3c:	6037      	str	r7, [r6, #0]
 8000f3e:	6074      	str	r4, [r6, #4]
 8000f40:	2100      	movs	r1, #0
 8000f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f46:	4618      	mov	r0, r3
 8000f48:	e6f8      	b.n	8000d3c <__udivmoddi4+0x98>
 8000f4a:	4690      	mov	r8, r2
 8000f4c:	e6e0      	b.n	8000d10 <__udivmoddi4+0x6c>
 8000f4e:	45c2      	cmp	sl, r8
 8000f50:	d2ea      	bcs.n	8000f28 <__udivmoddi4+0x284>
 8000f52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f56:	eb69 0503 	sbc.w	r5, r9, r3
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7e4      	b.n	8000f28 <__udivmoddi4+0x284>
 8000f5e:	4628      	mov	r0, r5
 8000f60:	e7d7      	b.n	8000f12 <__udivmoddi4+0x26e>
 8000f62:	4640      	mov	r0, r8
 8000f64:	e791      	b.n	8000e8a <__udivmoddi4+0x1e6>
 8000f66:	4681      	mov	r9, r0
 8000f68:	e7be      	b.n	8000ee8 <__udivmoddi4+0x244>
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	e778      	b.n	8000e60 <__udivmoddi4+0x1bc>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	443c      	add	r4, r7
 8000f72:	e745      	b.n	8000e00 <__udivmoddi4+0x15c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xe6>
 8000f78:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7c:	443d      	add	r5, r7
 8000f7e:	e72b      	b.n	8000dd8 <__udivmoddi4+0x134>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_Init+0x3c>)
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x3c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f97c 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f80f 	bl	8000fc4 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	e001      	b.n	8000fb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb2:	f006 fb59 	bl	8007668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_InitTick+0x68>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d022      	beq.n	800101e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_InitTick+0x6c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_InitTick+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f996 	bl	800131e <HAL_SYSTICK_Config>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	d809      	bhi.n	8001012 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	f000 f952 	bl	80012ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_InitTick+0x70>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e007      	b.n	8001022 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e004      	b.n	8001022 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000004 	.word	0x20000004
 8001030:	2000000c 	.word	0x2000000c
 8001034:	20000000 	.word	0x20000000

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x1c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x20>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4413      	add	r3, r2
 8001046:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_IncTick+0x1c>)
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	20000278 	.word	0x20000278
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000278 	.word	0x20000278

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d004      	beq.n	8001098 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_Delay+0x40>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001098:	bf00      	nop
 800109a:	f7ff ffdf 	bl	800105c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad2      	subs	r2, r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d3f7      	bcc.n	800109a <HAL_Delay+0x26>
  {
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000004 	.word	0x20000004

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	4909      	ldr	r1, [pc, #36]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db10      	blt.n	800118c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <__NVIC_DisableIRQ+0x40>)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	f002 021f 	and.w	r2, r2, #31
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	3320      	adds	r3, #32
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001188:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	490d      	ldr	r1, [pc, #52]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	4909      	ldr	r1, [pc, #36]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	2201      	movs	r2, #1
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	401a      	ands	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001236:	2101      	movs	r1, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	1e59      	subs	r1, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff90 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff09 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff1e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff90 	bl	80011f0 <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5f 	bl	800119c <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff11 	bl	800111c <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff21 	bl	8001158 <__NVIC_DisableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff94 	bl	8001254 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e098      	b.n	800147c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <HAL_DMA_Init+0x150>)
 8001352:	429a      	cmp	r2, r3
 8001354:	d80f      	bhi.n	8001376 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b4b      	ldr	r3, [pc, #300]	; (800148c <HAL_DMA_Init+0x154>)
 800135e:	4413      	add	r3, r2
 8001360:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <HAL_DMA_Init+0x158>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	009a      	lsls	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a48      	ldr	r2, [pc, #288]	; (8001494 <HAL_DMA_Init+0x15c>)
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
 8001374:	e00e      	b.n	8001394 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_DMA_Init+0x160>)
 800137e:	4413      	add	r3, r2
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_DMA_Init+0x158>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	009a      	lsls	r2, r3, #2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_DMA_Init+0x164>)
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ee:	d039      	beq.n	8001464 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_DMA_Init+0x15c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d11a      	bne.n	8001430 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013fa:	4929      	ldr	r1, [pc, #164]	; (80014a0 <HAL_DMA_Init+0x168>)
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_DMA_Init+0x168>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 031c 	and.w	r3, r3, #28
 8001408:	200f      	movs	r0, #15
 800140a:	fa00 f303 	lsl.w	r3, r0, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4013      	ands	r3, r2
 8001412:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001414:	4822      	ldr	r0, [pc, #136]	; (80014a0 <HAL_DMA_Init+0x168>)
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_DMA_Init+0x168>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6859      	ldr	r1, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f003 031c 	and.w	r3, r3, #28
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	6003      	str	r3, [r0, #0]
 800142e:	e019      	b.n	8001464 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001430:	491c      	ldr	r1, [pc, #112]	; (80014a4 <HAL_DMA_Init+0x16c>)
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_DMA_Init+0x16c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f003 031c 	and.w	r3, r3, #28
 800143e:	200f      	movs	r0, #15
 8001440:	fa00 f303 	lsl.w	r3, r0, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <HAL_DMA_Init+0x16c>)
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_DMA_Init+0x16c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f003 031c 	and.w	r3, r3, #28
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	6003      	str	r3, [r0, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40020407 	.word	0x40020407
 800148c:	bffdfff8 	.word	0xbffdfff8
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	40020000 	.word	0x40020000
 8001498:	bffdfbf8 	.word	0xbffdfbf8
 800149c:	40020400 	.word	0x40020400
 80014a0:	400200a8 	.word	0x400200a8
 80014a4:	400204a8 	.word	0x400204a8

080014a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e072      	b.n	80015a0 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <HAL_DMA_DeInit+0x104>)
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d80f      	bhi.n	80014f6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_DMA_DeInit+0x108>)
 80014de:	4413      	add	r3, r2
 80014e0:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <HAL_DMA_DeInit+0x10c>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <HAL_DMA_DeInit+0x110>)
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
 80014f4:	e00e      	b.n	8001514 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_DMA_DeInit+0x114>)
 80014fe:	4413      	add	r3, r2
 8001500:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <HAL_DMA_DeInit+0x10c>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a2b      	ldr	r2, [pc, #172]	; (80015c0 <HAL_DMA_DeInit+0x118>)
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001524:	f002 021c 	and.w	r2, r2, #28
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_DMA_DeInit+0x110>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10d      	bne.n	8001556 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800153a:	4922      	ldr	r1, [pc, #136]	; (80015c4 <HAL_DMA_DeInit+0x11c>)
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_DMA_DeInit+0x11c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	f003 031c 	and.w	r3, r3, #28
 8001548:	200f      	movs	r0, #15
 800154a:	fa00 f303 	lsl.w	r3, r0, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	4013      	ands	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e00c      	b.n	8001570 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001556:	491c      	ldr	r1, [pc, #112]	; (80015c8 <HAL_DMA_DeInit+0x120>)
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_DMA_DeInit+0x120>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	200f      	movs	r0, #15
 8001566:	fa00 f303 	lsl.w	r3, r0, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	4013      	ands	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40020407 	.word	0x40020407
 80015b0:	bffdfff8 	.word	0xbffdfff8
 80015b4:	cccccccd 	.word	0xcccccccd
 80015b8:	40020000 	.word	0x40020000
 80015bc:	bffdfbf8 	.word	0xbffdfbf8
 80015c0:	40020400 	.word	0x40020400
 80015c4:	400200a8 	.word	0x400200a8
 80015c8:	400204a8 	.word	0x400204a8

080015cc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_DMA_Start+0x20>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e02e      	b.n	800164a <HAL_DMA_Start+0x7e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d11d      	bne.n	800163c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f9ae 	bl	8001986 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e005      	b.n	8001648 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8001644:	2302      	movs	r3, #2
 8001646:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001648:	7dfb      	ldrb	r3, [r7, #23]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Start_IT+0x20>
 800166e:	2302      	movs	r3, #2
 8001670:	e04b      	b.n	800170a <HAL_DMA_Start_IT+0xb8>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d13a      	bne.n	80016fc <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2202      	movs	r2, #2
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f96b 	bl	8001986 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f042 020e 	orr.w	r2, r2, #14
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e00f      	b.n	80016ea <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	f042 020a 	orr.w	r2, r2, #10
 80016e8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e005      	b.n	8001708 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001704:	2302      	movs	r3, #2
 8001706:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001708:	7dfb      	ldrb	r3, [r7, #23]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d008      	beq.n	800173c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2204      	movs	r2, #4
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e022      	b.n	8001782 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f022 020e 	bic.w	r2, r2, #14
 800174a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001764:	f002 021c 	and.w	r2, r2, #28
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d005      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2204      	movs	r2, #4
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e029      	b.n	8001806 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	f022 020e 	bic.w	r2, r2, #14
 80017c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017da:	f002 021c 	and.w	r2, r2, #28
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
    }
  }
  return status;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f003 031c 	and.w	r3, r3, #28
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d026      	beq.n	800188a <HAL_DMA_IRQHandler+0x7a>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d021      	beq.n	800188a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	f022 0204 	bic.w	r2, r2, #4
 8001862:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800186c:	f002 021c 	and.w	r2, r2, #28
 8001870:	2104      	movs	r1, #4
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	2b00      	cmp	r3, #0
 800187e:	d071      	beq.n	8001964 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001888:	e06c      	b.n	8001964 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f003 031c 	and.w	r3, r3, #28
 8001892:	2202      	movs	r2, #2
 8001894:	409a      	lsls	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d02e      	beq.n	80018fc <HAL_DMA_IRQHandler+0xec>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d029      	beq.n	80018fc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10b      	bne.n	80018ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	f022 020a 	bic.w	r2, r2, #10
 80018c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018d6:	f002 021c 	and.w	r2, r2, #28
 80018da:	2102      	movs	r1, #2
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d038      	beq.n	8001964 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018fa:	e033      	b.n	8001964 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f003 031c 	and.w	r3, r3, #28
 8001904:	2208      	movs	r2, #8
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02a      	beq.n	8001966 <HAL_DMA_IRQHandler+0x156>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	f022 020e 	bic.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001932:	f002 021c 	and.w	r2, r2, #28
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001964:	bf00      	nop
 8001966:	bf00      	nop
}
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800199c:	f002 021c 	and.w	r2, r2, #28
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	d108      	bne.n	80019ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019c8:	e007      	b.n	80019da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	60da      	str	r2, [r3, #12]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e17f      	b.n	8001cf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8171 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x38>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b12      	cmp	r3, #18
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	6939      	ldr	r1, [r7, #16]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d00b      	beq.n	8001abc <HAL_GPIO_Init+0xd4>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d007      	beq.n	8001abc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab0:	2b11      	cmp	r3, #17
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d130      	bne.n	8001b1e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af2:	2201      	movs	r2, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 0201 	and.w	r2, r3, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d118      	bne.n	8001b5c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ac 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4a5e      	ldr	r2, [pc, #376]	; (8001d14 <HAL_GPIO_Init+0x32c>)
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <HAL_GPIO_Init+0x32c>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_GPIO_Init+0x32c>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb2:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x242>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <HAL_GPIO_Init+0x338>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_GPIO_Init+0x340>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4a      	ldr	r2, [pc, #296]	; (8001d2c <HAL_GPIO_Init+0x344>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a49      	ldr	r2, [pc, #292]	; (8001d30 <HAL_GPIO_Init+0x348>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3c:	4936      	ldr	r1, [pc, #216]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cec:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f ae78 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	48001000 	.word	0x48001000
 8001d2c:	48001400 	.word	0x48001400
 8001d30:	48001800 	.word	0x48001800
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d46:	e0cd      	b.n	8001ee4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80c1 	beq.w	8001ede <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001d5c:	4a68      	ldr	r2, [pc, #416]	; (8001f00 <HAL_GPIO_DeInit+0x1c8>)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_DeInit+0x9a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_GPIO_DeInit+0x1cc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_DeInit+0x96>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <HAL_GPIO_DeInit+0x1d0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_DeInit+0x92>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a5c      	ldr	r2, [pc, #368]	; (8001f0c <HAL_GPIO_DeInit+0x1d4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_DeInit+0x8e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_GPIO_DeInit+0x1d8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_DeInit+0x8a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a5a      	ldr	r2, [pc, #360]	; (8001f14 <HAL_GPIO_DeInit+0x1dc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_DeInit+0x86>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a59      	ldr	r2, [pc, #356]	; (8001f18 <HAL_GPIO_DeInit+0x1e0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_DeInit+0x82>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_DeInit+0x9c>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	fa03 f202 	lsl.w	r2, r3, r2
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d132      	bne.n	8001e4c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001de6:	494d      	ldr	r1, [pc, #308]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001de8:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	4013      	ands	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001df4:	4949      	ldr	r1, [pc, #292]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001e02:	4946      	ldr	r1, [pc, #280]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001e04:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001e10:	4942      	ldr	r1, [pc, #264]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_GPIO_DeInit+0x1e4>)
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e2e:	4834      	ldr	r0, [pc, #208]	; (8001f00 <HAL_GPIO_DeInit+0x1c8>)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	4932      	ldr	r1, [pc, #200]	; (8001f00 <HAL_GPIO_DeInit+0x1c8>)
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	0892      	lsrs	r2, r2, #2
 8001e3a:	3202      	adds	r2, #2
 8001e3c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	43d2      	mvns	r2, r2
 8001e44:	400a      	ands	r2, r1
 8001e46:	3302      	adds	r3, #2
 8001e48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2103      	movs	r1, #3
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	08d9      	lsrs	r1, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3108      	adds	r1, #8
 8001e6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	200f      	movs	r0, #15
 8001e7a:	fa00 f303 	lsl.w	r3, r0, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4019      	ands	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2103      	movs	r1, #3
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ece:	2101      	movs	r1, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f af2b 	bne.w	8001d48 <HAL_GPIO_DeInit+0x10>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00
 8001f10:	48001000 	.word	0x48001000
 8001f14:	48001400 	.word	0x48001400
 8001f18:	48001800 	.word	0x48001800
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f70:	887a      	ldrh	r2, [r7, #2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fae:	d130      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbc:	d038      	beq.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fbe:	4a20      	ldr	r2, [pc, #128]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2232      	movs	r2, #50	; 0x32
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0c9b      	lsrs	r3, r3, #18
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe4:	e002      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d102      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f2      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d110      	bne.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e00f      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d007      	beq.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800202a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40007000 	.word	0x40007000
 8002044:	2000000c 	.word	0x2000000c
 8002048:	431bde83 	.word	0x431bde83

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e39d      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205e:	4ba4      	ldr	r3, [pc, #656]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002068:	4ba1      	ldr	r3, [pc, #644]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80e1 	beq.w	8002242 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_RCC_OscConfig+0x4a>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	f040 8088 	bne.w	800219e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b01      	cmp	r3, #1
 8002092:	f040 8084 	bne.w	800219e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002096:	4b96      	ldr	r3, [pc, #600]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x62>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e375      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1a      	ldr	r2, [r3, #32]
 80020b2:	4b8f      	ldr	r3, [pc, #572]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_RCC_OscConfig+0x7c>
 80020be:	4b8c      	ldr	r3, [pc, #560]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c6:	e005      	b.n	80020d4 <HAL_RCC_OscConfig+0x88>
 80020c8:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d923      	bls.n	8002120 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd09 	bl	8002af4 <RCC_SetFlashLatencyFromMSIRange>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e356      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ec:	4a80      	ldr	r2, [pc, #512]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020ee:	4b80      	ldr	r3, [pc, #512]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	497d      	ldr	r1, [pc, #500]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020fa:	4b7d      	ldr	r3, [pc, #500]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	4979      	ldr	r1, [pc, #484]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800210c:	4b78      	ldr	r3, [pc, #480]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
 800211e:	e022      	b.n	8002166 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002120:	4a73      	ldr	r2, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4970      	ldr	r1, [pc, #448]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800212e:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213e:	496c      	ldr	r1, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002140:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fccc 	bl	8002af4 <RCC_SetFlashLatencyFromMSIRange>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e319      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002166:	f000 fc03 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b60      	ldr	r3, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_RCC_OscConfig+0x2a8>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	fa21 f303 	lsr.w	r3, r1, r3
 8002182:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002186:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <HAL_RCC_OscConfig+0x2b0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe ff1a 	bl	8000fc4 <HAL_InitTick>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d052      	beq.n	8002240 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	e2fd      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d032      	beq.n	800220c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a6:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021a8:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b2:	f7fe ff53 	bl	800105c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ba:	f7fe ff4f 	bl	800105c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e2e6      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d8:	4a45      	ldr	r2, [pc, #276]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021da:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4942      	ldr	r1, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f6:	493e      	ldr	r1, [pc, #248]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021f8:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
 800220a:	e01a      	b.n	8002242 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002218:	f7fe ff20 	bl	800105c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002220:	f7fe ff1c 	bl	800105c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e2b3      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1d4>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d074      	beq.n	8002338 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x214>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d10e      	bne.n	8002278 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d064      	beq.n	8002336 <HAL_RCC_OscConfig+0x2ea>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d160      	bne.n	8002336 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e290      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x244>
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0x280>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x268>
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0x280>
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x2a4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01c      	beq.n	800230e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fec2 	bl	800105c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022da:	e011      	b.n	8002300 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe febe 	bl	800105c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d90a      	bls.n	8002300 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e255      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	0800b16c 	.word	0x0800b16c
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002300:	4bae      	ldr	r3, [pc, #696]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0e7      	beq.n	80022dc <HAL_RCC_OscConfig+0x290>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe fea5 	bl	800105c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002316:	f7fe fea1 	bl	800105c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e238      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002328:	4ba4      	ldr	r3, [pc, #656]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x2ca>
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002336:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d060      	beq.n	8002406 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x30a>
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b0c      	cmp	r3, #12
 800234e:	d119      	bne.n	8002384 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002356:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x322>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e215      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4993      	ldr	r1, [pc, #588]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002382:	e040      	b.n	8002406 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d023      	beq.n	80023d4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4a8b      	ldr	r2, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fe60 	bl	800105c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fe5c 	bl	800105c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1f3      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b2:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	497f      	ldr	r1, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80023c0:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
 80023d2:	e018      	b.n	8002406 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d4:	4a79      	ldr	r2, [pc, #484]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80023d6:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe3c 	bl	800105c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fe38 	bl	800105c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1cf      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03c      	beq.n	800248c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01c      	beq.n	8002454 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4a68      	ldr	r2, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800241c:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7fe fe17 	bl	800105c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002432:	f7fe fe13 	bl	800105c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e1aa      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002444:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ef      	beq.n	8002432 <HAL_RCC_OscConfig+0x3e6>
 8002452:	e01b      	b.n	800248c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002454:	4a59      	ldr	r2, [pc, #356]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002456:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fdfa 	bl	800105c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe fdf6 	bl	800105c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e18d      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247e:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ef      	bne.n	800246c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a5 	beq.w	80025e4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4a44      	ldr	r2, [pc, #272]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	; 0x58
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	4b3e      	ldr	r3, [pc, #248]	; (80025c0 <HAL_RCC_OscConfig+0x574>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d2:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x574>)
 80024d4:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_RCC_OscConfig+0x574>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe fdbd 	bl	800105c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe fdb9 	bl	800105c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e150      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_RCC_OscConfig+0x574>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d108      	bne.n	800251e <HAL_RCC_OscConfig+0x4d2>
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251c:	e024      	b.n	8002568 <HAL_RCC_OscConfig+0x51c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d110      	bne.n	8002548 <HAL_RCC_OscConfig+0x4fc>
 8002526:	4a25      	ldr	r2, [pc, #148]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002546:	e00f      	b.n	8002568 <HAL_RCC_OscConfig+0x51c>
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800255a:	4b18      	ldr	r3, [pc, #96]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fd74 	bl	800105c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fd70 	bl	800105c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e105      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x570>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ed      	beq.n	8002578 <HAL_RCC_OscConfig+0x52c>
 800259c:	e019      	b.n	80025d2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe fd5d 	bl	800105c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a4:	e00e      	b.n	80025c4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7fe fd59 	bl	800105c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d905      	bls.n	80025c4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0ee      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e9      	bne.n	80025a6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4a72      	ldr	r2, [pc, #456]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80025da:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80d5 	beq.w	8002798 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	f000 808e 	beq.w	8002712 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d15b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fd27 	bl	800105c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe fd23 	bl	800105c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0ba      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002630:	485c      	ldr	r0, [pc, #368]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002632:	4b5c      	ldr	r3, [pc, #368]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b5c      	ldr	r3, [pc, #368]	; (80027a8 <HAL_RCC_OscConfig+0x75c>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002642:	3a01      	subs	r2, #1
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800264c:	0212      	lsls	r2, r2, #8
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002654:	0852      	lsrs	r2, r2, #1
 8002656:	3a01      	subs	r2, #1
 8002658:	0552      	lsls	r2, r2, #21
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002660:	0852      	lsrs	r2, r2, #1
 8002662:	3a01      	subs	r2, #1
 8002664:	0652      	lsls	r2, r2, #25
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800266c:	0912      	lsrs	r2, r2, #4
 800266e:	0452      	lsls	r2, r2, #17
 8002670:	430a      	orrs	r2, r1
 8002672:	4313      	orrs	r3, r2
 8002674:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002676:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002680:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002682:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7fe fce5 	bl	800105c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fce1 	bl	800105c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e078      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a8:	4b3e      	ldr	r3, [pc, #248]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x64a>
 80026b4:	e070      	b.n	8002798 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026b8:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ce:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f023 0303 	bic.w	r3, r3, #3
 80026d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026da:	4a32      	ldr	r2, [pc, #200]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fcb7 	bl	800105c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fcb3 	bl	800105c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e04a      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x6a6>
 8002710:	e042      	b.n	8002798 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e03d      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_RCC_OscConfig+0x758>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0203 	and.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	429a      	cmp	r2, r3
 8002730:	d130      	bne.n	8002794 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	3b01      	subs	r3, #1
 800273e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d127      	bne.n	8002794 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d11f      	bne.n	8002794 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800275e:	2a07      	cmp	r2, #7
 8002760:	bf14      	ite	ne
 8002762:	2201      	movne	r2, #1
 8002764:	2200      	moveq	r2, #0
 8002766:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002768:	4293      	cmp	r3, r2
 800276a:	d113      	bne.n	8002794 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	3b01      	subs	r3, #1
 800277a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d109      	bne.n	8002794 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f99d808c 	.word	0xf99d808c

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0207 	and.w	r2, r3, #7
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4963      	ldr	r1, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027d0:	4b62      	ldr	r3, [pc, #392]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 0207 	bic.w	r2, r3, #7
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b5f      	ldr	r3, [pc, #380]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0207 	and.w	r2, r3, #7
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b0      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d04c      	beq.n	8002896 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d121      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e09e      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d115      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e092      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e086      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e07e      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002854:	4942      	ldr	r1, [pc, #264]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe fbf9 	bl	800105c <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286c:	e00a      	b.n	8002884 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286e:	f7fe fbf5 	bl	800105c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e066      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 020c 	and.w	r2, r3, #12
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	429a      	cmp	r2, r3
 8002894:	d1eb      	bne.n	800286e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a2:	492f      	ldr	r1, [pc, #188]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4926      	ldr	r1, [pc, #152]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 0207 	bic.w	r2, r3, #7
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0207 	and.w	r2, r3, #7
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e036      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	491b      	ldr	r1, [pc, #108]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4914      	ldr	r1, [pc, #80]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002922:	f000 f825 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002926:	4601      	mov	r1, r0
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	fa21 f303 	lsr.w	r3, r1, r3
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fb3c 	bl	8000fc4 <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002950:	7afb      	ldrb	r3, [r7, #11]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
 8002964:	0800b16c 	.word	0x0800b16c
 8002968:	2000000c 	.word	0x2000000c
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d121      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d11e      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c0:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029cc:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80029f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d133      	bne.n	8002a66 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0xaa>
 8002a12:	e005      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a16:	617b      	str	r3, [r7, #20]
      break;
 8002a18:	e005      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1c:	617b      	str	r3, [r7, #20]
      break;
 8002a1e:	e002      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	617b      	str	r3, [r7, #20]
      break;
 8002a24:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	3301      	adds	r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	fb02 f203 	mul.w	r2, r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0e5b      	lsrs	r3, r3, #25
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	3301      	adds	r3, #1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a66:	69bb      	ldr	r3, [r7, #24]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3724      	adds	r7, #36	; 0x24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	0800b184 	.word	0x0800b184
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	0800b17c 	.word	0x0800b17c

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002acc:	f7ff ffda 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0adb      	lsrs	r3, r3, #11
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	0800b17c 	.word	0x0800b17c

08002af4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b00:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b0c:	f7ff fa3a 	bl	8001f84 <HAL_PWREx_GetVoltageRange>
 8002b10:	6178      	str	r0, [r7, #20]
 8002b12:	e014      	b.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b20:	4b22      	ldr	r3, [pc, #136]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b2c:	f7ff fa2a 	bl	8001f84 <HAL_PWREx_GetVoltageRange>
 8002b30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b44:	d10b      	bne.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d919      	bls.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b50:	d902      	bls.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b52:	2302      	movs	r3, #2
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e013      	b.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b58:	2301      	movs	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e010      	b.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d902      	bls.n	8002b6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b64:	2303      	movs	r3, #3
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	e00a      	b.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d102      	bne.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b70:	2302      	movs	r3, #2
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	e004      	b.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b70      	cmp	r3, #112	; 0x70
 8002b7a:	d101      	bne.n	8002b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b80:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0207 	and.w	r2, r3, #7
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40022000 	.word	0x40022000

08002bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d03f      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd8:	d01c      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bde:	d802      	bhi.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00e      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002be4:	e01f      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002be6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bea:	d003      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002bec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bf0:	d01c      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bf4:	4a85      	ldr	r2, [pc, #532]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c00:	e015      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fab9 	bl	8003180 <RCCEx_PLLSAI1_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c12:	e00c      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3320      	adds	r3, #32
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fba0 	bl	8003360 <RCCEx_PLLSAI2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c24:	e003      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	74fb      	strb	r3, [r7, #19]
      break;
 8002c2a:	e000      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c34:	4975      	ldr	r1, [pc, #468]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c36:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c4a:	e001      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03f      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c64:	d01c      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6a:	d802      	bhi.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00e      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002c70:	e01f      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c76:	d003      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002c78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c7c:	d01c      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c80:	4a62      	ldr	r2, [pc, #392]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c8c:	e015      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fa73 	bl	8003180 <RCCEx_PLLSAI1_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c9e:	e00c      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3320      	adds	r3, #32
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fb5a 	bl	8003360 <RCCEx_PLLSAI2_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cb0:	e003      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cb6:	e000      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cc0:	4952      	ldr	r1, [pc, #328]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cc2:	4b52      	ldr	r3, [pc, #328]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cd6:	e001      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a0 	beq.w	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	4a41      	ldr	r2, [pc, #260]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d20:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe f996 	bl	800105c <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d32:	e009      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d34:	f7fe f992 	bl	800105c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d902      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	74fb      	strb	r3, [r7, #19]
        break;
 8002d46:	e005      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ef      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d15c      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01f      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d019      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d84:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe f951 	bl	800105c <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f94d 	bl	800105c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d902      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ec      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e02:	e009      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
 8002e08:	e006      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e18:	7c7b      	ldrb	r3, [r7, #17]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1e:	4a9e      	ldr	r2, [pc, #632]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e20:	4b9d      	ldr	r3, [pc, #628]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e36:	4998      	ldr	r1, [pc, #608]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e38:	4b97      	ldr	r3, [pc, #604]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e58:	498f      	ldr	r1, [pc, #572]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e5a:	4b8f      	ldr	r3, [pc, #572]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 020c 	bic.w	r2, r3, #12
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e7a:	4987      	ldr	r1, [pc, #540]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e7c:	4b86      	ldr	r3, [pc, #536]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e9c:	497e      	ldr	r1, [pc, #504]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e9e:	4b7e      	ldr	r3, [pc, #504]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ebe:	4976      	ldr	r1, [pc, #472]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec0:	4b75      	ldr	r3, [pc, #468]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ee0:	496d      	ldr	r1, [pc, #436]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f02:	4965      	ldr	r1, [pc, #404]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f24:	495c      	ldr	r1, [pc, #368]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f46:	4954      	ldr	r1, [pc, #336]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f48:	4b53      	ldr	r3, [pc, #332]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f68:	494b      	ldr	r1, [pc, #300]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f8a:	4943      	ldr	r1, [pc, #268]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8c:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d028      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fac:	493a      	ldr	r1, [pc, #232]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fca:	d106      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fcc:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd6:	60d3      	str	r3, [r2, #12]
 8002fd8:	e011      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f8c8 	bl	8003180 <RCCEx_PLLSAI1_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d028      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800300a:	4923      	ldr	r1, [pc, #140]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003028:	d106      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003034:	60d3      	str	r3, [r2, #12]
 8003036:	e011      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f899 	bl	8003180 <RCCEx_PLLSAI1_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003068:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003086:	d109      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800308a:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
 8003094:	e014      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f867 	bl	8003180 <RCCEx_PLLSAI1_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d02f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030cc:	492b      	ldr	r1, [pc, #172]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ce:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ea:	d10d      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f844 	bl	8003180 <RCCEx_PLLSAI1_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	74bb      	strb	r3, [r7, #18]
 8003106:	e011      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003110:	d10c      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3320      	adds	r3, #32
 8003116:	2102      	movs	r1, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f921 	bl	8003360 <RCCEx_PLLSAI2_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003138:	4910      	ldr	r1, [pc, #64]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003172:	7cbb      	ldrb	r3, [r7, #18]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000

08003180 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800318e:	4b73      	ldr	r3, [pc, #460]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800319a:	4b70      	ldr	r3, [pc, #448]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0203 	and.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d10d      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
       ||
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031b2:	4b6a      	ldr	r3, [pc, #424]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
       ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d044      	beq.n	8003250 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	73fb      	strb	r3, [r7, #15]
 80031ca:	e041      	b.n	8003250 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d00c      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x6e>
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d013      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x80>
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d120      	bne.n	800321e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031dc:	4b5f      	ldr	r3, [pc, #380]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11d      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e01a      	b.n	8003224 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ee:	4b5b      	ldr	r3, [pc, #364]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e013      	b.n	8003228 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003200:	4b56      	ldr	r3, [pc, #344]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10f      	bne.n	800322c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800320c:	4b53      	ldr	r3, [pc, #332]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800321c:	e006      	b.n	800322c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      break;
 8003222:	e004      	b.n	800322e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800322c:	bf00      	nop
    }

    if(status == HAL_OK)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003234:	4849      	ldr	r0, [pc, #292]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003236:	4b49      	ldr	r3, [pc, #292]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6819      	ldr	r1, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	430b      	orrs	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d17d      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003256:	4a41      	ldr	r2, [pc, #260]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003258:	4b40      	ldr	r3, [pc, #256]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003262:	f7fd fefb 	bl	800105c <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003268:	e009      	b.n	800327e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800326a:	f7fd fef7 	bl	800105c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d902      	bls.n	800327e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	73fb      	strb	r3, [r7, #15]
        break;
 800327c:	e005      	b.n	800328a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327e:	4b37      	ldr	r3, [pc, #220]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ef      	bne.n	800326a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d160      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d111      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003296:	4831      	ldr	r0, [pc, #196]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	0211      	lsls	r1, r2, #8
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	0912      	lsrs	r2, r2, #4
 80032b0:	0452      	lsls	r2, r2, #17
 80032b2:	430a      	orrs	r2, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	6103      	str	r3, [r0, #16]
 80032b8:	e027      	b.n	800330a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d112      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c0:	4826      	ldr	r0, [pc, #152]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c2:	4b26      	ldr	r3, [pc, #152]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6892      	ldr	r2, [r2, #8]
 80032d2:	0211      	lsls	r1, r2, #8
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6912      	ldr	r2, [r2, #16]
 80032d8:	0852      	lsrs	r2, r2, #1
 80032da:	3a01      	subs	r2, #1
 80032dc:	0552      	lsls	r2, r2, #21
 80032de:	430a      	orrs	r2, r1
 80032e0:	4313      	orrs	r3, r2
 80032e2:	6103      	str	r3, [r0, #16]
 80032e4:	e011      	b.n	800330a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032e6:	481d      	ldr	r0, [pc, #116]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	0211      	lsls	r1, r2, #8
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6952      	ldr	r2, [r2, #20]
 80032fe:	0852      	lsrs	r2, r2, #1
 8003300:	3a01      	subs	r2, #1
 8003302:	0652      	lsls	r2, r2, #25
 8003304:	430a      	orrs	r2, r1
 8003306:	4313      	orrs	r3, r2
 8003308:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800330a:	4a14      	ldr	r2, [pc, #80]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003314:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7fd fea1 	bl	800105c <HAL_GetTick>
 800331a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800331c:	e009      	b.n	8003332 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331e:	f7fd fe9d 	bl	800105c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d902      	bls.n	8003332 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	73fb      	strb	r3, [r7, #15]
          break;
 8003330:	e005      	b.n	800333e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0ef      	beq.n	800331e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003344:	4905      	ldr	r1, [pc, #20]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000

08003360 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336e:	4b68      	ldr	r3, [pc, #416]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800337a:	4b65      	ldr	r3, [pc, #404]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0203 	and.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10d      	bne.n	80033a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
       ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
       ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d044      	beq.n	8003430 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e041      	b.n	8003430 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d00c      	beq.n	80033ce <RCCEx_PLLSAI2_Config+0x6e>
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d013      	beq.n	80033e0 <RCCEx_PLLSAI2_Config+0x80>
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d120      	bne.n	80033fe <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033bc:	4b54      	ldr	r3, [pc, #336]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11d      	bne.n	8003404 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033cc:	e01a      	b.n	8003404 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ce:	4b50      	ldr	r3, [pc, #320]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033de:	e013      	b.n	8003408 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e0:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10f      	bne.n	800340c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ec:	4b48      	ldr	r3, [pc, #288]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033fc:	e006      	b.n	800340c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
      break;
 8003402:	e004      	b.n	800340e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003404:	bf00      	nop
 8003406:	e002      	b.n	800340e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800340c:	bf00      	nop
    }

    if(status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003414:	483e      	ldr	r0, [pc, #248]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	430b      	orrs	r3, r1
 800342c:	4313      	orrs	r3, r2
 800342e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d167      	bne.n	8003506 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003436:	4a36      	ldr	r2, [pc, #216]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003442:	f7fd fe0b 	bl	800105c <HAL_GetTick>
 8003446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003448:	e009      	b.n	800345e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800344a:	f7fd fe07 	bl	800105c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d902      	bls.n	800345e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	73fb      	strb	r3, [r7, #15]
        break;
 800345c:	e005      	b.n	800346a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ef      	bne.n	800344a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d14a      	bne.n	8003506 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d111      	bne.n	800349a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003476:	4826      	ldr	r0, [pc, #152]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	0912      	lsrs	r2, r2, #4
 8003490:	0452      	lsls	r2, r2, #17
 8003492:	430a      	orrs	r2, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	6143      	str	r3, [r0, #20]
 8003498:	e011      	b.n	80034be <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800349a:	481d      	ldr	r0, [pc, #116]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6892      	ldr	r2, [r2, #8]
 80034ac:	0211      	lsls	r1, r2, #8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6912      	ldr	r2, [r2, #16]
 80034b2:	0852      	lsrs	r2, r2, #1
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0652      	lsls	r2, r2, #25
 80034b8:	430a      	orrs	r2, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fd fdc7 	bl	800105c <HAL_GetTick>
 80034ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034d0:	e009      	b.n	80034e6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034d2:	f7fd fdc3 	bl	800105c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d902      	bls.n	80034e6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	73fb      	strb	r3, [r7, #15]
          break;
 80034e4:	e005      	b.n	80034f2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ef      	beq.n	80034d2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034f8:	4905      	ldr	r1, [pc, #20]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e01d      	b.n	8003562 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f004 f996 	bl	800786c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f000 fd28 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	f241 1311 	movw	r3, #4369	; 0x1111
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_TIM_Base_DeInit+0x40>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	f240 4344 	movw	r3, #1092	; 0x444
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_TIM_Base_DeInit+0x40>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f004 f9a6 	bl	80078fc <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_TIM_Base_Stop+0x40>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	f240 4344 	movw	r3, #1092	; 0x444
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_TIM_Base_Stop+0x40>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_TIM_Base_Start_IT+0x50>)
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d00b      	beq.n	8003662 <HAL_TIM_Base_Start_IT+0x42>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d007      	beq.n	8003662 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	00010007 	.word	0x00010007

08003674 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	f241 1311 	movw	r3, #4369	; 0x1111
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <HAL_TIM_Base_Stop_IT+0x48>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	f240 4344 	movw	r3, #1092	; 0x444
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_Base_Stop_IT+0x48>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e01d      	b.n	8003718 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f815 	bl	8003720 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 fc4d 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d841      	bhi.n	80037c8 <HAL_TIM_OC_Start_IT+0x94>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_TIM_OC_Start_IT+0x18>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037c9 	.word	0x080037c9
 8003754:	080037c9 	.word	0x080037c9
 8003758:	080037c9 	.word	0x080037c9
 800375c:	08003793 	.word	0x08003793
 8003760:	080037c9 	.word	0x080037c9
 8003764:	080037c9 	.word	0x080037c9
 8003768:	080037c9 	.word	0x080037c9
 800376c:	080037a5 	.word	0x080037a5
 8003770:	080037c9 	.word	0x080037c9
 8003774:	080037c9 	.word	0x080037c9
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037b7 	.word	0x080037b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	68d2      	ldr	r2, [r2, #12]
 800378a:	f042 0202 	orr.w	r2, r2, #2
 800378e:	60da      	str	r2, [r3, #12]
      break;
 8003790:	e01b      	b.n	80037ca <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	68d2      	ldr	r2, [r2, #12]
 800379c:	f042 0204 	orr.w	r2, r2, #4
 80037a0:	60da      	str	r2, [r3, #12]
      break;
 80037a2:	e012      	b.n	80037ca <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	60da      	str	r2, [r3, #12]
      break;
 80037b4:	e009      	b.n	80037ca <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	68d2      	ldr	r2, [r2, #12]
 80037c0:	f042 0210 	orr.w	r2, r2, #16
 80037c4:	60da      	str	r2, [r3, #12]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80037c8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2201      	movs	r2, #1
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 f99e 	bl	8004b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_TIM_OC_Start_IT+0x124>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_TIM_OC_Start_IT+0xd6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_TIM_OC_Start_IT+0x128>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIM_OC_Start_IT+0xd6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_TIM_OC_Start_IT+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_TIM_OC_Start_IT+0xd6>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <HAL_TIM_OC_Start_IT+0x130>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIM_OC_Start_IT+0xd6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <HAL_TIM_OC_Start_IT+0x134>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_TIM_OC_Start_IT+0xda>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_TIM_OC_Start_IT+0xdc>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_TIM_OC_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800381e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003822:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_TIM_OC_Start_IT+0x138>)
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b06      	cmp	r3, #6
 8003834:	d00b      	beq.n	800384e <HAL_TIM_OC_Start_IT+0x11a>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d007      	beq.n	800384e <HAL_TIM_OC_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	00010007 	.word	0x00010007

08003870 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e01d      	b.n	80038be <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f815 	bl	80038c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f000 fb7a 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d122      	bne.n	8003936 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d11b      	bne.n	8003936 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0202 	mvn.w	r2, #2
 8003906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb24 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003922:	e005      	b.n	8003930 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fb16 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fb27 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d122      	bne.n	800398a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d11b      	bne.n	800398a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0204 	mvn.w	r2, #4
 800395a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fafa 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003976:	e005      	b.n	8003984 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 faec 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fafd 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d122      	bne.n	80039de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11b      	bne.n	80039de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f06f 0208 	mvn.w	r2, #8
 80039ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2204      	movs	r2, #4
 80039b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fad0 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 80039ca:	e005      	b.n	80039d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fac2 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fad3 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d122      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d11b      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0210 	mvn.w	r2, #16
 8003a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2208      	movs	r2, #8
 8003a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 faa6 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa98 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 faa9 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10e      	bne.n	8003a5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0201 	mvn.w	r2, #1
 8003a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa72 	bl	8003f42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d10e      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d107      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f001 f8d1 	bl	8004c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f001 f8c4 	bl	8004c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa57 	bl	8003f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0220 	mvn.w	r2, #32
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f001 f884 	bl	8004c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e06c      	b.n	8003c0c <HAL_TIM_OC_ConfigChannel+0xf4>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b14      	cmp	r3, #20
 8003b46:	d857      	bhi.n	8003bf8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003ba5 	.word	0x08003ba5
 8003b54:	08003bf9 	.word	0x08003bf9
 8003b58:	08003bf9 	.word	0x08003bf9
 8003b5c:	08003bf9 	.word	0x08003bf9
 8003b60:	08003bb3 	.word	0x08003bb3
 8003b64:	08003bf9 	.word	0x08003bf9
 8003b68:	08003bf9 	.word	0x08003bf9
 8003b6c:	08003bf9 	.word	0x08003bf9
 8003b70:	08003bc1 	.word	0x08003bc1
 8003b74:	08003bf9 	.word	0x08003bf9
 8003b78:	08003bf9 	.word	0x08003bf9
 8003b7c:	08003bf9 	.word	0x08003bf9
 8003b80:	08003bcf 	.word	0x08003bcf
 8003b84:	08003bf9 	.word	0x08003bf9
 8003b88:	08003bf9 	.word	0x08003bf9
 8003b8c:	08003bf9 	.word	0x08003bf9
 8003b90:	08003bdd 	.word	0x08003bdd
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003bf9 	.word	0x08003bf9
 8003b9c:	08003bf9 	.word	0x08003bf9
 8003ba0:	08003beb 	.word	0x08003beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fa96 	bl	80040dc <TIM_OC1_SetConfig>
      break;
 8003bb0:	e023      	b.n	8003bfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fb1f 	bl	80041fc <TIM_OC2_SetConfig>
      break;
 8003bbe:	e01c      	b.n	8003bfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fba2 	bl	8004310 <TIM_OC3_SetConfig>
      break;
 8003bcc:	e015      	b.n	8003bfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fc23 	bl	8004420 <TIM_OC4_SetConfig>
      break;
 8003bda:	e00e      	b.n	8003bfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fc86 	bl	80044f4 <TIM_OC5_SetConfig>
      break;
 8003be8:	e007      	b.n	8003bfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fce3 	bl	80045bc <TIM_OC6_SetConfig>
      break;
 8003bf6:	e000      	b.n	8003bfa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8003bf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_TIM_IC_ConfigChannel+0x1a>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e08a      	b.n	8003d44 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f000 fda0 	bl	8004798 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	6992      	ldr	r2, [r2, #24]
 8003c62:	f022 020c 	bic.w	r2, r2, #12
 8003c66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	6991      	ldr	r1, [r2, #24]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	6892      	ldr	r2, [r2, #8]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	619a      	str	r2, [r3, #24]
 8003c7a:	e05a      	b.n	8003d32 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d11c      	bne.n	8003cbc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f000 fe1e 	bl	80048d2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	6992      	ldr	r2, [r2, #24]
 8003ca0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ca4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	6991      	ldr	r1, [r2, #24]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0212      	lsls	r2, r2, #8
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	e03a      	b.n	8003d32 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11b      	bne.n	8003cfa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fe6b 	bl	80049ac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	69d2      	ldr	r2, [r2, #28]
 8003ce0:	f022 020c 	bic.w	r2, r2, #12
 8003ce4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	69d1      	ldr	r1, [r2, #28]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]
 8003cf8:	e01b      	b.n	8003d32 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f000 fe8b 	bl	8004a24 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	69d2      	ldr	r2, [r2, #28]
 8003d18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	69d1      	ldr	r1, [r2, #28]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	6892      	ldr	r2, [r2, #8]
 8003d2c:	0212      	lsls	r2, r2, #8
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_ConfigClockSource+0x18>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0a8      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x16a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d067      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x124>
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d80b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x70>
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d073      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x144>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d802      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x66>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06f      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003db0:	e078      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d06c      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x144>
 8003db6:	2b30      	cmp	r3, #48	; 0x30
 8003db8:	d06a      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003dba:	e073      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d00d      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0x90>
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d804      	bhi.n	8003dce <HAL_TIM_ConfigClockSource+0x82>
 8003dc4:	2b50      	cmp	r3, #80	; 0x50
 8003dc6:	d033      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0xe4>
 8003dc8:	2b60      	cmp	r3, #96	; 0x60
 8003dca:	d041      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003dcc:	e06a      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d066      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x156>
 8003dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd8:	d017      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003dda:	e063      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f000 fe72 	bl	8004ad4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	609a      	str	r2, [r3, #8]
      break;
 8003e08:	e04c      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6899      	ldr	r1, [r3, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f000 fe5b 	bl	8004ad4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2c:	609a      	str	r2, [r3, #8]
      break;
 8003e2e:	e039      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f000 fd19 	bl	8004874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2150      	movs	r1, #80	; 0x50
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fe28 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e029      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f000 fd75 	bl	800494c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2160      	movs	r1, #96	; 0x60
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fe18 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e019      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f000 fcf9 	bl	8004874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fe08 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 fdff 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e031      	b.n	8003f3a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fbcd 	bl	8004688 <TIM_SlaveTimer_SetConfig>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e018      	b.n	8003f3a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	68d2      	ldr	r2, [r2, #12]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	68d2      	ldr	r2, [r2, #12]
 8003f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f26:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a40      	ldr	r2, [pc, #256]	; (80040bc <TIM_Base_SetConfig+0x114>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d00f      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3b      	ldr	r2, [pc, #236]	; (80040c8 <TIM_Base_SetConfig+0x120>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <TIM_Base_SetConfig+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01f      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d01b      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d017      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <TIM_Base_SetConfig+0x120>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a29      	ldr	r2, [pc, #164]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <TIM_Base_SetConfig+0x128>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <TIM_Base_SetConfig+0x12c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <TIM_Base_SetConfig+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <TIM_Base_SetConfig+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <TIM_Base_SetConfig+0x12c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <TIM_Base_SetConfig+0x130>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40013400 	.word	0x40013400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f023 0201 	bic.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <TIM_OC1_SetConfig+0x10c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <TIM_OC1_SetConfig+0x110>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <TIM_OC1_SetConfig+0x114>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <TIM_OC1_SetConfig+0x118>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <TIM_OC1_SetConfig+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10c      	bne.n	8004176 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0308 	bic.w	r3, r3, #8
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <TIM_OC1_SetConfig+0x10c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <TIM_OC1_SetConfig+0x110>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <TIM_OC1_SetConfig+0x114>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <TIM_OC1_SetConfig+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <TIM_OC1_SetConfig+0x11c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d111      	bne.n	80041c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40013400 	.word	0x40013400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800

080041fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0210 	bic.w	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0320 	bic.w	r3, r3, #32
 800424a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a28      	ldr	r2, [pc, #160]	; (80042fc <TIM_OC2_SetConfig+0x100>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC2_SetConfig+0x6c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a27      	ldr	r2, [pc, #156]	; (8004300 <TIM_OC2_SetConfig+0x104>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10d      	bne.n	8004284 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <TIM_OC2_SetConfig+0x100>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <TIM_OC2_SetConfig+0x104>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <TIM_OC2_SetConfig+0x108>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <TIM_OC2_SetConfig+0x10c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a19      	ldr	r2, [pc, #100]	; (800430c <TIM_OC2_SetConfig+0x110>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d113      	bne.n	80042d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40013400 	.word	0x40013400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800435c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <TIM_OC3_SetConfig+0xfc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <TIM_OC3_SetConfig+0x6a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <TIM_OC3_SetConfig+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10d      	bne.n	8004396 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1c      	ldr	r2, [pc, #112]	; (800440c <TIM_OC3_SetConfig+0xfc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <TIM_OC3_SetConfig+0x100>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <TIM_OC3_SetConfig+0x104>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <TIM_OC3_SetConfig+0x108>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <TIM_OC3_SetConfig+0x10c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d113      	bne.n	80043e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40013400 	.word	0x40013400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800

08004420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <TIM_OC4_SetConfig+0xc0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00f      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <TIM_OC4_SetConfig+0xc4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_OC4_SetConfig+0xc8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <TIM_OC4_SetConfig+0xcc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <TIM_OC4_SetConfig+0xd0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d109      	bne.n	80044b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	019b      	lsls	r3, r3, #6
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	40014400 	.word	0x40014400
 80044f0:	40014800 	.word	0x40014800

080044f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004538:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <TIM_OC5_SetConfig+0xb4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <TIM_OC5_SetConfig+0xb8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <TIM_OC5_SetConfig+0xbc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <TIM_OC5_SetConfig+0xc0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <TIM_OC5_SetConfig+0xc4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d109      	bne.n	8004582 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	051b      	lsls	r3, r3, #20
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <TIM_OC6_SetConfig+0xb8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a17      	ldr	r2, [pc, #92]	; (8004678 <TIM_OC6_SetConfig+0xbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <TIM_OC6_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC6_SetConfig+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC6_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d109      	bne.n	800464c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	029b      	lsls	r3, r3, #10
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	f023 0307 	bic.w	r3, r3, #7
 80046b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b30      	cmp	r3, #48	; 0x30
 80046d0:	d05c      	beq.n	800478c <TIM_SlaveTimer_SetConfig+0x104>
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d806      	bhi.n	80046e4 <TIM_SlaveTimer_SetConfig+0x5c>
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d058      	beq.n	800478c <TIM_SlaveTimer_SetConfig+0x104>
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d056      	beq.n	800478c <TIM_SlaveTimer_SetConfig+0x104>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d054      	beq.n	800478c <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80046e2:	e054      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d03d      	beq.n	8004764 <TIM_SlaveTimer_SetConfig+0xdc>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d802      	bhi.n	80046f2 <TIM_SlaveTimer_SetConfig+0x6a>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d010      	beq.n	8004712 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 80046f0:	e04d      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 80046f2:	2b60      	cmp	r3, #96	; 0x60
 80046f4:	d040      	beq.n	8004778 <TIM_SlaveTimer_SetConfig+0xf0>
 80046f6:	2b70      	cmp	r3, #112	; 0x70
 80046f8:	d000      	beq.n	80046fc <TIM_SlaveTimer_SetConfig+0x74>
      break;
 80046fa:	e048      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68d9      	ldr	r1, [r3, #12]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f000 f9e2 	bl	8004ad4 <TIM_ETR_SetConfig>
      break;
 8004710:	e03d      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b05      	cmp	r3, #5
 8004718:	d101      	bne.n	800471e <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e038      	b.n	8004790 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	6a12      	ldr	r2, [r2, #32]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004744:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	621a      	str	r2, [r3, #32]
      break;
 8004762:	e014      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6899      	ldr	r1, [r3, #8]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	461a      	mov	r2, r3
 8004772:	f000 f87f 	bl	8004874 <TIM_TI1_ConfigInputStage>
      break;
 8004776:	e00a      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	461a      	mov	r2, r3
 8004786:	f000 f8e1 	bl	800494c <TIM_TI2_ConfigInputStage>
      break;
 800478a:	e000      	b.n	800478e <TIM_SlaveTimer_SetConfig+0x106>
      break;
 800478c:	bf00      	nop
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a26      	ldr	r2, [pc, #152]	; (800485c <TIM_TI1_SetConfig+0xc4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d017      	beq.n	80047f6 <TIM_TI1_SetConfig+0x5e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d013      	beq.n	80047f6 <TIM_TI1_SetConfig+0x5e>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a23      	ldr	r2, [pc, #140]	; (8004860 <TIM_TI1_SetConfig+0xc8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_TI1_SetConfig+0x5e>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <TIM_TI1_SetConfig+0xcc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_TI1_SetConfig+0x5e>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a21      	ldr	r2, [pc, #132]	; (8004868 <TIM_TI1_SetConfig+0xd0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_TI1_SetConfig+0x5e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a20      	ldr	r2, [pc, #128]	; (800486c <TIM_TI1_SetConfig+0xd4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_TI1_SetConfig+0x5e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <TIM_TI1_SetConfig+0xd8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <TIM_TI1_SetConfig+0x62>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <TIM_TI1_SetConfig+0x64>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e003      	b.n	800481a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	b2db      	uxtb	r3, r3
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f023 030a 	bic.w	r3, r3, #10
 8004834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f003 030a 	and.w	r3, r3, #10
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40013400 	.word	0x40013400
 8004870:	40014000 	.word	0x40014000

08004874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0201 	bic.w	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800489e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f023 030a 	bic.w	r3, r3, #10
 80048b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b087      	sub	sp, #28
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f023 0210 	bic.w	r2, r3, #16
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	031b      	lsls	r3, r3, #12
 8004916:	b29b      	uxth	r3, r3
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004924:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	621a      	str	r2, [r3, #32]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f023 0210 	bic.w	r2, r3, #16
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004976:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004988:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 0303 	bic.w	r3, r3, #3
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	621a      	str	r2, [r3, #32]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	031b      	lsls	r3, r3, #12
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f043 0307 	orr.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	609a      	str	r2, [r3, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2201      	movs	r2, #1
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e045      	b.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40013400 	.word	0x40013400

08004c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e040      	b.n	8004ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f002 fd1a 	bl	80076b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2224      	movs	r2, #36	; 0x24
 8004c80:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fbc6 	bl	8005424 <UART_SetConfig>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e022      	b.n	8004ce8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fef4 	bl	8005a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	6852      	ldr	r2, [r2, #4]
 8004cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 ff7b 	bl	8005bdc <UART_CheckIdleState>
 8004ce6:	4603      	mov	r3, r0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e027      	b.n	8004d52 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2224      	movs	r2, #36	; 0x24
 8004d06:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f002 fd6f 	bl	8007814 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	af02      	add	r7, sp, #8
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	f040 80bb 	bne.w	8004eea <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Receive+0x26>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0b3      	b.n	8004eec <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Receive+0x38>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0ac      	b.n	8004eec <HAL_UART_Receive+0x192>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2222      	movs	r2, #34	; 0x22
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004da6:	f7fc f959 	bl	800105c <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d10e      	bne.n	8004de4 <HAL_UART_Receive+0x8a>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d105      	bne.n	8004dda <HAL_UART_Receive+0x80>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd8:	e02d      	b.n	8004e36 <HAL_UART_Receive+0xdc>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de2:	e028      	b.n	8004e36 <HAL_UART_Receive+0xdc>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10d      	bne.n	8004e08 <HAL_UART_Receive+0xae>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_UART_Receive+0xa4>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	22ff      	movs	r2, #255	; 0xff
 8004df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dfc:	e01b      	b.n	8004e36 <HAL_UART_Receive+0xdc>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	227f      	movs	r2, #127	; 0x7f
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e06:	e016      	b.n	8004e36 <HAL_UART_Receive+0xdc>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e10:	d10d      	bne.n	8004e2e <HAL_UART_Receive+0xd4>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <HAL_UART_Receive+0xca>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	227f      	movs	r2, #127	; 0x7f
 8004e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e22:	e008      	b.n	8004e36 <HAL_UART_Receive+0xdc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	223f      	movs	r2, #63	; 0x3f
 8004e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e2c:	e003      	b.n	8004e36 <HAL_UART_Receive+0xdc>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e3c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d108      	bne.n	8004e5a <HAL_UART_Receive+0x100>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	e003      	b.n	8004e62 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e62:	e033      	b.n	8004ecc <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fef9 	bl	8005c66 <UART_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e036      	b.n	8004eec <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10c      	bne.n	8004e9e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	8a7b      	ldrh	r3, [r7, #18]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3302      	adds	r3, #2
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e00d      	b.n	8004eba <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4013      	ands	r3, r2
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1c5      	bne.n	8004e64 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d164      	bne.n	8004fd4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_UART_Transmit_DMA+0x22>
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e05d      	b.n	8004fd6 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_UART_Transmit_DMA+0x34>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e056      	b.n	8004fd6 <HAL_UART_Transmit_DMA+0xe2>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	88fa      	ldrh	r2, [r7, #6]
 8004f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d02a      	beq.n	8004fb0 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5e:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <HAL_UART_Transmit_DMA+0xec>)
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_UART_Transmit_DMA+0xf0>)
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_UART_Transmit_DMA+0xf4>)
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f76:	2200      	movs	r2, #0
 8004f78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	4619      	mov	r1, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3328      	adds	r3, #40	; 0x28
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	f7fc fb60 	bl	8001652 <HAL_DMA_Start_IT>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e012      	b.n	8004fd6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fce:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	08005d61 	.word	0x08005d61
 8004fe4:	08005db5 	.word	0x08005db5
 8004fe8:	08005e55 	.word	0x08005e55

08004fec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d16c      	bne.n	80050dc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Receive_DMA+0x22>
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e065      	b.n	80050de <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Receive_DMA+0x34>
 800501c:	2302      	movs	r3, #2
 800501e:	e05e      	b.n	80050de <HAL_UART_Receive_DMA+0xf2>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2222      	movs	r2, #34	; 0x22
 8005040:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d02a      	beq.n	80050a0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504e:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <HAL_UART_Receive_DMA+0xfc>)
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	4a25      	ldr	r2, [pc, #148]	; (80050ec <HAL_UART_Receive_DMA+0x100>)
 8005058:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800505e:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <HAL_UART_Receive_DMA+0x104>)
 8005060:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005066:	2200      	movs	r2, #0
 8005068:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3324      	adds	r3, #36	; 0x24
 8005074:	4619      	mov	r1, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	461a      	mov	r2, r3
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	f7fc fae8 	bl	8001652 <HAL_DMA_Start_IT>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2210      	movs	r2, #16
 800508c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e01e      	b.n	80050de <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	6892      	ldr	r2, [r2, #8]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	6892      	ldr	r2, [r2, #8]
 80050d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	08005dd1 	.word	0x08005dd1
 80050ec:	08005e39 	.word	0x08005e39
 80050f0:	08005e55 	.word	0x08005e55

080050f4 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005100:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005106:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_UART_DMAPause+0x22>
 8005112:	2302      	movs	r3, #2
 8005114:	e03c      	b.n	8005190 <HAL_UART_DMAPause+0x9c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b80      	cmp	r3, #128	; 0x80
 800512a:	d10a      	bne.n	8005142 <HAL_UART_DMAPause+0x4e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b21      	cmp	r3, #33	; 0x21
 8005130:	d107      	bne.n	8005142 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005140:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d11a      	bne.n	8005186 <HAL_UART_DMAPause+0x92>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b22      	cmp	r3, #34	; 0x22
 8005154:	d117      	bne.n	8005186 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005164:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	6892      	ldr	r2, [r2, #8]
 8005180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005184:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_DMAResume+0x16>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e034      	b.n	800521c <HAL_UART_DMAResume+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d107      	bne.n	80051d2 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	6892      	ldr	r2, [r2, #8]
 80051cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051d0:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d6:	2b22      	cmp	r3, #34	; 0x22
 80051d8:	d11b      	bne.n	8005212 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2208      	movs	r2, #8
 80051e0:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	6892      	ldr	r2, [r2, #8]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6892      	ldr	r2, [r2, #8]
 800520c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005210:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005234:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d126      	bne.n	8005298 <HAL_UART_DMAStop+0x70>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b21      	cmp	r3, #33	; 0x21
 800524e:	d123      	bne.n	8005298 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	6892      	ldr	r2, [r2, #8]
 800525a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005264:	2b00      	cmp	r3, #0
 8005266:	d014      	beq.n	8005292 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526c:	4618      	mov	r0, r3
 800526e:	f7fc fa50 	bl	8001712 <HAL_DMA_Abort>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527c:	4618      	mov	r0, r3
 800527e:	f7fc fb76 	bl	800196e <HAL_DMA_GetError>
 8005282:	4603      	mov	r3, r0
 8005284:	2b20      	cmp	r3, #32
 8005286:	d104      	bne.n	8005292 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2210      	movs	r2, #16
 800528c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e031      	b.n	80052f6 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fd2f 	bl	8005cf6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d126      	bne.n	80052f4 <HAL_UART_DMAStop+0xcc>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b22      	cmp	r3, #34	; 0x22
 80052aa:	d123      	bne.n	80052f4 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	6892      	ldr	r2, [r2, #8]
 80052b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ba:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d014      	beq.n	80052ee <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fc fa22 	bl	8001712 <HAL_DMA_Abort>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00c      	beq.n	80052ee <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fc fb48 	bl	800196e <HAL_DMA_GetError>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d104      	bne.n	80052ee <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2210      	movs	r2, #16
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e003      	b.n	80052f6 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fd16 	bl	8005d20 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005316:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d12d      	bne.n	8005382 <HAL_UART_AbortTransmit_IT+0x82>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	6892      	ldr	r2, [r2, #8]
 8005330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005334:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800533a:	2b00      	cmp	r3, #0
 800533c:	d013      	beq.n	8005366 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005342:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <HAL_UART_AbortTransmit_IT+0xa8>)
 8005344:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534a:	4618      	mov	r0, r3
 800534c:	f7fc fa1f 	bl	800178e <HAL_DMA_Abort_IT>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d022      	beq.n	800539c <HAL_UART_AbortTransmit_IT+0x9c>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
 8005364:	e01a      	b.n	800539c <HAL_UART_AbortTransmit_IT+0x9c>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	665a      	str	r2, [r3, #100]	; 0x64

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f848 	bl	8005410 <HAL_UART_AbortTransmitCpltCallback>
 8005380:	e00c      	b.n	800539c <HAL_UART_AbortTransmit_IT+0x9c>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f83a 	bl	8005410 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	08005ecd 	.word	0x08005ecd

080053ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005424:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005428:	b088      	sub	sp, #32
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4313      	orrs	r3, r2
 8005450:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6819      	ldr	r1, [r3, #0]
 800545c:	4bab      	ldr	r3, [pc, #684]	; (800570c <UART_SetConfig+0x2e8>)
 800545e:	400b      	ands	r3, r1
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	430b      	orrs	r3, r1
 8005464:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	6852      	ldr	r2, [r2, #4]
 8005470:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68d2      	ldr	r2, [r2, #12]
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4aa2      	ldr	r2, [pc, #648]	; (8005710 <UART_SetConfig+0x2ec>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	4313      	orrs	r3, r2
 8005494:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	6892      	ldr	r2, [r2, #8]
 80054a0:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a99      	ldr	r2, [pc, #612]	; (8005714 <UART_SetConfig+0x2f0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d121      	bne.n	80054f8 <UART_SetConfig+0xd4>
 80054b4:	4b98      	ldr	r3, [pc, #608]	; (8005718 <UART_SetConfig+0x2f4>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d816      	bhi.n	80054f0 <UART_SetConfig+0xcc>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0xa4>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054d9 	.word	0x080054d9
 80054cc:	080054e5 	.word	0x080054e5
 80054d0:	080054df 	.word	0x080054df
 80054d4:	080054eb 	.word	0x080054eb
 80054d8:	2301      	movs	r3, #1
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e0e8      	b.n	80056b0 <UART_SetConfig+0x28c>
 80054de:	2302      	movs	r3, #2
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e0e5      	b.n	80056b0 <UART_SetConfig+0x28c>
 80054e4:	2304      	movs	r3, #4
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	e0e2      	b.n	80056b0 <UART_SetConfig+0x28c>
 80054ea:	2308      	movs	r3, #8
 80054ec:	76fb      	strb	r3, [r7, #27]
 80054ee:	e0df      	b.n	80056b0 <UART_SetConfig+0x28c>
 80054f0:	2310      	movs	r3, #16
 80054f2:	76fb      	strb	r3, [r7, #27]
 80054f4:	bf00      	nop
 80054f6:	e0db      	b.n	80056b0 <UART_SetConfig+0x28c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a87      	ldr	r2, [pc, #540]	; (800571c <UART_SetConfig+0x2f8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d134      	bne.n	800556c <UART_SetConfig+0x148>
 8005502:	4b85      	ldr	r3, [pc, #532]	; (8005718 <UART_SetConfig+0x2f4>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b0c      	cmp	r3, #12
 800550e:	d829      	bhi.n	8005564 <UART_SetConfig+0x140>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0xf4>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	0800554d 	.word	0x0800554d
 800551c:	08005565 	.word	0x08005565
 8005520:	08005565 	.word	0x08005565
 8005524:	08005565 	.word	0x08005565
 8005528:	08005559 	.word	0x08005559
 800552c:	08005565 	.word	0x08005565
 8005530:	08005565 	.word	0x08005565
 8005534:	08005565 	.word	0x08005565
 8005538:	08005553 	.word	0x08005553
 800553c:	08005565 	.word	0x08005565
 8005540:	08005565 	.word	0x08005565
 8005544:	08005565 	.word	0x08005565
 8005548:	0800555f 	.word	0x0800555f
 800554c:	2300      	movs	r3, #0
 800554e:	76fb      	strb	r3, [r7, #27]
 8005550:	e0ae      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005552:	2302      	movs	r3, #2
 8005554:	76fb      	strb	r3, [r7, #27]
 8005556:	e0ab      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005558:	2304      	movs	r3, #4
 800555a:	76fb      	strb	r3, [r7, #27]
 800555c:	e0a8      	b.n	80056b0 <UART_SetConfig+0x28c>
 800555e:	2308      	movs	r3, #8
 8005560:	76fb      	strb	r3, [r7, #27]
 8005562:	e0a5      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005564:	2310      	movs	r3, #16
 8005566:	76fb      	strb	r3, [r7, #27]
 8005568:	bf00      	nop
 800556a:	e0a1      	b.n	80056b0 <UART_SetConfig+0x28c>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a6b      	ldr	r2, [pc, #428]	; (8005720 <UART_SetConfig+0x2fc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d120      	bne.n	80055b8 <UART_SetConfig+0x194>
 8005576:	4b68      	ldr	r3, [pc, #416]	; (8005718 <UART_SetConfig+0x2f4>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005580:	2b10      	cmp	r3, #16
 8005582:	d00f      	beq.n	80055a4 <UART_SetConfig+0x180>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d802      	bhi.n	800558e <UART_SetConfig+0x16a>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <UART_SetConfig+0x174>
 800558c:	e010      	b.n	80055b0 <UART_SetConfig+0x18c>
 800558e:	2b20      	cmp	r3, #32
 8005590:	d005      	beq.n	800559e <UART_SetConfig+0x17a>
 8005592:	2b30      	cmp	r3, #48	; 0x30
 8005594:	d009      	beq.n	80055aa <UART_SetConfig+0x186>
 8005596:	e00b      	b.n	80055b0 <UART_SetConfig+0x18c>
 8005598:	2300      	movs	r3, #0
 800559a:	76fb      	strb	r3, [r7, #27]
 800559c:	e088      	b.n	80056b0 <UART_SetConfig+0x28c>
 800559e:	2302      	movs	r3, #2
 80055a0:	76fb      	strb	r3, [r7, #27]
 80055a2:	e085      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055a4:	2304      	movs	r3, #4
 80055a6:	76fb      	strb	r3, [r7, #27]
 80055a8:	e082      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055aa:	2308      	movs	r3, #8
 80055ac:	76fb      	strb	r3, [r7, #27]
 80055ae:	e07f      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055b0:	2310      	movs	r3, #16
 80055b2:	76fb      	strb	r3, [r7, #27]
 80055b4:	bf00      	nop
 80055b6:	e07b      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a59      	ldr	r2, [pc, #356]	; (8005724 <UART_SetConfig+0x300>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d120      	bne.n	8005604 <UART_SetConfig+0x1e0>
 80055c2:	4b55      	ldr	r3, [pc, #340]	; (8005718 <UART_SetConfig+0x2f4>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d00f      	beq.n	80055f0 <UART_SetConfig+0x1cc>
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d802      	bhi.n	80055da <UART_SetConfig+0x1b6>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <UART_SetConfig+0x1c0>
 80055d8:	e010      	b.n	80055fc <UART_SetConfig+0x1d8>
 80055da:	2b80      	cmp	r3, #128	; 0x80
 80055dc:	d005      	beq.n	80055ea <UART_SetConfig+0x1c6>
 80055de:	2bc0      	cmp	r3, #192	; 0xc0
 80055e0:	d009      	beq.n	80055f6 <UART_SetConfig+0x1d2>
 80055e2:	e00b      	b.n	80055fc <UART_SetConfig+0x1d8>
 80055e4:	2300      	movs	r3, #0
 80055e6:	76fb      	strb	r3, [r7, #27]
 80055e8:	e062      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055ea:	2302      	movs	r3, #2
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e05f      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055f0:	2304      	movs	r3, #4
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	e05c      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055f6:	2308      	movs	r3, #8
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e059      	b.n	80056b0 <UART_SetConfig+0x28c>
 80055fc:	2310      	movs	r3, #16
 80055fe:	76fb      	strb	r3, [r7, #27]
 8005600:	bf00      	nop
 8005602:	e055      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a47      	ldr	r2, [pc, #284]	; (8005728 <UART_SetConfig+0x304>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d124      	bne.n	8005658 <UART_SetConfig+0x234>
 800560e:	4b42      	ldr	r3, [pc, #264]	; (8005718 <UART_SetConfig+0x2f4>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d012      	beq.n	8005644 <UART_SetConfig+0x220>
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d802      	bhi.n	800562a <UART_SetConfig+0x206>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <UART_SetConfig+0x214>
 8005628:	e012      	b.n	8005650 <UART_SetConfig+0x22c>
 800562a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562e:	d006      	beq.n	800563e <UART_SetConfig+0x21a>
 8005630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005634:	d009      	beq.n	800564a <UART_SetConfig+0x226>
 8005636:	e00b      	b.n	8005650 <UART_SetConfig+0x22c>
 8005638:	2300      	movs	r3, #0
 800563a:	76fb      	strb	r3, [r7, #27]
 800563c:	e038      	b.n	80056b0 <UART_SetConfig+0x28c>
 800563e:	2302      	movs	r3, #2
 8005640:	76fb      	strb	r3, [r7, #27]
 8005642:	e035      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005644:	2304      	movs	r3, #4
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e032      	b.n	80056b0 <UART_SetConfig+0x28c>
 800564a:	2308      	movs	r3, #8
 800564c:	76fb      	strb	r3, [r7, #27]
 800564e:	e02f      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005650:	2310      	movs	r3, #16
 8005652:	76fb      	strb	r3, [r7, #27]
 8005654:	bf00      	nop
 8005656:	e02b      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <UART_SetConfig+0x2ec>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d124      	bne.n	80056ac <UART_SetConfig+0x288>
 8005662:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <UART_SetConfig+0x2f4>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005670:	d012      	beq.n	8005698 <UART_SetConfig+0x274>
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005676:	d802      	bhi.n	800567e <UART_SetConfig+0x25a>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <UART_SetConfig+0x268>
 800567c:	e012      	b.n	80056a4 <UART_SetConfig+0x280>
 800567e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005682:	d006      	beq.n	8005692 <UART_SetConfig+0x26e>
 8005684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005688:	d009      	beq.n	800569e <UART_SetConfig+0x27a>
 800568a:	e00b      	b.n	80056a4 <UART_SetConfig+0x280>
 800568c:	2300      	movs	r3, #0
 800568e:	76fb      	strb	r3, [r7, #27]
 8005690:	e00e      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005692:	2302      	movs	r3, #2
 8005694:	76fb      	strb	r3, [r7, #27]
 8005696:	e00b      	b.n	80056b0 <UART_SetConfig+0x28c>
 8005698:	2304      	movs	r3, #4
 800569a:	76fb      	strb	r3, [r7, #27]
 800569c:	e008      	b.n	80056b0 <UART_SetConfig+0x28c>
 800569e:	2308      	movs	r3, #8
 80056a0:	76fb      	strb	r3, [r7, #27]
 80056a2:	e005      	b.n	80056b0 <UART_SetConfig+0x28c>
 80056a4:	2310      	movs	r3, #16
 80056a6:	76fb      	strb	r3, [r7, #27]
 80056a8:	bf00      	nop
 80056aa:	e001      	b.n	80056b0 <UART_SetConfig+0x28c>
 80056ac:	2310      	movs	r3, #16
 80056ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <UART_SetConfig+0x2ec>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	f040 80ed 	bne.w	8005896 <UART_SetConfig+0x472>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056bc:	7efb      	ldrb	r3, [r7, #27]
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d836      	bhi.n	8005730 <UART_SetConfig+0x30c>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x2a4>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056ed 	.word	0x080056ed
 80056cc:	08005731 	.word	0x08005731
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	08005731 	.word	0x08005731
 80056d8:	080056fb 	.word	0x080056fb
 80056dc:	08005731 	.word	0x08005731
 80056e0:	08005731 	.word	0x08005731
 80056e4:	08005731 	.word	0x08005731
 80056e8:	08005703 	.word	0x08005703
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fd f9d6 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80056f0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056f2:	e020      	b.n	8005736 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <UART_SetConfig+0x308>)
 80056f6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056f8:	e01d      	b.n	8005736 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80056fa:	f7fd f939 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80056fe:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005700:	e019      	b.n	8005736 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005706:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005708:	e015      	b.n	8005736 <UART_SetConfig+0x312>
 800570a:	bf00      	nop
 800570c:	efff69f3 	.word	0xefff69f3
 8005710:	40008000 	.word	0x40008000
 8005714:	40013800 	.word	0x40013800
 8005718:	40021000 	.word	0x40021000
 800571c:	40004400 	.word	0x40004400
 8005720:	40004800 	.word	0x40004800
 8005724:	40004c00 	.word	0x40004c00
 8005728:	40005000 	.word	0x40005000
 800572c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	74fb      	strb	r3, [r7, #19]
        break;
 8005734:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 819e 	beq.w	8005a7a <UART_SetConfig+0x656>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	429a      	cmp	r2, r3
 800574c:	d805      	bhi.n	800575a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	429a      	cmp	r2, r3
 8005758:	d202      	bcs.n	8005760 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	74fb      	strb	r3, [r7, #19]
 800575e:	e18c      	b.n	8005a7a <UART_SetConfig+0x656>
      }
      else
      {
        switch (clocksource)
 8005760:	7efb      	ldrb	r3, [r7, #27]
 8005762:	2b08      	cmp	r3, #8
 8005764:	f200 8084 	bhi.w	8005870 <UART_SetConfig+0x44c>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <UART_SetConfig+0x34c>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005795 	.word	0x08005795
 8005774:	08005871 	.word	0x08005871
 8005778:	080057d5 	.word	0x080057d5
 800577c:	08005871 	.word	0x08005871
 8005780:	08005809 	.word	0x08005809
 8005784:	08005871 	.word	0x08005871
 8005788:	08005871 	.word	0x08005871
 800578c:	08005871 	.word	0x08005871
 8005790:	08005847 	.word	0x08005847
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005794:	f7fd f982 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8005798:	4603      	mov	r3, r0
 800579a:	f04f 0400 	mov.w	r4, #0
 800579e:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80057a2:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80057a6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	f04f 0400 	mov.w	r4, #0
 80057b4:	eb18 0003 	adds.w	r0, r8, r3
 80057b8:	eb49 0104 	adc.w	r1, r9, r4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f04f 0400 	mov.w	r4, #0
 80057c4:	461a      	mov	r2, r3
 80057c6:	4623      	mov	r3, r4
 80057c8:	f7fb fa54 	bl	8000c74 <__aeabi_uldivmod>
 80057cc:	4603      	mov	r3, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80057d2:	e050      	b.n	8005876 <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	f04f 0400 	mov.w	r4, #0
 80057de:	49ad      	ldr	r1, [pc, #692]	; (8005a94 <UART_SetConfig+0x670>)
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	eb13 0801 	adds.w	r8, r3, r1
 80057e8:	eb44 0902 	adc.w	r9, r4, r2
 80057ec:	4640      	mov	r0, r8
 80057ee:	4649      	mov	r1, r9
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f04f 0400 	mov.w	r4, #0
 80057f8:	461a      	mov	r2, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	f7fb fa3a 	bl	8000c74 <__aeabi_uldivmod>
 8005800:	4603      	mov	r3, r0
 8005802:	460c      	mov	r4, r1
 8005804:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005806:	e036      	b.n	8005876 <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005808:	f7fd f8b2 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	021d      	lsls	r5, r3, #8
 8005816:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800581a:	0214      	lsls	r4, r2, #8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	461a      	mov	r2, r3
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	18a0      	adds	r0, r4, r2
 800582a:	eb45 0103 	adc.w	r1, r5, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	461a      	mov	r2, r3
 8005838:	4623      	mov	r3, r4
 800583a:	f7fb fa1b 	bl	8000c74 <__aeabi_uldivmod>
 800583e:	4603      	mov	r3, r0
 8005840:	460c      	mov	r4, r1
 8005842:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005844:	e017      	b.n	8005876 <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	f04f 0400 	mov.w	r4, #0
 8005850:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005854:	f144 0100 	adc.w	r1, r4, #0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f04f 0400 	mov.w	r4, #0
 8005860:	461a      	mov	r2, r3
 8005862:	4623      	mov	r3, r4
 8005864:	f7fb fa06 	bl	8000c74 <__aeabi_uldivmod>
 8005868:	4603      	mov	r3, r0
 800586a:	460c      	mov	r4, r1
 800586c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800586e:	e002      	b.n	8005876 <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	74fb      	strb	r3, [r7, #19]
            break;
 8005874:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587c:	d308      	bcc.n	8005890 <UART_SetConfig+0x46c>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005884:	d204      	bcs.n	8005890 <UART_SetConfig+0x46c>
        {
          huart->Instance->BRR = usartdiv;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e0f4      	b.n	8005a7a <UART_SetConfig+0x656>
        }
        else
        {
          ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	74fb      	strb	r3, [r7, #19]
 8005894:	e0f1      	b.n	8005a7a <UART_SetConfig+0x656>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589e:	d17e      	bne.n	800599e <UART_SetConfig+0x57a>
  {
    switch (clocksource)
 80058a0:	7efb      	ldrb	r3, [r7, #27]
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d85b      	bhi.n	800595e <UART_SetConfig+0x53a>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x488>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058ef 	.word	0x080058ef
 80058b4:	0800590d 	.word	0x0800590d
 80058b8:	0800595f 	.word	0x0800595f
 80058bc:	08005929 	.word	0x08005929
 80058c0:	0800595f 	.word	0x0800595f
 80058c4:	0800595f 	.word	0x0800595f
 80058c8:	0800595f 	.word	0x0800595f
 80058cc:	08005947 	.word	0x08005947
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80058d0:	f7fd f8e4 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80058d4:	4603      	mov	r3, r0
 80058d6:	005a      	lsls	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	441a      	add	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058ec:	e03a      	b.n	8005964 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058ee:	f7fd f8eb 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 80058f2:	4603      	mov	r3, r0
 80058f4:	005a      	lsls	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	b29b      	uxth	r3, r3
 8005908:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800590a:	e02b      	b.n	8005964 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005916:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6852      	ldr	r2, [r2, #4]
 800591e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005922:	b29b      	uxth	r3, r3
 8005924:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005926:	e01d      	b.n	8005964 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005928:	f7fd f822 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800592c:	4603      	mov	r3, r0
 800592e:	005a      	lsls	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	441a      	add	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	b29b      	uxth	r3, r3
 8005942:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005944:	e00e      	b.n	8005964 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800595c:	e002      	b.n	8005964 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	74fb      	strb	r3, [r7, #19]
        break;
 8005962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d916      	bls.n	8005998 <UART_SetConfig+0x574>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005970:	d212      	bcs.n	8005998 <UART_SetConfig+0x574>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f023 030f 	bic.w	r3, r3, #15
 800597a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	b29b      	uxth	r3, r3
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	b29a      	uxth	r2, r3
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	4313      	orrs	r3, r2
 800598c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	897a      	ldrh	r2, [r7, #10]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	e070      	b.n	8005a7a <UART_SetConfig+0x656>
    }
    else
    {
      ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	74fb      	strb	r3, [r7, #19]
 800599c:	e06d      	b.n	8005a7a <UART_SetConfig+0x656>
    }
  }
  else
  {
    switch (clocksource)
 800599e:	7efb      	ldrb	r3, [r7, #27]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d859      	bhi.n	8005a58 <UART_SetConfig+0x634>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <UART_SetConfig+0x588>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059ed 	.word	0x080059ed
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005a59 	.word	0x08005a59
 80059bc:	08005a25 	.word	0x08005a25
 80059c0:	08005a59 	.word	0x08005a59
 80059c4:	08005a59 	.word	0x08005a59
 80059c8:	08005a59 	.word	0x08005a59
 80059cc:	08005a41 	.word	0x08005a41
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80059d0:	f7fd f864 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80059d4:	4602      	mov	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	441a      	add	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80059ea:	e038      	b.n	8005a5e <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80059ec:	f7fd f86c 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a06:	e02a      	b.n	8005a5e <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005a12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6852      	ldr	r2, [r2, #4]
 8005a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a22:	e01c      	b.n	8005a5e <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a24:	f7fc ffa4 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	441a      	add	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a3e:	e00e      	b.n	8005a5e <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a56:	e002      	b.n	8005a5e <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	74fb      	strb	r3, [r7, #19]
        break;
 8005a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b0f      	cmp	r3, #15
 8005a62:	d908      	bls.n	8005a76 <UART_SetConfig+0x652>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d204      	bcs.n	8005a76 <UART_SetConfig+0x652>
    {
      huart->Instance->BRR = usartdiv;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	60da      	str	r2, [r3, #12]
 8005a74:	e001      	b.n	8005a7a <UART_SetConfig+0x656>
    }
    else
    {
      ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a86:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a92:	bf00      	nop
 8005a94:	f4240000 	.word	0xf4240000

08005a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	6852      	ldr	r2, [r2, #4]
 8005ab6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	6852      	ldr	r2, [r2, #4]
 8005ad8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	6852      	ldr	r2, [r2, #4]
 8005afa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	6852      	ldr	r2, [r2, #4]
 8005b1c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	6892      	ldr	r2, [r2, #8]
 8005b3e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b46:	430a      	orrs	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	6892      	ldr	r2, [r2, #8]
 8005b60:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01a      	beq.n	8005bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	6852      	ldr	r2, [r2, #4]
 8005b82:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b96:	d10a      	bne.n	8005bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	6852      	ldr	r2, [r2, #4]
 8005ba2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	6852      	ldr	r2, [r2, #4]
 8005bc4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bea:	f7fb fa37 	bl	800105c <HAL_GetTick>
 8005bee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d10e      	bne.n	8005c1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f82a 	bl	8005c66 <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e020      	b.n	8005c5e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d10e      	bne.n	8005c48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f814 	bl	8005c66 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e00a      	b.n	8005c5e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c76:	e02a      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d026      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c80:	f7fb f9ec 	bl	800105c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	1ad2      	subs	r2, r2, r3
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d802      	bhi.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d11b      	bne.n	8005cce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ca4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	6892      	ldr	r2, [r2, #8]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	bf0c      	ite	eq
 8005cde:	2301      	moveq	r3, #1
 8005ce0:	2300      	movne	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d0c5      	beq.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	6892      	ldr	r2, [r2, #8]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d114      	bne.n	8005da6 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d92:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005da4:	e002      	b.n	8005dac <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fb00 	bl	80053ac <HAL_UART_TxCpltCallback>
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff fafc 	bl	80053c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11e      	bne.n	8005e2a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e02:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	6892      	ldr	r2, [r2, #8]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	6892      	ldr	r2, [r2, #8]
 8005e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e22:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff fad2 	bl	80053d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff face 	bl	80053e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e78:	2b80      	cmp	r3, #128	; 0x80
 8005e7a:	d109      	bne.n	8005e90 <UART_DMAError+0x3c>
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b21      	cmp	r3, #33	; 0x21
 8005e80:	d106      	bne.n	8005e90 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7ff ff33 	bl	8005cf6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d109      	bne.n	8005eb2 <UART_DMAError+0x5e>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b22      	cmp	r3, #34	; 0x22
 8005ea2:	d106      	bne.n	8005eb2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005eac:	6978      	ldr	r0, [r7, #20]
 8005eae:	f7ff ff37 	bl	8005d20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eb6:	f043 0210 	orr.w	r2, r3, #16
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ebe:	6978      	ldr	r0, [r7, #20]
 8005ec0:	f7ff fa9c 	bl	80053fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec4:	bf00      	nop
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fa91 	bl	8005410 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef MX_TIM2_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b098      	sub	sp, #96	; 0x60
 8005efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	//check instance first
  /* USER CODE END TIM2_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	609a      	str	r2, [r3, #8]
 8005f0a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005f0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	611a      	str	r2, [r3, #16]
 8005f38:	615a      	str	r2, [r3, #20]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005f48:	4b46      	ldr	r3, [pc, #280]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8005f50:	4b44      	ldr	r3, [pc, #272]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f56:	4b43      	ldr	r3, [pc, #268]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8005f5c:	4b41      	ldr	r3, [pc, #260]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f64:	4b3f      	ldr	r3, [pc, #252]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f6a:	4b3e      	ldr	r3, [pc, #248]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f70:	483c      	ldr	r0, [pc, #240]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f72:	f7fd facf 	bl	8003514 <HAL_TIM_Base_Init>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_TIM2_Init+0x88>
  {
	  return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e06d      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f84:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4835      	ldr	r0, [pc, #212]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f8e:	f7fd fedd 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_TIM2_Init+0xa4>
  {
   return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e05f      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005f9c:	4831      	ldr	r0, [pc, #196]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005f9e:	f7fd fb94 	bl	80036ca <HAL_TIM_OC_Init>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_TIM2_Init+0xb4>
  {
   return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e057      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005fac:	482d      	ldr	r0, [pc, #180]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005fae:	f7fd fc5f 	bl	8003870 <HAL_TIM_IC_Init>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <MX_TIM2_Init+0xc4>
  {
   return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e04f      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8005fc0:	2360      	movs	r3, #96	; 0x60
 8005fc2:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerFilter = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK)
 8005fcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4824      	ldr	r0, [pc, #144]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005fd4:	f7fd ff73 	bl	8003ebe <HAL_TIM_SlaveConfigSynchro>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <MX_TIM2_Init+0xea>
  {
   return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e03c      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fee:	4619      	mov	r1, r3
 8005ff0:	481c      	ldr	r0, [pc, #112]	; (8006064 <MX_TIM2_Init+0x16c>)
 8005ff2:	f7fe fdb5 	bl	8004b60 <HAL_TIMEx_MasterConfigSynchronization>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_TIM2_Init+0x108>
  {
   return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e02d      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = CCR1_VAL;
 8006004:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006008:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800600a:	2302      	movs	r3, #2
 800600c:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006012:	f107 0314 	add.w	r3, r7, #20
 8006016:	2200      	movs	r2, #0
 8006018:	4619      	mov	r1, r3
 800601a:	4812      	ldr	r0, [pc, #72]	; (8006064 <MX_TIM2_Init+0x16c>)
 800601c:	f7fd fd7c 	bl	8003b18 <HAL_TIM_OC_ConfigChannel>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <MX_TIM2_Init+0x132>
  {
   return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e018      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800602a:	2300      	movs	r3, #0
 800602c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800602e:	2301      	movs	r3, #1
 8006030:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	2204      	movs	r2, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4808      	ldr	r0, [pc, #32]	; (8006064 <MX_TIM2_Init+0x16c>)
 8006042:	f7fd fde7 	bl	8003c14 <HAL_TIM_IC_ConfigChannel>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_TIM2_Init+0x158>
  {
   return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e005      	b.n	800605c <MX_TIM2_Init+0x164>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <MX_TIM2_Init+0x16c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0201 	mvn.w	r2, #1
 8006058:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_Init 2 */
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3760      	adds	r7, #96	; 0x60
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000bcc 	.word	0x20000bcc

08006068 <MX_UART4_Init>:
  * @param None
  * @retval HAL_StatusTypeDef
  */

HAL_StatusTypeDef MX_UART4_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800606c:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <MX_UART4_Init+0x68>)
 800606e:	4a19      	ldr	r2, [pc, #100]	; (80060d4 <MX_UART4_Init+0x6c>)
 8006070:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = UART_BAUD_INIT;
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <MX_UART4_Init+0x68>)
 8006074:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006078:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <MX_UART4_Init+0x68>)
 800607c:	2200      	movs	r2, #0
 800607e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006080:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <MX_UART4_Init+0x68>)
 8006082:	2200      	movs	r2, #0
 8006084:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <MX_UART4_Init+0x68>)
 8006088:	2200      	movs	r2, #0
 800608a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <MX_UART4_Init+0x68>)
 800608e:	220c      	movs	r2, #12
 8006090:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <MX_UART4_Init+0x68>)
 8006094:	2200      	movs	r2, #0
 8006096:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006098:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <MX_UART4_Init+0x68>)
 800609a:	2200      	movs	r2, #0
 800609c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <MX_UART4_Init+0x68>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	621a      	str	r2, [r3, #32]
#ifdef UBLOX_NEO6
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <MX_UART4_Init+0x68>)
 80060a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060aa:	635a      	str	r2, [r3, #52]	; 0x34
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <MX_UART4_Init+0x68>)
 80060ae:	2208      	movs	r2, #8
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24


#else
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80060b2:	4807      	ldr	r0, [pc, #28]	; (80060d0 <MX_UART4_Init+0x68>)
 80060b4:	f7fe fdce 	bl	8004c54 <HAL_UART_Init>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <MX_UART4_Init+0x5a>
  {
   return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e003      	b.n	80060ca <MX_UART4_Init+0x62>
  }
#ifdef UBLOX_NEO6
  UART_AdvFeatureConfig(&huart4);
 80060c2:	4803      	ldr	r0, [pc, #12]	; (80060d0 <MX_UART4_Init+0x68>)
 80060c4:	f7ff fce8 	bl	8005a98 <UART_AdvFeatureConfig>
#endif
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000b4c 	.word	0x20000b4c
 80060d4:	40004c00 	.word	0x40004c00

080060d8 <MX_DMA_Init>:
  *@pram None
  *@retval HAL_StatusTypeDef
  */

static HAL_StatusTypeDef MX_DMA_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	 * This piece of code is designed to completely reset the peripheral registers
	 * if an unwanted reset causes the DMA to keep the previous register settings and
	 * state. This causes unwanted interrupts in the program that are a nightmare to clear
	 */
	//for DMA RX channel
	if(DMA2_Channel5->CCR != 0)
 80060de:	4b44      	ldr	r3, [pc, #272]	; (80061f0 <MX_DMA_Init+0x118>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <MX_DMA_Init+0x2a>
 	{
 		  //clear channel to reset state
 		  hdma_uart4_rx.Instance = DMA2_Channel5;
 80060e6:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <MX_DMA_Init+0x11c>)
 80060e8:	4a41      	ldr	r2, [pc, #260]	; (80061f0 <MX_DMA_Init+0x118>)
 80060ea:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.DmaBaseAddress->ISR = DMA2->ISR;
 80060ec:	4b41      	ldr	r3, [pc, #260]	; (80061f4 <MX_DMA_Init+0x11c>)
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	4a41      	ldr	r2, [pc, #260]	; (80061f8 <MX_DMA_Init+0x120>)
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	601a      	str	r2, [r3, #0]
 		  hdma_uart4_rx.ChannelIndex = 5;
 80060f6:	4b3f      	ldr	r3, [pc, #252]	; (80061f4 <MX_DMA_Init+0x11c>)
 80060f8:	2205      	movs	r2, #5
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44
 		  HAL_DMA_DeInit(&hdma_uart4_rx);
 80060fc:	483d      	ldr	r0, [pc, #244]	; (80061f4 <MX_DMA_Init+0x11c>)
 80060fe:	f7fb f9d3 	bl	80014a8 <HAL_DMA_DeInit>
 	  }
	//for DMA TX channel
	if(DMA2_Channel3->CCR != 0)
 8006102:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <MX_DMA_Init+0x124>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <MX_DMA_Init+0x4e>
	{
		hdma_uart4_tx.Instance = DMA2_Channel3;
 800610a:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <MX_DMA_Init+0x128>)
 800610c:	4a3b      	ldr	r2, [pc, #236]	; (80061fc <MX_DMA_Init+0x124>)
 800610e:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.DmaBaseAddress->ISR = DMA2->ISR;
 8006110:	4b3b      	ldr	r3, [pc, #236]	; (8006200 <MX_DMA_Init+0x128>)
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	4a38      	ldr	r2, [pc, #224]	; (80061f8 <MX_DMA_Init+0x120>)
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	601a      	str	r2, [r3, #0]
		hdma_uart4_tx.ChannelIndex = 3;
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <MX_DMA_Init+0x128>)
 800611c:	2203      	movs	r2, #3
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
		HAL_DMA_DeInit(&hdma_uart4_tx);
 8006120:	4837      	ldr	r0, [pc, #220]	; (8006200 <MX_DMA_Init+0x128>)
 8006122:	f7fb f9c1 	bl	80014a8 <HAL_DMA_DeInit>
	}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006126:	4a37      	ldr	r2, [pc, #220]	; (8006204 <MX_DMA_Init+0x12c>)
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <MX_DMA_Init+0x12c>)
 800612a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	6493      	str	r3, [r2, #72]	; 0x48
 8006132:	4b34      	ldr	r3, [pc, #208]	; (8006204 <MX_DMA_Init+0x12c>)
 8006134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800613e:	4a31      	ldr	r2, [pc, #196]	; (8006204 <MX_DMA_Init+0x12c>)
 8006140:	4b30      	ldr	r3, [pc, #192]	; (8006204 <MX_DMA_Init+0x12c>)
 8006142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6493      	str	r3, [r2, #72]	; 0x48
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <MX_DMA_Init+0x12c>)
 800614c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8006156:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <MX_DMA_Init+0x130>)
 8006158:	4a2c      	ldr	r2, [pc, #176]	; (800620c <MX_DMA_Init+0x134>)
 800615a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 800615c:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <MX_DMA_Init+0x130>)
 800615e:	2200      	movs	r2, #0
 8006160:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006162:	4b29      	ldr	r3, [pc, #164]	; (8006208 <MX_DMA_Init+0x130>)
 8006164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006168:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800616a:	4b27      	ldr	r3, [pc, #156]	; (8006208 <MX_DMA_Init+0x130>)
 800616c:	2240      	movs	r2, #64	; 0x40
 800616e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <MX_DMA_Init+0x130>)
 8006172:	2280      	movs	r2, #128	; 0x80
 8006174:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <MX_DMA_Init+0x130>)
 8006178:	2200      	movs	r2, #0
 800617a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800617c:	4b22      	ldr	r3, [pc, #136]	; (8006208 <MX_DMA_Init+0x130>)
 800617e:	2200      	movs	r2, #0
 8006180:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8006182:	4b21      	ldr	r3, [pc, #132]	; (8006208 <MX_DMA_Init+0x130>)
 8006184:	2200      	movs	r2, #0
 8006186:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8006188:	4b1f      	ldr	r3, [pc, #124]	; (8006208 <MX_DMA_Init+0x130>)
 800618a:	2200      	movs	r2, #0
 800618c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800618e:	481e      	ldr	r0, [pc, #120]	; (8006208 <MX_DMA_Init+0x130>)
 8006190:	f7fb f8d2 	bl	8001338 <HAL_DMA_Init>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <MX_DMA_Init+0xc6>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e024      	b.n	80061e8 <MX_DMA_Init+0x110>
  }

  /* DMA interrupt init */
  CLEAR_REG(hdma_uart4_rx.DmaBaseAddress->ISR);
 800619e:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <MX_DMA_Init+0x11c>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_uart4_tx.DmaBaseAddress->ISR);
 80061a6:	4b16      	ldr	r3, [pc, #88]	; (8006200 <MX_DMA_Init+0x128>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
  CLEAR_REG(hdma_memtomem_dma1_channel1.DmaBaseAddress->ISR);
 80061ae:	4b16      	ldr	r3, [pc, #88]	; (8006208 <MX_DMA_Init+0x130>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80061b6:	2200      	movs	r2, #0
 80061b8:	2100      	movs	r1, #0
 80061ba:	200b      	movs	r0, #11
 80061bc:	f7fb f877 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80061c0:	200b      	movs	r0, #11
 80061c2:	f7fb f890 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80061c6:	2200      	movs	r2, #0
 80061c8:	2100      	movs	r1, #0
 80061ca:	203a      	movs	r0, #58	; 0x3a
 80061cc:	f7fb f86f 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80061d0:	203a      	movs	r0, #58	; 0x3a
 80061d2:	f7fb f888 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80061d6:	2200      	movs	r2, #0
 80061d8:	2100      	movs	r1, #0
 80061da:	203c      	movs	r0, #60	; 0x3c
 80061dc:	f7fb f867 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80061e0:	203c      	movs	r0, #60	; 0x3c
 80061e2:	f7fb f880 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40020458 	.word	0x40020458
 80061f4:	2000027c 	.word	0x2000027c
 80061f8:	40020400 	.word	0x40020400
 80061fc:	40020430 	.word	0x40020430
 8006200:	20001410 	.word	0x20001410
 8006204:	40021000 	.word	0x40021000
 8006208:	20000300 	.word	0x20000300
 800620c:	40020008 	.word	0x40020008

08006210 <GPS_Log_Begin>:


//======================= 5. Utility Function Definitions ===============================

void GPS_Log_Begin(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
	//stop and clear any counter thats still running
	htim2.Instance->CR1 &= ~TIM_CR1_CEN;
 8006214:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <GPS_Log_Begin+0x94>)
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	625a      	str	r2, [r3, #36]	; 0x24
	  __HAL_UART_ENABLE_IT(&huart4,UART_IT_IDLE);
 800622c:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <GPS_Log_Begin+0x98>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <GPS_Log_Begin+0x98>)
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	f042 0210 	orr.w	r2, r2, #16
 800623a:	601a      	str	r2, [r3, #0]
	  __HAL_DMA_ENABLE_IT(huart4.hdmarx, DMA_IT_TC);
 800623c:	4b1a      	ldr	r3, [pc, #104]	; (80062a8 <GPS_Log_Begin+0x98>)
 800623e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a19      	ldr	r2, [pc, #100]	; (80062a8 <GPS_Log_Begin+0x98>)
 8006244:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	f042 0202 	orr.w	r2, r2, #2
 800624e:	601a      	str	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(&htim2,TIM_FLAG_CC1) == SET)
 8006250:	4b14      	ldr	r3, [pc, #80]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d104      	bne.n	8006268 <GPS_Log_Begin+0x58>
	  {
	   __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_CC1);
 800625e:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f06f 0202 	mvn.w	r2, #2
 8006266:	611a      	str	r2, [r3, #16]
	  }
	  M2M_Txfer_Cplt = 0;
 8006268:	4b10      	ldr	r3, [pc, #64]	; (80062ac <GPS_Log_Begin+0x9c>)
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_ENABLE_IT(&htim2,TIM_IT_CC1);
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	68d2      	ldr	r2, [r2, #12]
 8006278:	f042 0202 	orr.w	r2, r2, #2
 800627c:	60da      	str	r2, [r3, #12]
	  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800627e:	2100      	movs	r1, #0
 8006280:	4808      	ldr	r0, [pc, #32]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006282:	f7fd fa57 	bl	8003734 <HAL_TIM_OC_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim2);
 8006286:	4807      	ldr	r0, [pc, #28]	; (80062a4 <GPS_Log_Begin+0x94>)
 8006288:	f7fd f9ca 	bl	8003620 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Receive_DMA(&huart4,DMA_RX_Buffer,DMA_RX_BUFFER_SIZE);
 800628c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006290:	4907      	ldr	r1, [pc, #28]	; (80062b0 <GPS_Log_Begin+0xa0>)
 8006292:	4805      	ldr	r0, [pc, #20]	; (80062a8 <GPS_Log_Begin+0x98>)
 8006294:	f7fe feaa 	bl	8004fec <HAL_UART_Receive_DMA>
	  log_gps = SET;
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <GPS_Log_Begin+0xa4>)
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000bcc 	.word	0x20000bcc
 80062a8:	20000b4c 	.word	0x20000b4c
 80062ac:	20000348 	.word	0x20000348
 80062b0:	2000034c 	.word	0x2000034c
 80062b4:	20001c58 	.word	0x20001c58

080062b8 <GPS_Log_Stop>:

void GPS_Log_Stop(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
	  log_gps = RESET;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <GPS_Log_Stop+0x20>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
	  packet_full = 0;
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <GPS_Log_Stop+0x24>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
	  HAL_UART_DMAStop(&huart4);
 80062c8:	4805      	ldr	r0, [pc, #20]	; (80062e0 <GPS_Log_Stop+0x28>)
 80062ca:	f7fe ffad 	bl	8005228 <HAL_UART_DMAStop>
	  HAL_TIM_Base_Stop(&htim2);
 80062ce:	4805      	ldr	r0, [pc, #20]	; (80062e4 <GPS_Log_Stop+0x2c>)
 80062d0:	f7fd f97b 	bl	80035ca <HAL_TIM_Base_Stop>

}
 80062d4:	bf00      	nop
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20001c58 	.word	0x20001c58
 80062dc:	200002f4 	.word	0x200002f4
 80062e0:	20000b4c 	.word	0x20000b4c
 80062e4:	20000bcc 	.word	0x20000bcc

080062e8 <Clear_Buffer>:

void  Clear_Buffer(uint8_t *buffer,uint32_t size)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
	memset(buffer,0,size);
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	2100      	movs	r1, #0
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fd51 	bl	8007d9e <memset>
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <is_valid>:

uint8_t is_valid(char* nmeamsg)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]

	char msg[4] = {0};
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e00d      	b.n	8006336 <is_valid+0x32>
	{
		msg[i] = *(nmeamsg+2+i);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	3302      	adds	r3, #2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	7819      	ldrb	r1, [r3, #0]
 8006324:	f107 020c 	add.w	r2, r7, #12
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	4413      	add	r3, r2
 800632c:	460a      	mov	r2, r1
 800632e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	3301      	adds	r3, #1
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2b02      	cmp	r3, #2
 800633a:	ddee      	ble.n	800631a <is_valid+0x16>
	}
	if((strcmp((char*)msg,"GLL") != 0))
 800633c:	f107 030c 	add.w	r3, r7, #12
 8006340:	492c      	ldr	r1, [pc, #176]	; (80063f4 <is_valid+0xf0>)
 8006342:	4618      	mov	r0, r3
 8006344:	f7f9 ff44 	bl	80001d0 <strcmp>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d019      	beq.n	8006382 <is_valid+0x7e>
	{

		if (strcmp((char*)msg,"ZDA") != 0)
 800634e:	f107 030c 	add.w	r3, r7, #12
 8006352:	4929      	ldr	r1, [pc, #164]	; (80063f8 <is_valid+0xf4>)
 8006354:	4618      	mov	r0, r3
 8006356:	f7f9 ff3b 	bl	80001d0 <strcmp>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00d      	beq.n	800637c <is_valid+0x78>
		{
			if(strcmp((char*)msg,"GSA") != 0)
 8006360:	f107 030c 	add.w	r3, r7, #12
 8006364:	4925      	ldr	r1, [pc, #148]	; (80063fc <is_valid+0xf8>)
 8006366:	4618      	mov	r0, r3
 8006368:	f7f9 ff32 	bl	80001d0 <strcmp>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <is_valid+0x72>
			{
				return -1;
 8006372:	23ff      	movs	r3, #255	; 0xff
 8006374:	e039      	b.n	80063ea <is_valid+0xe6>
			}
			else
			{
				flag = 2;
 8006376:	2302      	movs	r3, #2
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e004      	b.n	8006386 <is_valid+0x82>
			}
		}else
		{
			flag = 3;
 800637c:	2303      	movs	r3, #3
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e001      	b.n	8006386 <is_valid+0x82>
		}

	}
	else
	{
		flag = 1;
 8006382:	2301      	movs	r3, #1
 8006384:	77fb      	strb	r3, [r7, #31]
	}
	/* check sum */
	uint16_t checksum = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	82fb      	strh	r3, [r7, #22]
	while(*nmeamsg != '*')
 800638a:	e008      	b.n	800639e <is_valid+0x9a>
	{
		checksum^= *nmeamsg;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b29a      	uxth	r2, r3
 8006392:	8afb      	ldrh	r3, [r7, #22]
 8006394:	4053      	eors	r3, r2
 8006396:	82fb      	strh	r3, [r7, #22]
		nmeamsg++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
	while(*nmeamsg != '*')
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b2a      	cmp	r3, #42	; 0x2a
 80063a4:	d1f2      	bne.n	800638c <is_valid+0x88>
	}
	uint8_t h = char_to_hex(*(++nmeamsg))*16;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3301      	adds	r3, #1
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f825 	bl	8006400 <char_to_hex>
 80063b6:	4603      	mov	r3, r0
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	757b      	strb	r3, [r7, #21]
	uint8_t l = char_to_hex(*(++nmeamsg));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3301      	adds	r3, #1
 80063c0:	607b      	str	r3, [r7, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f81a 	bl	8006400 <char_to_hex>
 80063cc:	4603      	mov	r3, r0
 80063ce:	753b      	strb	r3, [r7, #20]
	uint16_t checkbyte= h+l;
 80063d0:	7d7b      	ldrb	r3, [r7, #21]
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	7d3b      	ldrb	r3, [r7, #20]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4413      	add	r3, r2
 80063da:	827b      	strh	r3, [r7, #18]

	if(!(checksum == checkbyte))
 80063dc:	8afa      	ldrh	r2, [r7, #22]
 80063de:	8a7b      	ldrh	r3, [r7, #18]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d001      	beq.n	80063e8 <is_valid+0xe4>
	{
		return -1;
 80063e4:	23ff      	movs	r3, #255	; 0xff
 80063e6:	e000      	b.n	80063ea <is_valid+0xe6>
	}

	return flag;
 80063e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3720      	adds	r7, #32
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	0800b088 	.word	0x0800b088
 80063f8:	0800b08c 	.word	0x0800b08c
 80063fc:	0800b090 	.word	0x0800b090

08006400 <char_to_hex>:
/*
 * Flag keeps track of successful coordinate retrievals
 */

uint8_t char_to_hex(char c)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	71fb      	strb	r3, [r7, #7]
	if(c == '\0')
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <char_to_hex+0x14>
	{
		return 0;
 8006410:	2300      	movs	r3, #0
 8006412:	e01e      	b.n	8006452 <char_to_hex+0x52>
	}
	if ((c >='0') &&(c <='9'))
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b2f      	cmp	r3, #47	; 0x2f
 8006418:	d906      	bls.n	8006428 <char_to_hex+0x28>
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	2b39      	cmp	r3, #57	; 0x39
 800641e:	d803      	bhi.n	8006428 <char_to_hex+0x28>
	{
		return (uint8_t)c - 48;
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	3b30      	subs	r3, #48	; 0x30
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e014      	b.n	8006452 <char_to_hex+0x52>
	}
	if((c >='a') &&(c <='f'))
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b60      	cmp	r3, #96	; 0x60
 800642c:	d906      	bls.n	800643c <char_to_hex+0x3c>
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b66      	cmp	r3, #102	; 0x66
 8006432:	d803      	bhi.n	800643c <char_to_hex+0x3c>
	{
		return (uint8_t)c - 87;
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	3b57      	subs	r3, #87	; 0x57
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e00a      	b.n	8006452 <char_to_hex+0x52>
	}
	if((c >='A') &&(c <='F'))
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d906      	bls.n	8006450 <char_to_hex+0x50>
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	2b46      	cmp	r3, #70	; 0x46
 8006446:	d803      	bhi.n	8006450 <char_to_hex+0x50>
	{
		return (uint8_t)c - 55;
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	3b37      	subs	r3, #55	; 0x37
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e000      	b.n	8006452 <char_to_hex+0x52>
	}
	return -1; //invalid charachter
 8006450:	23ff      	movs	r3, #255	; 0xff
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <parse_ZDA>:
 * Parser Functions:
 * Extract key data from NMEA message strings.
 */

uint8_t parse_ZDA(char* ZDAstring)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	time_t t;
	struct tm *timepointer;

	t = time(NULL);
 8006468:	2000      	movs	r0, #0
 800646a:	f002 fe39 	bl	80090e0 <time>
 800646e:	4603      	mov	r3, r0
 8006470:	60fb      	str	r3, [r7, #12]
	timepointer = localtime(&t);
 8006472:	f107 030c 	add.w	r3, r7, #12
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fb80 	bl	8007b7c <localtime>
 800647c:	61b8      	str	r0, [r7, #24]
	/* Get UTC time*/
	while(*ZDAstring++ != ',');
 800647e:	bf00      	nop
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b2c      	cmp	r3, #44	; 0x2c
 800648a:	d1f9      	bne.n	8006480 <parse_ZDA+0x20>
	char* temp = ZDAstring++;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	607a      	str	r2, [r7, #4]
 8006492:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < strlen(ZDAstring); ++i)
 8006494:	2300      	movs	r3, #0
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e011      	b.n	80064be <parse_ZDA+0x5e>
	{
		if ((ZDAstring[i]==',')&&(ZDAstring[i+1] == ','))
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b2c      	cmp	r3, #44	; 0x2c
 80064a4:	d108      	bne.n	80064b8 <parse_ZDA+0x58>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3301      	adds	r3, #1
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b2c      	cmp	r3, #44	; 0x2c
 80064b2:	d101      	bne.n	80064b8 <parse_ZDA+0x58>
		{
			/* Data is invalid*/
			return -1;
 80064b4:	23ff      	movs	r3, #255	; 0xff
 80064b6:	e094      	b.n	80065e2 <parse_ZDA+0x182>
	for (int i = 0; i < strlen(ZDAstring); ++i)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7f9 fe90 	bl	80001e4 <strlen>
 80064c4:	4602      	mov	r2, r0
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d8e6      	bhi.n	800649a <parse_ZDA+0x3a>
		}
	}
	timepointer->tm_hour = (temp[0]-48)*10+ (temp[1]-48)+2;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	461a      	mov	r2, r3
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3301      	adds	r3, #1
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	3b30      	subs	r3, #48	; 0x30
 80064e6:	4413      	add	r3, r2
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	609a      	str	r2, [r3, #8]
	timepointer->tm_min = (temp[2]-48)*10+ (temp[3]-48)-1;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3302      	adds	r3, #2
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	461a      	mov	r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	3303      	adds	r3, #3
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	3b30      	subs	r3, #48	; 0x30
 800650a:	4413      	add	r3, r2
 800650c:	1e5a      	subs	r2, r3, #1
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	605a      	str	r2, [r3, #4]
	timepointer->tm_sec = (temp[4]-48)*10+ (temp[5]-48) -1 ;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	3304      	adds	r3, #4
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	461a      	mov	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	3305      	adds	r3, #5
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	3b30      	subs	r3, #48	; 0x30
 800652e:	4413      	add	r3, r2
 8006530:	1e5a      	subs	r2, r3, #1
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	601a      	str	r2, [r3, #0]
	while(*ZDAstring++ != ',');
 8006536:	bf00      	nop
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b2c      	cmp	r3, #44	; 0x2c
 8006542:	d1f9      	bne.n	8006538 <parse_ZDA+0xd8>
	temp = ZDAstring;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	617b      	str	r3, [r7, #20]
	timepointer->tm_mday = (temp[0]-48)*10+ (temp[1]-48);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	461a      	mov	r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	3301      	adds	r3, #1
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	3b30      	subs	r3, #48	; 0x30
 8006562:	441a      	add	r2, r3
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	60da      	str	r2, [r3, #12]
	timepointer->tm_mon = (temp[3]-48)*10+ (temp[4]-48)-1;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	3303      	adds	r3, #3
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	461a      	mov	r2, r3
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3304      	adds	r3, #4
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	3b30      	subs	r3, #48	; 0x30
 8006584:	4413      	add	r3, r2
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	611a      	str	r2, [r3, #16]
	timepointer->tm_year = (temp[6]-48)*1000 +(temp[7]-48)*100 + (temp[8]-48)*10 +(temp[9]-48)-1900;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	3306      	adds	r3, #6
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	3b30      	subs	r3, #48	; 0x30
 8006594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006598:	fb02 f203 	mul.w	r2, r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3307      	adds	r3, #7
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	3b30      	subs	r3, #48	; 0x30
 80065a4:	2164      	movs	r1, #100	; 0x64
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	18d1      	adds	r1, r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3308      	adds	r3, #8
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	18ca      	adds	r2, r1, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3309      	adds	r3, #9
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	3b30      	subs	r3, #48	; 0x30
 80065c8:	4413      	add	r3, r2
 80065ca:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	615a      	str	r2, [r3, #20]
	time_t result;

	 result = mktime(timepointer);
 80065d2:	69b8      	ldr	r0, [r7, #24]
 80065d4:	f001 fccc 	bl	8007f70 <mktime>
 80065d8:	6138      	str	r0, [r7, #16]
	 eTime =  result;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4a03      	ldr	r2, [pc, #12]	; (80065ec <parse_ZDA+0x18c>)
 80065de:	6013      	str	r3, [r2, #0]
	return 0;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200002f0 	.word	0x200002f0

080065f0 <Parse_GLL>:

uint8_t Parse_GLL(char* GLLstring)
{
 80065f0:	b5b0      	push	{r4, r5, r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	/* Extract latitude*/
	uint8_t flag = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
	GLLstring+= 6;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3306      	adds	r3, #6
 8006600:	607b      	str	r3, [r7, #4]
	char* temp = GLLstring;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	613b      	str	r3, [r7, #16]
	uint8_t count = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 800660a:	e002      	b.n	8006612 <Parse_GLL+0x22>
	{
		count++;
 800660c:	7dbb      	ldrb	r3, [r7, #22]
 800660e:	3301      	adds	r3, #1
 8006610:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b2c      	cmp	r3, #44	; 0x2c
 800661c:	d1f6      	bne.n	800660c <Parse_GLL+0x1c>
	}
	if((count > 0))
 800661e:	7dbb      	ldrb	r3, [r7, #22]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02e      	beq.n	8006682 <Parse_GLL+0x92>
	{
		temp[count] = '\0';
 8006624:	7dbb      	ldrb	r3, [r7, #22]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
		int8_t sign = 1 -2*( temp[++count] =='S');
 800662e:	7dbb      	ldrb	r3, [r7, #22]
 8006630:	3301      	adds	r3, #1
 8006632:	75bb      	strb	r3, [r7, #22]
 8006634:	7dbb      	ldrb	r3, [r7, #22]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b53      	cmp	r3, #83	; 0x53
 800663e:	d102      	bne.n	8006646 <Parse_GLL+0x56>
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
 8006644:	e000      	b.n	8006648 <Parse_GLL+0x58>
 8006646:	2301      	movs	r3, #1
 8006648:	73fb      	strb	r3, [r7, #15]
		GPS_coord.lat = sign*atof(temp);
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	4618      	mov	r0, r3
 8006650:	f7f9 ff78 	bl	8000544 <__aeabi_i2d>
 8006654:	4604      	mov	r4, r0
 8006656:	460d      	mov	r5, r1
 8006658:	6938      	ldr	r0, [r7, #16]
 800665a:	f001 fa62 	bl	8007b22 <atof>
 800665e:	ec53 2b10 	vmov	r2, r3, d0
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	f7f9 ffd3 	bl	8000610 <__aeabi_dmul>
 800666a:	4603      	mov	r3, r0
 800666c:	460c      	mov	r4, r1
 800666e:	4618      	mov	r0, r3
 8006670:	4621      	mov	r1, r4
 8006672:	f7fa faaf 	bl	8000bd4 <__aeabi_d2f>
 8006676:	4602      	mov	r2, r0
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <Parse_GLL+0x12c>)
 800667a:	601a      	str	r2, [r3, #0]
		flag++;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	3301      	adds	r3, #1
 8006680:	75fb      	strb	r3, [r7, #23]
	}

	/* Extract longitude */
	while(*GLLstring++ !=',');
 8006682:	bf00      	nop
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b2c      	cmp	r3, #44	; 0x2c
 800668e:	d1f9      	bne.n	8006684 <Parse_GLL+0x94>
	temp = GLLstring;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	613b      	str	r3, [r7, #16]
	count = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 8006698:	e002      	b.n	80066a0 <Parse_GLL+0xb0>
	{
			count++;
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	3301      	adds	r3, #1
 800669e:	75bb      	strb	r3, [r7, #22]
	while(*GLLstring++ != ',')
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b2c      	cmp	r3, #44	; 0x2c
 80066aa:	d1f6      	bne.n	800669a <Parse_GLL+0xaa>
	}
	if((count > 0))
 80066ac:	7dbb      	ldrb	r3, [r7, #22]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02e      	beq.n	8006710 <Parse_GLL+0x120>
	{
			temp[count] = '\0';
 80066b2:	7dbb      	ldrb	r3, [r7, #22]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4413      	add	r3, r2
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
			int8_t sign = 1 -2*( temp[++count] =='W');
 80066bc:	7dbb      	ldrb	r3, [r7, #22]
 80066be:	3301      	adds	r3, #1
 80066c0:	75bb      	strb	r3, [r7, #22]
 80066c2:	7dbb      	ldrb	r3, [r7, #22]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b57      	cmp	r3, #87	; 0x57
 80066cc:	d102      	bne.n	80066d4 <Parse_GLL+0xe4>
 80066ce:	f04f 33ff 	mov.w	r3, #4294967295
 80066d2:	e000      	b.n	80066d6 <Parse_GLL+0xe6>
 80066d4:	2301      	movs	r3, #1
 80066d6:	73bb      	strb	r3, [r7, #14]
			GPS_coord.longi = sign*atof(temp);
 80066d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7f9 ff31 	bl	8000544 <__aeabi_i2d>
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	6938      	ldr	r0, [r7, #16]
 80066e8:	f001 fa1b 	bl	8007b22 <atof>
 80066ec:	ec53 2b10 	vmov	r2, r3, d0
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7f9 ff8c 	bl	8000610 <__aeabi_dmul>
 80066f8:	4603      	mov	r3, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4618      	mov	r0, r3
 80066fe:	4621      	mov	r1, r4
 8006700:	f7fa fa68 	bl	8000bd4 <__aeabi_d2f>
 8006704:	4602      	mov	r2, r0
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <Parse_GLL+0x12c>)
 8006708:	605a      	str	r2, [r3, #4]
			flag++;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	3301      	adds	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]

	}

return flag;
 8006710:	7dfb      	ldrb	r3, [r7, #23]

}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bdb0      	pop	{r4, r5, r7, pc}
 800671a:	bf00      	nop
 800671c:	200002f8 	.word	0x200002f8

08006720 <parse_GSA>:

uint8_t parse_GSA(char* GSA_string)
{
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	/* Isolate Dilation of Precisions*/
	uint8_t count = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
	char* t = GSA_string;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	61bb      	str	r3, [r7, #24]
	while(count < 2)
 8006730:	e008      	b.n	8006744 <parse_GSA+0x24>
	{
		if(*t++==',')count++;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	61ba      	str	r2, [r7, #24]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b2c      	cmp	r3, #44	; 0x2c
 800673c:	d102      	bne.n	8006744 <parse_GSA+0x24>
 800673e:	7ffb      	ldrb	r3, [r7, #31]
 8006740:	3301      	adds	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
	while(count < 2)
 8006744:	7ffb      	ldrb	r3, [r7, #31]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d9f3      	bls.n	8006732 <parse_GSA+0x12>
	}
	diag.fix_type = (*t++-48);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	61ba      	str	r2, [r7, #24]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	3b30      	subs	r3, #48	; 0x30
 8006754:	b2da      	uxtb	r2, r3
 8006756:	4b45      	ldr	r3, [pc, #276]	; (800686c <parse_GSA+0x14c>)
 8006758:	71da      	strb	r2, [r3, #7]

	//field 3 - 15 indicate satelites
	uint8_t numsats = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]
	uint8_t numfields = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8006762:	e015      	b.n	8006790 <parse_GSA+0x70>
	{
		uint8_t count = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	757b      	strb	r3, [r7, #21]
		while(*++t !=',')count++;
 8006768:	e002      	b.n	8006770 <parse_GSA+0x50>
 800676a:	7d7b      	ldrb	r3, [r7, #21]
 800676c:	3301      	adds	r3, #1
 800676e:	757b      	strb	r3, [r7, #21]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	3301      	adds	r3, #1
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b2c      	cmp	r3, #44	; 0x2c
 800677c:	d1f5      	bne.n	800676a <parse_GSA+0x4a>
		if(count > 0)
 800677e:	7d7b      	ldrb	r3, [r7, #21]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <parse_GSA+0x6a>
		{
			numsats++;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	3301      	adds	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
		}
		numfields++;
 800678a:	7dbb      	ldrb	r3, [r7, #22]
 800678c:	3301      	adds	r3, #1
 800678e:	75bb      	strb	r3, [r7, #22]
	while(numfields < 12)
 8006790:	7dbb      	ldrb	r3, [r7, #22]
 8006792:	2b0b      	cmp	r3, #11
 8006794:	d9e6      	bls.n	8006764 <parse_GSA+0x44>

	}
	diag.num_sats = numsats;
 8006796:	4a35      	ldr	r2, [pc, #212]	; (800686c <parse_GSA+0x14c>)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	7193      	strb	r3, [r2, #6]
	DOP_t dop[3] = {0};
 800679c:	f107 0308 	add.w	r3, r7, #8
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 3; ++i)
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	e043      	b.n	8006834 <parse_GSA+0x114>
	{
		//get digit
		while(*++t != '.')
		{
			dop[i].digit = dop[i].digit*10 +(*t-48);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	f107 0220 	add.w	r2, r7, #32
 80067b4:	4413      	add	r3, r2
 80067b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80067ba:	461a      	mov	r2, r3
 80067bc:	0092      	lsls	r2, r2, #2
 80067be:	4413      	add	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	4413      	add	r3, r2
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	3b30      	subs	r3, #48	; 0x30
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	f107 0120 	add.w	r1, r7, #32
 80067d8:	440b      	add	r3, r1
 80067da:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(*++t != '.')
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3301      	adds	r3, #1
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ea:	d1df      	bne.n	80067ac <parse_GSA+0x8c>
		}
		while(*++t != ',')
 80067ec:	e018      	b.n	8006820 <parse_GSA+0x100>
		{
			dop[i].precision = dop[i].precision*10+(*t-48);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	f107 0220 	add.w	r2, r7, #32
 80067f6:	4413      	add	r3, r2
 80067f8:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 80067fc:	461a      	mov	r2, r3
 80067fe:	0092      	lsls	r2, r2, #2
 8006800:	4413      	add	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	b2da      	uxtb	r2, r3
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	4413      	add	r3, r2
 800680c:	b2db      	uxtb	r3, r3
 800680e:	3b30      	subs	r3, #48	; 0x30
 8006810:	b2da      	uxtb	r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	f107 0120 	add.w	r1, r7, #32
 800681a:	440b      	add	r3, r1
 800681c:	f803 2c17 	strb.w	r2, [r3, #-23]
		while(*++t != ',')
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	3301      	adds	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b2c      	cmp	r3, #44	; 0x2c
 800682c:	d1df      	bne.n	80067ee <parse_GSA+0xce>
	for (int i = 0; i < 3; ++i)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b02      	cmp	r3, #2
 8006838:	ddd1      	ble.n	80067de <parse_GSA+0xbe>
	}
	/*
	 * If successful, add to diagnostic struct
	 *
	 */
diag.HDOP = dop[0];
 800683a:	4b0c      	ldr	r3, [pc, #48]	; (800686c <parse_GSA+0x14c>)
 800683c:	3302      	adds	r3, #2
 800683e:	f107 0208 	add.w	r2, r7, #8
 8006842:	8812      	ldrh	r2, [r2, #0]
 8006844:	801a      	strh	r2, [r3, #0]
diag.PDOP = dop[1];
 8006846:	4b09      	ldr	r3, [pc, #36]	; (800686c <parse_GSA+0x14c>)
 8006848:	461a      	mov	r2, r3
 800684a:	f107 030a 	add.w	r3, r7, #10
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	8013      	strh	r3, [r2, #0]
diag.VDOP = dop[2];
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <parse_GSA+0x14c>)
 8006854:	3304      	adds	r3, #4
 8006856:	f107 020c 	add.w	r2, r7, #12
 800685a:	8812      	ldrh	r2, [r2, #0]
 800685c:	801a      	strh	r2, [r3, #0]
	return 0;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3724      	adds	r7, #36	; 0x24
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	200002e4 	.word	0x200002e4

08006870 <init_GPS>:

//================== 5. Peripheral Function Definitions ===============================

GPS_Init_msg_t init_GPS(GPS_Handle_Typedef *hgps)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
	if(MX_DMA_Init() != HAL_OK)  return GPS_Init_Periph_Config_Error;
 8006878:	f7ff fc2e 	bl	80060d8 <MX_DMA_Init>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <init_GPS+0x16>
 8006882:	2306      	movs	r3, #6
 8006884:	e07e      	b.n	8006984 <init_GPS+0x114>
	if(MX_UART4_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 8006886:	f7ff fbef 	bl	8006068 <MX_UART4_Init>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <init_GPS+0x24>
 8006890:	2306      	movs	r3, #6
 8006892:	e077      	b.n	8006984 <init_GPS+0x114>
	if(MX_TIM2_Init() != HAL_OK) return GPS_Init_Periph_Config_Error;
 8006894:	f7ff fb30 	bl	8005ef8 <MX_TIM2_Init>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <init_GPS+0x32>
 800689e:	2306      	movs	r3, #6
 80068a0:	e070      	b.n	8006984 <init_GPS+0x114>

	/* attach handlers to gps instances*/
	hgps->gps_huart = &huart4;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a39      	ldr	r2, [pc, #228]	; (800698c <init_GPS+0x11c>)
 80068a6:	601a      	str	r2, [r3, #0]
	hgps->gps_htim  = &htim2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a39      	ldr	r2, [pc, #228]	; (8006990 <init_GPS+0x120>)
 80068ac:	609a      	str	r2, [r3, #8]
	hgps->gps_hdmamem = &hdma_memtomem_dma1_channel1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a38      	ldr	r2, [pc, #224]	; (8006994 <init_GPS+0x124>)
 80068b2:	605a      	str	r2, [r3, #4]

	/* Attach pointers to data buffer */
	hgps->GPS_Tx_Buffer = DMA_TX_Buffer;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a38      	ldr	r2, [pc, #224]	; (8006998 <init_GPS+0x128>)
 80068b8:	611a      	str	r2, [r3, #16]
	hgps->GPS_Rx_Buffer = DMA_RX_Buffer;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a37      	ldr	r2, [pc, #220]	; (800699c <init_GPS+0x12c>)
 80068be:	60da      	str	r2, [r3, #12]
	hgps->GPS_Mem_Buffer = GNSS_Buffer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <init_GPS+0x130>)
 80068c4:	615a      	str	r2, [r3, #20]

	//poll a byte to see if reciever online
	uint8_t test_byte;
	if(HAL_UART_Receive(hgps->gps_huart,&test_byte,1,250) != HAL_OK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f107 010e 	add.w	r1, r7, #14
 80068ce:	23fa      	movs	r3, #250	; 0xfa
 80068d0:	2201      	movs	r2, #1
 80068d2:	f7fe fa42 	bl	8004d5a <HAL_UART_Receive>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <init_GPS+0x70>
	{
		return GPS_Init_Offline_Error;
 80068dc:	2307      	movs	r3, #7
 80068de:	e051      	b.n	8006984 <init_GPS+0x114>
	}
	UBX_MSG_t GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f947 	bl	8006b74 <UBX_Send_Ack>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
	if(GPS_Acknowledgement_State == UBX_ACK_ACK)
 80068ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d115      	bne.n	800691e <init_GPS+0xae>
	{
		Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fcf4 	bl	80062e8 <Clear_Buffer>
		Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fced 	bl	80062e8 <Clear_Buffer>
		if( UBX_Configure_Baudrate(hgps) != UBX_ACK_ACK)
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa60 	bl	8006dd4 <UBX_Configure_Baudrate>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d025      	beq.n	8006966 <init_GPS+0xf6>
		{
			return GPS_Init_Baud_Config_Error;
 800691a:	2303      	movs	r3, #3
 800691c:	e032      	b.n	8006984 <init_GPS+0x114>
		}

	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Rx)
 800691e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006922:	f113 0f03 	cmn.w	r3, #3
 8006926:	d112      	bne.n	800694e <init_GPS+0xde>
		/*
		 * If Not recieving Ack-Ack on 115200, it could be possible that the device is
		 * already configured. change baud rate and try again
		 */
		//configure baud rate to 115200 and try again
		if(USART_Set_Baudrate(hgps,115200) == HAL_OK)
 8006928:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8a7 	bl	8006a80 <USART_Set_Baudrate>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <init_GPS+0xd2>
		{
			GPS_Acknowledgement_State = UBX_Send_Ack(hgps);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f91b 	bl	8006b74 <UBX_Send_Ack>
 800693e:	4603      	mov	r3, r0
 8006940:	73fb      	strb	r3, [r7, #15]
		}
		if(GPS_Acknowledgement_State != UBX_ACK_ACK)
 8006942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d00d      	beq.n	8006966 <init_GPS+0xf6>
		{
			return GPS_Init_Ack_Error;
 800694a:	2302      	movs	r3, #2
 800694c:	e01a      	b.n	8006984 <init_GPS+0x114>
		}


	}else if(GPS_Acknowledgement_State == UBX_TIMEOUT_Tx || GPS_Acknowledgement_State == UBX_ERROR)
 800694e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006952:	f113 0f02 	cmn.w	r3, #2
 8006956:	d004      	beq.n	8006962 <init_GPS+0xf2>
 8006958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d101      	bne.n	8006966 <init_GPS+0xf6>
	{
		return GPS_Init_Ack_Tx_Error;
 8006962:	2305      	movs	r3, #5
 8006964:	e00e      	b.n	8006984 <init_GPS+0x114>
	}
	if(GPS_Acknowledgement_State == UBX_ACK_NACK)
 8006966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <init_GPS+0x102>
	{
		return GPS_Init_Ack_Error;
 800696e:	2302      	movs	r3, #2
 8006970:	e008      	b.n	8006984 <init_GPS+0x114>
	}
	//configure message buffer
	if( UBX_Configure_Messages(hgps) != UBX_OK )
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa78 	bl	8006e68 <UBX_Configure_Messages>
 8006978:	4603      	mov	r3, r0
 800697a:	2b02      	cmp	r3, #2
 800697c:	d001      	beq.n	8006982 <init_GPS+0x112>
	{
		return GPS_Init_MSG_Config_Error;
 800697e:	2304      	movs	r3, #4
 8006980:	e000      	b.n	8006984 <init_GPS+0x114>
	}
	return GPS_Init_OK;
 8006982:	2301      	movs	r3, #1
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000b4c 	.word	0x20000b4c
 8006990:	20000bcc 	.word	0x20000bcc
 8006994:	20000300 	.word	0x20000300
 8006998:	20001458 	.word	0x20001458
 800699c:	2000034c 	.word	0x2000034c
 80069a0:	20000c0c 	.word	0x20000c0c

080069a4 <deinit_GPS>:

GPS_Init_msg_t deinit_GPS(GPS_Handle_Typedef* hgps)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	/* Deinit Timer */
	if(hgps->gps_htim->Instance != GPS_TIM_PORT)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b6:	d004      	beq.n	80069c2 <deinit_GPS+0x1e>
	{
		hgps->gps_htim->Instance = GPS_TIM_PORT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069c0:	601a      	str	r2, [r3, #0]
	}
	//Disable Timer
	HAL_TIM_Base_Stop_IT(hgps->gps_htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc fe54 	bl	8003674 <HAL_TIM_Base_Stop_IT>
	if(HAL_TIM_Base_DeInit(hgps->gps_htim) != HAL_OK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fc fdca 	bl	800356a <HAL_TIM_Base_DeInit>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <deinit_GPS+0x3c>
	{
		return GPS_Init_Periph_Config_Error;
 80069dc:	2306      	movs	r3, #6
 80069de:	e046      	b.n	8006a6e <deinit_GPS+0xca>
	}
	//detach instance
	hgps->gps_htim = NULL;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	609a      	str	r2, [r3, #8]
	/* De init UART*/
	if(hgps->gps_huart->Instance != GPS_UART_PORT)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <deinit_GPS+0xd4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <deinit_GPS+0x56>
	{
		hgps->gps_huart->Instance = GPS_UART_PORT;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <deinit_GPS+0xd4>)
 80069f8:	601a      	str	r2, [r3, #0]
	}
	if(HAL_UART_DeInit(hgps->gps_huart) != HAL_OK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe f976 	bl	8004cf0 <HAL_UART_DeInit>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <deinit_GPS+0x6a>
	{
		return GPS_Init_Periph_Config_Error;
 8006a0a:	2306      	movs	r3, #6
 8006a0c:	e02f      	b.n	8006a6e <deinit_GPS+0xca>
	}
	hgps->gps_huart = NULL;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
	/* De init DMA Memory Stream*/
	if(hgps->gps_hdmamem->Instance != DMA1_Channel1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a18      	ldr	r2, [pc, #96]	; (8006a7c <deinit_GPS+0xd8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <deinit_GPS+0x84>
	{
		hgps->gps_hdmamem->Instance = DMA1_Channel1;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <deinit_GPS+0xd8>)
 8006a26:	601a      	str	r2, [r3, #0]
	}
	if(HAL_DMA_DeInit(hgps->gps_hdmamem) != HAL_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fa fd3b 	bl	80014a8 <HAL_DMA_DeInit>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <deinit_GPS+0x98>
	{
		return GPS_Init_Periph_Config_Error;
 8006a38:	2306      	movs	r3, #6
 8006a3a:	e018      	b.n	8006a6e <deinit_GPS+0xca>
	}
	hgps->gps_hdmamem = NULL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	605a      	str	r2, [r3, #4]

	/* Clear memory buffers*/
	Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff fc4c 	bl	80062e8 <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fc45 	bl	80062e8 <Clear_Buffer>
	Clear_Buffer(hgps->GPS_Mem_Buffer,GNSS_BUFFER_SIZE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fc3e 	bl	80062e8 <Clear_Buffer>


	return GPS_Init_OK;
 8006a6c:	2301      	movs	r3, #1
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	40004c00 	.word	0x40004c00
 8006a7c:	40020008 	.word	0x40020008

08006a80 <USART_Set_Baudrate>:

HAL_StatusTypeDef USART_Set_Baudrate(GPS_Handle_Typedef* hgps,uint32_t baud)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
	//disable UART peripheral and change baud rate
 	 hgps->gps_huart->Instance->CR1 &= ~USART_CR1_UE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
 	 hgps->gps_huart->Init.BaudRate = baud;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	605a      	str	r2, [r3, #4]
	 if(HAL_UART_Init(hgps->gps_huart) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe f8d2 	bl	8004c54 <HAL_UART_Init>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <USART_Set_Baudrate+0x3a>
	 {
		return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e056      	b.n	8006b68 <USART_Set_Baudrate+0xe8>
	 }
	 hgps->gps_huart->Instance->CR1 |= USART_CR1_UE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	f042 0201 	orr.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
	 //clear all errors
	 //clear framing error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d104      	bne.n	8006ae8 <USART_Set_Baudrate+0x68>
	 {
	 	__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	621a      	str	r2, [r3, #32]
	 }
	 //clear noise error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d104      	bne.n	8006b02 <USART_Set_Baudrate+0x82>
	 {
	 	__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2204      	movs	r2, #4
 8006b00:	621a      	str	r2, [r3, #32]
	 }
	 //clear overun error
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d10a      	bne.n	8006b28 <USART_Set_Baudrate+0xa8>
	 {
	 	uint8_t temp = hgps->gps_huart->Instance->RDR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	73fb      	strb	r3, [r7, #15]
	 	(void)temp;
	 	__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2208      	movs	r2, #8
 8006b26:	621a      	str	r2, [r3, #32]
	 }
	 //clear parity errors
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d104      	bne.n	8006b42 <USART_Set_Baudrate+0xc2>
	 {
	 	__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	621a      	str	r2, [r3, #32]
	 }
	 //clear hanging idle flag
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_IDLE) == SET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d104      	bne.n	8006b5c <USART_Set_Baudrate+0xdc>
	 {
	  	__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2210      	movs	r2, #16
 8006b5a:	621a      	str	r2, [r3, #32]
     }
	 //increase Timeout value to allow for longer waits
	 __HAL_TIM_SET_COMPARE(hgps->gps_htim,TIM_CHANNEL_1,576000);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a03      	ldr	r2, [pc, #12]	; (8006b70 <USART_Set_Baudrate+0xf0>)
 8006b64:	635a      	str	r2, [r3, #52]	; 0x34
	 return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	0008ca00 	.word	0x0008ca00

08006b74 <UBX_Send_Ack>:

//======================= 6. UBX Function Definitions =================================

UBX_MSG_t UBX_Send_Ack(GPS_Handle_Typedef *hgps)
{
 8006b74:	b5b0      	push	{r4, r5, r7, lr}
 8006b76:	b092      	sub	sp, #72	; 0x48
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

	 uint8_t ubx_ack_string[] = {0xB5 ,0x62 ,0x06 ,0x09 ,0x0D ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xFF ,0xFF ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x17 ,0x31 ,0xBF };
 8006b7c:	4b90      	ldr	r3, [pc, #576]	; (8006dc0 <UBX_Send_Ack+0x24c>)
 8006b7e:	f107 0418 	add.w	r4, r7, #24
 8006b82:	461d      	mov	r5, r3
 8006b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006b8c:	6020      	str	r0, [r4, #0]
 8006b8e:	3404      	adds	r4, #4
 8006b90:	7021      	strb	r1, [r4, #0]
	 int size = (sizeof(ubx_ack_string)/sizeof(*ubx_ack_string));
 8006b92:	2315      	movs	r3, #21
 8006b94:	63bb      	str	r3, [r7, #56]	; 0x38
	 for (int i = 0; i < size ; ++i)
 8006b96:	2300      	movs	r3, #0
 8006b98:	647b      	str	r3, [r7, #68]	; 0x44
 8006b9a:	e00c      	b.n	8006bb6 <UBX_Send_Ack+0x42>
	 {
	  	hgps->GPS_Tx_Buffer[i] = ubx_ack_string[i];
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f107 0118 	add.w	r1, r7, #24
 8006ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006baa:	440a      	add	r2, r1
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	701a      	strb	r2, [r3, #0]
	 for (int i = 0; i < size ; ++i)
 8006bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	dbee      	blt.n	8006b9c <UBX_Send_Ack+0x28>
	 }
	 TX_Cplt = 0;
 8006bbe:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <UBX_Send_Ack+0x250>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d104      	bne.n	8006bde <UBX_Send_Ack+0x6a>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf0:	601a      	str	r2, [r3, #0]
	 if( HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer, size) == HAL_OK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bfc:	b292      	uxth	r2, r2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f7fe f978 	bl	8004ef4 <HAL_UART_Transmit_DMA>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d15a      	bne.n	8006cc0 <UBX_Send_Ack+0x14c>
	 {
	  //begin DMA Reception
	 while(TX_Cplt != SET);
 8006c0a:	bf00      	nop
 8006c0c:	4b6d      	ldr	r3, [pc, #436]	; (8006dc4 <UBX_Send_Ack+0x250>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d1fb      	bne.n	8006c0c <UBX_Send_Ack+0x98>
	 TX_Cplt = 0; //clear flag
 8006c14:	4b6b      	ldr	r3, [pc, #428]	; (8006dc4 <UBX_Send_Ack+0x250>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	f042 0210 	orr.w	r2, r2, #16
 8006c2c:	601a      	str	r2, [r3, #0]
	 __HAL_DMA_ENABLE_IT(hgps->gps_huart->hdmarx, DMA_IT_TC);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c3c:	6812      	ldr	r2, [r2, #0]
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	f042 0202 	orr.w	r2, r2, #2
 8006c44:	601a      	str	r2, [r3, #0]
	 if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1) == SET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d105      	bne.n	8006c62 <UBX_Send_Ack+0xee>
	 {
		 __HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0202 	mvn.w	r2, #2
 8006c60:	611a      	str	r2, [r3, #16]
	 }
	 M2M_Txfer_Cplt = 0;
 8006c62:	4b59      	ldr	r3, [pc, #356]	; (8006dc8 <UBX_Send_Ack+0x254>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Receive_DMA(hgps->gps_huart,hgps->GPS_Rx_Buffer, DMA_RX_BUFFER_SIZE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c74:	4619      	mov	r1, r3
 8006c76:	f7fe f9b9 	bl	8004fec <HAL_UART_Receive_DMA>

	 __HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6892      	ldr	r2, [r2, #8]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	68d2      	ldr	r2, [r2, #12]
 8006c88:	f042 0202 	orr.w	r2, r2, #2
 8006c8c:	60da      	str	r2, [r3, #12]
	 HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fc fd4d 	bl	8003734 <HAL_TIM_OC_Start_IT>
	 HAL_TIM_Base_Start_IT(hgps->gps_htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fc fcbe 	bl	8003620 <HAL_TIM_Base_Start_IT>
	 }
	  while(M2M_Txfer_Cplt != SET)
 8006ca4:	e00c      	b.n	8006cc0 <UBX_Send_Ack+0x14c>
	  {
		  //TODO: SET DEVICE TO LOW POWER MODE WHILE DMA TRASNFER OCCURS
		  //Check for either receiver time out or peripheral timeout event
		  if(M2M_Txfer_Cplt == HAL_TIMEOUT)
 8006ca6:	4b48      	ldr	r3, [pc, #288]	; (8006dc8 <UBX_Send_Ack+0x254>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d108      	bne.n	8006cc0 <UBX_Send_Ack+0x14c>
		  {
			  TIM_IDLE_Timeout = RESET;
 8006cae:	4b47      	ldr	r3, [pc, #284]	; (8006dcc <UBX_Send_Ack+0x258>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
			  M2M_Txfer_Cplt = RESET;
 8006cb4:	4b44      	ldr	r3, [pc, #272]	; (8006dc8 <UBX_Send_Ack+0x254>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
			  return UBX_TIMEOUT_Rx;
 8006cba:	f06f 0302 	mvn.w	r3, #2
 8006cbe:	e07a      	b.n	8006db6 <UBX_Send_Ack+0x242>
	  while(M2M_Txfer_Cplt != SET)
 8006cc0:	4b41      	ldr	r3, [pc, #260]	; (8006dc8 <UBX_Send_Ack+0x254>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d1ee      	bne.n	8006ca6 <UBX_Send_Ack+0x132>
		  }
	  }
	  M2M_Txfer_Cplt = RESET;
 8006cc8:	4b3f      	ldr	r3, [pc, #252]	; (8006dc8 <UBX_Send_Ack+0x254>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
	  char val = (char) 0xB5;
 8006cce:	23b5      	movs	r3, #181	; 0xb5
 8006cd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  int index = (int)(strchr((char*)GNSS_Buffer,val))-(int)GNSS_Buffer;
 8006cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cd8:	4619      	mov	r1, r3
 8006cda:	483d      	ldr	r0, [pc, #244]	; (8006dd0 <UBX_Send_Ack+0x25c>)
 8006cdc:	f001 fb80 	bl	80083e0 <strchr>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4b3a      	ldr	r3, [pc, #232]	; (8006dd0 <UBX_Send_Ack+0x25c>)
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	633b      	str	r3, [r7, #48]	; 0x30
	  UBX_MSG_t GPS_Acknowledgement_State;
	  if((index < 0) || (index >GNSS_BUFFER_SIZE))
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db60      	blt.n	8006db2 <UBX_Send_Ack+0x23e>
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf6:	dc5c      	bgt.n	8006db2 <UBX_Send_Ack+0x23e>
	  {

	  }else{
	  uint8_t msg[10] = {0};
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	811a      	strh	r2, [r3, #8]
	  memcpy(msg,&hgps->GPS_Mem_Buffer[index],10);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	695a      	ldr	r2, [r3, #20]
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	441a      	add	r2, r3
 8006d0c:	f107 030c 	add.w	r3, r7, #12
 8006d10:	6810      	ldr	r0, [r2, #0]
 8006d12:	6851      	ldr	r1, [r2, #4]
 8006d14:	c303      	stmia	r3!, {r0, r1}
 8006d16:	8912      	ldrh	r2, [r2, #8]
 8006d18:	801a      	strh	r2, [r3, #0]

	  uint16_t header = ((uint16_t)msg[0]<<8) | ((uint16_t)msg[1]);
 8006d1a:	7b3b      	ldrb	r3, [r7, #12]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	b21a      	sxth	r2, r3
 8006d20:	7b7b      	ldrb	r3, [r7, #13]
 8006d22:	b21b      	sxth	r3, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b21b      	sxth	r3, r3
 8006d28:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  if(header == 0xb562)
 8006d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d2c:	f24b 5262 	movw	r2, #46434	; 0xb562
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d13e      	bne.n	8006db2 <UBX_Send_Ack+0x23e>
	  {
	 	 uint8_t ck_A =0, ck_B =0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8006d40:	2302      	movs	r3, #2
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	e013      	b.n	8006d6e <UBX_Send_Ack+0x1fa>
	 	 {
	 	 	ck_A += (uint8_t)msg[i];
 8006d46:	f107 020c 	add.w	r2, r7, #12
 8006d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4c:	4413      	add	r3, r2
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006d54:	4413      	add	r3, r2
 8006d56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	 	 	ck_B += ck_A;
 8006d5a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8006d5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006d62:	4413      	add	r3, r2
 8006d64:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	 	 for (int i = 2; i < 8; ++i)
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	2b07      	cmp	r3, #7
 8006d72:	dde8      	ble.n	8006d46 <UBX_Send_Ack+0x1d2>
	 	 }
	 	 if((ck_A == msg[8])&& (ck_B == msg[9]))
 8006d74:	7d3b      	ldrb	r3, [r7, #20]
 8006d76:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d116      	bne.n	8006dac <UBX_Send_Ack+0x238>
 8006d7e:	7d7b      	ldrb	r3, [r7, #21]
 8006d80:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d111      	bne.n	8006dac <UBX_Send_Ack+0x238>
	 	 {
	 	 	//acknowledgement
	 	 	if(msg[2] == 0x05)
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d111      	bne.n	8006db2 <UBX_Send_Ack+0x23e>
	 	 	{
	 		 	switch (msg[3])
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <UBX_Send_Ack+0x226>
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d004      	beq.n	8006da2 <UBX_Send_Ack+0x22e>
	 	 	if(msg[2] == 0x05)
 8006d98:	e00b      	b.n	8006db2 <UBX_Send_Ack+0x23e>
	 		 	{
	 		 		case 0:
	 		 			GPS_Acknowledgement_State = UBX_ACK_NACK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8006da0:	e003      	b.n	8006daa <UBX_Send_Ack+0x236>
	 		 		case 1:
	 		 			GPS_Acknowledgement_State = UBX_ACK_ACK;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 			break;
 8006da8:	bf00      	nop
	 	 	if(msg[2] == 0x05)
 8006daa:	e002      	b.n	8006db2 <UBX_Send_Ack+0x23e>
	 		 		}
	 		 	}
	 		 }
	 		 else
	 		 {
	 		 	GPS_Acknowledgement_State = UBX_ERROR;
 8006dac:	23ff      	movs	r3, #255	; 0xff
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	 		 }
	 	 }
	  }
	  return GPS_Acknowledgement_State;
 8006db2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3748      	adds	r7, #72	; 0x48
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	0800b094 	.word	0x0800b094
 8006dc4:	2000140c 	.word	0x2000140c
 8006dc8:	20000348 	.word	0x20000348
 8006dcc:	200002ec 	.word	0x200002ec
 8006dd0:	20000c0c 	.word	0x20000c0c

08006dd4 <UBX_Configure_Baudrate>:

UBX_MSG_t UBX_Configure_Baudrate(GPS_Handle_Typedef* hgps)
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

	//GPS is configured for 9600, change baud to 115200
	uint8_t ubx_baude_rate_config[] = {0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,0x00,0xC2,0x01,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E};
 8006ddc:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <UBX_Configure_Baudrate+0x8c>)
 8006dde:	f107 0408 	add.w	r4, r7, #8
 8006de2:	461d      	mov	r5, r3
 8006de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t size =  sizeof(ubx_baude_rate_config)/sizeof(ubx_baude_rate_config[0]);
 8006df0:	231c      	movs	r3, #28
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(hgps->GPS_Tx_Buffer,ubx_baude_rate_config,size);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f107 0108 	add.w	r1, r7, #8
 8006dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ffc2 	bl	8007d88 <memcpy>
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,hgps->GPS_Tx_Buffer,size) == HAL_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	f7fe f86f 	bl	8004ef4 <HAL_UART_Transmit_DMA>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11b      	bne.n	8006e54 <UBX_Configure_Baudrate+0x80>
	{
		 while(TX_Cplt != SET);
 8006e1c:	bf00      	nop
 8006e1e:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <UBX_Configure_Baudrate+0x90>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d1fb      	bne.n	8006e1e <UBX_Configure_Baudrate+0x4a>
		 Clear_Buffer(hgps->GPS_Tx_Buffer,DMA_TX_BUFFER_SIZE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff fa5a 	bl	80062e8 <Clear_Buffer>
		 if(USART_Set_Baudrate(hgps,115200) != HAL_OK)
 8006e34:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fe21 	bl	8006a80 <USART_Set_Baudrate>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <UBX_Configure_Baudrate+0x76>
		 {
			 return UBX_ERROR;
 8006e44:	f04f 33ff 	mov.w	r3, #4294967295
 8006e48:	e006      	b.n	8006e58 <UBX_Configure_Baudrate+0x84>
		 }
		 return UBX_Send_Ack(hgps);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff fe92 	bl	8006b74 <UBX_Send_Ack>
 8006e50:	4603      	mov	r3, r0
 8006e52:	e001      	b.n	8006e58 <UBX_Configure_Baudrate+0x84>
	}
	return UBX_TIMEOUT_Tx;
 8006e54:	f06f 0301 	mvn.w	r3, #1
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3728      	adds	r7, #40	; 0x28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e60:	0800b0ac 	.word	0x0800b0ac
 8006e64:	2000140c 	.word	0x2000140c

08006e68 <UBX_Configure_Messages>:

UBX_MSG_t UBX_Configure_Messages(GPS_Handle_Typedef *hgps)
{
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b0a8      	sub	sp, #160	; 0xa0
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	//clear all active/useless messages
	uint8_t NMEA_Clear_buffer[] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0A, 0x00, 0x04, 0x23, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x09, 0x00, 0x03, 0x21, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0D, 0x00, 0x07, 0x29, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x06, 0x00, 0x00, 0x1B, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x07, 0x00, 0x01, 0x1D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x0F, 0x00, 0x09, 0x2D, 0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19} ;
 8006e70:	4a3d      	ldr	r2, [pc, #244]	; (8006f68 <UBX_Configure_Messages+0x100>)
 8006e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e76:	4611      	mov	r1, r2
 8006e78:	226e      	movs	r2, #110	; 0x6e
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 ff84 	bl	8007d88 <memcpy>
	uint32_t size = sizeof(NMEA_Clear_buffer)/sizeof(NMEA_Clear_buffer[0]);
 8006e80:	236e      	movs	r3, #110	; 0x6e
 8006e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d104      	bne.n	8006ea0 <UBX_Configure_Messages+0x38>
	 {
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2240      	movs	r2, #64	; 0x40
 8006e9e:	621a      	str	r2, [r3, #32]
	 }
	__HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb2:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_Clear_buffer,size) != HAL_OK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006ebc:	b292      	uxth	r2, r2
 8006ebe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe f816 	bl	8004ef4 <HAL_UART_Transmit_DMA>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <UBX_Configure_Messages+0x6c>
	{
		return UBX_ERROR;
 8006ece:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed2:	e044      	b.n	8006f5e <UBX_Configure_Messages+0xf6>
	}
	while(TX_Cplt != SET);
 8006ed4:	bf00      	nop
 8006ed6:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <UBX_Configure_Messages+0x104>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d1fb      	bne.n	8006ed6 <UBX_Configure_Messages+0x6e>
	TX_Cplt = 0;
 8006ede:	4b23      	ldr	r3, [pc, #140]	; (8006f6c <UBX_Configure_Messages+0x104>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	701a      	strb	r2, [r3, #0]
	(void)NMEA_Clear_buffer;
	//enable messages GLL ZDA GSA
	uint8_t NMEA_msgs[] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x01,0xFC,0x12,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x01,0xFD,0x14,0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x01,0x03,0x20};
 8006ee4:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <UBX_Configure_Messages+0x108>)
 8006ee6:	f107 0408 	add.w	r4, r7, #8
 8006eea:	461d      	mov	r5, r3
 8006eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	7023      	strb	r3, [r4, #0]
	size = sizeof(NMEA_msgs)/sizeof(NMEA_msgs[0]);
 8006ef8:	2321      	movs	r3, #33	; 0x21
 8006efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	 if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_TC))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	d104      	bne.n	8006f18 <UBX_Configure_Messages+0xb0>
	 {
		 __HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_TC);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2240      	movs	r2, #64	; 0x40
 8006f16:	621a      	str	r2, [r3, #32]
	 }
	 __HAL_UART_ENABLE_IT(hgps->gps_huart,UART_IT_TC);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f2a:	601a      	str	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(hgps->gps_huart,NMEA_msgs,size) == HAL_OK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006f34:	b292      	uxth	r2, r2
 8006f36:	f107 0108 	add.w	r1, r7, #8
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fd ffda 	bl	8004ef4 <HAL_UART_Transmit_DMA>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <UBX_Configure_Messages+0xf2>
	{
		while(TX_Cplt != SET);
 8006f46:	bf00      	nop
 8006f48:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <UBX_Configure_Messages+0x104>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d1fb      	bne.n	8006f48 <UBX_Configure_Messages+0xe0>
		TX_Cplt = 0;
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <UBX_Configure_Messages+0x104>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
		return UBX_OK;
 8006f56:	2302      	movs	r3, #2
 8006f58:	e001      	b.n	8006f5e <UBX_Configure_Messages+0xf6>
	}

	return UBX_ERROR;
 8006f5a:	f04f 33ff 	mov.w	r3, #4294967295

}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	37a0      	adds	r7, #160	; 0xa0
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bdb0      	pop	{r4, r5, r7, pc}
 8006f66:	bf00      	nop
 8006f68:	0800b0c8 	.word	0x0800b0c8
 8006f6c:	2000140c 	.word	0x2000140c
 8006f70:	0800b138 	.word	0x0800b138

08006f74 <USART_TIM_RTO_Handler>:

//================ 7. IRQ Handlers Functions Prototypes ===============================

void USART_TIM_RTO_Handler(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_IT_SOURCE(htim,TIM_IT_CC1))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d10a      	bne.n	8006fa0 <USART_TIM_RTO_Handler+0x2c>
	{

		//clear interrupt
		__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1|TIM_IT_UPDATE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0203 	mvn.w	r2, #3
 8006f92:	611a      	str	r2, [r3, #16]
		//set reciever timeout flag
		TIM_IDLE_Timeout = 1;
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <USART_TIM_RTO_Handler+0x34>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]
		//disable timer
		HAL_TIM_Base_Stop_IT(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fc fb6a 	bl	8003674 <HAL_TIM_Base_Stop_IT>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200002ec 	.word	0x200002ec

08006fac <DMA_GNSS_MEM_IRQHandler>:

void DMA_GNSS_MEM_IRQHandler(GPS_Handle_Typedef *hgps)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

		M2M_Txfer_Cplt = SET;
 8006fb4:	4b64      	ldr	r3, [pc, #400]	; (8007148 <DMA_GNSS_MEM_IRQHandler+0x19c>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
		if(log_gps)
 8006fba:	4b64      	ldr	r3, [pc, #400]	; (800714c <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80be 	beq.w	8007140 <DMA_GNSS_MEM_IRQHandler+0x194>
		{
			Clear_Buffer(hgps->GPS_Rx_Buffer,DMA_RX_BUFFER_SIZE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff f98b 	bl	80062e8 <Clear_Buffer>
			//reset pointer
			char* msg = strtok((char*)GNSS_Buffer, "$");
 8006fd2:	495f      	ldr	r1, [pc, #380]	; (8007150 <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 8006fd4:	485f      	ldr	r0, [pc, #380]	; (8007154 <DMA_GNSS_MEM_IRQHandler+0x1a8>)
 8006fd6:	f002 f82f 	bl	8009038 <strtok>
 8006fda:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8006fdc:	e042      	b.n	8007064 <DMA_GNSS_MEM_IRQHandler+0xb8>
				{
					switch(is_valid(msg))
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff f990 	bl	8006304 <is_valid>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d012      	beq.n	8007010 <DMA_GNSS_MEM_IRQHandler+0x64>
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d01e      	beq.n	800702c <DMA_GNSS_MEM_IRQHandler+0x80>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d000      	beq.n	8006ff4 <DMA_GNSS_MEM_IRQHandler+0x48>
				    		packet_full |= 0b100;
				    	}
				    	break;
					  default:
						// invalid case
						break;
 8006ff2:	e02e      	b.n	8007052 <DMA_GNSS_MEM_IRQHandler+0xa6>
						if(Parse_GLL(msg) == 2)
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fafb 	bl	80065f0 <Parse_GLL>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d123      	bne.n	8007048 <DMA_GNSS_MEM_IRQHandler+0x9c>
							packet_full |= 0b1;
 8007000:	4b55      	ldr	r3, [pc, #340]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b53      	ldr	r3, [pc, #332]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 800700c:	701a      	strb	r2, [r3, #0]
						break;
 800700e:	e01b      	b.n	8007048 <DMA_GNSS_MEM_IRQHandler+0x9c>
						if(parse_GSA(msg) == 0)
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fb85 	bl	8006720 <parse_GSA>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d117      	bne.n	800704c <DMA_GNSS_MEM_IRQHandler+0xa0>
							packet_full |= 0b10;
 800701c:	4b4e      	ldr	r3, [pc, #312]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	f043 0302 	orr.w	r3, r3, #2
 8007024:	b2da      	uxtb	r2, r3
 8007026:	4b4c      	ldr	r3, [pc, #304]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007028:	701a      	strb	r2, [r3, #0]
						break;
 800702a:	e00f      	b.n	800704c <DMA_GNSS_MEM_IRQHandler+0xa0>
				    	if(parse_ZDA(msg) == 0)
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff fa17 	bl	8006460 <parse_ZDA>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10b      	bne.n	8007050 <DMA_GNSS_MEM_IRQHandler+0xa4>
				    		packet_full |= 0b100;
 8007038:	4b47      	ldr	r3, [pc, #284]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4b45      	ldr	r3, [pc, #276]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007044:	701a      	strb	r2, [r3, #0]
				    	break;
 8007046:	e003      	b.n	8007050 <DMA_GNSS_MEM_IRQHandler+0xa4>
						break;
 8007048:	bf00      	nop
 800704a:	e002      	b.n	8007052 <DMA_GNSS_MEM_IRQHandler+0xa6>
						break;
 800704c:	bf00      	nop
 800704e:	e000      	b.n	8007052 <DMA_GNSS_MEM_IRQHandler+0xa6>
				    	break;
 8007050:	bf00      	nop
					}
					if(packet_full == 7)
 8007052:	4b41      	ldr	r3, [pc, #260]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b07      	cmp	r3, #7
 8007058:	d008      	beq.n	800706c <DMA_GNSS_MEM_IRQHandler+0xc0>
					{
						break;
					}
					msg = strtok(NULL,"$");
 800705a:	493d      	ldr	r1, [pc, #244]	; (8007150 <DMA_GNSS_MEM_IRQHandler+0x1a4>)
 800705c:	2000      	movs	r0, #0
 800705e:	f001 ffeb 	bl	8009038 <strtok>
 8007062:	60f8      	str	r0, [r7, #12]
				while(msg != NULL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1b9      	bne.n	8006fde <DMA_GNSS_MEM_IRQHandler+0x32>
 800706a:	e000      	b.n	800706e <DMA_GNSS_MEM_IRQHandler+0xc2>
						break;
 800706c:	bf00      	nop
				}
			if(__HAL_TIM_GET_IT_SOURCE(hgps->gps_htim,TIM_IT_CC1))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d10a      	bne.n	8007094 <DMA_GNSS_MEM_IRQHandler+0xe8>
			{
				__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0202 	mvn.w	r2, #2
 8007088:	611a      	str	r2, [r3, #16]
				hgps->gps_htim->Instance->CNT = 0;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	625a      	str	r2, [r3, #36]	; 0x24
			}
			hgps->gps_huart->hdmarx->DmaBaseAddress->IFCR = 0x3FU << hgps->gps_huart->hdmarx->ChannelIndex; // clear all interrupts
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070a4:	213f      	movs	r1, #63	; 0x3f
 80070a6:	fa01 f202 	lsl.w	r2, r1, r2
 80070aa:	605a      	str	r2, [r3, #4]
			hgps->gps_huart->hdmarx->Instance->CMAR = (uint32_t)hgps->GPS_Rx_Buffer; //reset the pointer
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	68d2      	ldr	r2, [r2, #12]
 80070b8:	60da      	str	r2, [r3, #12]
			hgps->gps_huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; //set the number of bytes to expect
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c6:	605a      	str	r2, [r3, #4]
			__HAL_UART_ENABLE_IT(hgps->gps_huart, UART_IT_IDLE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	f042 0210 	orr.w	r2, r2, #16
 80070da:	601a      	str	r2, [r3, #0]
			__HAL_UART_CLEAR_IDLEFLAG(hgps->gps_huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2210      	movs	r2, #16
 80070e4:	621a      	str	r2, [r3, #32]
			if(packet_full != 7)
 80070e6:	4b1c      	ldr	r3, [pc, #112]	; (8007158 <DMA_GNSS_MEM_IRQHandler+0x1ac>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b07      	cmp	r3, #7
 80070ec:	d028      	beq.n	8007140 <DMA_GNSS_MEM_IRQHandler+0x194>
			{
				__HAL_TIM_ENABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6892      	ldr	r2, [r2, #8]
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	68d2      	ldr	r2, [r2, #12]
 80070fc:	f042 0202 	orr.w	r2, r2, #2
 8007100:	60da      	str	r2, [r3, #12]
				HAL_TIM_OC_Start_IT(hgps->gps_htim, TIM_CHANNEL_1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2100      	movs	r1, #0
 8007108:	4618      	mov	r0, r3
 800710a:	f7fc fb13 	bl	8003734 <HAL_TIM_OC_Start_IT>
				HAL_TIM_Base_Start_IT(hgps->gps_htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f7fc fa84 	bl	8003620 <HAL_TIM_Base_Start_IT>
				__HAL_DMA_ENABLE(hgps->gps_huart->hdmarx);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
				HAL_UART_DMAResume(hgps->gps_huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe f831 	bl	800519c <HAL_UART_DMAResume>
				log_gps = SET;
 800713a:	4b04      	ldr	r3, [pc, #16]	; (800714c <DMA_GNSS_MEM_IRQHandler+0x1a0>)
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
			}

		}

}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000348 	.word	0x20000348
 800714c:	20001c58 	.word	0x20001c58
 8007150:	0800b15c 	.word	0x0800b15c
 8007154:	20000c0c 	.word	0x20000c0c
 8007158:	200002f4 	.word	0x200002f4

0800715c <DMA_GNSS_Periph_IRQHandler>:

void DMA_GNSS_Periph_IRQHandler(GPS_Handle_Typedef *hgps)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_huart->hdmarx,DMA_IT_TC))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d046      	beq.n	8007204 <DMA_GNSS_Periph_IRQHandler+0xa8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_huart->hdmarx,DMA_FLAG_TC5);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	4b42      	ldr	r3, [pc, #264]	; (800728c <DMA_GNSS_Periph_IRQHandler+0x130>)
 8007182:	429a      	cmp	r2, r3
 8007184:	d904      	bls.n	8007190 <DMA_GNSS_Periph_IRQHandler+0x34>
 8007186:	4b42      	ldr	r3, [pc, #264]	; (8007290 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8007188:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	e003      	b.n	8007198 <DMA_GNSS_Periph_IRQHandler+0x3c>
 8007190:	4b40      	ldr	r3, [pc, #256]	; (8007294 <DMA_GNSS_Periph_IRQHandler+0x138>)
 8007192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007196:	605a      	str	r2, [r3, #4]
		//stop timer and reset flag
		HAL_TIM_Base_Stop(hgps->gps_htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc fa14 	bl	80035ca <HAL_TIM_Base_Stop>
		__HAL_TIM_DISABLE_IT(hgps->gps_htim,TIM_IT_CC1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6892      	ldr	r2, [r2, #8]
 80071ac:	6812      	ldr	r2, [r2, #0]
 80071ae:	68d2      	ldr	r2, [r2, #12]
 80071b0:	f022 0202 	bic.w	r2, r2, #2
 80071b4:	60da      	str	r2, [r3, #12]
		if(__HAL_TIM_GET_FLAG(hgps->gps_htim,TIM_FLAG_CC1))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d105      	bne.n	80071d2 <DMA_GNSS_Periph_IRQHandler+0x76>
		{
			__HAL_TIM_CLEAR_FLAG(hgps->gps_htim,TIM_FLAG_CC1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	611a      	str	r2, [r3, #16]
		}
		TIM_IDLE_Timeout = RESET;
 80071d2:	4b31      	ldr	r3, [pc, #196]	; (8007298 <DMA_GNSS_Periph_IRQHandler+0x13c>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]

		//begin a Memory to Memory PEripheral transfer
		__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6852      	ldr	r2, [r2, #4]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f042 0202 	orr.w	r2, r2, #2
 80071ea:	601a      	str	r2, [r3, #0]
		HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,DMA_RX_BUFFER_SIZE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6858      	ldr	r0, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4619      	mov	r1, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007200:	f7fa f9e4 	bl	80015cc <HAL_DMA_Start>
	}
		//in errata sheet Upon a data transfer error in a DMA channel x, both the specific TEIFx and the global GIFx
		//	flags are raised and the channel x is normally automatically disabled. However, if in the
		//	same clock cycle the software clears the GIFx flag (by setting the CGIFx bit of the
		//	DMA_IFCR register), the automatic channel disable fails and the TEIFx flag is not raised.
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_HT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d017      	beq.n	8007244 <DMA_GNSS_Periph_IRQHandler+0xe8>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_HT);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	4b1b      	ldr	r3, [pc, #108]	; (800728c <DMA_GNSS_Periph_IRQHandler+0x130>)
 800721e:	429a      	cmp	r2, r3
 8007220:	d903      	bls.n	800722a <DMA_GNSS_Periph_IRQHandler+0xce>
 8007222:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8007224:	2204      	movs	r2, #4
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	e002      	b.n	8007230 <DMA_GNSS_Periph_IRQHandler+0xd4>
 800722a:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <DMA_GNSS_Periph_IRQHandler+0x138>)
 800722c:	2204      	movs	r2, #4
 800722e:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_HT);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6852      	ldr	r2, [r2, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	f022 0204 	bic.w	r2, r2, #4
 8007242:	601a      	str	r2, [r3, #0]
	}
	if(__HAL_DMA_GET_IT_SOURCE(hgps->gps_hdmamem,DMA_IT_TE))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d017      	beq.n	8007284 <DMA_GNSS_Periph_IRQHandler+0x128>
	{
		__HAL_DMA_CLEAR_FLAG(hgps->gps_hdmamem,DMA_IT_TE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <DMA_GNSS_Periph_IRQHandler+0x130>)
 800725e:	429a      	cmp	r2, r3
 8007260:	d903      	bls.n	800726a <DMA_GNSS_Periph_IRQHandler+0x10e>
 8007262:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <DMA_GNSS_Periph_IRQHandler+0x134>)
 8007264:	2208      	movs	r2, #8
 8007266:	605a      	str	r2, [r3, #4]
 8007268:	e002      	b.n	8007270 <DMA_GNSS_Periph_IRQHandler+0x114>
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <DMA_GNSS_Periph_IRQHandler+0x138>)
 800726c:	2208      	movs	r2, #8
 800726e:	605a      	str	r2, [r3, #4]
		__HAL_DMA_DISABLE_IT(hgps->gps_hdmamem,DMA_IT_TE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6852      	ldr	r2, [r2, #4]
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	f022 0208 	bic.w	r2, r2, #8
 8007282:	601a      	str	r2, [r3, #0]
	}
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40020080 	.word	0x40020080
 8007290:	40020400 	.word	0x40020400
 8007294:	40020000 	.word	0x40020000
 8007298:	200002ec 	.word	0x200002ec

0800729c <USART_GPS_IRQHandler>:

void USART_GPS_IRQHandler(GPS_Handle_Typedef *hgps)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_IDLE))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d064      	beq.n	800737e <USART_GPS_IRQHandler+0xe2>
	{
		uint32_t temp = hgps->gps_huart->Instance->ISR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	60fb      	str	r3, [r7, #12]
		temp = hgps->gps_huart->Instance->RDR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	60fb      	str	r3, [r7, #12]
		 * 		   disable Periph-Mem stream and
		 * 		   begin Mem - Mem transfer of known data
		 *
		 */
		//check flag in TIM2
		if(TIM_IDLE_Timeout == SET)
 80072ca:	4b5f      	ldr	r3, [pc, #380]	; (8007448 <USART_GPS_IRQHandler+0x1ac>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d150      	bne.n	8007374 <USART_GPS_IRQHandler+0xd8>
		{
			gnss_length = DMA_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hgps->gps_huart->hdmarx);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80072e0:	461a      	mov	r2, r3
 80072e2:	4b5a      	ldr	r3, [pc, #360]	; (800744c <USART_GPS_IRQHandler+0x1b0>)
 80072e4:	601a      	str	r2, [r3, #0]
			//Disable DMA and unlink from UART
			if(log_gps)
 80072e6:	4b5a      	ldr	r3, [pc, #360]	; (8007450 <USART_GPS_IRQHandler+0x1b4>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d012      	beq.n	8007314 <USART_GPS_IRQHandler+0x78>
			{
				HAL_UART_DMAPause(hgps->gps_huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd fefe 	bl	80050f4 <HAL_UART_DMAPause>
				hgps->gps_huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
				__NOP();
 8007310:	bf00      	nop
 8007312:	e004      	b.n	800731e <USART_GPS_IRQHandler+0x82>

			}else
			{
				HAL_UART_DMAStop(hgps->gps_huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fd ff85 	bl	8005228 <HAL_UART_DMAStop>
			}
			//Timeout case: USART has recieved no data, Reciever timeout

			if(gnss_length > 0)
 800731e:	4b4b      	ldr	r3, [pc, #300]	; (800744c <USART_GPS_IRQHandler+0x1b0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	dd16      	ble.n	8007354 <USART_GPS_IRQHandler+0xb8>
			{
				//begin transfer from mem to mem
				__HAL_DMA_ENABLE_IT(hgps->gps_hdmamem,DMA_IT_TC);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6852      	ldr	r2, [r2, #4]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	f042 0202 	orr.w	r2, r2, #2
 8007338:	601a      	str	r2, [r3, #0]
				HAL_DMA_Start(hgps->gps_hdmamem,(uint32_t)hgps->GPS_Rx_Buffer,(uint32_t)hgps->GPS_Mem_Buffer,gnss_length);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6858      	ldr	r0, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	4619      	mov	r1, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	461a      	mov	r2, r3
 800734a:	4b40      	ldr	r3, [pc, #256]	; (800744c <USART_GPS_IRQHandler+0x1b0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f7fa f93d 	bl	80015cc <HAL_DMA_Start>
 8007352:	e002      	b.n	800735a <USART_GPS_IRQHandler+0xbe>
			/*
			 * Case 2: gnss_length == 0;
			 *
			 * Reciever has recieved no data and has thus timed out.
			 */
				M2M_Txfer_Cplt = HAL_TIMEOUT;
 8007354:	4b3f      	ldr	r3, [pc, #252]	; (8007454 <USART_GPS_IRQHandler+0x1b8>)
 8007356:	2203      	movs	r2, #3
 8007358:	701a      	strb	r2, [r3, #0]
			}
			//clear tim flag
			TIM_IDLE_Timeout = 0;
 800735a:	4b3b      	ldr	r3, [pc, #236]	; (8007448 <USART_GPS_IRQHandler+0x1ac>)
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
			__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	f022 0210 	bic.w	r2, r2, #16
 8007372:	601a      	str	r2, [r3, #0]
		}

		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2210      	movs	r2, #16
 800737c:	621a      	str	r2, [r3, #32]
	} if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_TC))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	d016      	beq.n	80073bc <USART_GPS_IRQHandler+0x120>
	{

		HAL_UART_AbortTransmit_IT(hgps->gps_huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd ffb4 	bl	8005300 <HAL_UART_AbortTransmit_IT>
		__HAL_UART_CLEAR_FLAG(hgps->gps_huart,UART_FLAG_IDLE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2210      	movs	r2, #16
 80073a0:	621a      	str	r2, [r3, #32]
		__HAL_UART_DISABLE_IT(hgps->gps_huart,UART_IT_IDLE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	f022 0210 	bic.w	r2, r2, #16
 80073b4:	601a      	str	r2, [r3, #0]
		TX_Cplt = 1;
 80073b6:	4b28      	ldr	r3, [pc, #160]	; (8007458 <USART_GPS_IRQHandler+0x1bc>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]

	}
	// additional error handling
	if(__HAL_UART_GET_IT_SOURCE(hgps->gps_huart,UART_IT_ERR))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d039      	beq.n	8007440 <USART_GPS_IRQHandler+0x1a4>
	{
		//clear framing error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_FE) == SET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d104      	bne.n	80073e6 <USART_GPS_IRQHandler+0x14a>
		{
			__HAL_UART_CLEAR_FEFLAG(hgps->gps_huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2202      	movs	r2, #2
 80073e4:	621a      	str	r2, [r3, #32]
		}
		//clear noise error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_NE) == SET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d104      	bne.n	8007400 <USART_GPS_IRQHandler+0x164>
		{
			__HAL_UART_CLEAR_NEFLAG(hgps->gps_huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2204      	movs	r2, #4
 80073fe:	621a      	str	r2, [r3, #32]
		}
		//clear overun error
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_ORE) == SET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b08      	cmp	r3, #8
 800740e:	d10a      	bne.n	8007426 <USART_GPS_IRQHandler+0x18a>
		{
			uint8_t temp = hgps->gps_huart->Instance->RDR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007418:	b29b      	uxth	r3, r3
 800741a:	72fb      	strb	r3, [r7, #11]
			(void)temp;
			__HAL_UART_CLEAR_OREFLAG(hgps->gps_huart);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2208      	movs	r2, #8
 8007424:	621a      	str	r2, [r3, #32]
		}
		//clear parity errors
		if(__HAL_UART_GET_FLAG(hgps->gps_huart,UART_FLAG_PE) == SET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d104      	bne.n	8007440 <USART_GPS_IRQHandler+0x1a4>
		{
			__HAL_UART_CLEAR_PEFLAG(hgps->gps_huart);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	621a      	str	r2, [r3, #32]
		}
	}
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	200002ec 	.word	0x200002ec
 800744c:	200002c4 	.word	0x200002c4
 8007450:	20001c58 	.word	0x20001c58
 8007454:	20000348 	.word	0x20000348
 8007458:	2000140c 	.word	0x2000140c

0800745c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007462:	f7f9 fd8f 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007466:	f000 f885 	bl	8007574 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <main+0x10c>)
 800746c:	4b3e      	ldr	r3, [pc, #248]	; (8007568 <main+0x10c>)
 800746e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007476:	4b3c      	ldr	r3, [pc, #240]	; (8007568 <main+0x10c>)
 8007478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
   GPIO_InitTypeDef led_struct;
   led_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8007482:	2301      	movs	r3, #1
 8007484:	60bb      	str	r3, [r7, #8]
   led_struct.Pin = GPIO_PIN_5;
 8007486:	2320      	movs	r3, #32
 8007488:	607b      	str	r3, [r7, #4]
   HAL_GPIO_Init(GPIOA, &led_struct);
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	4619      	mov	r1, r3
 800748e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007492:	f7fa faa9 	bl	80019e8 <HAL_GPIO_Init>
  /* Initialize all onfigured peripherals */


  /* USER CODE BEGIN 2 */
   	 GPS_Init_msg_t init_flag;
  	 int retries = GPS_INIT_RETRIES;  //flag to check if gps was initialised
 8007496:	2364      	movs	r3, #100	; 0x64
 8007498:	61bb      	str	r3, [r7, #24]
  	 while(retries--)
 800749a:	e00b      	b.n	80074b4 <main+0x58>
  	 {
  	  	 init_flag = init_GPS(&hgps); //init routine - get return status from init function
 800749c:	4833      	ldr	r0, [pc, #204]	; (800756c <main+0x110>)
 800749e:	f7ff f9e7 	bl	8006870 <init_GPS>
 80074a2:	4603      	mov	r3, r0
 80074a4:	77fb      	strb	r3, [r7, #31]
  	  	  if(init_flag == GPS_Init_OK)
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d100      	bne.n	80074ae <main+0x52>
  	  	  {
  	  		  break;
 80074ac:	e007      	b.n	80074be <main+0x62>
  	  	  }
  	  	deinit_GPS(&hgps);
 80074ae:	482f      	ldr	r0, [pc, #188]	; (800756c <main+0x110>)
 80074b0:	f7ff fa78 	bl	80069a4 <deinit_GPS>
  	 while(retries--)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	1e5a      	subs	r2, r3, #1
 80074b8:	61ba      	str	r2, [r7, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1ee      	bne.n	800749c <main+0x40>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	switch(init_flag)
 80074be:	7ffb      	ldrb	r3, [r7, #31]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d84e      	bhi.n	8007564 <main+0x108>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <main+0x70>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e9 	.word	0x080074e9
 80074d0:	0800752f 	.word	0x0800752f
 80074d4:	08007565 	.word	0x08007565
 80074d8:	08007553 	.word	0x08007553
 80074dc:	08007565 	.word	0x08007565
 80074e0:	08007509 	.word	0x08007509
 80074e4:	0800751d 	.word	0x0800751d
	{
	case GPS_Init_OK:
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,SET);
 80074e8:	2201      	movs	r2, #1
 80074ea:	2120      	movs	r1, #32
 80074ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074f0:	f7fa fd16 	bl	8001f20 <HAL_GPIO_WritePin>


		while(packet_full != 7)
 80074f4:	e001      	b.n	80074fa <main+0x9e>
		{
			GPS_Log_Begin();
 80074f6:	f7fe fe8b 	bl	8006210 <GPS_Log_Begin>
		while(packet_full != 7)
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <main+0x114>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b07      	cmp	r3, #7
 8007500:	d1f9      	bne.n	80074f6 <main+0x9a>
		}
		GPS_Log_Stop();
 8007502:	f7fe fed9 	bl	80062b8 <GPS_Log_Stop>

		break;
 8007506:	e02e      	b.n	8007566 <main+0x10a>
	case GPS_Init_Periph_Config_Error:
		while(1)
		{
			//blink at 500ms
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8007508:	2120      	movs	r1, #32
 800750a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800750e:	f7fa fd1f 	bl	8001f50 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8007512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007516:	f7f9 fdad 	bl	8001074 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800751a:	e7f5      	b.n	8007508 <main+0xac>
		}
	case GPS_Init_Offline_Error:
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800751c:	2120      	movs	r1, #32
 800751e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007522:	f7fa fd15 	bl	8001f50 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8007526:	2064      	movs	r0, #100	; 0x64
 8007528:	f7f9 fda4 	bl	8001074 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800752c:	e7f6      	b.n	800751c <main+0xc0>
		}

	case GPS_Init_Ack_Error:
		while(1)
		{
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800752e:	2120      	movs	r1, #32
 8007530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007534:	f7fa fd0c 	bl	8001f50 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8007538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800753c:	f7f9 fd9a 	bl	8001074 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8007540:	2120      	movs	r1, #32
 8007542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007546:	f7fa fd03 	bl	8001f50 <HAL_GPIO_TogglePin>
			HAL_Delay(250);
 800754a:	20fa      	movs	r0, #250	; 0xfa
 800754c:	f7f9 fd92 	bl	8001074 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8007550:	e7ed      	b.n	800752e <main+0xd2>
		}
	case GPS_Init_MSG_Config_Error:
		while(1)
		{
			//machine gun
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8007552:	2120      	movs	r1, #32
 8007554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007558:	f7fa fcfa 	bl	8001f50 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 800755c:	2032      	movs	r0, #50	; 0x32
 800755e:	f7f9 fd89 	bl	8001074 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8007562:	e7f6      	b.n	8007552 <main+0xf6>
		}
	default:
		break;
 8007564:	bf00      	nop
	switch(init_flag)
 8007566:	e7aa      	b.n	80074be <main+0x62>
 8007568:	40021000 	.word	0x40021000
 800756c:	200002c8 	.word	0x200002c8
 8007570:	200002f4 	.word	0x200002f4

08007574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b0b8      	sub	sp, #224	; 0xe0
 8007578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800757a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800757e:	2244      	movs	r2, #68	; 0x44
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fc0b 	bl	8007d9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007588:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007598:	463b      	mov	r3, r7
 800759a:	2288      	movs	r2, #136	; 0x88
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fbfd 	bl	8007d9e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075b2:	2302      	movs	r3, #2
 80075b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075b8:	2303      	movs	r3, #3
 80075ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 12;
 80075c4:	230c      	movs	r3, #12
 80075c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80075ca:	2307      	movs	r3, #7
 80075cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80075d0:	2302      	movs	r3, #2
 80075d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80075d6:	2302      	movs	r3, #2
 80075d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fa fd33 	bl	800204c <HAL_RCC_OscConfig>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80075ec:	f000 f834 	bl	8007658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075f0:	230f      	movs	r3, #15
 80075f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075f6:	2303      	movs	r3, #3
 80075f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800760e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007612:	2101      	movs	r1, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f7fb f8c9 	bl	80027ac <HAL_RCC_ClockConfig>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8007620:	f000 f81a 	bl	8007658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007624:	2308      	movs	r3, #8
 8007626:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007628:	2300      	movs	r3, #0
 800762a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800762c:	463b      	mov	r3, r7
 800762e:	4618      	mov	r0, r3
 8007630:	f7fb fac0 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800763a:	f000 f80d 	bl	8007658 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800763e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007642:	f7fa fcad 	bl	8001fa0 <HAL_PWREx_ControlVoltageScaling>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800764c:	f000 f804 	bl	8007658 <Error_Handler>
  }
}
 8007650:	bf00      	nop
 8007652:	37e0      	adds	r7, #224	; 0xe0
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800766e:	4a0f      	ldr	r2, [pc, #60]	; (80076ac <HAL_MspInit+0x44>)
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <HAL_MspInit+0x44>)
 8007672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	6613      	str	r3, [r2, #96]	; 0x60
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <HAL_MspInit+0x44>)
 800767c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	607b      	str	r3, [r7, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <HAL_MspInit+0x44>)
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <HAL_MspInit+0x44>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007690:	6593      	str	r3, [r2, #88]	; 0x58
 8007692:	4b06      	ldr	r3, [pc, #24]	; (80076ac <HAL_MspInit+0x44>)
 8007694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40021000 	.word	0x40021000

080076b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b8:	f107 0314 	add.w	r3, r7, #20
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	605a      	str	r2, [r3, #4]
 80076c2:	609a      	str	r2, [r3, #8]
 80076c4:	60da      	str	r2, [r3, #12]
 80076c6:	611a      	str	r2, [r3, #16]
  //GPS UART Init
  if(huart->Instance==UART4)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a4a      	ldr	r2, [pc, #296]	; (80077f8 <HAL_UART_MspInit+0x148>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	f040 808d 	bne.w	80077ee <HAL_UART_MspInit+0x13e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80076d4:	4a49      	ldr	r2, [pc, #292]	; (80077fc <HAL_UART_MspInit+0x14c>)
 80076d6:	4b49      	ldr	r3, [pc, #292]	; (80077fc <HAL_UART_MspInit+0x14c>)
 80076d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076de:	6593      	str	r3, [r2, #88]	; 0x58
 80076e0:	4b46      	ldr	r3, [pc, #280]	; (80077fc <HAL_UART_MspInit+0x14c>)
 80076e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076ec:	4a43      	ldr	r2, [pc, #268]	; (80077fc <HAL_UART_MspInit+0x14c>)
 80076ee:	4b43      	ldr	r3, [pc, #268]	; (80077fc <HAL_UART_MspInit+0x14c>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	f043 0304 	orr.w	r3, r3, #4
 80076f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076f8:	4b40      	ldr	r3, [pc, #256]	; (80077fc <HAL_UART_MspInit+0x14c>)
 80076fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8007704:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800770a:	2302      	movs	r3, #2
 800770c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007712:	2303      	movs	r3, #3
 8007714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007716:	2308      	movs	r3, #8
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800771a:	f107 0314 	add.w	r3, r7, #20
 800771e:	4619      	mov	r1, r3
 8007720:	4837      	ldr	r0, [pc, #220]	; (8007800 <HAL_UART_MspInit+0x150>)
 8007722:	f7fa f961 	bl	80019e8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8007726:	4b37      	ldr	r3, [pc, #220]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007728:	4a37      	ldr	r2, [pc, #220]	; (8007808 <HAL_UART_MspInit+0x158>)
 800772a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 800772c:	4b35      	ldr	r3, [pc, #212]	; (8007804 <HAL_UART_MspInit+0x154>)
 800772e:	2202      	movs	r2, #2
 8007730:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007732:	4b34      	ldr	r3, [pc, #208]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007734:	2200      	movs	r2, #0
 8007736:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007738:	4b32      	ldr	r3, [pc, #200]	; (8007804 <HAL_UART_MspInit+0x154>)
 800773a:	2200      	movs	r2, #0
 800773c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007740:	2280      	movs	r2, #128	; 0x80
 8007742:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007744:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007746:	2200      	movs	r2, #0
 8007748:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <HAL_UART_MspInit+0x154>)
 800774c:	2200      	movs	r2, #0
 800774e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8007750:	4b2c      	ldr	r3, [pc, #176]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007752:	2200      	movs	r2, #0
 8007754:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007756:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007758:	2200      	movs	r2, #0
 800775a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800775c:	4829      	ldr	r0, [pc, #164]	; (8007804 <HAL_UART_MspInit+0x154>)
 800775e:	f7f9 fdeb 	bl	8001338 <HAL_DMA_Init>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d000      	beq.n	800776a <HAL_UART_MspInit+0xba>
    {
      __NOP();
 8007768:	bf00      	nop
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a25      	ldr	r2, [pc, #148]	; (8007804 <HAL_UART_MspInit+0x154>)
 800776e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007770:	4a24      	ldr	r2, [pc, #144]	; (8007804 <HAL_UART_MspInit+0x154>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8007776:	4b25      	ldr	r3, [pc, #148]	; (800780c <HAL_UART_MspInit+0x15c>)
 8007778:	4a25      	ldr	r2, [pc, #148]	; (8007810 <HAL_UART_MspInit+0x160>)
 800777a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 800777c:	4b23      	ldr	r3, [pc, #140]	; (800780c <HAL_UART_MspInit+0x15c>)
 800777e:	2202      	movs	r2, #2
 8007780:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007782:	4b22      	ldr	r3, [pc, #136]	; (800780c <HAL_UART_MspInit+0x15c>)
 8007784:	2210      	movs	r2, #16
 8007786:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007788:	4b20      	ldr	r3, [pc, #128]	; (800780c <HAL_UART_MspInit+0x15c>)
 800778a:	2200      	movs	r2, #0
 800778c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800778e:	4b1f      	ldr	r3, [pc, #124]	; (800780c <HAL_UART_MspInit+0x15c>)
 8007790:	2280      	movs	r2, #128	; 0x80
 8007792:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007794:	4b1d      	ldr	r3, [pc, #116]	; (800780c <HAL_UART_MspInit+0x15c>)
 8007796:	2200      	movs	r2, #0
 8007798:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800779a:	4b1c      	ldr	r3, [pc, #112]	; (800780c <HAL_UART_MspInit+0x15c>)
 800779c:	2200      	movs	r2, #0
 800779e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <HAL_UART_MspInit+0x15c>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80077a6:	4b19      	ldr	r3, [pc, #100]	; (800780c <HAL_UART_MspInit+0x15c>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80077ac:	4817      	ldr	r0, [pc, #92]	; (800780c <HAL_UART_MspInit+0x15c>)
 80077ae:	f7f9 fdc3 	bl	8001338 <HAL_DMA_Init>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d000      	beq.n	80077ba <HAL_UART_MspInit+0x10a>
    {
      __NOP();
 80077b8:	bf00      	nop
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a13      	ldr	r2, [pc, #76]	; (800780c <HAL_UART_MspInit+0x15c>)
 80077be:	669a      	str	r2, [r3, #104]	; 0x68
 80077c0:	4a12      	ldr	r2, [pc, #72]	; (800780c <HAL_UART_MspInit+0x15c>)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */

	CLEAR_REG(huart->Instance->CR1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
	CLEAR_REG(huart->Instance->CR2);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
	CLEAR_REG(huart->Instance->CR3);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]

    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	2034      	movs	r0, #52	; 0x34
 80077e4:	f7f9 fd63 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80077e8:	2034      	movs	r0, #52	; 0x34
 80077ea:	f7f9 fd7c 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  }
}
 80077ee:	bf00      	nop
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	40004c00 	.word	0x40004c00
 80077fc:	40021000 	.word	0x40021000
 8007800:	48000800 	.word	0x48000800
 8007804:	2000027c 	.word	0x2000027c
 8007808:	40020458 	.word	0x40020458
 800780c:	20001410 	.word	0x20001410
 8007810:	40020430 	.word	0x40020430

08007814 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

  //GPS UART Deinit
  if(huart->Instance==UART4)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0f      	ldr	r2, [pc, #60]	; (8007860 <HAL_UART_MspDeInit+0x4c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d117      	bne.n	8007856 <HAL_UART_MspDeInit+0x42>
  {

    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8007826:	4a0f      	ldr	r2, [pc, #60]	; (8007864 <HAL_UART_MspDeInit+0x50>)
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <HAL_UART_MspDeInit+0x50>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007830:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPS_TX_Pin|GPS_RX_Pin);
 8007832:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8007836:	480c      	ldr	r0, [pc, #48]	; (8007868 <HAL_UART_MspDeInit+0x54>)
 8007838:	f7fa fa7e 	bl	8001d38 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007840:	4618      	mov	r0, r3
 8007842:	f7f9 fe31 	bl	80014a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800784a:	4618      	mov	r0, r3
 800784c:	f7f9 fe2c 	bl	80014a8 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8007850:	2034      	movs	r0, #52	; 0x34
 8007852:	f7f9 fd56 	bl	8001302 <HAL_NVIC_DisableIRQ>

  }

}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	40004c00 	.word	0x40004c00
 8007864:	40021000 	.word	0x40021000
 8007868:	48000800 	.word	0x48000800

0800786c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788c:	d130      	bne.n	80078f0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800788e:	4a1a      	ldr	r2, [pc, #104]	; (80078f8 <HAL_TIM_Base_MspInit+0x8c>)
 8007890:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <HAL_TIM_Base_MspInit+0x8c>)
 8007892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007894:	f043 0301 	orr.w	r3, r3, #1
 8007898:	6593      	str	r3, [r2, #88]	; 0x58
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <HAL_TIM_Base_MspInit+0x8c>)
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078a6:	4a14      	ldr	r2, [pc, #80]	; (80078f8 <HAL_TIM_Base_MspInit+0x8c>)
 80078a8:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <HAL_TIM_Base_MspInit+0x8c>)
 80078aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <HAL_TIM_Base_MspInit+0x8c>)
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80078be:	2302      	movs	r3, #2
 80078c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c2:	2302      	movs	r3, #2
 80078c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ca:	2300      	movs	r3, #0
 80078cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80078ce:	2301      	movs	r3, #1
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d2:	f107 0314 	add.w	r3, r7, #20
 80078d6:	4619      	mov	r1, r3
 80078d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078dc:	f7fa f884 	bl	80019e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	201c      	movs	r0, #28
 80078e6:	f7f9 fce2 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80078ea:	201c      	movs	r0, #28
 80078ec:	f7f9 fcfb 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80078f0:	bf00      	nop
 80078f2:	3728      	adds	r7, #40	; 0x28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40021000 	.word	0x40021000

080078fc <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790c:	d10d      	bne.n	800792a <HAL_TIM_Base_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800790e:	4a09      	ldr	r2, [pc, #36]	; (8007934 <HAL_TIM_Base_MspDeInit+0x38>)
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <HAL_TIM_Base_MspDeInit+0x38>)
 8007912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	6593      	str	r3, [r2, #88]	; 0x58

    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 800791a:	2102      	movs	r1, #2
 800791c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007920:	f7fa fa0a 	bl	8001d38 <HAL_GPIO_DeInit>

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8007924:	201c      	movs	r0, #28
 8007926:	f7f9 fcec 	bl	8001302 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40021000 	.word	0x40021000

08007938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007946:	b480      	push	{r7}
 8007948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800794a:	e7fe      	b.n	800794a <HardFault_Handler+0x4>

0800794c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007950:	e7fe      	b.n	8007950 <MemManage_Handler+0x4>

08007952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007956:	e7fe      	b.n	8007956 <BusFault_Handler+0x4>

08007958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800795c:	e7fe      	b.n	800795c <UsageFault_Handler+0x4>

0800795e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800795e:	b480      	push	{r7}
 8007960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007962:	bf00      	nop
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007970:	bf00      	nop
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800797a:	b480      	push	{r7}
 800797c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800797e:	bf00      	nop
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800798c:	f7f9 fb54 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007990:	bf00      	nop
 8007992:	bd80      	pop	{r7, pc}

08007994 <TIM2_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void TIM2_IRQHandler(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE TIM2_IRQn 0 */
	 USART_TIM_RTO_Handler(hgps.gps_htim); //custom call back function
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <TIM2_IRQHandler+0x1c>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff fae9 	bl	8006f74 <USART_TIM_RTO_Handler>
	 HAL_TIM_IRQHandler(hgps.gps_htim);	 //HAL default handler
 80079a2:	4b03      	ldr	r3, [pc, #12]	; (80079b0 <TIM2_IRQHandler+0x1c>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fb ff97 	bl	80038da <HAL_TIM_IRQHandler>

}
 80079ac:	bf00      	nop
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200002c8 	.word	0x200002c8

080079b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE UART4_IRQn 0 */
	USART_GPS_IRQHandler(&hgps); //custom user Call Back function
 80079b8:	4802      	ldr	r0, [pc, #8]	; (80079c4 <UART4_IRQHandler+0x10>)
 80079ba:	f7ff fc6f 	bl	800729c <USART_GPS_IRQHandler>

}
 80079be:	bf00      	nop
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	200002c8 	.word	0x200002c8

080079c8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80079cc:	4802      	ldr	r0, [pc, #8]	; (80079d8 <DMA2_Channel3_IRQHandler+0x10>)
 80079ce:	f7f9 ff1f 	bl	8001810 <HAL_DMA_IRQHandler>

}
 80079d2:	bf00      	nop
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20001410 	.word	0x20001410

080079dc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE DMA2_Channel5_IRQn 0 */
  DMA_GNSS_Periph_IRQHandler(&hgps);
 80079e0:	4802      	ldr	r0, [pc, #8]	; (80079ec <DMA2_Channel5_IRQHandler+0x10>)
 80079e2:	f7ff fbbb 	bl	800715c <DMA_GNSS_Periph_IRQHandler>

}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200002c8 	.word	0x200002c8

080079f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE DMA1_Channel1_IRQn 0 */

  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80079f4:	4803      	ldr	r0, [pc, #12]	; (8007a04 <DMA1_Channel1_IRQHandler+0x14>)
 80079f6:	f7f9 ff0b 	bl	8001810 <HAL_DMA_IRQHandler>
  DMA_GNSS_MEM_IRQHandler(&hgps);
 80079fa:	4803      	ldr	r0, [pc, #12]	; (8007a08 <DMA1_Channel1_IRQHandler+0x18>)
 80079fc:	f7ff fad6 	bl	8006fac <DMA_GNSS_MEM_IRQHandler>

}
 8007a00:	bf00      	nop
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	20000300 	.word	0x20000300
 8007a08:	200002c8 	.word	0x200002c8

08007a0c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <_sbrk+0x50>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <_sbrk+0x16>
		heap_end = &end;
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <_sbrk+0x50>)
 8007a1e:	4a10      	ldr	r2, [pc, #64]	; (8007a60 <_sbrk+0x54>)
 8007a20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a22:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <_sbrk+0x50>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <_sbrk+0x50>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	466a      	mov	r2, sp
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d907      	bls.n	8007a46 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007a36:	f000 f877 	bl	8007b28 <__errno>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	e006      	b.n	8007a54 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <_sbrk+0x50>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	4a03      	ldr	r2, [pc, #12]	; (8007a5c <_sbrk+0x50>)
 8007a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a52:	68fb      	ldr	r3, [r7, #12]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000248 	.word	0x20000248
 8007a60:	20001c60 	.word	0x20001c60

08007a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a68:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <SystemInit+0x64>)
 8007a6a:	4b17      	ldr	r3, [pc, #92]	; (8007ac8 <SystemInit+0x64>)
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007a78:	4a14      	ldr	r2, [pc, #80]	; (8007acc <SystemInit+0x68>)
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <SystemInit+0x68>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007a84:	4b11      	ldr	r3, [pc, #68]	; (8007acc <SystemInit+0x68>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007a8a:	4a10      	ldr	r2, [pc, #64]	; (8007acc <SystemInit+0x68>)
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <SystemInit+0x68>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007a94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007a98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <SystemInit+0x68>)
 8007a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007aa0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007aa2:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <SystemInit+0x68>)
 8007aa4:	4b09      	ldr	r3, [pc, #36]	; (8007acc <SystemInit+0x68>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007aae:	4b07      	ldr	r3, [pc, #28]	; (8007acc <SystemInit+0x68>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <SystemInit+0x64>)
 8007ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007aba:	609a      	str	r2, [r3, #8]
#endif
}
 8007abc:	bf00      	nop
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	e000ed00 	.word	0xe000ed00
 8007acc:	40021000 	.word	0x40021000

08007ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007ad4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007ad6:	e003      	b.n	8007ae0 <LoopCopyDataInit>

08007ad8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007ad8:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007ada:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007adc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007ade:	3104      	adds	r1, #4

08007ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007ae0:	480b      	ldr	r0, [pc, #44]	; (8007b10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007ae4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007ae6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007ae8:	d3f6      	bcc.n	8007ad8 <CopyDataInit>
	ldr	r2, =_sbss
 8007aea:	4a0b      	ldr	r2, [pc, #44]	; (8007b18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007aec:	e002      	b.n	8007af4 <LoopFillZerobss>

08007aee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007aee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007af0:	f842 3b04 	str.w	r3, [r2], #4

08007af4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007af4:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <LoopForever+0x16>)
	cmp	r2, r3
 8007af6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007af8:	d3f9      	bcc.n	8007aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007afa:	f7ff ffb3 	bl	8007a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007afe:	f000 f819 	bl	8007b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007b02:	f7ff fcab 	bl	800745c <main>

08007b06 <LoopForever>:

LoopForever:
    b LoopForever
 8007b06:	e7fe      	b.n	8007b06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007b08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007b0c:	0800b5a4 	.word	0x0800b5a4
	ldr	r0, =_sdata
 8007b10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007b14:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 8007b18:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 8007b1c:	20001c60 	.word	0x20001c60

08007b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007b20:	e7fe      	b.n	8007b20 <ADC1_2_IRQHandler>

08007b22 <atof>:
 8007b22:	2100      	movs	r1, #0
 8007b24:	f001 ba74 	b.w	8009010 <strtod>

08007b28 <__errno>:
 8007b28:	4b01      	ldr	r3, [pc, #4]	; (8007b30 <__errno+0x8>)
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20000010 	.word	0x20000010

08007b34 <__libc_init_array>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4e0d      	ldr	r6, [pc, #52]	; (8007b6c <__libc_init_array+0x38>)
 8007b38:	4c0d      	ldr	r4, [pc, #52]	; (8007b70 <__libc_init_array+0x3c>)
 8007b3a:	1ba4      	subs	r4, r4, r6
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	2500      	movs	r5, #0
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d109      	bne.n	8007b58 <__libc_init_array+0x24>
 8007b44:	4e0b      	ldr	r6, [pc, #44]	; (8007b74 <__libc_init_array+0x40>)
 8007b46:	4c0c      	ldr	r4, [pc, #48]	; (8007b78 <__libc_init_array+0x44>)
 8007b48:	f003 fa92 	bl	800b070 <_init>
 8007b4c:	1ba4      	subs	r4, r4, r6
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	2500      	movs	r5, #0
 8007b52:	42a5      	cmp	r5, r4
 8007b54:	d105      	bne.n	8007b62 <__libc_init_array+0x2e>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b5c:	4798      	blx	r3
 8007b5e:	3501      	adds	r5, #1
 8007b60:	e7ee      	b.n	8007b40 <__libc_init_array+0xc>
 8007b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b66:	4798      	blx	r3
 8007b68:	3501      	adds	r5, #1
 8007b6a:	e7f2      	b.n	8007b52 <__libc_init_array+0x1e>
 8007b6c:	0800b59c 	.word	0x0800b59c
 8007b70:	0800b59c 	.word	0x0800b59c
 8007b74:	0800b59c 	.word	0x0800b59c
 8007b78:	0800b5a0 	.word	0x0800b5a0

08007b7c <localtime>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <localtime+0x20>)
 8007b80:	681c      	ldr	r4, [r3, #0]
 8007b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b84:	4605      	mov	r5, r0
 8007b86:	b91b      	cbnz	r3, 8007b90 <localtime+0x14>
 8007b88:	2024      	movs	r0, #36	; 0x24
 8007b8a:	f000 f8ed 	bl	8007d68 <malloc>
 8007b8e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007b90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b92:	4628      	mov	r0, r5
 8007b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b98:	f000 b802 	b.w	8007ba0 <localtime_r>
 8007b9c:	20000010 	.word	0x20000010

08007ba0 <localtime_r>:
 8007ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	4680      	mov	r8, r0
 8007ba8:	f002 f86c 	bl	8009c84 <__gettzinfo>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4607      	mov	r7, r0
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	f002 f86b 	bl	8009c8c <gmtime_r>
 8007bb6:	6946      	ldr	r6, [r0, #20]
 8007bb8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8007bbc:	07b3      	lsls	r3, r6, #30
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	d105      	bne.n	8007bce <localtime_r+0x2e>
 8007bc2:	2264      	movs	r2, #100	; 0x64
 8007bc4:	fb96 f3f2 	sdiv	r3, r6, r2
 8007bc8:	fb02 6313 	mls	r3, r2, r3, r6
 8007bcc:	b9fb      	cbnz	r3, 8007c0e <localtime_r+0x6e>
 8007bce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007bd2:	fb96 f5f3 	sdiv	r5, r6, r3
 8007bd6:	fb03 6515 	mls	r5, r3, r5, r6
 8007bda:	fab5 f585 	clz	r5, r5
 8007bde:	096d      	lsrs	r5, r5, #5
 8007be0:	4b5f      	ldr	r3, [pc, #380]	; (8007d60 <localtime_r+0x1c0>)
 8007be2:	2230      	movs	r2, #48	; 0x30
 8007be4:	fb02 3505 	mla	r5, r2, r5, r3
 8007be8:	f001 fb36 	bl	8009258 <__tz_lock>
 8007bec:	f001 fb36 	bl	800925c <_tzset_unlocked>
 8007bf0:	4b5c      	ldr	r3, [pc, #368]	; (8007d64 <localtime_r+0x1c4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	b1e3      	cbz	r3, 8007c30 <localtime_r+0x90>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	429e      	cmp	r6, r3
 8007bfa:	d10a      	bne.n	8007c12 <localtime_r+0x72>
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	b969      	cbnz	r1, 8007c22 <localtime_r+0x82>
 8007c06:	4293      	cmp	r3, r2
 8007c08:	db0d      	blt.n	8007c26 <localtime_r+0x86>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e010      	b.n	8007c30 <localtime_r+0x90>
 8007c0e:	2501      	movs	r5, #1
 8007c10:	e7e6      	b.n	8007be0 <localtime_r+0x40>
 8007c12:	4630      	mov	r0, r6
 8007c14:	f001 fa78 	bl	8009108 <__tzcalc_limits>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d1ef      	bne.n	8007bfc <localtime_r+0x5c>
 8007c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c20:	e006      	b.n	8007c30 <localtime_r+0x90>
 8007c22:	4293      	cmp	r3, r2
 8007c24:	db55      	blt.n	8007cd2 <localtime_r+0x132>
 8007c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	bfac      	ite	ge
 8007c2c:	2300      	movge	r3, #0
 8007c2e:	2301      	movlt	r3, #1
 8007c30:	6223      	str	r3, [r4, #32]
 8007c32:	6a23      	ldr	r3, [r4, #32]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	bf0c      	ite	eq
 8007c38:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8007c3a:	6a39      	ldrne	r1, [r7, #32]
 8007c3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007c40:	203c      	movs	r0, #60	; 0x3c
 8007c42:	fb91 f6f3 	sdiv	r6, r1, r3
 8007c46:	fb03 1316 	mls	r3, r3, r6, r1
 8007c4a:	6861      	ldr	r1, [r4, #4]
 8007c4c:	fb93 f2f0 	sdiv	r2, r3, r0
 8007c50:	fb00 3012 	mls	r0, r0, r2, r3
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	1a89      	subs	r1, r1, r2
 8007c58:	68a2      	ldr	r2, [r4, #8]
 8007c5a:	6061      	str	r1, [r4, #4]
 8007c5c:	1a1b      	subs	r3, r3, r0
 8007c5e:	1b92      	subs	r2, r2, r6
 8007c60:	2b3b      	cmp	r3, #59	; 0x3b
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	60a2      	str	r2, [r4, #8]
 8007c66:	dd36      	ble.n	8007cd6 <localtime_r+0x136>
 8007c68:	3101      	adds	r1, #1
 8007c6a:	6061      	str	r1, [r4, #4]
 8007c6c:	3b3c      	subs	r3, #60	; 0x3c
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	2b3b      	cmp	r3, #59	; 0x3b
 8007c74:	dd35      	ble.n	8007ce2 <localtime_r+0x142>
 8007c76:	3201      	adds	r2, #1
 8007c78:	60a2      	str	r2, [r4, #8]
 8007c7a:	3b3c      	subs	r3, #60	; 0x3c
 8007c7c:	6063      	str	r3, [r4, #4]
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	2b17      	cmp	r3, #23
 8007c82:	dd34      	ble.n	8007cee <localtime_r+0x14e>
 8007c84:	69e2      	ldr	r2, [r4, #28]
 8007c86:	3201      	adds	r2, #1
 8007c88:	61e2      	str	r2, [r4, #28]
 8007c8a:	69a2      	ldr	r2, [r4, #24]
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	2a06      	cmp	r2, #6
 8007c90:	bfc8      	it	gt
 8007c92:	2200      	movgt	r2, #0
 8007c94:	61a2      	str	r2, [r4, #24]
 8007c96:	68e2      	ldr	r2, [r4, #12]
 8007c98:	3b18      	subs	r3, #24
 8007c9a:	3201      	adds	r2, #1
 8007c9c:	60a3      	str	r3, [r4, #8]
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	60e2      	str	r2, [r4, #12]
 8007ca2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8007ca6:	428a      	cmp	r2, r1
 8007ca8:	dd0e      	ble.n	8007cc8 <localtime_r+0x128>
 8007caa:	3301      	adds	r3, #1
 8007cac:	2b0c      	cmp	r3, #12
 8007cae:	bf0c      	ite	eq
 8007cb0:	6963      	ldreq	r3, [r4, #20]
 8007cb2:	6123      	strne	r3, [r4, #16]
 8007cb4:	eba2 0201 	sub.w	r2, r2, r1
 8007cb8:	60e2      	str	r2, [r4, #12]
 8007cba:	bf01      	itttt	eq
 8007cbc:	3301      	addeq	r3, #1
 8007cbe:	2200      	moveq	r2, #0
 8007cc0:	6122      	streq	r2, [r4, #16]
 8007cc2:	6163      	streq	r3, [r4, #20]
 8007cc4:	bf08      	it	eq
 8007cc6:	61e2      	streq	r2, [r4, #28]
 8007cc8:	f001 fac7 	bl	800925a <__tz_unlock>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e7ac      	b.n	8007c30 <localtime_r+0x90>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	daca      	bge.n	8007c70 <localtime_r+0xd0>
 8007cda:	3901      	subs	r1, #1
 8007cdc:	6061      	str	r1, [r4, #4]
 8007cde:	333c      	adds	r3, #60	; 0x3c
 8007ce0:	e7c5      	b.n	8007c6e <localtime_r+0xce>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dacb      	bge.n	8007c7e <localtime_r+0xde>
 8007ce6:	3a01      	subs	r2, #1
 8007ce8:	60a2      	str	r2, [r4, #8]
 8007cea:	333c      	adds	r3, #60	; 0x3c
 8007cec:	e7c6      	b.n	8007c7c <localtime_r+0xdc>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	daea      	bge.n	8007cc8 <localtime_r+0x128>
 8007cf2:	69e2      	ldr	r2, [r4, #28]
 8007cf4:	3a01      	subs	r2, #1
 8007cf6:	61e2      	str	r2, [r4, #28]
 8007cf8:	69a2      	ldr	r2, [r4, #24]
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	bf48      	it	mi
 8007cfe:	2206      	movmi	r2, #6
 8007d00:	61a2      	str	r2, [r4, #24]
 8007d02:	68e2      	ldr	r2, [r4, #12]
 8007d04:	3318      	adds	r3, #24
 8007d06:	3a01      	subs	r2, #1
 8007d08:	60e2      	str	r2, [r4, #12]
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	d1db      	bne.n	8007cc8 <localtime_r+0x128>
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	d405      	bmi.n	8007d22 <localtime_r+0x182>
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8007d1e:	60e3      	str	r3, [r4, #12]
 8007d20:	e7d2      	b.n	8007cc8 <localtime_r+0x128>
 8007d22:	230b      	movs	r3, #11
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	6963      	ldr	r3, [r4, #20]
 8007d28:	1e5a      	subs	r2, r3, #1
 8007d2a:	f012 0f03 	tst.w	r2, #3
 8007d2e:	6162      	str	r2, [r4, #20]
 8007d30:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8007d34:	d105      	bne.n	8007d42 <localtime_r+0x1a2>
 8007d36:	2164      	movs	r1, #100	; 0x64
 8007d38:	fb92 f3f1 	sdiv	r3, r2, r1
 8007d3c:	fb01 2313 	mls	r3, r1, r3, r2
 8007d40:	b963      	cbnz	r3, 8007d5c <localtime_r+0x1bc>
 8007d42:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d46:	fb92 f3f1 	sdiv	r3, r2, r1
 8007d4a:	fb01 2313 	mls	r3, r1, r3, r2
 8007d4e:	fab3 f383 	clz	r3, r3
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8007d58:	61e3      	str	r3, [r4, #28]
 8007d5a:	e7dd      	b.n	8007d18 <localtime_r+0x178>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e7f9      	b.n	8007d54 <localtime_r+0x1b4>
 8007d60:	0800b214 	.word	0x0800b214
 8007d64:	20000270 	.word	0x20000270

08007d68 <malloc>:
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <malloc+0xc>)
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	f000 bac9 	b.w	8008304 <_malloc_r>
 8007d72:	bf00      	nop
 8007d74:	20000010 	.word	0x20000010

08007d78 <free>:
 8007d78:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <free+0xc>)
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	f000 ba73 	b.w	8008268 <_free_r>
 8007d82:	bf00      	nop
 8007d84:	20000010 	.word	0x20000010

08007d88 <memcpy>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	1e43      	subs	r3, r0, #1
 8007d8c:	440a      	add	r2, r1
 8007d8e:	4291      	cmp	r1, r2
 8007d90:	d100      	bne.n	8007d94 <memcpy+0xc>
 8007d92:	bd10      	pop	{r4, pc}
 8007d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d9c:	e7f7      	b.n	8007d8e <memcpy+0x6>

08007d9e <memset>:
 8007d9e:	4402      	add	r2, r0
 8007da0:	4603      	mov	r3, r0
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d100      	bne.n	8007da8 <memset+0xa>
 8007da6:	4770      	bx	lr
 8007da8:	f803 1b01 	strb.w	r1, [r3], #1
 8007dac:	e7f9      	b.n	8007da2 <memset+0x4>
	...

08007db0 <validate_structure>:
 8007db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db2:	6801      	ldr	r1, [r0, #0]
 8007db4:	293b      	cmp	r1, #59	; 0x3b
 8007db6:	4604      	mov	r4, r0
 8007db8:	d911      	bls.n	8007dde <validate_structure+0x2e>
 8007dba:	223c      	movs	r2, #60	; 0x3c
 8007dbc:	4668      	mov	r0, sp
 8007dbe:	f001 fbd5 	bl	800956c <div>
 8007dc2:	9a01      	ldr	r2, [sp, #4]
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	9900      	ldr	r1, [sp, #0]
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	440b      	add	r3, r1
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	bfbb      	ittet	lt
 8007dd0:	323c      	addlt	r2, #60	; 0x3c
 8007dd2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007dd6:	6022      	strge	r2, [r4, #0]
 8007dd8:	6022      	strlt	r2, [r4, #0]
 8007dda:	bfb8      	it	lt
 8007ddc:	6063      	strlt	r3, [r4, #4]
 8007dde:	6861      	ldr	r1, [r4, #4]
 8007de0:	293b      	cmp	r1, #59	; 0x3b
 8007de2:	d911      	bls.n	8007e08 <validate_structure+0x58>
 8007de4:	223c      	movs	r2, #60	; 0x3c
 8007de6:	4668      	mov	r0, sp
 8007de8:	f001 fbc0 	bl	800956c <div>
 8007dec:	9a01      	ldr	r2, [sp, #4]
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	9900      	ldr	r1, [sp, #0]
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	440b      	add	r3, r1
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	bfbb      	ittet	lt
 8007dfa:	323c      	addlt	r2, #60	; 0x3c
 8007dfc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007e00:	6062      	strge	r2, [r4, #4]
 8007e02:	6062      	strlt	r2, [r4, #4]
 8007e04:	bfb8      	it	lt
 8007e06:	60a3      	strlt	r3, [r4, #8]
 8007e08:	68a1      	ldr	r1, [r4, #8]
 8007e0a:	2917      	cmp	r1, #23
 8007e0c:	d911      	bls.n	8007e32 <validate_structure+0x82>
 8007e0e:	2218      	movs	r2, #24
 8007e10:	4668      	mov	r0, sp
 8007e12:	f001 fbab 	bl	800956c <div>
 8007e16:	9a01      	ldr	r2, [sp, #4]
 8007e18:	68e3      	ldr	r3, [r4, #12]
 8007e1a:	9900      	ldr	r1, [sp, #0]
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	440b      	add	r3, r1
 8007e20:	60e3      	str	r3, [r4, #12]
 8007e22:	bfbb      	ittet	lt
 8007e24:	3218      	addlt	r2, #24
 8007e26:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007e2a:	60a2      	strge	r2, [r4, #8]
 8007e2c:	60a2      	strlt	r2, [r4, #8]
 8007e2e:	bfb8      	it	lt
 8007e30:	60e3      	strlt	r3, [r4, #12]
 8007e32:	6921      	ldr	r1, [r4, #16]
 8007e34:	290b      	cmp	r1, #11
 8007e36:	d911      	bls.n	8007e5c <validate_structure+0xac>
 8007e38:	220c      	movs	r2, #12
 8007e3a:	4668      	mov	r0, sp
 8007e3c:	f001 fb96 	bl	800956c <div>
 8007e40:	9a01      	ldr	r2, [sp, #4]
 8007e42:	6963      	ldr	r3, [r4, #20]
 8007e44:	9900      	ldr	r1, [sp, #0]
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	440b      	add	r3, r1
 8007e4a:	6163      	str	r3, [r4, #20]
 8007e4c:	bfbb      	ittet	lt
 8007e4e:	320c      	addlt	r2, #12
 8007e50:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007e54:	6122      	strge	r2, [r4, #16]
 8007e56:	6122      	strlt	r2, [r4, #16]
 8007e58:	bfb8      	it	lt
 8007e5a:	6163      	strlt	r3, [r4, #20]
 8007e5c:	6963      	ldr	r3, [r4, #20]
 8007e5e:	0799      	lsls	r1, r3, #30
 8007e60:	d143      	bne.n	8007eea <validate_structure+0x13a>
 8007e62:	2164      	movs	r1, #100	; 0x64
 8007e64:	fb93 f2f1 	sdiv	r2, r3, r1
 8007e68:	fb01 3212 	mls	r2, r1, r2, r3
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d13e      	bne.n	8007eee <validate_structure+0x13e>
 8007e70:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007e74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007e78:	fb93 f2f1 	sdiv	r2, r3, r1
 8007e7c:	fb01 3312 	mls	r3, r1, r2, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf14      	ite	ne
 8007e84:	231c      	movne	r3, #28
 8007e86:	231d      	moveq	r3, #29
 8007e88:	68e2      	ldr	r2, [r4, #12]
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	dd31      	ble.n	8007ef2 <validate_structure+0x142>
 8007e8e:	4f37      	ldr	r7, [pc, #220]	; (8007f6c <validate_structure+0x1bc>)
 8007e90:	2602      	movs	r6, #2
 8007e92:	f04f 0e00 	mov.w	lr, #0
 8007e96:	2064      	movs	r0, #100	; 0x64
 8007e98:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007e9c:	6921      	ldr	r1, [r4, #16]
 8007e9e:	68e2      	ldr	r2, [r4, #12]
 8007ea0:	2901      	cmp	r1, #1
 8007ea2:	d05d      	beq.n	8007f60 <validate_structure+0x1b0>
 8007ea4:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8007ea8:	4562      	cmp	r2, ip
 8007eaa:	dd2c      	ble.n	8007f06 <validate_structure+0x156>
 8007eac:	3101      	adds	r1, #1
 8007eae:	eba2 020c 	sub.w	r2, r2, ip
 8007eb2:	290c      	cmp	r1, #12
 8007eb4:	60e2      	str	r2, [r4, #12]
 8007eb6:	6121      	str	r1, [r4, #16]
 8007eb8:	d1f0      	bne.n	8007e9c <validate_structure+0xec>
 8007eba:	6963      	ldr	r3, [r4, #20]
 8007ebc:	f8c4 e010 	str.w	lr, [r4, #16]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	0791      	lsls	r1, r2, #30
 8007ec4:	6162      	str	r2, [r4, #20]
 8007ec6:	d147      	bne.n	8007f58 <validate_structure+0x1a8>
 8007ec8:	fb92 f1f0 	sdiv	r1, r2, r0
 8007ecc:	fb00 2211 	mls	r2, r0, r1, r2
 8007ed0:	2a00      	cmp	r2, #0
 8007ed2:	d143      	bne.n	8007f5c <validate_structure+0x1ac>
 8007ed4:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8007ed8:	fb93 f2f5 	sdiv	r2, r3, r5
 8007edc:	fb05 3312 	mls	r3, r5, r2, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf14      	ite	ne
 8007ee4:	231c      	movne	r3, #28
 8007ee6:	231d      	moveq	r3, #29
 8007ee8:	e7d8      	b.n	8007e9c <validate_structure+0xec>
 8007eea:	231c      	movs	r3, #28
 8007eec:	e7cc      	b.n	8007e88 <validate_structure+0xd8>
 8007eee:	231d      	movs	r3, #29
 8007ef0:	e7ca      	b.n	8007e88 <validate_structure+0xd8>
 8007ef2:	4f1e      	ldr	r7, [pc, #120]	; (8007f6c <validate_structure+0x1bc>)
 8007ef4:	260b      	movs	r6, #11
 8007ef6:	2064      	movs	r0, #100	; 0x64
 8007ef8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007efc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8007f00:	f1be 0f00 	cmp.w	lr, #0
 8007f04:	dd01      	ble.n	8007f0a <validate_structure+0x15a>
 8007f06:	b003      	add	sp, #12
 8007f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f0a:	6921      	ldr	r1, [r4, #16]
 8007f0c:	3901      	subs	r1, #1
 8007f0e:	6121      	str	r1, [r4, #16]
 8007f10:	3101      	adds	r1, #1
 8007f12:	d114      	bne.n	8007f3e <validate_structure+0x18e>
 8007f14:	6963      	ldr	r3, [r4, #20]
 8007f16:	6126      	str	r6, [r4, #16]
 8007f18:	1e59      	subs	r1, r3, #1
 8007f1a:	078a      	lsls	r2, r1, #30
 8007f1c:	6161      	str	r1, [r4, #20]
 8007f1e:	d117      	bne.n	8007f50 <validate_structure+0x1a0>
 8007f20:	fb91 f2f0 	sdiv	r2, r1, r0
 8007f24:	fb00 1112 	mls	r1, r0, r2, r1
 8007f28:	b9a1      	cbnz	r1, 8007f54 <validate_structure+0x1a4>
 8007f2a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8007f2e:	fb93 f2f5 	sdiv	r2, r3, r5
 8007f32:	fb05 3312 	mls	r3, r5, r2, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bf14      	ite	ne
 8007f3a:	231c      	movne	r3, #28
 8007f3c:	231d      	moveq	r3, #29
 8007f3e:	6922      	ldr	r2, [r4, #16]
 8007f40:	2a01      	cmp	r2, #1
 8007f42:	bf14      	ite	ne
 8007f44:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8007f48:	461a      	moveq	r2, r3
 8007f4a:	4472      	add	r2, lr
 8007f4c:	60e2      	str	r2, [r4, #12]
 8007f4e:	e7d5      	b.n	8007efc <validate_structure+0x14c>
 8007f50:	231c      	movs	r3, #28
 8007f52:	e7f4      	b.n	8007f3e <validate_structure+0x18e>
 8007f54:	231d      	movs	r3, #29
 8007f56:	e7f2      	b.n	8007f3e <validate_structure+0x18e>
 8007f58:	231c      	movs	r3, #28
 8007f5a:	e79f      	b.n	8007e9c <validate_structure+0xec>
 8007f5c:	231d      	movs	r3, #29
 8007f5e:	e79d      	b.n	8007e9c <validate_structure+0xec>
 8007f60:	4293      	cmp	r3, r2
 8007f62:	dad0      	bge.n	8007f06 <validate_structure+0x156>
 8007f64:	1ad2      	subs	r2, r2, r3
 8007f66:	60e2      	str	r2, [r4, #12]
 8007f68:	6126      	str	r6, [r4, #16]
 8007f6a:	e797      	b.n	8007e9c <validate_structure+0xec>
 8007f6c:	0800b1b4 	.word	0x0800b1b4

08007f70 <mktime>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	4681      	mov	r9, r0
 8007f76:	f001 fe85 	bl	8009c84 <__gettzinfo>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f7ff ff17 	bl	8007db0 <validate_structure>
 8007f82:	e899 0081 	ldmia.w	r9, {r0, r7}
 8007f86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f8a:	4ab4      	ldr	r2, [pc, #720]	; (800825c <mktime+0x2ec>)
 8007f8c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f94:	253c      	movs	r5, #60	; 0x3c
 8007f96:	fb05 0707 	mla	r7, r5, r7, r0
 8007f9a:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007f9e:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8007fa2:	3c01      	subs	r4, #1
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	fb05 7000 	mla	r0, r5, r0, r7
 8007faa:	4414      	add	r4, r2
 8007fac:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007fb0:	dd11      	ble.n	8007fd6 <mktime+0x66>
 8007fb2:	0799      	lsls	r1, r3, #30
 8007fb4:	d10f      	bne.n	8007fd6 <mktime+0x66>
 8007fb6:	2164      	movs	r1, #100	; 0x64
 8007fb8:	fb93 f2f1 	sdiv	r2, r3, r1
 8007fbc:	fb01 3212 	mls	r2, r1, r2, r3
 8007fc0:	b942      	cbnz	r2, 8007fd4 <mktime+0x64>
 8007fc2:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8007fc6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007fca:	fb95 f2f1 	sdiv	r2, r5, r1
 8007fce:	fb01 5212 	mls	r2, r1, r2, r5
 8007fd2:	b902      	cbnz	r2, 8007fd6 <mktime+0x66>
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8007fda:	3210      	adds	r2, #16
 8007fdc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8007fe0:	428a      	cmp	r2, r1
 8007fe2:	f8c9 401c 	str.w	r4, [r9, #28]
 8007fe6:	f200 812d 	bhi.w	8008244 <mktime+0x2d4>
 8007fea:	2b46      	cmp	r3, #70	; 0x46
 8007fec:	dd70      	ble.n	80080d0 <mktime+0x160>
 8007fee:	2546      	movs	r5, #70	; 0x46
 8007ff0:	f240 176d 	movw	r7, #365	; 0x16d
 8007ff4:	2164      	movs	r1, #100	; 0x64
 8007ff6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8007ffa:	07aa      	lsls	r2, r5, #30
 8007ffc:	d162      	bne.n	80080c4 <mktime+0x154>
 8007ffe:	fb95 f2f1 	sdiv	r2, r5, r1
 8008002:	fb01 5212 	mls	r2, r1, r2, r5
 8008006:	2a00      	cmp	r2, #0
 8008008:	d15f      	bne.n	80080ca <mktime+0x15a>
 800800a:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800800e:	fb9e f2f6 	sdiv	r2, lr, r6
 8008012:	fb06 e212 	mls	r2, r6, r2, lr
 8008016:	2a00      	cmp	r2, #0
 8008018:	bf14      	ite	ne
 800801a:	463a      	movne	r2, r7
 800801c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008020:	3501      	adds	r5, #1
 8008022:	42ab      	cmp	r3, r5
 8008024:	4414      	add	r4, r2
 8008026:	d1e8      	bne.n	8007ffa <mktime+0x8a>
 8008028:	4f8d      	ldr	r7, [pc, #564]	; (8008260 <mktime+0x2f0>)
 800802a:	fb07 0704 	mla	r7, r7, r4, r0
 800802e:	f001 f913 	bl	8009258 <__tz_lock>
 8008032:	f001 f913 	bl	800925c <_tzset_unlocked>
 8008036:	4b8b      	ldr	r3, [pc, #556]	; (8008264 <mktime+0x2f4>)
 8008038:	681e      	ldr	r6, [r3, #0]
 800803a:	2e00      	cmp	r6, #0
 800803c:	f000 810a 	beq.w	8008254 <mktime+0x2e4>
 8008040:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8008044:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8008048:	2b01      	cmp	r3, #1
 800804a:	bfa8      	it	ge
 800804c:	2301      	movge	r3, #1
 800804e:	469a      	mov	sl, r3
 8008050:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008054:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8008058:	4298      	cmp	r0, r3
 800805a:	d17c      	bne.n	8008156 <mktime+0x1e6>
 800805c:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8008060:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8008064:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8008068:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800806c:	1ad6      	subs	r6, r2, r3
 800806e:	42b7      	cmp	r7, r6
 8008070:	eba1 0100 	sub.w	r1, r1, r0
 8008074:	da76      	bge.n	8008164 <mktime+0x1f4>
 8008076:	f8d8 2000 	ldr.w	r2, [r8]
 800807a:	2a00      	cmp	r2, #0
 800807c:	d076      	beq.n	800816c <mktime+0x1fc>
 800807e:	428f      	cmp	r7, r1
 8008080:	f2c0 80e3 	blt.w	800824a <mktime+0x2da>
 8008084:	42b7      	cmp	r7, r6
 8008086:	bfac      	ite	ge
 8008088:	2600      	movge	r6, #0
 800808a:	2601      	movlt	r6, #1
 800808c:	f1ba 0f00 	cmp.w	sl, #0
 8008090:	da72      	bge.n	8008178 <mktime+0x208>
 8008092:	2e01      	cmp	r6, #1
 8008094:	f040 80de 	bne.w	8008254 <mktime+0x2e4>
 8008098:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800809c:	2601      	movs	r6, #1
 800809e:	443d      	add	r5, r7
 80080a0:	f001 f8db 	bl	800925a <__tz_unlock>
 80080a4:	3404      	adds	r4, #4
 80080a6:	2307      	movs	r3, #7
 80080a8:	fb94 f3f3 	sdiv	r3, r4, r3
 80080ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80080b0:	1ae4      	subs	r4, r4, r3
 80080b2:	bf48      	it	mi
 80080b4:	3407      	addmi	r4, #7
 80080b6:	f8c9 6020 	str.w	r6, [r9, #32]
 80080ba:	f8c9 4018 	str.w	r4, [r9, #24]
 80080be:	4628      	mov	r0, r5
 80080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c4:	f240 126d 	movw	r2, #365	; 0x16d
 80080c8:	e7aa      	b.n	8008020 <mktime+0xb0>
 80080ca:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80080ce:	e7a7      	b.n	8008020 <mktime+0xb0>
 80080d0:	d01e      	beq.n	8008110 <mktime+0x1a0>
 80080d2:	2245      	movs	r2, #69	; 0x45
 80080d4:	f240 176d 	movw	r7, #365	; 0x16d
 80080d8:	2564      	movs	r5, #100	; 0x64
 80080da:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80080de:	429a      	cmp	r2, r3
 80080e0:	dc18      	bgt.n	8008114 <mktime+0x1a4>
 80080e2:	079d      	lsls	r5, r3, #30
 80080e4:	d131      	bne.n	800814a <mktime+0x1da>
 80080e6:	2164      	movs	r1, #100	; 0x64
 80080e8:	fb93 f2f1 	sdiv	r2, r3, r1
 80080ec:	fb01 3212 	mls	r2, r1, r2, r3
 80080f0:	bb72      	cbnz	r2, 8008150 <mktime+0x1e0>
 80080f2:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 80080f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80080fa:	fb95 f2f1 	sdiv	r2, r5, r1
 80080fe:	fb01 5212 	mls	r2, r1, r2, r5
 8008102:	2a00      	cmp	r2, #0
 8008104:	f240 126d 	movw	r2, #365	; 0x16d
 8008108:	bf08      	it	eq
 800810a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800810e:	1aa4      	subs	r4, r4, r2
 8008110:	461d      	mov	r5, r3
 8008112:	e789      	b.n	8008028 <mktime+0xb8>
 8008114:	0791      	lsls	r1, r2, #30
 8008116:	d112      	bne.n	800813e <mktime+0x1ce>
 8008118:	fb92 f1f5 	sdiv	r1, r2, r5
 800811c:	fb05 2111 	mls	r1, r5, r1, r2
 8008120:	b981      	cbnz	r1, 8008144 <mktime+0x1d4>
 8008122:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8008126:	fb9e f1f6 	sdiv	r1, lr, r6
 800812a:	fb06 e111 	mls	r1, r6, r1, lr
 800812e:	2900      	cmp	r1, #0
 8008130:	bf14      	ite	ne
 8008132:	4639      	movne	r1, r7
 8008134:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8008138:	1a64      	subs	r4, r4, r1
 800813a:	3a01      	subs	r2, #1
 800813c:	e7cf      	b.n	80080de <mktime+0x16e>
 800813e:	f240 116d 	movw	r1, #365	; 0x16d
 8008142:	e7f9      	b.n	8008138 <mktime+0x1c8>
 8008144:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8008148:	e7f6      	b.n	8008138 <mktime+0x1c8>
 800814a:	f240 126d 	movw	r2, #365	; 0x16d
 800814e:	e7de      	b.n	800810e <mktime+0x19e>
 8008150:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008154:	e7db      	b.n	800810e <mktime+0x19e>
 8008156:	f000 ffd7 	bl	8009108 <__tzcalc_limits>
 800815a:	2800      	cmp	r0, #0
 800815c:	f47f af7e 	bne.w	800805c <mktime+0xec>
 8008160:	4656      	mov	r6, sl
 8008162:	e796      	b.n	8008092 <mktime+0x122>
 8008164:	1a12      	subs	r2, r2, r0
 8008166:	4297      	cmp	r7, r2
 8008168:	dbfa      	blt.n	8008160 <mktime+0x1f0>
 800816a:	e784      	b.n	8008076 <mktime+0x106>
 800816c:	428f      	cmp	r7, r1
 800816e:	db89      	blt.n	8008084 <mktime+0x114>
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	db90      	blt.n	8008098 <mktime+0x128>
 8008176:	2601      	movs	r6, #1
 8008178:	ea8a 0a06 	eor.w	sl, sl, r6
 800817c:	f1ba 0f01 	cmp.w	sl, #1
 8008180:	d187      	bne.n	8008092 <mktime+0x122>
 8008182:	1a1b      	subs	r3, r3, r0
 8008184:	b906      	cbnz	r6, 8008188 <mktime+0x218>
 8008186:	425b      	negs	r3, r3
 8008188:	f8d9 2000 	ldr.w	r2, [r9]
 800818c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008190:	441a      	add	r2, r3
 8008192:	f8c9 2000 	str.w	r2, [r9]
 8008196:	4648      	mov	r0, r9
 8008198:	441f      	add	r7, r3
 800819a:	f7ff fe09 	bl	8007db0 <validate_structure>
 800819e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80081a2:	ebb3 030a 	subs.w	r3, r3, sl
 80081a6:	f43f af74 	beq.w	8008092 <mktime+0x122>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	dc21      	bgt.n	80081f2 <mktime+0x282>
 80081ae:	1c98      	adds	r0, r3, #2
 80081b0:	bfd8      	it	le
 80081b2:	2301      	movle	r3, #1
 80081b4:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80081b8:	441c      	add	r4, r3
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	d522      	bpl.n	8008204 <mktime+0x294>
 80081be:	1e6a      	subs	r2, r5, #1
 80081c0:	0791      	lsls	r1, r2, #30
 80081c2:	d119      	bne.n	80081f8 <mktime+0x288>
 80081c4:	2164      	movs	r1, #100	; 0x64
 80081c6:	fb92 f3f1 	sdiv	r3, r2, r1
 80081ca:	fb01 2313 	mls	r3, r1, r3, r2
 80081ce:	b9b3      	cbnz	r3, 80081fe <mktime+0x28e>
 80081d0:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 80081d4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80081d8:	fb95 f3f2 	sdiv	r3, r5, r2
 80081dc:	fb02 5513 	mls	r5, r2, r3, r5
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	f240 136d 	movw	r3, #365	; 0x16d
 80081e6:	bf18      	it	ne
 80081e8:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80081ec:	f8c9 301c 	str.w	r3, [r9, #28]
 80081f0:	e74f      	b.n	8008092 <mktime+0x122>
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295
 80081f6:	e7dd      	b.n	80081b4 <mktime+0x244>
 80081f8:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80081fc:	e7f6      	b.n	80081ec <mktime+0x27c>
 80081fe:	f240 136d 	movw	r3, #365	; 0x16d
 8008202:	e7f3      	b.n	80081ec <mktime+0x27c>
 8008204:	07aa      	lsls	r2, r5, #30
 8008206:	d117      	bne.n	8008238 <mktime+0x2c8>
 8008208:	2164      	movs	r1, #100	; 0x64
 800820a:	fb95 f2f1 	sdiv	r2, r5, r1
 800820e:	fb01 5212 	mls	r2, r1, r2, r5
 8008212:	b9a2      	cbnz	r2, 800823e <mktime+0x2ce>
 8008214:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8008218:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800821c:	fb95 f2f1 	sdiv	r2, r5, r1
 8008220:	fb01 5512 	mls	r5, r1, r2, r5
 8008224:	2d00      	cmp	r5, #0
 8008226:	f240 126d 	movw	r2, #365	; 0x16d
 800822a:	bf08      	it	eq
 800822c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8008230:	429a      	cmp	r2, r3
 8008232:	bfd8      	it	le
 8008234:	1a9b      	suble	r3, r3, r2
 8008236:	e7d9      	b.n	80081ec <mktime+0x27c>
 8008238:	f240 126d 	movw	r2, #365	; 0x16d
 800823c:	e7f8      	b.n	8008230 <mktime+0x2c0>
 800823e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8008242:	e7f5      	b.n	8008230 <mktime+0x2c0>
 8008244:	f04f 35ff 	mov.w	r5, #4294967295
 8008248:	e739      	b.n	80080be <mktime+0x14e>
 800824a:	f1ba 0f00 	cmp.w	sl, #0
 800824e:	f04f 0600 	mov.w	r6, #0
 8008252:	da91      	bge.n	8008178 <mktime+0x208>
 8008254:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8008258:	443d      	add	r5, r7
 800825a:	e721      	b.n	80080a0 <mktime+0x130>
 800825c:	0800b1e4 	.word	0x0800b1e4
 8008260:	00015180 	.word	0x00015180
 8008264:	20000270 	.word	0x20000270

08008268 <_free_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4605      	mov	r5, r0
 800826c:	2900      	cmp	r1, #0
 800826e:	d045      	beq.n	80082fc <_free_r+0x94>
 8008270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008274:	1f0c      	subs	r4, r1, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfb8      	it	lt
 800827a:	18e4      	addlt	r4, r4, r3
 800827c:	f001 fdc6 	bl	8009e0c <__malloc_lock>
 8008280:	4a1f      	ldr	r2, [pc, #124]	; (8008300 <_free_r+0x98>)
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	4610      	mov	r0, r2
 8008286:	b933      	cbnz	r3, 8008296 <_free_r+0x2e>
 8008288:	6063      	str	r3, [r4, #4]
 800828a:	6014      	str	r4, [r2, #0]
 800828c:	4628      	mov	r0, r5
 800828e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008292:	f001 bdbc 	b.w	8009e0e <__malloc_unlock>
 8008296:	42a3      	cmp	r3, r4
 8008298:	d90c      	bls.n	80082b4 <_free_r+0x4c>
 800829a:	6821      	ldr	r1, [r4, #0]
 800829c:	1862      	adds	r2, r4, r1
 800829e:	4293      	cmp	r3, r2
 80082a0:	bf04      	itt	eq
 80082a2:	681a      	ldreq	r2, [r3, #0]
 80082a4:	685b      	ldreq	r3, [r3, #4]
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	bf04      	itt	eq
 80082aa:	1852      	addeq	r2, r2, r1
 80082ac:	6022      	streq	r2, [r4, #0]
 80082ae:	6004      	str	r4, [r0, #0]
 80082b0:	e7ec      	b.n	800828c <_free_r+0x24>
 80082b2:	4613      	mov	r3, r2
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	b10a      	cbz	r2, 80082bc <_free_r+0x54>
 80082b8:	42a2      	cmp	r2, r4
 80082ba:	d9fa      	bls.n	80082b2 <_free_r+0x4a>
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	1858      	adds	r0, r3, r1
 80082c0:	42a0      	cmp	r0, r4
 80082c2:	d10b      	bne.n	80082dc <_free_r+0x74>
 80082c4:	6820      	ldr	r0, [r4, #0]
 80082c6:	4401      	add	r1, r0
 80082c8:	1858      	adds	r0, r3, r1
 80082ca:	4282      	cmp	r2, r0
 80082cc:	6019      	str	r1, [r3, #0]
 80082ce:	d1dd      	bne.n	800828c <_free_r+0x24>
 80082d0:	6810      	ldr	r0, [r2, #0]
 80082d2:	6852      	ldr	r2, [r2, #4]
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	4401      	add	r1, r0
 80082d8:	6019      	str	r1, [r3, #0]
 80082da:	e7d7      	b.n	800828c <_free_r+0x24>
 80082dc:	d902      	bls.n	80082e4 <_free_r+0x7c>
 80082de:	230c      	movs	r3, #12
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	e7d3      	b.n	800828c <_free_r+0x24>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	1821      	adds	r1, r4, r0
 80082e8:	428a      	cmp	r2, r1
 80082ea:	bf04      	itt	eq
 80082ec:	6811      	ldreq	r1, [r2, #0]
 80082ee:	6852      	ldreq	r2, [r2, #4]
 80082f0:	6062      	str	r2, [r4, #4]
 80082f2:	bf04      	itt	eq
 80082f4:	1809      	addeq	r1, r1, r0
 80082f6:	6021      	streq	r1, [r4, #0]
 80082f8:	605c      	str	r4, [r3, #4]
 80082fa:	e7c7      	b.n	800828c <_free_r+0x24>
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	bf00      	nop
 8008300:	2000024c 	.word	0x2000024c

08008304 <_malloc_r>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	1ccd      	adds	r5, r1, #3
 8008308:	f025 0503 	bic.w	r5, r5, #3
 800830c:	3508      	adds	r5, #8
 800830e:	2d0c      	cmp	r5, #12
 8008310:	bf38      	it	cc
 8008312:	250c      	movcc	r5, #12
 8008314:	2d00      	cmp	r5, #0
 8008316:	4606      	mov	r6, r0
 8008318:	db01      	blt.n	800831e <_malloc_r+0x1a>
 800831a:	42a9      	cmp	r1, r5
 800831c:	d903      	bls.n	8008326 <_malloc_r+0x22>
 800831e:	230c      	movs	r3, #12
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	2000      	movs	r0, #0
 8008324:	bd70      	pop	{r4, r5, r6, pc}
 8008326:	f001 fd71 	bl	8009e0c <__malloc_lock>
 800832a:	4a23      	ldr	r2, [pc, #140]	; (80083b8 <_malloc_r+0xb4>)
 800832c:	6814      	ldr	r4, [r2, #0]
 800832e:	4621      	mov	r1, r4
 8008330:	b991      	cbnz	r1, 8008358 <_malloc_r+0x54>
 8008332:	4c22      	ldr	r4, [pc, #136]	; (80083bc <_malloc_r+0xb8>)
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	b91b      	cbnz	r3, 8008340 <_malloc_r+0x3c>
 8008338:	4630      	mov	r0, r6
 800833a:	f000 f841 	bl	80083c0 <_sbrk_r>
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	4629      	mov	r1, r5
 8008342:	4630      	mov	r0, r6
 8008344:	f000 f83c 	bl	80083c0 <_sbrk_r>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d126      	bne.n	800839a <_malloc_r+0x96>
 800834c:	230c      	movs	r3, #12
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	4630      	mov	r0, r6
 8008352:	f001 fd5c 	bl	8009e0e <__malloc_unlock>
 8008356:	e7e4      	b.n	8008322 <_malloc_r+0x1e>
 8008358:	680b      	ldr	r3, [r1, #0]
 800835a:	1b5b      	subs	r3, r3, r5
 800835c:	d41a      	bmi.n	8008394 <_malloc_r+0x90>
 800835e:	2b0b      	cmp	r3, #11
 8008360:	d90f      	bls.n	8008382 <_malloc_r+0x7e>
 8008362:	600b      	str	r3, [r1, #0]
 8008364:	50cd      	str	r5, [r1, r3]
 8008366:	18cc      	adds	r4, r1, r3
 8008368:	4630      	mov	r0, r6
 800836a:	f001 fd50 	bl	8009e0e <__malloc_unlock>
 800836e:	f104 000b 	add.w	r0, r4, #11
 8008372:	1d23      	adds	r3, r4, #4
 8008374:	f020 0007 	bic.w	r0, r0, #7
 8008378:	1ac3      	subs	r3, r0, r3
 800837a:	d01b      	beq.n	80083b4 <_malloc_r+0xb0>
 800837c:	425a      	negs	r2, r3
 800837e:	50e2      	str	r2, [r4, r3]
 8008380:	bd70      	pop	{r4, r5, r6, pc}
 8008382:	428c      	cmp	r4, r1
 8008384:	bf0d      	iteet	eq
 8008386:	6863      	ldreq	r3, [r4, #4]
 8008388:	684b      	ldrne	r3, [r1, #4]
 800838a:	6063      	strne	r3, [r4, #4]
 800838c:	6013      	streq	r3, [r2, #0]
 800838e:	bf18      	it	ne
 8008390:	460c      	movne	r4, r1
 8008392:	e7e9      	b.n	8008368 <_malloc_r+0x64>
 8008394:	460c      	mov	r4, r1
 8008396:	6849      	ldr	r1, [r1, #4]
 8008398:	e7ca      	b.n	8008330 <_malloc_r+0x2c>
 800839a:	1cc4      	adds	r4, r0, #3
 800839c:	f024 0403 	bic.w	r4, r4, #3
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d005      	beq.n	80083b0 <_malloc_r+0xac>
 80083a4:	1a21      	subs	r1, r4, r0
 80083a6:	4630      	mov	r0, r6
 80083a8:	f000 f80a 	bl	80083c0 <_sbrk_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d0cd      	beq.n	800834c <_malloc_r+0x48>
 80083b0:	6025      	str	r5, [r4, #0]
 80083b2:	e7d9      	b.n	8008368 <_malloc_r+0x64>
 80083b4:	bd70      	pop	{r4, r5, r6, pc}
 80083b6:	bf00      	nop
 80083b8:	2000024c 	.word	0x2000024c
 80083bc:	20000250 	.word	0x20000250

080083c0 <_sbrk_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4c06      	ldr	r4, [pc, #24]	; (80083dc <_sbrk_r+0x1c>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4605      	mov	r5, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	f7ff fb1e 	bl	8007a0c <_sbrk>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_sbrk_r+0x1a>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	b103      	cbz	r3, 80083da <_sbrk_r+0x1a>
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20001c5c 	.word	0x20001c5c

080083e0 <strchr>:
 80083e0:	b2c9      	uxtb	r1, r1
 80083e2:	4603      	mov	r3, r0
 80083e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083e8:	b11a      	cbz	r2, 80083f2 <strchr+0x12>
 80083ea:	4291      	cmp	r1, r2
 80083ec:	d1f9      	bne.n	80083e2 <strchr+0x2>
 80083ee:	4618      	mov	r0, r3
 80083f0:	4770      	bx	lr
 80083f2:	2900      	cmp	r1, #0
 80083f4:	bf0c      	ite	eq
 80083f6:	4618      	moveq	r0, r3
 80083f8:	2000      	movne	r0, #0
 80083fa:	4770      	bx	lr

080083fc <sulp>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4604      	mov	r4, r0
 8008400:	460d      	mov	r5, r1
 8008402:	ec45 4b10 	vmov	d0, r4, r5
 8008406:	4616      	mov	r6, r2
 8008408:	f001 ffc2 	bl	800a390 <__ulp>
 800840c:	ec51 0b10 	vmov	r0, r1, d0
 8008410:	b17e      	cbz	r6, 8008432 <sulp+0x36>
 8008412:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008416:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800841a:	2b00      	cmp	r3, #0
 800841c:	dd09      	ble.n	8008432 <sulp+0x36>
 800841e:	051b      	lsls	r3, r3, #20
 8008420:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008424:	2400      	movs	r4, #0
 8008426:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800842a:	4622      	mov	r2, r4
 800842c:	462b      	mov	r3, r5
 800842e:	f7f8 f8ef 	bl	8000610 <__aeabi_dmul>
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	0000      	movs	r0, r0
	...

08008438 <_strtod_l>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b09f      	sub	sp, #124	; 0x7c
 800843e:	4698      	mov	r8, r3
 8008440:	9004      	str	r0, [sp, #16]
 8008442:	2300      	movs	r3, #0
 8008444:	4640      	mov	r0, r8
 8008446:	460c      	mov	r4, r1
 8008448:	9215      	str	r2, [sp, #84]	; 0x54
 800844a:	931a      	str	r3, [sp, #104]	; 0x68
 800844c:	f001 fcca 	bl	8009de4 <__localeconv_l>
 8008450:	4607      	mov	r7, r0
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	f7f7 fec6 	bl	80001e4 <strlen>
 8008458:	f04f 0a00 	mov.w	sl, #0
 800845c:	4605      	mov	r5, r0
 800845e:	f04f 0b00 	mov.w	fp, #0
 8008462:	9419      	str	r4, [sp, #100]	; 0x64
 8008464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	2a0d      	cmp	r2, #13
 800846a:	d833      	bhi.n	80084d4 <_strtod_l+0x9c>
 800846c:	2a09      	cmp	r2, #9
 800846e:	d237      	bcs.n	80084e0 <_strtod_l+0xa8>
 8008470:	2a00      	cmp	r2, #0
 8008472:	d03f      	beq.n	80084f4 <_strtod_l+0xbc>
 8008474:	2300      	movs	r3, #0
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800847a:	7833      	ldrb	r3, [r6, #0]
 800847c:	2b30      	cmp	r3, #48	; 0x30
 800847e:	f040 8103 	bne.w	8008688 <_strtod_l+0x250>
 8008482:	7873      	ldrb	r3, [r6, #1]
 8008484:	2b58      	cmp	r3, #88	; 0x58
 8008486:	d001      	beq.n	800848c <_strtod_l+0x54>
 8008488:	2b78      	cmp	r3, #120	; 0x78
 800848a:	d16b      	bne.n	8008564 <_strtod_l+0x12c>
 800848c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	ab1a      	add	r3, sp, #104	; 0x68
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	f8cd 8008 	str.w	r8, [sp, #8]
 8008498:	ab1b      	add	r3, sp, #108	; 0x6c
 800849a:	4aad      	ldr	r2, [pc, #692]	; (8008750 <_strtod_l+0x318>)
 800849c:	9804      	ldr	r0, [sp, #16]
 800849e:	a919      	add	r1, sp, #100	; 0x64
 80084a0:	f001 f8c2 	bl	8009628 <__gethex>
 80084a4:	f010 0407 	ands.w	r4, r0, #7
 80084a8:	4605      	mov	r5, r0
 80084aa:	d005      	beq.n	80084b8 <_strtod_l+0x80>
 80084ac:	2c06      	cmp	r4, #6
 80084ae:	d12b      	bne.n	8008508 <_strtod_l+0xd0>
 80084b0:	3601      	adds	r6, #1
 80084b2:	2300      	movs	r3, #0
 80084b4:	9619      	str	r6, [sp, #100]	; 0x64
 80084b6:	9309      	str	r3, [sp, #36]	; 0x24
 80084b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 8590 	bne.w	8008fe0 <_strtod_l+0xba8>
 80084c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c2:	b1e3      	cbz	r3, 80084fe <_strtod_l+0xc6>
 80084c4:	4652      	mov	r2, sl
 80084c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084ca:	ec43 2b10 	vmov	d0, r2, r3
 80084ce:	b01f      	add	sp, #124	; 0x7c
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	2a2b      	cmp	r2, #43	; 0x2b
 80084d6:	d006      	beq.n	80084e6 <_strtod_l+0xae>
 80084d8:	2a2d      	cmp	r2, #45	; 0x2d
 80084da:	d013      	beq.n	8008504 <_strtod_l+0xcc>
 80084dc:	2a20      	cmp	r2, #32
 80084de:	d1c9      	bne.n	8008474 <_strtod_l+0x3c>
 80084e0:	3301      	adds	r3, #1
 80084e2:	9319      	str	r3, [sp, #100]	; 0x64
 80084e4:	e7be      	b.n	8008464 <_strtod_l+0x2c>
 80084e6:	2200      	movs	r2, #0
 80084e8:	9209      	str	r2, [sp, #36]	; 0x24
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	9219      	str	r2, [sp, #100]	; 0x64
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1c1      	bne.n	8008478 <_strtod_l+0x40>
 80084f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f6:	9419      	str	r4, [sp, #100]	; 0x64
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 856f 	bne.w	8008fdc <_strtod_l+0xba4>
 80084fe:	4652      	mov	r2, sl
 8008500:	465b      	mov	r3, fp
 8008502:	e7e2      	b.n	80084ca <_strtod_l+0x92>
 8008504:	2201      	movs	r2, #1
 8008506:	e7ef      	b.n	80084e8 <_strtod_l+0xb0>
 8008508:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800850a:	b13a      	cbz	r2, 800851c <_strtod_l+0xe4>
 800850c:	2135      	movs	r1, #53	; 0x35
 800850e:	a81c      	add	r0, sp, #112	; 0x70
 8008510:	f002 f82f 	bl	800a572 <__copybits>
 8008514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008516:	9804      	ldr	r0, [sp, #16]
 8008518:	f001 fcae 	bl	8009e78 <_Bfree>
 800851c:	3c01      	subs	r4, #1
 800851e:	2c04      	cmp	r4, #4
 8008520:	d808      	bhi.n	8008534 <_strtod_l+0xfc>
 8008522:	e8df f004 	tbb	[pc, r4]
 8008526:	030c      	.short	0x030c
 8008528:	1a17      	.short	0x1a17
 800852a:	0c          	.byte	0x0c
 800852b:	00          	.byte	0x00
 800852c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008530:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8008534:	0729      	lsls	r1, r5, #28
 8008536:	d5bf      	bpl.n	80084b8 <_strtod_l+0x80>
 8008538:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800853c:	e7bc      	b.n	80084b8 <_strtod_l+0x80>
 800853e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008540:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008542:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008546:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800854a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800854e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008552:	e7ef      	b.n	8008534 <_strtod_l+0xfc>
 8008554:	f8df b204 	ldr.w	fp, [pc, #516]	; 800875c <_strtod_l+0x324>
 8008558:	e7ec      	b.n	8008534 <_strtod_l+0xfc>
 800855a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800855e:	f04f 3aff 	mov.w	sl, #4294967295
 8008562:	e7e7      	b.n	8008534 <_strtod_l+0xfc>
 8008564:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	9219      	str	r2, [sp, #100]	; 0x64
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b30      	cmp	r3, #48	; 0x30
 800856e:	d0f9      	beq.n	8008564 <_strtod_l+0x12c>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0a1      	beq.n	80084b8 <_strtod_l+0x80>
 8008574:	2301      	movs	r3, #1
 8008576:	f04f 0900 	mov.w	r9, #0
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800857e:	930a      	str	r3, [sp, #40]	; 0x28
 8008580:	f8cd 901c 	str.w	r9, [sp, #28]
 8008584:	f8cd 9018 	str.w	r9, [sp, #24]
 8008588:	220a      	movs	r2, #10
 800858a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800858c:	7806      	ldrb	r6, [r0, #0]
 800858e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008592:	b2d9      	uxtb	r1, r3
 8008594:	2909      	cmp	r1, #9
 8008596:	d979      	bls.n	800868c <_strtod_l+0x254>
 8008598:	462a      	mov	r2, r5
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	f002 f866 	bl	800a66c <strncmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f000 8082 	beq.w	80086aa <_strtod_l+0x272>
 80085a6:	2000      	movs	r0, #0
 80085a8:	9d06      	ldr	r5, [sp, #24]
 80085aa:	4633      	mov	r3, r6
 80085ac:	4602      	mov	r2, r0
 80085ae:	4601      	mov	r1, r0
 80085b0:	2b65      	cmp	r3, #101	; 0x65
 80085b2:	d002      	beq.n	80085ba <_strtod_l+0x182>
 80085b4:	2b45      	cmp	r3, #69	; 0x45
 80085b6:	f040 80e8 	bne.w	800878a <_strtod_l+0x352>
 80085ba:	b925      	cbnz	r5, 80085c6 <_strtod_l+0x18e>
 80085bc:	b910      	cbnz	r0, 80085c4 <_strtod_l+0x18c>
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d097      	beq.n	80084f4 <_strtod_l+0xbc>
 80085c4:	2500      	movs	r5, #0
 80085c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80085c8:	1c63      	adds	r3, r4, #1
 80085ca:	9319      	str	r3, [sp, #100]	; 0x64
 80085cc:	7863      	ldrb	r3, [r4, #1]
 80085ce:	2b2b      	cmp	r3, #43	; 0x2b
 80085d0:	f000 80c8 	beq.w	8008764 <_strtod_l+0x32c>
 80085d4:	2b2d      	cmp	r3, #45	; 0x2d
 80085d6:	f000 80cb 	beq.w	8008770 <_strtod_l+0x338>
 80085da:	2600      	movs	r6, #0
 80085dc:	9605      	str	r6, [sp, #20]
 80085de:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80085e2:	2e09      	cmp	r6, #9
 80085e4:	f200 80d0 	bhi.w	8008788 <_strtod_l+0x350>
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	f000 80c3 	beq.w	8008774 <_strtod_l+0x33c>
 80085ee:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80085f2:	2e08      	cmp	r6, #8
 80085f4:	f200 80c9 	bhi.w	800878a <_strtod_l+0x352>
 80085f8:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80085fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085fe:	f04f 0c0a 	mov.w	ip, #10
 8008602:	461f      	mov	r7, r3
 8008604:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008606:	1c5e      	adds	r6, r3, #1
 8008608:	9619      	str	r6, [sp, #100]	; 0x64
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008610:	f1b8 0f09 	cmp.w	r8, #9
 8008614:	f240 80b3 	bls.w	800877e <_strtod_l+0x346>
 8008618:	1bf6      	subs	r6, r6, r7
 800861a:	2e08      	cmp	r6, #8
 800861c:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8008620:	dc02      	bgt.n	8008628 <_strtod_l+0x1f0>
 8008622:	45f0      	cmp	r8, lr
 8008624:	bfa8      	it	ge
 8008626:	46f0      	movge	r8, lr
 8008628:	9e05      	ldr	r6, [sp, #20]
 800862a:	b10e      	cbz	r6, 8008630 <_strtod_l+0x1f8>
 800862c:	f1c8 0800 	rsb	r8, r8, #0
 8008630:	2d00      	cmp	r5, #0
 8008632:	f040 80d0 	bne.w	80087d6 <_strtod_l+0x39e>
 8008636:	2800      	cmp	r0, #0
 8008638:	f47f af3e 	bne.w	80084b8 <_strtod_l+0x80>
 800863c:	9a08      	ldr	r2, [sp, #32]
 800863e:	2a00      	cmp	r2, #0
 8008640:	f47f af3a 	bne.w	80084b8 <_strtod_l+0x80>
 8008644:	2900      	cmp	r1, #0
 8008646:	f47f af55 	bne.w	80084f4 <_strtod_l+0xbc>
 800864a:	2b4e      	cmp	r3, #78	; 0x4e
 800864c:	f000 80a6 	beq.w	800879c <_strtod_l+0x364>
 8008650:	f300 809e 	bgt.w	8008790 <_strtod_l+0x358>
 8008654:	2b49      	cmp	r3, #73	; 0x49
 8008656:	f47f af4d 	bne.w	80084f4 <_strtod_l+0xbc>
 800865a:	493e      	ldr	r1, [pc, #248]	; (8008754 <_strtod_l+0x31c>)
 800865c:	a819      	add	r0, sp, #100	; 0x64
 800865e:	f001 fa13 	bl	8009a88 <__match>
 8008662:	2800      	cmp	r0, #0
 8008664:	f43f af46 	beq.w	80084f4 <_strtod_l+0xbc>
 8008668:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800866a:	493b      	ldr	r1, [pc, #236]	; (8008758 <_strtod_l+0x320>)
 800866c:	3b01      	subs	r3, #1
 800866e:	a819      	add	r0, sp, #100	; 0x64
 8008670:	9319      	str	r3, [sp, #100]	; 0x64
 8008672:	f001 fa09 	bl	8009a88 <__match>
 8008676:	b910      	cbnz	r0, 800867e <_strtod_l+0x246>
 8008678:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800867a:	3301      	adds	r3, #1
 800867c:	9319      	str	r3, [sp, #100]	; 0x64
 800867e:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 800875c <_strtod_l+0x324>
 8008682:	f04f 0a00 	mov.w	sl, #0
 8008686:	e717      	b.n	80084b8 <_strtod_l+0x80>
 8008688:	2300      	movs	r3, #0
 800868a:	e774      	b.n	8008576 <_strtod_l+0x13e>
 800868c:	9906      	ldr	r1, [sp, #24]
 800868e:	2908      	cmp	r1, #8
 8008690:	bfdd      	ittte	le
 8008692:	9907      	ldrle	r1, [sp, #28]
 8008694:	fb02 3301 	mlale	r3, r2, r1, r3
 8008698:	9307      	strle	r3, [sp, #28]
 800869a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	3001      	adds	r0, #1
 80086a2:	3301      	adds	r3, #1
 80086a4:	9306      	str	r3, [sp, #24]
 80086a6:	9019      	str	r0, [sp, #100]	; 0x64
 80086a8:	e76f      	b.n	800858a <_strtod_l+0x152>
 80086aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086ac:	195a      	adds	r2, r3, r5
 80086ae:	9219      	str	r2, [sp, #100]	; 0x64
 80086b0:	9a06      	ldr	r2, [sp, #24]
 80086b2:	5d5b      	ldrb	r3, [r3, r5]
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	d148      	bne.n	800874a <_strtod_l+0x312>
 80086b8:	4610      	mov	r0, r2
 80086ba:	2b30      	cmp	r3, #48	; 0x30
 80086bc:	d02a      	beq.n	8008714 <_strtod_l+0x2dc>
 80086be:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80086c2:	2a08      	cmp	r2, #8
 80086c4:	f200 8491 	bhi.w	8008fea <_strtod_l+0xbb2>
 80086c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086ca:	920a      	str	r2, [sp, #40]	; 0x28
 80086cc:	4602      	mov	r2, r0
 80086ce:	2000      	movs	r0, #0
 80086d0:	4605      	mov	r5, r0
 80086d2:	3b30      	subs	r3, #48	; 0x30
 80086d4:	f100 0101 	add.w	r1, r0, #1
 80086d8:	d011      	beq.n	80086fe <_strtod_l+0x2c6>
 80086da:	440a      	add	r2, r1
 80086dc:	eb00 0c05 	add.w	ip, r0, r5
 80086e0:	4629      	mov	r1, r5
 80086e2:	260a      	movs	r6, #10
 80086e4:	4561      	cmp	r1, ip
 80086e6:	d11b      	bne.n	8008720 <_strtod_l+0x2e8>
 80086e8:	4428      	add	r0, r5
 80086ea:	2808      	cmp	r0, #8
 80086ec:	f100 0501 	add.w	r5, r0, #1
 80086f0:	dc25      	bgt.n	800873e <_strtod_l+0x306>
 80086f2:	9807      	ldr	r0, [sp, #28]
 80086f4:	210a      	movs	r1, #10
 80086f6:	fb01 3300 	mla	r3, r1, r0, r3
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	2100      	movs	r1, #0
 80086fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008700:	1c58      	adds	r0, r3, #1
 8008702:	9019      	str	r0, [sp, #100]	; 0x64
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	4608      	mov	r0, r1
 8008708:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800870c:	2909      	cmp	r1, #9
 800870e:	d9e0      	bls.n	80086d2 <_strtod_l+0x29a>
 8008710:	2101      	movs	r1, #1
 8008712:	e74d      	b.n	80085b0 <_strtod_l+0x178>
 8008714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	9219      	str	r2, [sp, #100]	; 0x64
 800871a:	3001      	adds	r0, #1
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	e7cc      	b.n	80086ba <_strtod_l+0x282>
 8008720:	3101      	adds	r1, #1
 8008722:	f101 3eff 	add.w	lr, r1, #4294967295
 8008726:	f1be 0f08 	cmp.w	lr, #8
 800872a:	dc03      	bgt.n	8008734 <_strtod_l+0x2fc>
 800872c:	9f07      	ldr	r7, [sp, #28]
 800872e:	4377      	muls	r7, r6
 8008730:	9707      	str	r7, [sp, #28]
 8008732:	e7d7      	b.n	80086e4 <_strtod_l+0x2ac>
 8008734:	2910      	cmp	r1, #16
 8008736:	bfd8      	it	le
 8008738:	fb06 f909 	mulle.w	r9, r6, r9
 800873c:	e7d2      	b.n	80086e4 <_strtod_l+0x2ac>
 800873e:	2d10      	cmp	r5, #16
 8008740:	bfdc      	itt	le
 8008742:	210a      	movle	r1, #10
 8008744:	fb01 3909 	mlale	r9, r1, r9, r3
 8008748:	e7d8      	b.n	80086fc <_strtod_l+0x2c4>
 800874a:	4602      	mov	r2, r0
 800874c:	9d06      	ldr	r5, [sp, #24]
 800874e:	e7db      	b.n	8008708 <_strtod_l+0x2d0>
 8008750:	0800b280 	.word	0x0800b280
 8008754:	0800b274 	.word	0x0800b274
 8008758:	0800b277 	.word	0x0800b277
 800875c:	7ff00000 	.word	0x7ff00000
 8008760:	2101      	movs	r1, #1
 8008762:	e72b      	b.n	80085bc <_strtod_l+0x184>
 8008764:	2300      	movs	r3, #0
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	1ca3      	adds	r3, r4, #2
 800876a:	9319      	str	r3, [sp, #100]	; 0x64
 800876c:	78a3      	ldrb	r3, [r4, #2]
 800876e:	e736      	b.n	80085de <_strtod_l+0x1a6>
 8008770:	2301      	movs	r3, #1
 8008772:	e7f8      	b.n	8008766 <_strtod_l+0x32e>
 8008774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008776:	1c5e      	adds	r6, r3, #1
 8008778:	9619      	str	r6, [sp, #100]	; 0x64
 800877a:	785b      	ldrb	r3, [r3, #1]
 800877c:	e734      	b.n	80085e8 <_strtod_l+0x1b0>
 800877e:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8008782:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008786:	e73d      	b.n	8008604 <_strtod_l+0x1cc>
 8008788:	9419      	str	r4, [sp, #100]	; 0x64
 800878a:	f04f 0800 	mov.w	r8, #0
 800878e:	e74f      	b.n	8008630 <_strtod_l+0x1f8>
 8008790:	2b69      	cmp	r3, #105	; 0x69
 8008792:	f43f af62 	beq.w	800865a <_strtod_l+0x222>
 8008796:	2b6e      	cmp	r3, #110	; 0x6e
 8008798:	f47f aeac 	bne.w	80084f4 <_strtod_l+0xbc>
 800879c:	4988      	ldr	r1, [pc, #544]	; (80089c0 <_strtod_l+0x588>)
 800879e:	a819      	add	r0, sp, #100	; 0x64
 80087a0:	f001 f972 	bl	8009a88 <__match>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	f43f aea5 	beq.w	80084f4 <_strtod_l+0xbc>
 80087aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b28      	cmp	r3, #40	; 0x28
 80087b0:	d10e      	bne.n	80087d0 <_strtod_l+0x398>
 80087b2:	aa1c      	add	r2, sp, #112	; 0x70
 80087b4:	4983      	ldr	r1, [pc, #524]	; (80089c4 <_strtod_l+0x58c>)
 80087b6:	a819      	add	r0, sp, #100	; 0x64
 80087b8:	f001 f979 	bl	8009aae <__hexnan>
 80087bc:	2805      	cmp	r0, #5
 80087be:	d107      	bne.n	80087d0 <_strtod_l+0x398>
 80087c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087c2:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80087c6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80087ca:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80087ce:	e673      	b.n	80084b8 <_strtod_l+0x80>
 80087d0:	f8df b200 	ldr.w	fp, [pc, #512]	; 80089d4 <_strtod_l+0x59c>
 80087d4:	e755      	b.n	8008682 <_strtod_l+0x24a>
 80087d6:	9b06      	ldr	r3, [sp, #24]
 80087d8:	9807      	ldr	r0, [sp, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bf08      	it	eq
 80087de:	462b      	moveq	r3, r5
 80087e0:	2d10      	cmp	r5, #16
 80087e2:	462c      	mov	r4, r5
 80087e4:	eba8 0802 	sub.w	r8, r8, r2
 80087e8:	bfa8      	it	ge
 80087ea:	2410      	movge	r4, #16
 80087ec:	9306      	str	r3, [sp, #24]
 80087ee:	f7f7 fe99 	bl	8000524 <__aeabi_ui2d>
 80087f2:	2c09      	cmp	r4, #9
 80087f4:	4682      	mov	sl, r0
 80087f6:	468b      	mov	fp, r1
 80087f8:	dd13      	ble.n	8008822 <_strtod_l+0x3ea>
 80087fa:	4b73      	ldr	r3, [pc, #460]	; (80089c8 <_strtod_l+0x590>)
 80087fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008800:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008804:	f7f7 ff04 	bl	8000610 <__aeabi_dmul>
 8008808:	4606      	mov	r6, r0
 800880a:	4648      	mov	r0, r9
 800880c:	460f      	mov	r7, r1
 800880e:	f7f7 fe89 	bl	8000524 <__aeabi_ui2d>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f7 fd47 	bl	80002ac <__adddf3>
 800881e:	4682      	mov	sl, r0
 8008820:	468b      	mov	fp, r1
 8008822:	2d0f      	cmp	r5, #15
 8008824:	dc36      	bgt.n	8008894 <_strtod_l+0x45c>
 8008826:	f1b8 0f00 	cmp.w	r8, #0
 800882a:	f43f ae45 	beq.w	80084b8 <_strtod_l+0x80>
 800882e:	dd24      	ble.n	800887a <_strtod_l+0x442>
 8008830:	f1b8 0f16 	cmp.w	r8, #22
 8008834:	dc0b      	bgt.n	800884e <_strtod_l+0x416>
 8008836:	4d64      	ldr	r5, [pc, #400]	; (80089c8 <_strtod_l+0x590>)
 8008838:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 800883c:	e9d8 0100 	ldrd	r0, r1, [r8]
 8008840:	4652      	mov	r2, sl
 8008842:	465b      	mov	r3, fp
 8008844:	f7f7 fee4 	bl	8000610 <__aeabi_dmul>
 8008848:	4682      	mov	sl, r0
 800884a:	468b      	mov	fp, r1
 800884c:	e634      	b.n	80084b8 <_strtod_l+0x80>
 800884e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008852:	4598      	cmp	r8, r3
 8008854:	dc1e      	bgt.n	8008894 <_strtod_l+0x45c>
 8008856:	4c5c      	ldr	r4, [pc, #368]	; (80089c8 <_strtod_l+0x590>)
 8008858:	f1c5 050f 	rsb	r5, r5, #15
 800885c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008860:	eba8 0505 	sub.w	r5, r8, r5
 8008864:	4652      	mov	r2, sl
 8008866:	465b      	mov	r3, fp
 8008868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008870:	f7f7 fece 	bl	8000610 <__aeabi_dmul>
 8008874:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008878:	e7e4      	b.n	8008844 <_strtod_l+0x40c>
 800887a:	f118 0f16 	cmn.w	r8, #22
 800887e:	db09      	blt.n	8008894 <_strtod_l+0x45c>
 8008880:	4d51      	ldr	r5, [pc, #324]	; (80089c8 <_strtod_l+0x590>)
 8008882:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 8008886:	e9d8 2300 	ldrd	r2, r3, [r8]
 800888a:	4650      	mov	r0, sl
 800888c:	4659      	mov	r1, fp
 800888e:	f7f7 ffe9 	bl	8000864 <__aeabi_ddiv>
 8008892:	e7d9      	b.n	8008848 <_strtod_l+0x410>
 8008894:	1b2c      	subs	r4, r5, r4
 8008896:	4444      	add	r4, r8
 8008898:	2c00      	cmp	r4, #0
 800889a:	dd70      	ble.n	800897e <_strtod_l+0x546>
 800889c:	f014 030f 	ands.w	r3, r4, #15
 80088a0:	d00a      	beq.n	80088b8 <_strtod_l+0x480>
 80088a2:	4949      	ldr	r1, [pc, #292]	; (80089c8 <_strtod_l+0x590>)
 80088a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088a8:	4652      	mov	r2, sl
 80088aa:	465b      	mov	r3, fp
 80088ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b0:	f7f7 feae 	bl	8000610 <__aeabi_dmul>
 80088b4:	4682      	mov	sl, r0
 80088b6:	468b      	mov	fp, r1
 80088b8:	f034 040f 	bics.w	r4, r4, #15
 80088bc:	d050      	beq.n	8008960 <_strtod_l+0x528>
 80088be:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80088c2:	dd23      	ble.n	800890c <_strtod_l+0x4d4>
 80088c4:	2400      	movs	r4, #0
 80088c6:	4625      	mov	r5, r4
 80088c8:	9407      	str	r4, [sp, #28]
 80088ca:	9406      	str	r4, [sp, #24]
 80088cc:	9a04      	ldr	r2, [sp, #16]
 80088ce:	f8df b108 	ldr.w	fp, [pc, #264]	; 80089d8 <_strtod_l+0x5a0>
 80088d2:	2322      	movs	r3, #34	; 0x22
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	f04f 0a00 	mov.w	sl, #0
 80088da:	9b07      	ldr	r3, [sp, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f43f adeb 	beq.w	80084b8 <_strtod_l+0x80>
 80088e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80088e4:	9804      	ldr	r0, [sp, #16]
 80088e6:	f001 fac7 	bl	8009e78 <_Bfree>
 80088ea:	9906      	ldr	r1, [sp, #24]
 80088ec:	9804      	ldr	r0, [sp, #16]
 80088ee:	f001 fac3 	bl	8009e78 <_Bfree>
 80088f2:	4629      	mov	r1, r5
 80088f4:	9804      	ldr	r0, [sp, #16]
 80088f6:	f001 fabf 	bl	8009e78 <_Bfree>
 80088fa:	9907      	ldr	r1, [sp, #28]
 80088fc:	9804      	ldr	r0, [sp, #16]
 80088fe:	f001 fabb 	bl	8009e78 <_Bfree>
 8008902:	4621      	mov	r1, r4
 8008904:	9804      	ldr	r0, [sp, #16]
 8008906:	f001 fab7 	bl	8009e78 <_Bfree>
 800890a:	e5d5      	b.n	80084b8 <_strtod_l+0x80>
 800890c:	4e2f      	ldr	r6, [pc, #188]	; (80089cc <_strtod_l+0x594>)
 800890e:	2300      	movs	r3, #0
 8008910:	1124      	asrs	r4, r4, #4
 8008912:	4650      	mov	r0, sl
 8008914:	4659      	mov	r1, fp
 8008916:	4699      	mov	r9, r3
 8008918:	4637      	mov	r7, r6
 800891a:	2c01      	cmp	r4, #1
 800891c:	dc23      	bgt.n	8008966 <_strtod_l+0x52e>
 800891e:	b10b      	cbz	r3, 8008924 <_strtod_l+0x4ec>
 8008920:	4682      	mov	sl, r0
 8008922:	468b      	mov	fp, r1
 8008924:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008928:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 800892c:	4652      	mov	r2, sl
 800892e:	465b      	mov	r3, fp
 8008930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008934:	f7f7 fe6c 	bl	8000610 <__aeabi_dmul>
 8008938:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800893c:	468b      	mov	fp, r1
 800893e:	460a      	mov	r2, r1
 8008940:	0d1b      	lsrs	r3, r3, #20
 8008942:	4923      	ldr	r1, [pc, #140]	; (80089d0 <_strtod_l+0x598>)
 8008944:	051b      	lsls	r3, r3, #20
 8008946:	428b      	cmp	r3, r1
 8008948:	4682      	mov	sl, r0
 800894a:	d8bb      	bhi.n	80088c4 <_strtod_l+0x48c>
 800894c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008950:	428b      	cmp	r3, r1
 8008952:	bf86      	itte	hi
 8008954:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 80089dc <_strtod_l+0x5a4>
 8008958:	f04f 3aff 	movhi.w	sl, #4294967295
 800895c:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008960:	2300      	movs	r3, #0
 8008962:	9305      	str	r3, [sp, #20]
 8008964:	e06d      	b.n	8008a42 <_strtod_l+0x60a>
 8008966:	07e2      	lsls	r2, r4, #31
 8008968:	d504      	bpl.n	8008974 <_strtod_l+0x53c>
 800896a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800896e:	f7f7 fe4f 	bl	8000610 <__aeabi_dmul>
 8008972:	2301      	movs	r3, #1
 8008974:	f109 0901 	add.w	r9, r9, #1
 8008978:	1064      	asrs	r4, r4, #1
 800897a:	3608      	adds	r6, #8
 800897c:	e7cd      	b.n	800891a <_strtod_l+0x4e2>
 800897e:	d0ef      	beq.n	8008960 <_strtod_l+0x528>
 8008980:	4264      	negs	r4, r4
 8008982:	f014 020f 	ands.w	r2, r4, #15
 8008986:	d00a      	beq.n	800899e <_strtod_l+0x566>
 8008988:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <_strtod_l+0x590>)
 800898a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800898e:	4650      	mov	r0, sl
 8008990:	4659      	mov	r1, fp
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 ff65 	bl	8000864 <__aeabi_ddiv>
 800899a:	4682      	mov	sl, r0
 800899c:	468b      	mov	fp, r1
 800899e:	1124      	asrs	r4, r4, #4
 80089a0:	d0de      	beq.n	8008960 <_strtod_l+0x528>
 80089a2:	2c1f      	cmp	r4, #31
 80089a4:	dd1c      	ble.n	80089e0 <_strtod_l+0x5a8>
 80089a6:	2400      	movs	r4, #0
 80089a8:	4625      	mov	r5, r4
 80089aa:	9407      	str	r4, [sp, #28]
 80089ac:	9406      	str	r4, [sp, #24]
 80089ae:	9a04      	ldr	r2, [sp, #16]
 80089b0:	2322      	movs	r3, #34	; 0x22
 80089b2:	f04f 0a00 	mov.w	sl, #0
 80089b6:	f04f 0b00 	mov.w	fp, #0
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	e78d      	b.n	80088da <_strtod_l+0x4a2>
 80089be:	bf00      	nop
 80089c0:	0800b27d 	.word	0x0800b27d
 80089c4:	0800b294 	.word	0x0800b294
 80089c8:	0800b340 	.word	0x0800b340
 80089cc:	0800b318 	.word	0x0800b318
 80089d0:	7ca00000 	.word	0x7ca00000
 80089d4:	fff80000 	.word	0xfff80000
 80089d8:	7ff00000 	.word	0x7ff00000
 80089dc:	7fefffff 	.word	0x7fefffff
 80089e0:	f014 0310 	ands.w	r3, r4, #16
 80089e4:	bf18      	it	ne
 80089e6:	236a      	movne	r3, #106	; 0x6a
 80089e8:	4ea0      	ldr	r6, [pc, #640]	; (8008c6c <_strtod_l+0x834>)
 80089ea:	9305      	str	r3, [sp, #20]
 80089ec:	4650      	mov	r0, sl
 80089ee:	4659      	mov	r1, fp
 80089f0:	2300      	movs	r3, #0
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	f300 8106 	bgt.w	8008c04 <_strtod_l+0x7cc>
 80089f8:	b10b      	cbz	r3, 80089fe <_strtod_l+0x5c6>
 80089fa:	4682      	mov	sl, r0
 80089fc:	468b      	mov	fp, r1
 80089fe:	9b05      	ldr	r3, [sp, #20]
 8008a00:	b1bb      	cbz	r3, 8008a32 <_strtod_l+0x5fa>
 8008a02:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008a06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	dd10      	ble.n	8008a32 <_strtod_l+0x5fa>
 8008a10:	2b1f      	cmp	r3, #31
 8008a12:	f340 8101 	ble.w	8008c18 <_strtod_l+0x7e0>
 8008a16:	2b34      	cmp	r3, #52	; 0x34
 8008a18:	bfde      	ittt	le
 8008a1a:	3b20      	suble	r3, #32
 8008a1c:	f04f 32ff 	movle.w	r2, #4294967295
 8008a20:	fa02 f303 	lslle.w	r3, r2, r3
 8008a24:	f04f 0a00 	mov.w	sl, #0
 8008a28:	bfcc      	ite	gt
 8008a2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008a2e:	ea03 0b01 	andle.w	fp, r3, r1
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	4650      	mov	r0, sl
 8008a38:	4659      	mov	r1, fp
 8008a3a:	f7f8 f851 	bl	8000ae0 <__aeabi_dcmpeq>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d1b1      	bne.n	80089a6 <_strtod_l+0x56e>
 8008a42:	9b07      	ldr	r3, [sp, #28]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a4a:	9804      	ldr	r0, [sp, #16]
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	f001 fa65 	bl	8009f1c <__s2b>
 8008a52:	9007      	str	r0, [sp, #28]
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f43f af35 	beq.w	80088c4 <_strtod_l+0x48c>
 8008a5a:	f1b8 0f00 	cmp.w	r8, #0
 8008a5e:	f1c8 0300 	rsb	r3, r8, #0
 8008a62:	bfa8      	it	ge
 8008a64:	2300      	movge	r3, #0
 8008a66:	930e      	str	r3, [sp, #56]	; 0x38
 8008a68:	2400      	movs	r4, #0
 8008a6a:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8008a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a70:	4625      	mov	r5, r4
 8008a72:	9b07      	ldr	r3, [sp, #28]
 8008a74:	9804      	ldr	r0, [sp, #16]
 8008a76:	6859      	ldr	r1, [r3, #4]
 8008a78:	f001 f9ca 	bl	8009e10 <_Balloc>
 8008a7c:	9006      	str	r0, [sp, #24]
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f43f af24 	beq.w	80088cc <_strtod_l+0x494>
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	3202      	adds	r2, #2
 8008a8a:	f103 010c 	add.w	r1, r3, #12
 8008a8e:	0092      	lsls	r2, r2, #2
 8008a90:	300c      	adds	r0, #12
 8008a92:	f7ff f979 	bl	8007d88 <memcpy>
 8008a96:	aa1c      	add	r2, sp, #112	; 0x70
 8008a98:	a91b      	add	r1, sp, #108	; 0x6c
 8008a9a:	ec4b ab10 	vmov	d0, sl, fp
 8008a9e:	9804      	ldr	r0, [sp, #16]
 8008aa0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008aa4:	f001 fcea 	bl	800a47c <__d2b>
 8008aa8:	901a      	str	r0, [sp, #104]	; 0x68
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	f43f af0e 	beq.w	80088cc <_strtod_l+0x494>
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	9804      	ldr	r0, [sp, #16]
 8008ab4:	f001 fabe 	bl	800a034 <__i2b>
 8008ab8:	4605      	mov	r5, r0
 8008aba:	2800      	cmp	r0, #0
 8008abc:	f43f af06 	beq.w	80088cc <_strtod_l+0x494>
 8008ac0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008ac2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ac4:	2e00      	cmp	r6, #0
 8008ac6:	bfab      	itete	ge
 8008ac8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008aca:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8008acc:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 8008ace:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 8008ad2:	bfac      	ite	ge
 8008ad4:	eb03 0806 	addge.w	r8, r3, r6
 8008ad8:	1b9f      	sublt	r7, r3, r6
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	1af6      	subs	r6, r6, r3
 8008ade:	4416      	add	r6, r2
 8008ae0:	4b63      	ldr	r3, [pc, #396]	; (8008c70 <_strtod_l+0x838>)
 8008ae2:	3e01      	subs	r6, #1
 8008ae4:	429e      	cmp	r6, r3
 8008ae6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008aea:	f280 80a8 	bge.w	8008c3e <_strtod_l+0x806>
 8008aee:	1b9b      	subs	r3, r3, r6
 8008af0:	2b1f      	cmp	r3, #31
 8008af2:	eba2 0203 	sub.w	r2, r2, r3
 8008af6:	f04f 0901 	mov.w	r9, #1
 8008afa:	f300 8094 	bgt.w	8008c26 <_strtod_l+0x7ee>
 8008afe:	fa09 f303 	lsl.w	r3, r9, r3
 8008b02:	9314      	str	r3, [sp, #80]	; 0x50
 8008b04:	2600      	movs	r6, #0
 8008b06:	eb08 0902 	add.w	r9, r8, r2
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	45c8      	cmp	r8, r9
 8008b0e:	4417      	add	r7, r2
 8008b10:	441f      	add	r7, r3
 8008b12:	4643      	mov	r3, r8
 8008b14:	bfa8      	it	ge
 8008b16:	464b      	movge	r3, r9
 8008b18:	42bb      	cmp	r3, r7
 8008b1a:	bfa8      	it	ge
 8008b1c:	463b      	movge	r3, r7
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bfc2      	ittt	gt
 8008b22:	eba9 0903 	subgt.w	r9, r9, r3
 8008b26:	1aff      	subgt	r7, r7, r3
 8008b28:	eba8 0803 	subgt.w	r8, r8, r3
 8008b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b2e:	b1bb      	cbz	r3, 8008b60 <_strtod_l+0x728>
 8008b30:	4629      	mov	r1, r5
 8008b32:	461a      	mov	r2, r3
 8008b34:	9804      	ldr	r0, [sp, #16]
 8008b36:	f001 fb13 	bl	800a160 <__pow5mult>
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	f43f aec5 	beq.w	80088cc <_strtod_l+0x494>
 8008b42:	4601      	mov	r1, r0
 8008b44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b46:	9804      	ldr	r0, [sp, #16]
 8008b48:	f001 fa7d 	bl	800a046 <__multiply>
 8008b4c:	9008      	str	r0, [sp, #32]
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	f43f aebc 	beq.w	80088cc <_strtod_l+0x494>
 8008b54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b56:	9804      	ldr	r0, [sp, #16]
 8008b58:	f001 f98e 	bl	8009e78 <_Bfree>
 8008b5c:	9b08      	ldr	r3, [sp, #32]
 8008b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b60:	f1b9 0f00 	cmp.w	r9, #0
 8008b64:	dc6f      	bgt.n	8008c46 <_strtod_l+0x80e>
 8008b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d175      	bne.n	8008c58 <_strtod_l+0x820>
 8008b6c:	2f00      	cmp	r7, #0
 8008b6e:	dd08      	ble.n	8008b82 <_strtod_l+0x74a>
 8008b70:	463a      	mov	r2, r7
 8008b72:	9906      	ldr	r1, [sp, #24]
 8008b74:	9804      	ldr	r0, [sp, #16]
 8008b76:	f001 fb41 	bl	800a1fc <__lshift>
 8008b7a:	9006      	str	r0, [sp, #24]
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f43f aea5 	beq.w	80088cc <_strtod_l+0x494>
 8008b82:	f1b8 0f00 	cmp.w	r8, #0
 8008b86:	dd08      	ble.n	8008b9a <_strtod_l+0x762>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	9804      	ldr	r0, [sp, #16]
 8008b8e:	f001 fb35 	bl	800a1fc <__lshift>
 8008b92:	4605      	mov	r5, r0
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f43f ae99 	beq.w	80088cc <_strtod_l+0x494>
 8008b9a:	9a06      	ldr	r2, [sp, #24]
 8008b9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b9e:	9804      	ldr	r0, [sp, #16]
 8008ba0:	f001 fb97 	bl	800a2d2 <__mdiff>
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f ae90 	beq.w	80088cc <_strtod_l+0x494>
 8008bac:	68c3      	ldr	r3, [r0, #12]
 8008bae:	9308      	str	r3, [sp, #32]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60c3      	str	r3, [r0, #12]
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f001 fb72 	bl	800a29e <__mcmp>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	da5a      	bge.n	8008c74 <_strtod_l+0x83c>
 8008bbe:	9b08      	ldr	r3, [sp, #32]
 8008bc0:	b9e3      	cbnz	r3, 8008bfc <_strtod_l+0x7c4>
 8008bc2:	f1ba 0f00 	cmp.w	sl, #0
 8008bc6:	d119      	bne.n	8008bfc <_strtod_l+0x7c4>
 8008bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bcc:	b9b3      	cbnz	r3, 8008bfc <_strtod_l+0x7c4>
 8008bce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bd2:	0d1b      	lsrs	r3, r3, #20
 8008bd4:	051b      	lsls	r3, r3, #20
 8008bd6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bda:	d90f      	bls.n	8008bfc <_strtod_l+0x7c4>
 8008bdc:	6963      	ldr	r3, [r4, #20]
 8008bde:	b913      	cbnz	r3, 8008be6 <_strtod_l+0x7ae>
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	dd0a      	ble.n	8008bfc <_strtod_l+0x7c4>
 8008be6:	4621      	mov	r1, r4
 8008be8:	2201      	movs	r2, #1
 8008bea:	9804      	ldr	r0, [sp, #16]
 8008bec:	f001 fb06 	bl	800a1fc <__lshift>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	f001 fb53 	bl	800a29e <__mcmp>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	dc6c      	bgt.n	8008cd6 <_strtod_l+0x89e>
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d176      	bne.n	8008cf0 <_strtod_l+0x8b8>
 8008c02:	e66e      	b.n	80088e2 <_strtod_l+0x4aa>
 8008c04:	07e2      	lsls	r2, r4, #31
 8008c06:	d504      	bpl.n	8008c12 <_strtod_l+0x7da>
 8008c08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c0c:	f7f7 fd00 	bl	8000610 <__aeabi_dmul>
 8008c10:	2301      	movs	r3, #1
 8008c12:	1064      	asrs	r4, r4, #1
 8008c14:	3608      	adds	r6, #8
 8008c16:	e6ec      	b.n	80089f2 <_strtod_l+0x5ba>
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c20:	ea03 0a0a 	and.w	sl, r3, sl
 8008c24:	e705      	b.n	8008a32 <_strtod_l+0x5fa>
 8008c26:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008c2a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008c2e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008c32:	36e2      	adds	r6, #226	; 0xe2
 8008c34:	fa09 f606 	lsl.w	r6, r9, r6
 8008c38:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8008c3c:	e763      	b.n	8008b06 <_strtod_l+0x6ce>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	2600      	movs	r6, #0
 8008c42:	9314      	str	r3, [sp, #80]	; 0x50
 8008c44:	e75f      	b.n	8008b06 <_strtod_l+0x6ce>
 8008c46:	464a      	mov	r2, r9
 8008c48:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c4a:	9804      	ldr	r0, [sp, #16]
 8008c4c:	f001 fad6 	bl	800a1fc <__lshift>
 8008c50:	901a      	str	r0, [sp, #104]	; 0x68
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d187      	bne.n	8008b66 <_strtod_l+0x72e>
 8008c56:	e639      	b.n	80088cc <_strtod_l+0x494>
 8008c58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c5a:	9906      	ldr	r1, [sp, #24]
 8008c5c:	9804      	ldr	r0, [sp, #16]
 8008c5e:	f001 fa7f 	bl	800a160 <__pow5mult>
 8008c62:	9006      	str	r0, [sp, #24]
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d181      	bne.n	8008b6c <_strtod_l+0x734>
 8008c68:	e630      	b.n	80088cc <_strtod_l+0x494>
 8008c6a:	bf00      	nop
 8008c6c:	0800b2a8 	.word	0x0800b2a8
 8008c70:	fffffc02 	.word	0xfffffc02
 8008c74:	f040 8086 	bne.w	8008d84 <_strtod_l+0x94c>
 8008c78:	9a08      	ldr	r2, [sp, #32]
 8008c7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c7e:	b332      	cbz	r2, 8008cce <_strtod_l+0x896>
 8008c80:	4aad      	ldr	r2, [pc, #692]	; (8008f38 <_strtod_l+0xb00>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	4659      	mov	r1, fp
 8008c86:	d152      	bne.n	8008d2e <_strtod_l+0x8f6>
 8008c88:	9b05      	ldr	r3, [sp, #20]
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	b1d3      	cbz	r3, 8008cc4 <_strtod_l+0x88c>
 8008c8e:	4aab      	ldr	r2, [pc, #684]	; (8008f3c <_strtod_l+0xb04>)
 8008c90:	400a      	ands	r2, r1
 8008c92:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c96:	f04f 37ff 	mov.w	r7, #4294967295
 8008c9a:	d816      	bhi.n	8008cca <_strtod_l+0x892>
 8008c9c:	0d12      	lsrs	r2, r2, #20
 8008c9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ca2:	fa07 f303 	lsl.w	r3, r7, r3
 8008ca6:	4283      	cmp	r3, r0
 8008ca8:	d141      	bne.n	8008d2e <_strtod_l+0x8f6>
 8008caa:	4aa5      	ldr	r2, [pc, #660]	; (8008f40 <_strtod_l+0xb08>)
 8008cac:	4291      	cmp	r1, r2
 8008cae:	d102      	bne.n	8008cb6 <_strtod_l+0x87e>
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	f43f ae0b 	beq.w	80088cc <_strtod_l+0x494>
 8008cb6:	4ba1      	ldr	r3, [pc, #644]	; (8008f3c <_strtod_l+0xb04>)
 8008cb8:	400b      	ands	r3, r1
 8008cba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008cbe:	f04f 0a00 	mov.w	sl, #0
 8008cc2:	e79b      	b.n	8008bfc <_strtod_l+0x7c4>
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	e7ed      	b.n	8008ca6 <_strtod_l+0x86e>
 8008cca:	463b      	mov	r3, r7
 8008ccc:	e7eb      	b.n	8008ca6 <_strtod_l+0x86e>
 8008cce:	bb73      	cbnz	r3, 8008d2e <_strtod_l+0x8f6>
 8008cd0:	f1ba 0f00 	cmp.w	sl, #0
 8008cd4:	d12b      	bne.n	8008d2e <_strtod_l+0x8f6>
 8008cd6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cda:	9a05      	ldr	r2, [sp, #20]
 8008cdc:	0d1b      	lsrs	r3, r3, #20
 8008cde:	051b      	lsls	r3, r3, #20
 8008ce0:	b1e2      	cbz	r2, 8008d1c <_strtod_l+0x8e4>
 8008ce2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008ce6:	dc19      	bgt.n	8008d1c <_strtod_l+0x8e4>
 8008ce8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8008cec:	f77f ae5f 	ble.w	80089ae <_strtod_l+0x576>
 8008cf0:	4b94      	ldr	r3, [pc, #592]	; (8008f44 <_strtod_l+0xb0c>)
 8008cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	4659      	mov	r1, fp
 8008cfc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d00:	f7f7 fc86 	bl	8000610 <__aeabi_dmul>
 8008d04:	4682      	mov	sl, r0
 8008d06:	468b      	mov	fp, r1
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	f47f adea 	bne.w	80088e2 <_strtod_l+0x4aa>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f47f ade7 	bne.w	80088e2 <_strtod_l+0x4aa>
 8008d14:	9a04      	ldr	r2, [sp, #16]
 8008d16:	2322      	movs	r3, #34	; 0x22
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	e5e2      	b.n	80088e2 <_strtod_l+0x4aa>
 8008d1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d20:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d24:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d28:	f04f 3aff 	mov.w	sl, #4294967295
 8008d2c:	e766      	b.n	8008bfc <_strtod_l+0x7c4>
 8008d2e:	b19e      	cbz	r6, 8008d58 <_strtod_l+0x920>
 8008d30:	ea16 0f0b 	tst.w	r6, fp
 8008d34:	f43f af62 	beq.w	8008bfc <_strtod_l+0x7c4>
 8008d38:	9b08      	ldr	r3, [sp, #32]
 8008d3a:	9a05      	ldr	r2, [sp, #20]
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	4659      	mov	r1, fp
 8008d40:	b173      	cbz	r3, 8008d60 <_strtod_l+0x928>
 8008d42:	f7ff fb5b 	bl	80083fc <sulp>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d4e:	f7f7 faad 	bl	80002ac <__adddf3>
 8008d52:	4682      	mov	sl, r0
 8008d54:	468b      	mov	fp, r1
 8008d56:	e751      	b.n	8008bfc <_strtod_l+0x7c4>
 8008d58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d5a:	ea13 0f0a 	tst.w	r3, sl
 8008d5e:	e7e9      	b.n	8008d34 <_strtod_l+0x8fc>
 8008d60:	f7ff fb4c 	bl	80083fc <sulp>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d6c:	f7f7 fa9c 	bl	80002a8 <__aeabi_dsub>
 8008d70:	2200      	movs	r2, #0
 8008d72:	2300      	movs	r3, #0
 8008d74:	4682      	mov	sl, r0
 8008d76:	468b      	mov	fp, r1
 8008d78:	f7f7 feb2 	bl	8000ae0 <__aeabi_dcmpeq>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f47f ae16 	bne.w	80089ae <_strtod_l+0x576>
 8008d82:	e73b      	b.n	8008bfc <_strtod_l+0x7c4>
 8008d84:	4629      	mov	r1, r5
 8008d86:	4620      	mov	r0, r4
 8008d88:	f001 fbc7 	bl	800a51a <__ratio>
 8008d8c:	ec57 6b10 	vmov	r6, r7, d0
 8008d90:	2200      	movs	r2, #0
 8008d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d96:	ee10 0a10 	vmov	r0, s0
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 feb4 	bl	8000b08 <__aeabi_dcmple>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d074      	beq.n	8008e8e <_strtod_l+0xa56>
 8008da4:	9b08      	ldr	r3, [sp, #32]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d046      	beq.n	8008e38 <_strtod_l+0xa00>
 8008daa:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8008f48 <_strtod_l+0xb10>
 8008dae:	f04f 0800 	mov.w	r8, #0
 8008db2:	4f65      	ldr	r7, [pc, #404]	; (8008f48 <_strtod_l+0xb10>)
 8008db4:	2600      	movs	r6, #0
 8008db6:	4b61      	ldr	r3, [pc, #388]	; (8008f3c <_strtod_l+0xb04>)
 8008db8:	ea0b 0303 	and.w	r3, fp, r3
 8008dbc:	9314      	str	r3, [sp, #80]	; 0x50
 8008dbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dc0:	4b62      	ldr	r3, [pc, #392]	; (8008f4c <_strtod_l+0xb14>)
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	f040 80ca 	bne.w	8008f5c <_strtod_l+0xb24>
 8008dc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dcc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008dd0:	ec4b ab10 	vmov	d0, sl, fp
 8008dd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008dd8:	f001 fada 	bl	800a390 <__ulp>
 8008ddc:	4640      	mov	r0, r8
 8008dde:	ec53 2b10 	vmov	r2, r3, d0
 8008de2:	4649      	mov	r1, r9
 8008de4:	f7f7 fc14 	bl	8000610 <__aeabi_dmul>
 8008de8:	4652      	mov	r2, sl
 8008dea:	465b      	mov	r3, fp
 8008dec:	f7f7 fa5e 	bl	80002ac <__adddf3>
 8008df0:	4a52      	ldr	r2, [pc, #328]	; (8008f3c <_strtod_l+0xb04>)
 8008df2:	4b57      	ldr	r3, [pc, #348]	; (8008f50 <_strtod_l+0xb18>)
 8008df4:	400a      	ands	r2, r1
 8008df6:	429a      	cmp	r2, r3
 8008df8:	4682      	mov	sl, r0
 8008dfa:	d95c      	bls.n	8008eb6 <_strtod_l+0xa7e>
 8008dfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dfe:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d103      	bne.n	8008e0e <_strtod_l+0x9d6>
 8008e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e08:	3301      	adds	r3, #1
 8008e0a:	f43f ad5f 	beq.w	80088cc <_strtod_l+0x494>
 8008e0e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8008f40 <_strtod_l+0xb08>
 8008e12:	f04f 3aff 	mov.w	sl, #4294967295
 8008e16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e18:	9804      	ldr	r0, [sp, #16]
 8008e1a:	f001 f82d 	bl	8009e78 <_Bfree>
 8008e1e:	9906      	ldr	r1, [sp, #24]
 8008e20:	9804      	ldr	r0, [sp, #16]
 8008e22:	f001 f829 	bl	8009e78 <_Bfree>
 8008e26:	4629      	mov	r1, r5
 8008e28:	9804      	ldr	r0, [sp, #16]
 8008e2a:	f001 f825 	bl	8009e78 <_Bfree>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	9804      	ldr	r0, [sp, #16]
 8008e32:	f001 f821 	bl	8009e78 <_Bfree>
 8008e36:	e61c      	b.n	8008a72 <_strtod_l+0x63a>
 8008e38:	f1ba 0f00 	cmp.w	sl, #0
 8008e3c:	d118      	bne.n	8008e70 <_strtod_l+0xa38>
 8008e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e42:	b9e3      	cbnz	r3, 8008e7e <_strtod_l+0xa46>
 8008e44:	2200      	movs	r2, #0
 8008e46:	4b40      	ldr	r3, [pc, #256]	; (8008f48 <_strtod_l+0xb10>)
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe52 	bl	8000af4 <__aeabi_dcmplt>
 8008e50:	b9d0      	cbnz	r0, 8008e88 <_strtod_l+0xa50>
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	2200      	movs	r2, #0
 8008e58:	4b3e      	ldr	r3, [pc, #248]	; (8008f54 <_strtod_l+0xb1c>)
 8008e5a:	f7f7 fbd9 	bl	8000610 <__aeabi_dmul>
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008e66:	9616      	str	r6, [sp, #88]	; 0x58
 8008e68:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e6a:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8008e6e:	e7a2      	b.n	8008db6 <_strtod_l+0x97e>
 8008e70:	f1ba 0f01 	cmp.w	sl, #1
 8008e74:	d103      	bne.n	8008e7e <_strtod_l+0xa46>
 8008e76:	f1bb 0f00 	cmp.w	fp, #0
 8008e7a:	f43f ad98 	beq.w	80089ae <_strtod_l+0x576>
 8008e7e:	f04f 0800 	mov.w	r8, #0
 8008e82:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8008f58 <_strtod_l+0xb20>
 8008e86:	e794      	b.n	8008db2 <_strtod_l+0x97a>
 8008e88:	2600      	movs	r6, #0
 8008e8a:	4f32      	ldr	r7, [pc, #200]	; (8008f54 <_strtod_l+0xb1c>)
 8008e8c:	e7e9      	b.n	8008e62 <_strtod_l+0xa2a>
 8008e8e:	4b31      	ldr	r3, [pc, #196]	; (8008f54 <_strtod_l+0xb1c>)
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	2200      	movs	r2, #0
 8008e96:	f7f7 fbbb 	bl	8000610 <__aeabi_dmul>
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	460f      	mov	r7, r1
 8008ea0:	b933      	cbnz	r3, 8008eb0 <_strtod_l+0xa78>
 8008ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ea6:	9010      	str	r0, [sp, #64]	; 0x40
 8008ea8:	9311      	str	r3, [sp, #68]	; 0x44
 8008eaa:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008eae:	e782      	b.n	8008db6 <_strtod_l+0x97e>
 8008eb0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008eb4:	e7f9      	b.n	8008eaa <_strtod_l+0xa72>
 8008eb6:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8008eba:	9b05      	ldr	r3, [sp, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1aa      	bne.n	8008e16 <_strtod_l+0x9de>
 8008ec0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ec4:	0d1b      	lsrs	r3, r3, #20
 8008ec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ec8:	051b      	lsls	r3, r3, #20
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	46d8      	mov	r8, fp
 8008ece:	d1a2      	bne.n	8008e16 <_strtod_l+0x9de>
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7f7 fe36 	bl	8000b44 <__aeabi_d2iz>
 8008ed8:	f7f7 fb34 	bl	8000544 <__aeabi_i2d>
 8008edc:	460b      	mov	r3, r1
 8008ede:	4602      	mov	r2, r0
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7f7 f9e0 	bl	80002a8 <__aeabi_dsub>
 8008ee8:	9b08      	ldr	r3, [sp, #32]
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	b933      	cbnz	r3, 8008efe <_strtod_l+0xac6>
 8008ef0:	f1ba 0f00 	cmp.w	sl, #0
 8008ef4:	d103      	bne.n	8008efe <_strtod_l+0xac6>
 8008ef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d068      	beq.n	8008fd0 <_strtod_l+0xb98>
 8008efe:	a30a      	add	r3, pc, #40	; (adr r3, 8008f28 <_strtod_l+0xaf0>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fdf4 	bl	8000af4 <__aeabi_dcmplt>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f47f ace8 	bne.w	80088e2 <_strtod_l+0x4aa>
 8008f12:	a307      	add	r3, pc, #28	; (adr r3, 8008f30 <_strtod_l+0xaf8>)
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	4630      	mov	r0, r6
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 fe08 	bl	8000b30 <__aeabi_dcmpgt>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f43f af78 	beq.w	8008e16 <_strtod_l+0x9de>
 8008f26:	e4dc      	b.n	80088e2 <_strtod_l+0x4aa>
 8008f28:	94a03595 	.word	0x94a03595
 8008f2c:	3fdfffff 	.word	0x3fdfffff
 8008f30:	35afe535 	.word	0x35afe535
 8008f34:	3fe00000 	.word	0x3fe00000
 8008f38:	000fffff 	.word	0x000fffff
 8008f3c:	7ff00000 	.word	0x7ff00000
 8008f40:	7fefffff 	.word	0x7fefffff
 8008f44:	39500000 	.word	0x39500000
 8008f48:	3ff00000 	.word	0x3ff00000
 8008f4c:	7fe00000 	.word	0x7fe00000
 8008f50:	7c9fffff 	.word	0x7c9fffff
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	bff00000 	.word	0xbff00000
 8008f5c:	9b05      	ldr	r3, [sp, #20]
 8008f5e:	b31b      	cbz	r3, 8008fa8 <_strtod_l+0xb70>
 8008f60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f66:	d81f      	bhi.n	8008fa8 <_strtod_l+0xb70>
 8008f68:	a325      	add	r3, pc, #148	; (adr r3, 8009000 <_strtod_l+0xbc8>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	f7f7 fdc9 	bl	8000b08 <__aeabi_dcmple>
 8008f76:	b190      	cbz	r0, 8008f9e <_strtod_l+0xb66>
 8008f78:	4639      	mov	r1, r7
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7f7 fe0a 	bl	8000b94 <__aeabi_d2uiz>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	bf08      	it	eq
 8008f84:	2001      	moveq	r0, #1
 8008f86:	f7f7 facd 	bl	8000524 <__aeabi_ui2d>
 8008f8a:	9b08      	ldr	r3, [sp, #32]
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	b9db      	cbnz	r3, 8008fca <_strtod_l+0xb92>
 8008f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f96:	9012      	str	r0, [sp, #72]	; 0x48
 8008f98:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f9a:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8008f9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fa0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 8008fa4:	eba3 0902 	sub.w	r9, r3, r2
 8008fa8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008fac:	f001 f9f0 	bl	800a390 <__ulp>
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	ec53 2b10 	vmov	r2, r3, d0
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 fb2a 	bl	8000610 <__aeabi_dmul>
 8008fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fc0:	f7f7 f974 	bl	80002ac <__adddf3>
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	468b      	mov	fp, r1
 8008fc8:	e777      	b.n	8008eba <_strtod_l+0xa82>
 8008fca:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008fce:	e7e4      	b.n	8008f9a <_strtod_l+0xb62>
 8008fd0:	a30d      	add	r3, pc, #52	; (adr r3, 8009008 <_strtod_l+0xbd0>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 fd8d 	bl	8000af4 <__aeabi_dcmplt>
 8008fda:	e7a1      	b.n	8008f20 <_strtod_l+0xae8>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe4:	6013      	str	r3, [r2, #0]
 8008fe6:	f7ff ba6b 	b.w	80084c0 <_strtod_l+0x88>
 8008fea:	2b65      	cmp	r3, #101	; 0x65
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	f43f abb6 	beq.w	8008760 <_strtod_l+0x328>
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	f7ff badc 	b.w	80085b4 <_strtod_l+0x17c>
 8008ffc:	f3af 8000 	nop.w
 8009000:	ffc00000 	.word	0xffc00000
 8009004:	41dfffff 	.word	0x41dfffff
 8009008:	94a03595 	.word	0x94a03595
 800900c:	3fcfffff 	.word	0x3fcfffff

08009010 <strtod>:
 8009010:	4b07      	ldr	r3, [pc, #28]	; (8009030 <strtod+0x20>)
 8009012:	4a08      	ldr	r2, [pc, #32]	; (8009034 <strtod+0x24>)
 8009014:	b410      	push	{r4}
 8009016:	681c      	ldr	r4, [r3, #0]
 8009018:	6a23      	ldr	r3, [r4, #32]
 800901a:	2b00      	cmp	r3, #0
 800901c:	bf08      	it	eq
 800901e:	4613      	moveq	r3, r2
 8009020:	460a      	mov	r2, r1
 8009022:	4601      	mov	r1, r0
 8009024:	4620      	mov	r0, r4
 8009026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800902a:	f7ff ba05 	b.w	8008438 <_strtod_l>
 800902e:	bf00      	nop
 8009030:	20000010 	.word	0x20000010
 8009034:	200000bc 	.word	0x200000bc

08009038 <strtok>:
 8009038:	4b13      	ldr	r3, [pc, #76]	; (8009088 <strtok+0x50>)
 800903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903e:	681d      	ldr	r5, [r3, #0]
 8009040:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	b9b4      	cbnz	r4, 8009076 <strtok+0x3e>
 8009048:	2050      	movs	r0, #80	; 0x50
 800904a:	f7fe fe8d 	bl	8007d68 <malloc>
 800904e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009050:	6004      	str	r4, [r0, #0]
 8009052:	6044      	str	r4, [r0, #4]
 8009054:	6084      	str	r4, [r0, #8]
 8009056:	60c4      	str	r4, [r0, #12]
 8009058:	6104      	str	r4, [r0, #16]
 800905a:	6144      	str	r4, [r0, #20]
 800905c:	6184      	str	r4, [r0, #24]
 800905e:	6284      	str	r4, [r0, #40]	; 0x28
 8009060:	62c4      	str	r4, [r0, #44]	; 0x2c
 8009062:	6304      	str	r4, [r0, #48]	; 0x30
 8009064:	6344      	str	r4, [r0, #52]	; 0x34
 8009066:	6384      	str	r4, [r0, #56]	; 0x38
 8009068:	63c4      	str	r4, [r0, #60]	; 0x3c
 800906a:	6404      	str	r4, [r0, #64]	; 0x40
 800906c:	6444      	str	r4, [r0, #68]	; 0x44
 800906e:	6484      	str	r4, [r0, #72]	; 0x48
 8009070:	64c4      	str	r4, [r0, #76]	; 0x4c
 8009072:	7704      	strb	r4, [r0, #28]
 8009074:	6244      	str	r4, [r0, #36]	; 0x24
 8009076:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009078:	4639      	mov	r1, r7
 800907a:	4630      	mov	r0, r6
 800907c:	2301      	movs	r3, #1
 800907e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	f000 b803 	b.w	800908c <__strtok_r>
 8009086:	bf00      	nop
 8009088:	20000010 	.word	0x20000010

0800908c <__strtok_r>:
 800908c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800908e:	b918      	cbnz	r0, 8009098 <__strtok_r+0xc>
 8009090:	6810      	ldr	r0, [r2, #0]
 8009092:	b908      	cbnz	r0, 8009098 <__strtok_r+0xc>
 8009094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009096:	4620      	mov	r0, r4
 8009098:	4604      	mov	r4, r0
 800909a:	460f      	mov	r7, r1
 800909c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80090a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80090a4:	b91e      	cbnz	r6, 80090ae <__strtok_r+0x22>
 80090a6:	b965      	cbnz	r5, 80090c2 <__strtok_r+0x36>
 80090a8:	6015      	str	r5, [r2, #0]
 80090aa:	4628      	mov	r0, r5
 80090ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ae:	42b5      	cmp	r5, r6
 80090b0:	d1f6      	bne.n	80090a0 <__strtok_r+0x14>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1ef      	bne.n	8009096 <__strtok_r+0xa>
 80090b6:	6014      	str	r4, [r2, #0]
 80090b8:	7003      	strb	r3, [r0, #0]
 80090ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090bc:	461c      	mov	r4, r3
 80090be:	e00c      	b.n	80090da <__strtok_r+0x4e>
 80090c0:	b915      	cbnz	r5, 80090c8 <__strtok_r+0x3c>
 80090c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090c6:	460e      	mov	r6, r1
 80090c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	d1f7      	bne.n	80090c0 <__strtok_r+0x34>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0f3      	beq.n	80090bc <__strtok_r+0x30>
 80090d4:	2300      	movs	r3, #0
 80090d6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80090da:	6014      	str	r4, [r2, #0]
 80090dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080090e0 <time>:
 80090e0:	b513      	push	{r0, r1, r4, lr}
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <time+0x24>)
 80090e4:	4604      	mov	r4, r0
 80090e6:	2200      	movs	r2, #0
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	4669      	mov	r1, sp
 80090ec:	f000 fdb8 	bl	8009c60 <_gettimeofday_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	bfbc      	itt	lt
 80090f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090f8:	9300      	strlt	r3, [sp, #0]
 80090fa:	9800      	ldr	r0, [sp, #0]
 80090fc:	b104      	cbz	r4, 8009100 <time+0x20>
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	b002      	add	sp, #8
 8009102:	bd10      	pop	{r4, pc}
 8009104:	20000010 	.word	0x20000010

08009108 <__tzcalc_limits>:
 8009108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	f000 fdb9 	bl	8009c84 <__gettzinfo>
 8009112:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009116:	429c      	cmp	r4, r3
 8009118:	f340 8098 	ble.w	800924c <__tzcalc_limits+0x144>
 800911c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8009120:	18e3      	adds	r3, r4, r3
 8009122:	109b      	asrs	r3, r3, #2
 8009124:	f240 126d 	movw	r2, #365	; 0x16d
 8009128:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 800912c:	fb02 3505 	mla	r5, r2, r5, r3
 8009130:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009134:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8009138:	fb93 f3f2 	sdiv	r3, r3, r2
 800913c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009140:	441d      	add	r5, r3
 8009142:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009146:	18a2      	adds	r2, r4, r2
 8009148:	fb94 f7f3 	sdiv	r7, r4, r3
 800914c:	fb92 f2f3 	sdiv	r2, r2, r3
 8009150:	fb03 4717 	mls	r7, r3, r7, r4
 8009154:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8009158:	4415      	add	r5, r2
 800915a:	fab7 fe87 	clz	lr, r7
 800915e:	2264      	movs	r2, #100	; 0x64
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f004 0303 	and.w	r3, r4, #3
 8009166:	fb94 f6f2 	sdiv	r6, r4, r2
 800916a:	6044      	str	r4, [r0, #4]
 800916c:	fb02 4616 	mls	r6, r2, r6, r4
 8009170:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8009174:	4601      	mov	r1, r0
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800917c:	7a0b      	ldrb	r3, [r1, #8]
 800917e:	2b4a      	cmp	r3, #74	; 0x4a
 8009180:	d123      	bne.n	80091ca <__tzcalc_limits+0xc2>
 8009182:	694c      	ldr	r4, [r1, #20]
 8009184:	9a00      	ldr	r2, [sp, #0]
 8009186:	192b      	adds	r3, r5, r4
 8009188:	b902      	cbnz	r2, 800918c <__tzcalc_limits+0x84>
 800918a:	b906      	cbnz	r6, 800918e <__tzcalc_limits+0x86>
 800918c:	b9df      	cbnz	r7, 80091c6 <__tzcalc_limits+0xbe>
 800918e:	2c3b      	cmp	r4, #59	; 0x3b
 8009190:	bfd4      	ite	le
 8009192:	2400      	movle	r4, #0
 8009194:	2401      	movgt	r4, #1
 8009196:	441c      	add	r4, r3
 8009198:	3c01      	subs	r4, #1
 800919a:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <__tzcalc_limits+0x148>)
 800919c:	698a      	ldr	r2, [r1, #24]
 800919e:	fb03 2404 	mla	r4, r3, r4, r2
 80091a2:	6a0b      	ldr	r3, [r1, #32]
 80091a4:	441c      	add	r4, r3
 80091a6:	f841 4f1c 	str.w	r4, [r1, #28]!
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	428b      	cmp	r3, r1
 80091ae:	d1e5      	bne.n	800917c <__tzcalc_limits+0x74>
 80091b0:	69c3      	ldr	r3, [r0, #28]
 80091b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80091b4:	4293      	cmp	r3, r2
 80091b6:	bfac      	ite	ge
 80091b8:	2300      	movge	r3, #0
 80091ba:	2301      	movlt	r3, #1
 80091bc:	6003      	str	r3, [r0, #0]
 80091be:	2001      	movs	r0, #1
 80091c0:	b003      	add	sp, #12
 80091c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c6:	2400      	movs	r4, #0
 80091c8:	e7e5      	b.n	8009196 <__tzcalc_limits+0x8e>
 80091ca:	2b44      	cmp	r3, #68	; 0x44
 80091cc:	d102      	bne.n	80091d4 <__tzcalc_limits+0xcc>
 80091ce:	694b      	ldr	r3, [r1, #20]
 80091d0:	18ec      	adds	r4, r5, r3
 80091d2:	e7e2      	b.n	800919a <__tzcalc_limits+0x92>
 80091d4:	9b00      	ldr	r3, [sp, #0]
 80091d6:	bb7b      	cbnz	r3, 8009238 <__tzcalc_limits+0x130>
 80091d8:	2e00      	cmp	r6, #0
 80091da:	bf0c      	ite	eq
 80091dc:	46f0      	moveq	r8, lr
 80091de:	f04f 0801 	movne.w	r8, #1
 80091e2:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <__tzcalc_limits+0x14c>)
 80091e4:	68cc      	ldr	r4, [r1, #12]
 80091e6:	2230      	movs	r2, #48	; 0x30
 80091e8:	fb02 3808 	mla	r8, r2, r8, r3
 80091ec:	f1a8 0a04 	sub.w	sl, r8, #4
 80091f0:	462b      	mov	r3, r5
 80091f2:	f04f 0901 	mov.w	r9, #1
 80091f6:	45a1      	cmp	r9, r4
 80091f8:	db20      	blt.n	800923c <__tzcalc_limits+0x134>
 80091fa:	2c01      	cmp	r4, #1
 80091fc:	bfb8      	it	lt
 80091fe:	2401      	movlt	r4, #1
 8009200:	46a1      	mov	r9, r4
 8009202:	f103 0b04 	add.w	fp, r3, #4
 8009206:	2207      	movs	r2, #7
 8009208:	694c      	ldr	r4, [r1, #20]
 800920a:	fb9b faf2 	sdiv	sl, fp, r2
 800920e:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8009212:	ebab 0a0a 	sub.w	sl, fp, sl
 8009216:	ebb4 0a0a 	subs.w	sl, r4, sl
 800921a:	690c      	ldr	r4, [r1, #16]
 800921c:	44e1      	add	r9, ip
 800921e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009222:	bf48      	it	mi
 8009224:	4492      	addmi	sl, r2
 8009226:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800922a:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800922e:	4454      	add	r4, sl
 8009230:	4544      	cmp	r4, r8
 8009232:	da09      	bge.n	8009248 <__tzcalc_limits+0x140>
 8009234:	441c      	add	r4, r3
 8009236:	e7b0      	b.n	800919a <__tzcalc_limits+0x92>
 8009238:	46f0      	mov	r8, lr
 800923a:	e7d2      	b.n	80091e2 <__tzcalc_limits+0xda>
 800923c:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8009240:	f109 0901 	add.w	r9, r9, #1
 8009244:	445b      	add	r3, fp
 8009246:	e7d6      	b.n	80091f6 <__tzcalc_limits+0xee>
 8009248:	3c07      	subs	r4, #7
 800924a:	e7f1      	b.n	8009230 <__tzcalc_limits+0x128>
 800924c:	2000      	movs	r0, #0
 800924e:	e7b7      	b.n	80091c0 <__tzcalc_limits+0xb8>
 8009250:	00015180 	.word	0x00015180
 8009254:	0800b214 	.word	0x0800b214

08009258 <__tz_lock>:
 8009258:	4770      	bx	lr

0800925a <__tz_unlock>:
 800925a:	4770      	bx	lr

0800925c <_tzset_unlocked>:
 800925c:	4b01      	ldr	r3, [pc, #4]	; (8009264 <_tzset_unlocked+0x8>)
 800925e:	6818      	ldr	r0, [r3, #0]
 8009260:	f000 b802 	b.w	8009268 <_tzset_unlocked_r>
 8009264:	20000010 	.word	0x20000010

08009268 <_tzset_unlocked_r>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	b08d      	sub	sp, #52	; 0x34
 800926e:	4607      	mov	r7, r0
 8009270:	f000 fd08 	bl	8009c84 <__gettzinfo>
 8009274:	49b1      	ldr	r1, [pc, #708]	; (800953c <_tzset_unlocked_r+0x2d4>)
 8009276:	4eb2      	ldr	r6, [pc, #712]	; (8009540 <_tzset_unlocked_r+0x2d8>)
 8009278:	4605      	mov	r5, r0
 800927a:	4638      	mov	r0, r7
 800927c:	f000 fce8 	bl	8009c50 <_getenv_r>
 8009280:	4604      	mov	r4, r0
 8009282:	b970      	cbnz	r0, 80092a2 <_tzset_unlocked_r+0x3a>
 8009284:	4baf      	ldr	r3, [pc, #700]	; (8009544 <_tzset_unlocked_r+0x2dc>)
 8009286:	4ab0      	ldr	r2, [pc, #704]	; (8009548 <_tzset_unlocked_r+0x2e0>)
 8009288:	6018      	str	r0, [r3, #0]
 800928a:	4bb0      	ldr	r3, [pc, #704]	; (800954c <_tzset_unlocked_r+0x2e4>)
 800928c:	6018      	str	r0, [r3, #0]
 800928e:	4bb0      	ldr	r3, [pc, #704]	; (8009550 <_tzset_unlocked_r+0x2e8>)
 8009290:	6830      	ldr	r0, [r6, #0]
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	f7fe fd6f 	bl	8007d78 <free>
 800929a:	6034      	str	r4, [r6, #0]
 800929c:	b00d      	add	sp, #52	; 0x34
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	6831      	ldr	r1, [r6, #0]
 80092a4:	2900      	cmp	r1, #0
 80092a6:	d160      	bne.n	800936a <_tzset_unlocked_r+0x102>
 80092a8:	6830      	ldr	r0, [r6, #0]
 80092aa:	f7fe fd65 	bl	8007d78 <free>
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7f6 ff98 	bl	80001e4 <strlen>
 80092b4:	1c41      	adds	r1, r0, #1
 80092b6:	4638      	mov	r0, r7
 80092b8:	f7ff f824 	bl	8008304 <_malloc_r>
 80092bc:	6030      	str	r0, [r6, #0]
 80092be:	2800      	cmp	r0, #0
 80092c0:	d158      	bne.n	8009374 <_tzset_unlocked_r+0x10c>
 80092c2:	7823      	ldrb	r3, [r4, #0]
 80092c4:	4aa3      	ldr	r2, [pc, #652]	; (8009554 <_tzset_unlocked_r+0x2ec>)
 80092c6:	49a4      	ldr	r1, [pc, #656]	; (8009558 <_tzset_unlocked_r+0x2f0>)
 80092c8:	2b3a      	cmp	r3, #58	; 0x3a
 80092ca:	bf08      	it	eq
 80092cc:	3401      	addeq	r4, #1
 80092ce:	ae0a      	add	r6, sp, #40	; 0x28
 80092d0:	4633      	mov	r3, r6
 80092d2:	4620      	mov	r0, r4
 80092d4:	f001 f996 	bl	800a604 <siscanf>
 80092d8:	2800      	cmp	r0, #0
 80092da:	dddf      	ble.n	800929c <_tzset_unlocked_r+0x34>
 80092dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092de:	18e7      	adds	r7, r4, r3
 80092e0:	5ce3      	ldrb	r3, [r4, r3]
 80092e2:	2b2d      	cmp	r3, #45	; 0x2d
 80092e4:	d14a      	bne.n	800937c <_tzset_unlocked_r+0x114>
 80092e6:	3701      	adds	r7, #1
 80092e8:	f04f 34ff 	mov.w	r4, #4294967295
 80092ec:	f10d 0a20 	add.w	sl, sp, #32
 80092f0:	f10d 0b1e 	add.w	fp, sp, #30
 80092f4:	f04f 0800 	mov.w	r8, #0
 80092f8:	9603      	str	r6, [sp, #12]
 80092fa:	f8cd a008 	str.w	sl, [sp, #8]
 80092fe:	9601      	str	r6, [sp, #4]
 8009300:	f8cd b000 	str.w	fp, [sp]
 8009304:	4633      	mov	r3, r6
 8009306:	aa07      	add	r2, sp, #28
 8009308:	4994      	ldr	r1, [pc, #592]	; (800955c <_tzset_unlocked_r+0x2f4>)
 800930a:	f8ad 801e 	strh.w	r8, [sp, #30]
 800930e:	4638      	mov	r0, r7
 8009310:	f8ad 8020 	strh.w	r8, [sp, #32]
 8009314:	f001 f976 	bl	800a604 <siscanf>
 8009318:	4540      	cmp	r0, r8
 800931a:	ddbf      	ble.n	800929c <_tzset_unlocked_r+0x34>
 800931c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009320:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009324:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009568 <_tzset_unlocked_r+0x300>
 8009328:	213c      	movs	r1, #60	; 0x3c
 800932a:	fb01 2203 	mla	r2, r1, r3, r2
 800932e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009332:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009336:	fb01 2303 	mla	r3, r1, r3, r2
 800933a:	435c      	muls	r4, r3
 800933c:	622c      	str	r4, [r5, #32]
 800933e:	4c84      	ldr	r4, [pc, #528]	; (8009550 <_tzset_unlocked_r+0x2e8>)
 8009340:	4b84      	ldr	r3, [pc, #528]	; (8009554 <_tzset_unlocked_r+0x2ec>)
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009346:	4984      	ldr	r1, [pc, #528]	; (8009558 <_tzset_unlocked_r+0x2f0>)
 8009348:	441f      	add	r7, r3
 800934a:	464a      	mov	r2, r9
 800934c:	4633      	mov	r3, r6
 800934e:	4638      	mov	r0, r7
 8009350:	f001 f958 	bl	800a604 <siscanf>
 8009354:	4540      	cmp	r0, r8
 8009356:	dc16      	bgt.n	8009386 <_tzset_unlocked_r+0x11e>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	6063      	str	r3, [r4, #4]
 800935c:	4b79      	ldr	r3, [pc, #484]	; (8009544 <_tzset_unlocked_r+0x2dc>)
 800935e:	6a2a      	ldr	r2, [r5, #32]
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	4b7a      	ldr	r3, [pc, #488]	; (800954c <_tzset_unlocked_r+0x2e4>)
 8009364:	f8c3 8000 	str.w	r8, [r3]
 8009368:	e798      	b.n	800929c <_tzset_unlocked_r+0x34>
 800936a:	f7f6 ff31 	bl	80001d0 <strcmp>
 800936e:	2800      	cmp	r0, #0
 8009370:	d094      	beq.n	800929c <_tzset_unlocked_r+0x34>
 8009372:	e799      	b.n	80092a8 <_tzset_unlocked_r+0x40>
 8009374:	4621      	mov	r1, r4
 8009376:	f001 f971 	bl	800a65c <strcpy>
 800937a:	e7a2      	b.n	80092c2 <_tzset_unlocked_r+0x5a>
 800937c:	2b2b      	cmp	r3, #43	; 0x2b
 800937e:	bf08      	it	eq
 8009380:	3701      	addeq	r7, #1
 8009382:	2401      	movs	r4, #1
 8009384:	e7b2      	b.n	80092ec <_tzset_unlocked_r+0x84>
 8009386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009388:	f8c4 9004 	str.w	r9, [r4, #4]
 800938c:	18fc      	adds	r4, r7, r3
 800938e:	5cfb      	ldrb	r3, [r7, r3]
 8009390:	2b2d      	cmp	r3, #45	; 0x2d
 8009392:	f040 8092 	bne.w	80094ba <_tzset_unlocked_r+0x252>
 8009396:	3401      	adds	r4, #1
 8009398:	f04f 37ff 	mov.w	r7, #4294967295
 800939c:	2300      	movs	r3, #0
 800939e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80093a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80093a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80093aa:	930a      	str	r3, [sp, #40]	; 0x28
 80093ac:	9603      	str	r6, [sp, #12]
 80093ae:	f8cd a008 	str.w	sl, [sp, #8]
 80093b2:	9601      	str	r6, [sp, #4]
 80093b4:	f8cd b000 	str.w	fp, [sp]
 80093b8:	4633      	mov	r3, r6
 80093ba:	aa07      	add	r2, sp, #28
 80093bc:	4967      	ldr	r1, [pc, #412]	; (800955c <_tzset_unlocked_r+0x2f4>)
 80093be:	4620      	mov	r0, r4
 80093c0:	f001 f920 	bl	800a604 <siscanf>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dc7d      	bgt.n	80094c4 <_tzset_unlocked_r+0x25c>
 80093c8:	6a2b      	ldr	r3, [r5, #32]
 80093ca:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80093ce:	63eb      	str	r3, [r5, #60]	; 0x3c
 80093d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d2:	462f      	mov	r7, r5
 80093d4:	441c      	add	r4, r3
 80093d6:	f04f 0900 	mov.w	r9, #0
 80093da:	7823      	ldrb	r3, [r4, #0]
 80093dc:	2b2c      	cmp	r3, #44	; 0x2c
 80093de:	bf08      	it	eq
 80093e0:	3401      	addeq	r4, #1
 80093e2:	f894 8000 	ldrb.w	r8, [r4]
 80093e6:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80093ea:	d17b      	bne.n	80094e4 <_tzset_unlocked_r+0x27c>
 80093ec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80093f0:	9302      	str	r3, [sp, #8]
 80093f2:	ab09      	add	r3, sp, #36	; 0x24
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	9603      	str	r6, [sp, #12]
 80093f8:	9601      	str	r6, [sp, #4]
 80093fa:	4633      	mov	r3, r6
 80093fc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009400:	4957      	ldr	r1, [pc, #348]	; (8009560 <_tzset_unlocked_r+0x2f8>)
 8009402:	4620      	mov	r0, r4
 8009404:	f001 f8fe 	bl	800a604 <siscanf>
 8009408:	2803      	cmp	r0, #3
 800940a:	f47f af47 	bne.w	800929c <_tzset_unlocked_r+0x34>
 800940e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009412:	1e4b      	subs	r3, r1, #1
 8009414:	2b0b      	cmp	r3, #11
 8009416:	f63f af41 	bhi.w	800929c <_tzset_unlocked_r+0x34>
 800941a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800941e:	1e53      	subs	r3, r2, #1
 8009420:	2b04      	cmp	r3, #4
 8009422:	f63f af3b 	bhi.w	800929c <_tzset_unlocked_r+0x34>
 8009426:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800942a:	2b06      	cmp	r3, #6
 800942c:	f63f af36 	bhi.w	800929c <_tzset_unlocked_r+0x34>
 8009430:	f887 8008 	strb.w	r8, [r7, #8]
 8009434:	60f9      	str	r1, [r7, #12]
 8009436:	613a      	str	r2, [r7, #16]
 8009438:	617b      	str	r3, [r7, #20]
 800943a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943c:	eb04 0803 	add.w	r8, r4, r3
 8009440:	2302      	movs	r3, #2
 8009442:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009446:	2300      	movs	r3, #0
 8009448:	f8ad 301e 	strh.w	r3, [sp, #30]
 800944c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009450:	930a      	str	r3, [sp, #40]	; 0x28
 8009452:	f898 3000 	ldrb.w	r3, [r8]
 8009456:	2b2f      	cmp	r3, #47	; 0x2f
 8009458:	d10b      	bne.n	8009472 <_tzset_unlocked_r+0x20a>
 800945a:	9603      	str	r6, [sp, #12]
 800945c:	f8cd a008 	str.w	sl, [sp, #8]
 8009460:	9601      	str	r6, [sp, #4]
 8009462:	f8cd b000 	str.w	fp, [sp]
 8009466:	4633      	mov	r3, r6
 8009468:	aa07      	add	r2, sp, #28
 800946a:	493e      	ldr	r1, [pc, #248]	; (8009564 <_tzset_unlocked_r+0x2fc>)
 800946c:	4640      	mov	r0, r8
 800946e:	f001 f8c9 	bl	800a604 <siscanf>
 8009472:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009476:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800947a:	213c      	movs	r1, #60	; 0x3c
 800947c:	fb01 2203 	mla	r2, r1, r3, r2
 8009480:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009484:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009488:	fb01 2303 	mla	r3, r1, r3, r2
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009490:	f109 0901 	add.w	r9, r9, #1
 8009494:	f1b9 0f02 	cmp.w	r9, #2
 8009498:	4444      	add	r4, r8
 800949a:	f107 071c 	add.w	r7, r7, #28
 800949e:	d19c      	bne.n	80093da <_tzset_unlocked_r+0x172>
 80094a0:	6868      	ldr	r0, [r5, #4]
 80094a2:	f7ff fe31 	bl	8009108 <__tzcalc_limits>
 80094a6:	4b27      	ldr	r3, [pc, #156]	; (8009544 <_tzset_unlocked_r+0x2dc>)
 80094a8:	6a2a      	ldr	r2, [r5, #32]
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	4a26      	ldr	r2, [pc, #152]	; (800954c <_tzset_unlocked_r+0x2e4>)
 80094b2:	bf18      	it	ne
 80094b4:	2301      	movne	r3, #1
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	e6f0      	b.n	800929c <_tzset_unlocked_r+0x34>
 80094ba:	2b2b      	cmp	r3, #43	; 0x2b
 80094bc:	bf08      	it	eq
 80094be:	3401      	addeq	r4, #1
 80094c0:	2701      	movs	r7, #1
 80094c2:	e76b      	b.n	800939c <_tzset_unlocked_r+0x134>
 80094c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80094c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80094cc:	213c      	movs	r1, #60	; 0x3c
 80094ce:	fb01 2203 	mla	r2, r1, r3, r2
 80094d2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80094d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80094da:	fb01 2303 	mla	r3, r1, r3, r2
 80094de:	435f      	muls	r7, r3
 80094e0:	63ef      	str	r7, [r5, #60]	; 0x3c
 80094e2:	e775      	b.n	80093d0 <_tzset_unlocked_r+0x168>
 80094e4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80094e8:	bf06      	itte	eq
 80094ea:	3401      	addeq	r4, #1
 80094ec:	4643      	moveq	r3, r8
 80094ee:	2344      	movne	r3, #68	; 0x44
 80094f0:	220a      	movs	r2, #10
 80094f2:	a90b      	add	r1, sp, #44	; 0x2c
 80094f4:	4620      	mov	r0, r4
 80094f6:	9305      	str	r3, [sp, #20]
 80094f8:	f001 f95a 	bl	800a7b0 <strtoul>
 80094fc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009500:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009504:	4544      	cmp	r4, r8
 8009506:	9b05      	ldr	r3, [sp, #20]
 8009508:	d114      	bne.n	8009534 <_tzset_unlocked_r+0x2cc>
 800950a:	234d      	movs	r3, #77	; 0x4d
 800950c:	f1b9 0f00 	cmp.w	r9, #0
 8009510:	d107      	bne.n	8009522 <_tzset_unlocked_r+0x2ba>
 8009512:	722b      	strb	r3, [r5, #8]
 8009514:	2303      	movs	r3, #3
 8009516:	60eb      	str	r3, [r5, #12]
 8009518:	2302      	movs	r3, #2
 800951a:	612b      	str	r3, [r5, #16]
 800951c:	f8c5 9014 	str.w	r9, [r5, #20]
 8009520:	e78e      	b.n	8009440 <_tzset_unlocked_r+0x1d8>
 8009522:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009526:	230b      	movs	r3, #11
 8009528:	62ab      	str	r3, [r5, #40]	; 0x28
 800952a:	2301      	movs	r3, #1
 800952c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800952e:	2300      	movs	r3, #0
 8009530:	632b      	str	r3, [r5, #48]	; 0x30
 8009532:	e785      	b.n	8009440 <_tzset_unlocked_r+0x1d8>
 8009534:	b280      	uxth	r0, r0
 8009536:	723b      	strb	r3, [r7, #8]
 8009538:	6178      	str	r0, [r7, #20]
 800953a:	e781      	b.n	8009440 <_tzset_unlocked_r+0x1d8>
 800953c:	0800b2d0 	.word	0x0800b2d0
 8009540:	2000026c 	.word	0x2000026c
 8009544:	20000274 	.word	0x20000274
 8009548:	0800b2d3 	.word	0x0800b2d3
 800954c:	20000270 	.word	0x20000270
 8009550:	20000074 	.word	0x20000074
 8009554:	2000025f 	.word	0x2000025f
 8009558:	0800b2d7 	.word	0x0800b2d7
 800955c:	0800b2fa 	.word	0x0800b2fa
 8009560:	0800b2e6 	.word	0x0800b2e6
 8009564:	0800b2f9 	.word	0x0800b2f9
 8009568:	20000254 	.word	0x20000254

0800956c <div>:
 800956c:	2900      	cmp	r1, #0
 800956e:	b510      	push	{r4, lr}
 8009570:	fb91 f4f2 	sdiv	r4, r1, r2
 8009574:	fb02 1314 	mls	r3, r2, r4, r1
 8009578:	db06      	blt.n	8009588 <div+0x1c>
 800957a:	2b00      	cmp	r3, #0
 800957c:	da01      	bge.n	8009582 <div+0x16>
 800957e:	3401      	adds	r4, #1
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	6004      	str	r4, [r0, #0]
 8009584:	6043      	str	r3, [r0, #4]
 8009586:	bd10      	pop	{r4, pc}
 8009588:	2b00      	cmp	r3, #0
 800958a:	bfc4      	itt	gt
 800958c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009590:	189b      	addgt	r3, r3, r2
 8009592:	e7f6      	b.n	8009582 <div+0x16>

08009594 <rshift>:
 8009594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009596:	6906      	ldr	r6, [r0, #16]
 8009598:	114b      	asrs	r3, r1, #5
 800959a:	42b3      	cmp	r3, r6
 800959c:	f100 0514 	add.w	r5, r0, #20
 80095a0:	da2b      	bge.n	80095fa <rshift+0x66>
 80095a2:	f011 011f 	ands.w	r1, r1, #31
 80095a6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80095aa:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80095ae:	d108      	bne.n	80095c2 <rshift+0x2e>
 80095b0:	4629      	mov	r1, r5
 80095b2:	42b2      	cmp	r2, r6
 80095b4:	460b      	mov	r3, r1
 80095b6:	d210      	bcs.n	80095da <rshift+0x46>
 80095b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80095bc:	f841 3b04 	str.w	r3, [r1], #4
 80095c0:	e7f7      	b.n	80095b2 <rshift+0x1e>
 80095c2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80095c6:	f1c1 0e20 	rsb	lr, r1, #32
 80095ca:	3204      	adds	r2, #4
 80095cc:	40cc      	lsrs	r4, r1
 80095ce:	462b      	mov	r3, r5
 80095d0:	42b2      	cmp	r2, r6
 80095d2:	d308      	bcc.n	80095e6 <rshift+0x52>
 80095d4:	601c      	str	r4, [r3, #0]
 80095d6:	b104      	cbz	r4, 80095da <rshift+0x46>
 80095d8:	3304      	adds	r3, #4
 80095da:	1b5b      	subs	r3, r3, r5
 80095dc:	109b      	asrs	r3, r3, #2
 80095de:	6103      	str	r3, [r0, #16]
 80095e0:	b903      	cbnz	r3, 80095e4 <rshift+0x50>
 80095e2:	6143      	str	r3, [r0, #20]
 80095e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e6:	6817      	ldr	r7, [r2, #0]
 80095e8:	fa07 f70e 	lsl.w	r7, r7, lr
 80095ec:	433c      	orrs	r4, r7
 80095ee:	f843 4b04 	str.w	r4, [r3], #4
 80095f2:	f852 4b04 	ldr.w	r4, [r2], #4
 80095f6:	40cc      	lsrs	r4, r1
 80095f8:	e7ea      	b.n	80095d0 <rshift+0x3c>
 80095fa:	462b      	mov	r3, r5
 80095fc:	e7ed      	b.n	80095da <rshift+0x46>

080095fe <__hexdig_fun>:
 80095fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009602:	2b09      	cmp	r3, #9
 8009604:	d802      	bhi.n	800960c <__hexdig_fun+0xe>
 8009606:	3820      	subs	r0, #32
 8009608:	b2c0      	uxtb	r0, r0
 800960a:	4770      	bx	lr
 800960c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009610:	2b05      	cmp	r3, #5
 8009612:	d801      	bhi.n	8009618 <__hexdig_fun+0x1a>
 8009614:	3847      	subs	r0, #71	; 0x47
 8009616:	e7f7      	b.n	8009608 <__hexdig_fun+0xa>
 8009618:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800961c:	2b05      	cmp	r3, #5
 800961e:	d801      	bhi.n	8009624 <__hexdig_fun+0x26>
 8009620:	3827      	subs	r0, #39	; 0x27
 8009622:	e7f1      	b.n	8009608 <__hexdig_fun+0xa>
 8009624:	2000      	movs	r0, #0
 8009626:	4770      	bx	lr

08009628 <__gethex>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	b08b      	sub	sp, #44	; 0x2c
 800962e:	468a      	mov	sl, r1
 8009630:	9002      	str	r0, [sp, #8]
 8009632:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009634:	9306      	str	r3, [sp, #24]
 8009636:	4690      	mov	r8, r2
 8009638:	f000 fbd4 	bl	8009de4 <__localeconv_l>
 800963c:	6803      	ldr	r3, [r0, #0]
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	4618      	mov	r0, r3
 8009642:	f7f6 fdcf 	bl	80001e4 <strlen>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	9001      	str	r0, [sp, #4]
 800964a:	4403      	add	r3, r0
 800964c:	f04f 0b00 	mov.w	fp, #0
 8009650:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009654:	9307      	str	r3, [sp, #28]
 8009656:	f8da 3000 	ldr.w	r3, [sl]
 800965a:	3302      	adds	r3, #2
 800965c:	461f      	mov	r7, r3
 800965e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009662:	2830      	cmp	r0, #48	; 0x30
 8009664:	d06c      	beq.n	8009740 <__gethex+0x118>
 8009666:	f7ff ffca 	bl	80095fe <__hexdig_fun>
 800966a:	4604      	mov	r4, r0
 800966c:	2800      	cmp	r0, #0
 800966e:	d16a      	bne.n	8009746 <__gethex+0x11e>
 8009670:	9a01      	ldr	r2, [sp, #4]
 8009672:	9903      	ldr	r1, [sp, #12]
 8009674:	4638      	mov	r0, r7
 8009676:	f000 fff9 	bl	800a66c <strncmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	d166      	bne.n	800974c <__gethex+0x124>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	5cf8      	ldrb	r0, [r7, r3]
 8009682:	18fe      	adds	r6, r7, r3
 8009684:	f7ff ffbb 	bl	80095fe <__hexdig_fun>
 8009688:	2800      	cmp	r0, #0
 800968a:	d062      	beq.n	8009752 <__gethex+0x12a>
 800968c:	4633      	mov	r3, r6
 800968e:	7818      	ldrb	r0, [r3, #0]
 8009690:	2830      	cmp	r0, #48	; 0x30
 8009692:	461f      	mov	r7, r3
 8009694:	f103 0301 	add.w	r3, r3, #1
 8009698:	d0f9      	beq.n	800968e <__gethex+0x66>
 800969a:	f7ff ffb0 	bl	80095fe <__hexdig_fun>
 800969e:	fab0 f580 	clz	r5, r0
 80096a2:	096d      	lsrs	r5, r5, #5
 80096a4:	4634      	mov	r4, r6
 80096a6:	f04f 0b01 	mov.w	fp, #1
 80096aa:	463a      	mov	r2, r7
 80096ac:	4616      	mov	r6, r2
 80096ae:	3201      	adds	r2, #1
 80096b0:	7830      	ldrb	r0, [r6, #0]
 80096b2:	f7ff ffa4 	bl	80095fe <__hexdig_fun>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d1f8      	bne.n	80096ac <__gethex+0x84>
 80096ba:	9a01      	ldr	r2, [sp, #4]
 80096bc:	9903      	ldr	r1, [sp, #12]
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 ffd4 	bl	800a66c <strncmp>
 80096c4:	b950      	cbnz	r0, 80096dc <__gethex+0xb4>
 80096c6:	b954      	cbnz	r4, 80096de <__gethex+0xb6>
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	18f4      	adds	r4, r6, r3
 80096cc:	4622      	mov	r2, r4
 80096ce:	4616      	mov	r6, r2
 80096d0:	3201      	adds	r2, #1
 80096d2:	7830      	ldrb	r0, [r6, #0]
 80096d4:	f7ff ff93 	bl	80095fe <__hexdig_fun>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1f8      	bne.n	80096ce <__gethex+0xa6>
 80096dc:	b10c      	cbz	r4, 80096e2 <__gethex+0xba>
 80096de:	1ba4      	subs	r4, r4, r6
 80096e0:	00a4      	lsls	r4, r4, #2
 80096e2:	7833      	ldrb	r3, [r6, #0]
 80096e4:	2b50      	cmp	r3, #80	; 0x50
 80096e6:	d001      	beq.n	80096ec <__gethex+0xc4>
 80096e8:	2b70      	cmp	r3, #112	; 0x70
 80096ea:	d140      	bne.n	800976e <__gethex+0x146>
 80096ec:	7873      	ldrb	r3, [r6, #1]
 80096ee:	2b2b      	cmp	r3, #43	; 0x2b
 80096f0:	d035      	beq.n	800975e <__gethex+0x136>
 80096f2:	2b2d      	cmp	r3, #45	; 0x2d
 80096f4:	d02f      	beq.n	8009756 <__gethex+0x12e>
 80096f6:	1c71      	adds	r1, r6, #1
 80096f8:	f04f 0900 	mov.w	r9, #0
 80096fc:	7808      	ldrb	r0, [r1, #0]
 80096fe:	f7ff ff7e 	bl	80095fe <__hexdig_fun>
 8009702:	1e43      	subs	r3, r0, #1
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b18      	cmp	r3, #24
 8009708:	d831      	bhi.n	800976e <__gethex+0x146>
 800970a:	f1a0 0210 	sub.w	r2, r0, #16
 800970e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009712:	f7ff ff74 	bl	80095fe <__hexdig_fun>
 8009716:	1e43      	subs	r3, r0, #1
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b18      	cmp	r3, #24
 800971c:	d922      	bls.n	8009764 <__gethex+0x13c>
 800971e:	f1b9 0f00 	cmp.w	r9, #0
 8009722:	d000      	beq.n	8009726 <__gethex+0xfe>
 8009724:	4252      	negs	r2, r2
 8009726:	4414      	add	r4, r2
 8009728:	f8ca 1000 	str.w	r1, [sl]
 800972c:	b30d      	cbz	r5, 8009772 <__gethex+0x14a>
 800972e:	f1bb 0f00 	cmp.w	fp, #0
 8009732:	bf14      	ite	ne
 8009734:	2700      	movne	r7, #0
 8009736:	2706      	moveq	r7, #6
 8009738:	4638      	mov	r0, r7
 800973a:	b00b      	add	sp, #44	; 0x2c
 800973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009740:	f10b 0b01 	add.w	fp, fp, #1
 8009744:	e78a      	b.n	800965c <__gethex+0x34>
 8009746:	2500      	movs	r5, #0
 8009748:	462c      	mov	r4, r5
 800974a:	e7ae      	b.n	80096aa <__gethex+0x82>
 800974c:	463e      	mov	r6, r7
 800974e:	2501      	movs	r5, #1
 8009750:	e7c7      	b.n	80096e2 <__gethex+0xba>
 8009752:	4604      	mov	r4, r0
 8009754:	e7fb      	b.n	800974e <__gethex+0x126>
 8009756:	f04f 0901 	mov.w	r9, #1
 800975a:	1cb1      	adds	r1, r6, #2
 800975c:	e7ce      	b.n	80096fc <__gethex+0xd4>
 800975e:	f04f 0900 	mov.w	r9, #0
 8009762:	e7fa      	b.n	800975a <__gethex+0x132>
 8009764:	230a      	movs	r3, #10
 8009766:	fb03 0202 	mla	r2, r3, r2, r0
 800976a:	3a10      	subs	r2, #16
 800976c:	e7cf      	b.n	800970e <__gethex+0xe6>
 800976e:	4631      	mov	r1, r6
 8009770:	e7da      	b.n	8009728 <__gethex+0x100>
 8009772:	1bf3      	subs	r3, r6, r7
 8009774:	3b01      	subs	r3, #1
 8009776:	4629      	mov	r1, r5
 8009778:	2b07      	cmp	r3, #7
 800977a:	dc49      	bgt.n	8009810 <__gethex+0x1e8>
 800977c:	9802      	ldr	r0, [sp, #8]
 800977e:	f000 fb47 	bl	8009e10 <_Balloc>
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	f100 0914 	add.w	r9, r0, #20
 8009788:	f04f 0b00 	mov.w	fp, #0
 800978c:	f1c3 0301 	rsb	r3, r3, #1
 8009790:	4605      	mov	r5, r0
 8009792:	f8cd 9010 	str.w	r9, [sp, #16]
 8009796:	46da      	mov	sl, fp
 8009798:	9308      	str	r3, [sp, #32]
 800979a:	42b7      	cmp	r7, r6
 800979c:	d33b      	bcc.n	8009816 <__gethex+0x1ee>
 800979e:	9804      	ldr	r0, [sp, #16]
 80097a0:	f840 ab04 	str.w	sl, [r0], #4
 80097a4:	eba0 0009 	sub.w	r0, r0, r9
 80097a8:	1080      	asrs	r0, r0, #2
 80097aa:	6128      	str	r0, [r5, #16]
 80097ac:	0147      	lsls	r7, r0, #5
 80097ae:	4650      	mov	r0, sl
 80097b0:	f000 fbf2 	bl	8009f98 <__hi0bits>
 80097b4:	f8d8 6000 	ldr.w	r6, [r8]
 80097b8:	1a3f      	subs	r7, r7, r0
 80097ba:	42b7      	cmp	r7, r6
 80097bc:	dd64      	ble.n	8009888 <__gethex+0x260>
 80097be:	1bbf      	subs	r7, r7, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 feef 	bl	800a5a6 <__any_on>
 80097c8:	4682      	mov	sl, r0
 80097ca:	b178      	cbz	r0, 80097ec <__gethex+0x1c4>
 80097cc:	1e7b      	subs	r3, r7, #1
 80097ce:	1159      	asrs	r1, r3, #5
 80097d0:	f003 021f 	and.w	r2, r3, #31
 80097d4:	f04f 0a01 	mov.w	sl, #1
 80097d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80097dc:	fa0a f202 	lsl.w	r2, sl, r2
 80097e0:	420a      	tst	r2, r1
 80097e2:	d003      	beq.n	80097ec <__gethex+0x1c4>
 80097e4:	4553      	cmp	r3, sl
 80097e6:	dc46      	bgt.n	8009876 <__gethex+0x24e>
 80097e8:	f04f 0a02 	mov.w	sl, #2
 80097ec:	4639      	mov	r1, r7
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff fed0 	bl	8009594 <rshift>
 80097f4:	443c      	add	r4, r7
 80097f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097fa:	429c      	cmp	r4, r3
 80097fc:	dd52      	ble.n	80098a4 <__gethex+0x27c>
 80097fe:	4629      	mov	r1, r5
 8009800:	9802      	ldr	r0, [sp, #8]
 8009802:	f000 fb39 	bl	8009e78 <_Bfree>
 8009806:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009808:	2300      	movs	r3, #0
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	27a3      	movs	r7, #163	; 0xa3
 800980e:	e793      	b.n	8009738 <__gethex+0x110>
 8009810:	3101      	adds	r1, #1
 8009812:	105b      	asrs	r3, r3, #1
 8009814:	e7b0      	b.n	8009778 <__gethex+0x150>
 8009816:	1e73      	subs	r3, r6, #1
 8009818:	9305      	str	r3, [sp, #20]
 800981a:	9a07      	ldr	r2, [sp, #28]
 800981c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009820:	4293      	cmp	r3, r2
 8009822:	d018      	beq.n	8009856 <__gethex+0x22e>
 8009824:	f1bb 0f20 	cmp.w	fp, #32
 8009828:	d107      	bne.n	800983a <__gethex+0x212>
 800982a:	9b04      	ldr	r3, [sp, #16]
 800982c:	f8c3 a000 	str.w	sl, [r3]
 8009830:	3304      	adds	r3, #4
 8009832:	f04f 0a00 	mov.w	sl, #0
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	46d3      	mov	fp, sl
 800983a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800983e:	f7ff fede 	bl	80095fe <__hexdig_fun>
 8009842:	f000 000f 	and.w	r0, r0, #15
 8009846:	fa00 f00b 	lsl.w	r0, r0, fp
 800984a:	ea4a 0a00 	orr.w	sl, sl, r0
 800984e:	f10b 0b04 	add.w	fp, fp, #4
 8009852:	9b05      	ldr	r3, [sp, #20]
 8009854:	e00d      	b.n	8009872 <__gethex+0x24a>
 8009856:	9b05      	ldr	r3, [sp, #20]
 8009858:	9a08      	ldr	r2, [sp, #32]
 800985a:	4413      	add	r3, r2
 800985c:	429f      	cmp	r7, r3
 800985e:	d8e1      	bhi.n	8009824 <__gethex+0x1fc>
 8009860:	4618      	mov	r0, r3
 8009862:	9a01      	ldr	r2, [sp, #4]
 8009864:	9903      	ldr	r1, [sp, #12]
 8009866:	9309      	str	r3, [sp, #36]	; 0x24
 8009868:	f000 ff00 	bl	800a66c <strncmp>
 800986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986e:	2800      	cmp	r0, #0
 8009870:	d1d8      	bne.n	8009824 <__gethex+0x1fc>
 8009872:	461e      	mov	r6, r3
 8009874:	e791      	b.n	800979a <__gethex+0x172>
 8009876:	1eb9      	subs	r1, r7, #2
 8009878:	4628      	mov	r0, r5
 800987a:	f000 fe94 	bl	800a5a6 <__any_on>
 800987e:	2800      	cmp	r0, #0
 8009880:	d0b2      	beq.n	80097e8 <__gethex+0x1c0>
 8009882:	f04f 0a03 	mov.w	sl, #3
 8009886:	e7b1      	b.n	80097ec <__gethex+0x1c4>
 8009888:	da09      	bge.n	800989e <__gethex+0x276>
 800988a:	1bf7      	subs	r7, r6, r7
 800988c:	4629      	mov	r1, r5
 800988e:	463a      	mov	r2, r7
 8009890:	9802      	ldr	r0, [sp, #8]
 8009892:	f000 fcb3 	bl	800a1fc <__lshift>
 8009896:	1be4      	subs	r4, r4, r7
 8009898:	4605      	mov	r5, r0
 800989a:	f100 0914 	add.w	r9, r0, #20
 800989e:	f04f 0a00 	mov.w	sl, #0
 80098a2:	e7a8      	b.n	80097f6 <__gethex+0x1ce>
 80098a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80098a8:	4284      	cmp	r4, r0
 80098aa:	da6a      	bge.n	8009982 <__gethex+0x35a>
 80098ac:	1b04      	subs	r4, r0, r4
 80098ae:	42a6      	cmp	r6, r4
 80098b0:	dc2e      	bgt.n	8009910 <__gethex+0x2e8>
 80098b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d022      	beq.n	8009900 <__gethex+0x2d8>
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d024      	beq.n	8009908 <__gethex+0x2e0>
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d115      	bne.n	80098ee <__gethex+0x2c6>
 80098c2:	42a6      	cmp	r6, r4
 80098c4:	d113      	bne.n	80098ee <__gethex+0x2c6>
 80098c6:	2e01      	cmp	r6, #1
 80098c8:	dc0b      	bgt.n	80098e2 <__gethex+0x2ba>
 80098ca:	9a06      	ldr	r2, [sp, #24]
 80098cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098d0:	6013      	str	r3, [r2, #0]
 80098d2:	2301      	movs	r3, #1
 80098d4:	612b      	str	r3, [r5, #16]
 80098d6:	f8c9 3000 	str.w	r3, [r9]
 80098da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098dc:	2762      	movs	r7, #98	; 0x62
 80098de:	601d      	str	r5, [r3, #0]
 80098e0:	e72a      	b.n	8009738 <__gethex+0x110>
 80098e2:	1e71      	subs	r1, r6, #1
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 fe5e 	bl	800a5a6 <__any_on>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d1ed      	bne.n	80098ca <__gethex+0x2a2>
 80098ee:	4629      	mov	r1, r5
 80098f0:	9802      	ldr	r0, [sp, #8]
 80098f2:	f000 fac1 	bl	8009e78 <_Bfree>
 80098f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098f8:	2300      	movs	r3, #0
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	2750      	movs	r7, #80	; 0x50
 80098fe:	e71b      	b.n	8009738 <__gethex+0x110>
 8009900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0e1      	beq.n	80098ca <__gethex+0x2a2>
 8009906:	e7f2      	b.n	80098ee <__gethex+0x2c6>
 8009908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1dd      	bne.n	80098ca <__gethex+0x2a2>
 800990e:	e7ee      	b.n	80098ee <__gethex+0x2c6>
 8009910:	1e67      	subs	r7, r4, #1
 8009912:	f1ba 0f00 	cmp.w	sl, #0
 8009916:	d131      	bne.n	800997c <__gethex+0x354>
 8009918:	b127      	cbz	r7, 8009924 <__gethex+0x2fc>
 800991a:	4639      	mov	r1, r7
 800991c:	4628      	mov	r0, r5
 800991e:	f000 fe42 	bl	800a5a6 <__any_on>
 8009922:	4682      	mov	sl, r0
 8009924:	117a      	asrs	r2, r7, #5
 8009926:	2301      	movs	r3, #1
 8009928:	f007 071f 	and.w	r7, r7, #31
 800992c:	fa03 f707 	lsl.w	r7, r3, r7
 8009930:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009934:	4621      	mov	r1, r4
 8009936:	421f      	tst	r7, r3
 8009938:	4628      	mov	r0, r5
 800993a:	bf18      	it	ne
 800993c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009940:	1b36      	subs	r6, r6, r4
 8009942:	f7ff fe27 	bl	8009594 <rshift>
 8009946:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800994a:	2702      	movs	r7, #2
 800994c:	f1ba 0f00 	cmp.w	sl, #0
 8009950:	d045      	beq.n	80099de <__gethex+0x3b6>
 8009952:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d015      	beq.n	8009986 <__gethex+0x35e>
 800995a:	2b03      	cmp	r3, #3
 800995c:	d017      	beq.n	800998e <__gethex+0x366>
 800995e:	2b01      	cmp	r3, #1
 8009960:	d109      	bne.n	8009976 <__gethex+0x34e>
 8009962:	f01a 0f02 	tst.w	sl, #2
 8009966:	d006      	beq.n	8009976 <__gethex+0x34e>
 8009968:	f8d9 3000 	ldr.w	r3, [r9]
 800996c:	ea4a 0a03 	orr.w	sl, sl, r3
 8009970:	f01a 0f01 	tst.w	sl, #1
 8009974:	d10e      	bne.n	8009994 <__gethex+0x36c>
 8009976:	f047 0710 	orr.w	r7, r7, #16
 800997a:	e030      	b.n	80099de <__gethex+0x3b6>
 800997c:	f04f 0a01 	mov.w	sl, #1
 8009980:	e7d0      	b.n	8009924 <__gethex+0x2fc>
 8009982:	2701      	movs	r7, #1
 8009984:	e7e2      	b.n	800994c <__gethex+0x324>
 8009986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009988:	f1c3 0301 	rsb	r3, r3, #1
 800998c:	9315      	str	r3, [sp, #84]	; 0x54
 800998e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0f0      	beq.n	8009976 <__gethex+0x34e>
 8009994:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009998:	f105 0314 	add.w	r3, r5, #20
 800999c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80099a0:	eb03 010a 	add.w	r1, r3, sl
 80099a4:	2000      	movs	r0, #0
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099ac:	d01c      	beq.n	80099e8 <__gethex+0x3c0>
 80099ae:	3201      	adds	r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	2f02      	cmp	r7, #2
 80099b4:	f105 0314 	add.w	r3, r5, #20
 80099b8:	d138      	bne.n	8009a2c <__gethex+0x404>
 80099ba:	f8d8 2000 	ldr.w	r2, [r8]
 80099be:	3a01      	subs	r2, #1
 80099c0:	4296      	cmp	r6, r2
 80099c2:	d10a      	bne.n	80099da <__gethex+0x3b2>
 80099c4:	1171      	asrs	r1, r6, #5
 80099c6:	2201      	movs	r2, #1
 80099c8:	f006 061f 	and.w	r6, r6, #31
 80099cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099d0:	fa02 f606 	lsl.w	r6, r2, r6
 80099d4:	421e      	tst	r6, r3
 80099d6:	bf18      	it	ne
 80099d8:	4617      	movne	r7, r2
 80099da:	f047 0720 	orr.w	r7, r7, #32
 80099de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099e0:	601d      	str	r5, [r3, #0]
 80099e2:	9b06      	ldr	r3, [sp, #24]
 80099e4:	601c      	str	r4, [r3, #0]
 80099e6:	e6a7      	b.n	8009738 <__gethex+0x110>
 80099e8:	f843 0b04 	str.w	r0, [r3], #4
 80099ec:	4299      	cmp	r1, r3
 80099ee:	d8da      	bhi.n	80099a6 <__gethex+0x37e>
 80099f0:	68ab      	ldr	r3, [r5, #8]
 80099f2:	4599      	cmp	r9, r3
 80099f4:	db12      	blt.n	8009a1c <__gethex+0x3f4>
 80099f6:	6869      	ldr	r1, [r5, #4]
 80099f8:	9802      	ldr	r0, [sp, #8]
 80099fa:	3101      	adds	r1, #1
 80099fc:	f000 fa08 	bl	8009e10 <_Balloc>
 8009a00:	692a      	ldr	r2, [r5, #16]
 8009a02:	3202      	adds	r2, #2
 8009a04:	f105 010c 	add.w	r1, r5, #12
 8009a08:	4683      	mov	fp, r0
 8009a0a:	0092      	lsls	r2, r2, #2
 8009a0c:	300c      	adds	r0, #12
 8009a0e:	f7fe f9bb 	bl	8007d88 <memcpy>
 8009a12:	4629      	mov	r1, r5
 8009a14:	9802      	ldr	r0, [sp, #8]
 8009a16:	f000 fa2f 	bl	8009e78 <_Bfree>
 8009a1a:	465d      	mov	r5, fp
 8009a1c:	692b      	ldr	r3, [r5, #16]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009a24:	612a      	str	r2, [r5, #16]
 8009a26:	2201      	movs	r2, #1
 8009a28:	615a      	str	r2, [r3, #20]
 8009a2a:	e7c2      	b.n	80099b2 <__gethex+0x38a>
 8009a2c:	692a      	ldr	r2, [r5, #16]
 8009a2e:	4591      	cmp	r9, r2
 8009a30:	da0b      	bge.n	8009a4a <__gethex+0x422>
 8009a32:	2101      	movs	r1, #1
 8009a34:	4628      	mov	r0, r5
 8009a36:	f7ff fdad 	bl	8009594 <rshift>
 8009a3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a3e:	3401      	adds	r4, #1
 8009a40:	429c      	cmp	r4, r3
 8009a42:	f73f aedc 	bgt.w	80097fe <__gethex+0x1d6>
 8009a46:	2701      	movs	r7, #1
 8009a48:	e7c7      	b.n	80099da <__gethex+0x3b2>
 8009a4a:	f016 061f 	ands.w	r6, r6, #31
 8009a4e:	d0fa      	beq.n	8009a46 <__gethex+0x41e>
 8009a50:	449a      	add	sl, r3
 8009a52:	f1c6 0620 	rsb	r6, r6, #32
 8009a56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009a5a:	f000 fa9d 	bl	8009f98 <__hi0bits>
 8009a5e:	42b0      	cmp	r0, r6
 8009a60:	dbe7      	blt.n	8009a32 <__gethex+0x40a>
 8009a62:	e7f0      	b.n	8009a46 <__gethex+0x41e>

08009a64 <L_shift>:
 8009a64:	f1c2 0208 	rsb	r2, r2, #8
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	b570      	push	{r4, r5, r6, lr}
 8009a6c:	f1c2 0620 	rsb	r6, r2, #32
 8009a70:	6843      	ldr	r3, [r0, #4]
 8009a72:	6804      	ldr	r4, [r0, #0]
 8009a74:	fa03 f506 	lsl.w	r5, r3, r6
 8009a78:	432c      	orrs	r4, r5
 8009a7a:	40d3      	lsrs	r3, r2
 8009a7c:	6004      	str	r4, [r0, #0]
 8009a7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a82:	4288      	cmp	r0, r1
 8009a84:	d3f4      	bcc.n	8009a70 <L_shift+0xc>
 8009a86:	bd70      	pop	{r4, r5, r6, pc}

08009a88 <__match>:
 8009a88:	b530      	push	{r4, r5, lr}
 8009a8a:	6803      	ldr	r3, [r0, #0]
 8009a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a90:	3301      	adds	r3, #1
 8009a92:	b914      	cbnz	r4, 8009a9a <__match+0x12>
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	2001      	movs	r0, #1
 8009a98:	bd30      	pop	{r4, r5, pc}
 8009a9a:	781a      	ldrb	r2, [r3, #0]
 8009a9c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009aa0:	2d19      	cmp	r5, #25
 8009aa2:	bf98      	it	ls
 8009aa4:	3220      	addls	r2, #32
 8009aa6:	42a2      	cmp	r2, r4
 8009aa8:	d0f0      	beq.n	8009a8c <__match+0x4>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	bd30      	pop	{r4, r5, pc}

08009aae <__hexnan>:
 8009aae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab2:	680b      	ldr	r3, [r1, #0]
 8009ab4:	6801      	ldr	r1, [r0, #0]
 8009ab6:	115f      	asrs	r7, r3, #5
 8009ab8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009abc:	f013 031f 	ands.w	r3, r3, #31
 8009ac0:	b087      	sub	sp, #28
 8009ac2:	bf18      	it	ne
 8009ac4:	3704      	addne	r7, #4
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	1f3e      	subs	r6, r7, #4
 8009aca:	4682      	mov	sl, r0
 8009acc:	4690      	mov	r8, r2
 8009ace:	9302      	str	r3, [sp, #8]
 8009ad0:	f847 5c04 	str.w	r5, [r7, #-4]
 8009ad4:	46b1      	mov	r9, r6
 8009ad6:	4634      	mov	r4, r6
 8009ad8:	9501      	str	r5, [sp, #4]
 8009ada:	46ab      	mov	fp, r5
 8009adc:	784a      	ldrb	r2, [r1, #1]
 8009ade:	1c4b      	adds	r3, r1, #1
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	b342      	cbz	r2, 8009b36 <__hexnan+0x88>
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	9105      	str	r1, [sp, #20]
 8009ae8:	9204      	str	r2, [sp, #16]
 8009aea:	f7ff fd88 	bl	80095fe <__hexdig_fun>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d143      	bne.n	8009b7a <__hexnan+0xcc>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	9905      	ldr	r1, [sp, #20]
 8009af6:	2a20      	cmp	r2, #32
 8009af8:	d818      	bhi.n	8009b2c <__hexnan+0x7e>
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	459b      	cmp	fp, r3
 8009afe:	dd13      	ble.n	8009b28 <__hexnan+0x7a>
 8009b00:	454c      	cmp	r4, r9
 8009b02:	d206      	bcs.n	8009b12 <__hexnan+0x64>
 8009b04:	2d07      	cmp	r5, #7
 8009b06:	dc04      	bgt.n	8009b12 <__hexnan+0x64>
 8009b08:	462a      	mov	r2, r5
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7ff ffa9 	bl	8009a64 <L_shift>
 8009b12:	4544      	cmp	r4, r8
 8009b14:	d944      	bls.n	8009ba0 <__hexnan+0xf2>
 8009b16:	2300      	movs	r3, #0
 8009b18:	f1a4 0904 	sub.w	r9, r4, #4
 8009b1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b20:	f8cd b004 	str.w	fp, [sp, #4]
 8009b24:	464c      	mov	r4, r9
 8009b26:	461d      	mov	r5, r3
 8009b28:	9903      	ldr	r1, [sp, #12]
 8009b2a:	e7d7      	b.n	8009adc <__hexnan+0x2e>
 8009b2c:	2a29      	cmp	r2, #41	; 0x29
 8009b2e:	d14a      	bne.n	8009bc6 <__hexnan+0x118>
 8009b30:	3102      	adds	r1, #2
 8009b32:	f8ca 1000 	str.w	r1, [sl]
 8009b36:	f1bb 0f00 	cmp.w	fp, #0
 8009b3a:	d044      	beq.n	8009bc6 <__hexnan+0x118>
 8009b3c:	454c      	cmp	r4, r9
 8009b3e:	d206      	bcs.n	8009b4e <__hexnan+0xa0>
 8009b40:	2d07      	cmp	r5, #7
 8009b42:	dc04      	bgt.n	8009b4e <__hexnan+0xa0>
 8009b44:	462a      	mov	r2, r5
 8009b46:	4649      	mov	r1, r9
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff ff8b 	bl	8009a64 <L_shift>
 8009b4e:	4544      	cmp	r4, r8
 8009b50:	d928      	bls.n	8009ba4 <__hexnan+0xf6>
 8009b52:	4643      	mov	r3, r8
 8009b54:	f854 2b04 	ldr.w	r2, [r4], #4
 8009b58:	f843 2b04 	str.w	r2, [r3], #4
 8009b5c:	42a6      	cmp	r6, r4
 8009b5e:	d2f9      	bcs.n	8009b54 <__hexnan+0xa6>
 8009b60:	2200      	movs	r2, #0
 8009b62:	f843 2b04 	str.w	r2, [r3], #4
 8009b66:	429e      	cmp	r6, r3
 8009b68:	d2fb      	bcs.n	8009b62 <__hexnan+0xb4>
 8009b6a:	6833      	ldr	r3, [r6, #0]
 8009b6c:	b91b      	cbnz	r3, 8009b76 <__hexnan+0xc8>
 8009b6e:	4546      	cmp	r6, r8
 8009b70:	d127      	bne.n	8009bc2 <__hexnan+0x114>
 8009b72:	2301      	movs	r3, #1
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	2005      	movs	r0, #5
 8009b78:	e026      	b.n	8009bc8 <__hexnan+0x11a>
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	2d08      	cmp	r5, #8
 8009b7e:	f10b 0b01 	add.w	fp, fp, #1
 8009b82:	dd06      	ble.n	8009b92 <__hexnan+0xe4>
 8009b84:	4544      	cmp	r4, r8
 8009b86:	d9cf      	bls.n	8009b28 <__hexnan+0x7a>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b8e:	2501      	movs	r5, #1
 8009b90:	3c04      	subs	r4, #4
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	f000 000f 	and.w	r0, r0, #15
 8009b98:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b9c:	6020      	str	r0, [r4, #0]
 8009b9e:	e7c3      	b.n	8009b28 <__hexnan+0x7a>
 8009ba0:	2508      	movs	r5, #8
 8009ba2:	e7c1      	b.n	8009b28 <__hexnan+0x7a>
 8009ba4:	9b02      	ldr	r3, [sp, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0df      	beq.n	8009b6a <__hexnan+0xbc>
 8009baa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bae:	f1c3 0320 	rsb	r3, r3, #32
 8009bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb6:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009bba:	401a      	ands	r2, r3
 8009bbc:	f847 2c04 	str.w	r2, [r7, #-4]
 8009bc0:	e7d3      	b.n	8009b6a <__hexnan+0xbc>
 8009bc2:	3e04      	subs	r6, #4
 8009bc4:	e7d1      	b.n	8009b6a <__hexnan+0xbc>
 8009bc6:	2004      	movs	r0, #4
 8009bc8:	b007      	add	sp, #28
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009bd0 <_findenv_r>:
 8009bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	468a      	mov	sl, r1
 8009bd8:	4617      	mov	r7, r2
 8009bda:	f000 fe0c 	bl	800a7f6 <__env_lock>
 8009bde:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <_findenv_r+0x7c>)
 8009be0:	f8d3 8000 	ldr.w	r8, [r3]
 8009be4:	4699      	mov	r9, r3
 8009be6:	f1b8 0f00 	cmp.w	r8, #0
 8009bea:	d007      	beq.n	8009bfc <_findenv_r+0x2c>
 8009bec:	4654      	mov	r4, sl
 8009bee:	4623      	mov	r3, r4
 8009bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf4:	b332      	cbz	r2, 8009c44 <_findenv_r+0x74>
 8009bf6:	2a3d      	cmp	r2, #61	; 0x3d
 8009bf8:	461c      	mov	r4, r3
 8009bfa:	d1f8      	bne.n	8009bee <_findenv_r+0x1e>
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f000 fdfb 	bl	800a7f8 <__env_unlock>
 8009c02:	2000      	movs	r0, #0
 8009c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c08:	f108 0804 	add.w	r8, r8, #4
 8009c0c:	f8d8 0000 	ldr.w	r0, [r8]
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d0f3      	beq.n	8009bfc <_findenv_r+0x2c>
 8009c14:	4622      	mov	r2, r4
 8009c16:	4651      	mov	r1, sl
 8009c18:	f000 fd28 	bl	800a66c <strncmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d1f3      	bne.n	8009c08 <_findenv_r+0x38>
 8009c20:	f8d8 3000 	ldr.w	r3, [r8]
 8009c24:	191d      	adds	r5, r3, r4
 8009c26:	5d1b      	ldrb	r3, [r3, r4]
 8009c28:	2b3d      	cmp	r3, #61	; 0x3d
 8009c2a:	d1ed      	bne.n	8009c08 <_findenv_r+0x38>
 8009c2c:	f8d9 3000 	ldr.w	r3, [r9]
 8009c30:	eba8 0303 	sub.w	r3, r8, r3
 8009c34:	109b      	asrs	r3, r3, #2
 8009c36:	4630      	mov	r0, r6
 8009c38:	603b      	str	r3, [r7, #0]
 8009c3a:	f000 fddd 	bl	800a7f8 <__env_unlock>
 8009c3e:	1c68      	adds	r0, r5, #1
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	eba4 040a 	sub.w	r4, r4, sl
 8009c48:	e7e0      	b.n	8009c0c <_findenv_r+0x3c>
 8009c4a:	bf00      	nop
 8009c4c:	20000008 	.word	0x20000008

08009c50 <_getenv_r>:
 8009c50:	b507      	push	{r0, r1, r2, lr}
 8009c52:	aa01      	add	r2, sp, #4
 8009c54:	f7ff ffbc 	bl	8009bd0 <_findenv_r>
 8009c58:	b003      	add	sp, #12
 8009c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009c60 <_gettimeofday_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4c07      	ldr	r4, [pc, #28]	; (8009c80 <_gettimeofday_r+0x20>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4605      	mov	r5, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	f001 f9f7 	bl	800b060 <_gettimeofday>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d102      	bne.n	8009c7c <_gettimeofday_r+0x1c>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	b103      	cbz	r3, 8009c7c <_gettimeofday_r+0x1c>
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
 8009c7e:	bf00      	nop
 8009c80:	20001c5c 	.word	0x20001c5c

08009c84 <__gettzinfo>:
 8009c84:	4800      	ldr	r0, [pc, #0]	; (8009c88 <__gettzinfo+0x4>)
 8009c86:	4770      	bx	lr
 8009c88:	2000007c 	.word	0x2000007c

08009c8c <gmtime_r>:
 8009c8c:	6802      	ldr	r2, [r0, #0]
 8009c8e:	4848      	ldr	r0, [pc, #288]	; (8009db0 <gmtime_r+0x124>)
 8009c90:	fb92 f3f0 	sdiv	r3, r2, r0
 8009c94:	fb00 2013 	mls	r0, r0, r3, r2
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	bfb8      	it	lt
 8009c9c:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 8009ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca2:	bfb8      	it	lt
 8009ca4:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 8009ca8:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8009cac:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8009cb0:	fb90 f2f4 	sdiv	r2, r0, r4
 8009cb4:	fb04 0012 	mls	r0, r4, r2, r0
 8009cb8:	f04f 043c 	mov.w	r4, #60	; 0x3c
 8009cbc:	bfac      	ite	ge
 8009cbe:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8009cc2:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 8009cc6:	608a      	str	r2, [r1, #8]
 8009cc8:	fb90 f2f4 	sdiv	r2, r0, r4
 8009ccc:	fb04 0012 	mls	r0, r4, r2, r0
 8009cd0:	604a      	str	r2, [r1, #4]
 8009cd2:	6008      	str	r0, [r1, #0]
 8009cd4:	2207      	movs	r2, #7
 8009cd6:	1cd8      	adds	r0, r3, #3
 8009cd8:	fb90 f2f2 	sdiv	r2, r0, r2
 8009cdc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009ce0:	1a82      	subs	r2, r0, r2
 8009ce2:	618a      	str	r2, [r1, #24]
 8009ce4:	4a33      	ldr	r2, [pc, #204]	; (8009db4 <gmtime_r+0x128>)
 8009ce6:	4c34      	ldr	r4, [pc, #208]	; (8009db8 <gmtime_r+0x12c>)
 8009ce8:	fb93 f4f4 	sdiv	r4, r3, r4
 8009cec:	fb02 3304 	mla	r3, r2, r4, r3
 8009cf0:	f648 60ac 	movw	r0, #36524	; 0x8eac
 8009cf4:	fbb3 f0f0 	udiv	r0, r3, r0
 8009cf8:	4418      	add	r0, r3
 8009cfa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8009cfe:	fbb3 f2f7 	udiv	r2, r3, r7
 8009d02:	1a80      	subs	r0, r0, r2
 8009d04:	4a2d      	ldr	r2, [pc, #180]	; (8009dbc <gmtime_r+0x130>)
 8009d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d0a:	1a82      	subs	r2, r0, r2
 8009d0c:	f648 6094 	movw	r0, #36500	; 0x8e94
 8009d10:	fbb2 f0f0 	udiv	r0, r2, r0
 8009d14:	4403      	add	r3, r0
 8009d16:	f240 166d 	movw	r6, #365	; 0x16d
 8009d1a:	fbb2 f5f6 	udiv	r5, r2, r6
 8009d1e:	fbb2 f2f7 	udiv	r2, r2, r7
 8009d22:	1a9a      	subs	r2, r3, r2
 8009d24:	fb06 2315 	mls	r3, r6, r5, r2
 8009d28:	2099      	movs	r0, #153	; 0x99
 8009d2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009d2e:	1c5e      	adds	r6, r3, #1
 8009d30:	3202      	adds	r2, #2
 8009d32:	fbb2 f2f0 	udiv	r2, r2, r0
 8009d36:	2a0a      	cmp	r2, #10
 8009d38:	fb00 f002 	mul.w	r0, r0, r2
 8009d3c:	f100 0002 	add.w	r0, r0, #2
 8009d40:	f04f 0705 	mov.w	r7, #5
 8009d44:	fbb0 f0f7 	udiv	r0, r0, r7
 8009d48:	eba6 0000 	sub.w	r0, r6, r0
 8009d4c:	bf34      	ite	cc
 8009d4e:	2602      	movcc	r6, #2
 8009d50:	f06f 0609 	mvncs.w	r6, #9
 8009d54:	4416      	add	r6, r2
 8009d56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d5a:	fb02 5404 	mla	r4, r2, r4, r5
 8009d5e:	2e01      	cmp	r6, #1
 8009d60:	bf98      	it	ls
 8009d62:	3401      	addls	r4, #1
 8009d64:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009d68:	d30b      	bcc.n	8009d82 <gmtime_r+0xf6>
 8009d6a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009d6e:	61cb      	str	r3, [r1, #28]
 8009d70:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8009d74:	2300      	movs	r3, #0
 8009d76:	60c8      	str	r0, [r1, #12]
 8009d78:	614c      	str	r4, [r1, #20]
 8009d7a:	610e      	str	r6, [r1, #16]
 8009d7c:	620b      	str	r3, [r1, #32]
 8009d7e:	4608      	mov	r0, r1
 8009d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d82:	07aa      	lsls	r2, r5, #30
 8009d84:	d105      	bne.n	8009d92 <gmtime_r+0x106>
 8009d86:	2764      	movs	r7, #100	; 0x64
 8009d88:	fbb5 f2f7 	udiv	r2, r5, r7
 8009d8c:	fb07 5212 	mls	r2, r7, r2, r5
 8009d90:	b95a      	cbnz	r2, 8009daa <gmtime_r+0x11e>
 8009d92:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8009d96:	fbb5 f2f7 	udiv	r2, r5, r7
 8009d9a:	fb07 5212 	mls	r2, r7, r2, r5
 8009d9e:	fab2 f282 	clz	r2, r2
 8009da2:	0952      	lsrs	r2, r2, #5
 8009da4:	333b      	adds	r3, #59	; 0x3b
 8009da6:	4413      	add	r3, r2
 8009da8:	e7e1      	b.n	8009d6e <gmtime_r+0xe2>
 8009daa:	2201      	movs	r2, #1
 8009dac:	e7fa      	b.n	8009da4 <gmtime_r+0x118>
 8009dae:	bf00      	nop
 8009db0:	00015180 	.word	0x00015180
 8009db4:	fffdc54f 	.word	0xfffdc54f
 8009db8:	00023ab1 	.word	0x00023ab1
 8009dbc:	00023ab0 	.word	0x00023ab0

08009dc0 <__locale_ctype_ptr_l>:
 8009dc0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009dc4:	4770      	bx	lr
	...

08009dc8 <__locale_ctype_ptr>:
 8009dc8:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <__locale_ctype_ptr+0x14>)
 8009dca:	4a05      	ldr	r2, [pc, #20]	; (8009de0 <__locale_ctype_ptr+0x18>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	bf08      	it	eq
 8009dd4:	4613      	moveq	r3, r2
 8009dd6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009dda:	4770      	bx	lr
 8009ddc:	20000010 	.word	0x20000010
 8009de0:	200000bc 	.word	0x200000bc

08009de4 <__localeconv_l>:
 8009de4:	30f0      	adds	r0, #240	; 0xf0
 8009de6:	4770      	bx	lr

08009de8 <__ascii_mbtowc>:
 8009de8:	b082      	sub	sp, #8
 8009dea:	b901      	cbnz	r1, 8009dee <__ascii_mbtowc+0x6>
 8009dec:	a901      	add	r1, sp, #4
 8009dee:	b142      	cbz	r2, 8009e02 <__ascii_mbtowc+0x1a>
 8009df0:	b14b      	cbz	r3, 8009e06 <__ascii_mbtowc+0x1e>
 8009df2:	7813      	ldrb	r3, [r2, #0]
 8009df4:	600b      	str	r3, [r1, #0]
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	1c10      	adds	r0, r2, #0
 8009dfa:	bf18      	it	ne
 8009dfc:	2001      	movne	r0, #1
 8009dfe:	b002      	add	sp, #8
 8009e00:	4770      	bx	lr
 8009e02:	4610      	mov	r0, r2
 8009e04:	e7fb      	b.n	8009dfe <__ascii_mbtowc+0x16>
 8009e06:	f06f 0001 	mvn.w	r0, #1
 8009e0a:	e7f8      	b.n	8009dfe <__ascii_mbtowc+0x16>

08009e0c <__malloc_lock>:
 8009e0c:	4770      	bx	lr

08009e0e <__malloc_unlock>:
 8009e0e:	4770      	bx	lr

08009e10 <_Balloc>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e14:	4604      	mov	r4, r0
 8009e16:	460e      	mov	r6, r1
 8009e18:	b93d      	cbnz	r5, 8009e2a <_Balloc+0x1a>
 8009e1a:	2010      	movs	r0, #16
 8009e1c:	f7fd ffa4 	bl	8007d68 <malloc>
 8009e20:	6260      	str	r0, [r4, #36]	; 0x24
 8009e22:	6045      	str	r5, [r0, #4]
 8009e24:	6085      	str	r5, [r0, #8]
 8009e26:	6005      	str	r5, [r0, #0]
 8009e28:	60c5      	str	r5, [r0, #12]
 8009e2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009e2c:	68eb      	ldr	r3, [r5, #12]
 8009e2e:	b183      	cbz	r3, 8009e52 <_Balloc+0x42>
 8009e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e38:	b9b8      	cbnz	r0, 8009e6a <_Balloc+0x5a>
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	fa01 f506 	lsl.w	r5, r1, r6
 8009e40:	1d6a      	adds	r2, r5, #5
 8009e42:	0092      	lsls	r2, r2, #2
 8009e44:	4620      	mov	r0, r4
 8009e46:	f000 fbcf 	bl	800a5e8 <_calloc_r>
 8009e4a:	b160      	cbz	r0, 8009e66 <_Balloc+0x56>
 8009e4c:	6046      	str	r6, [r0, #4]
 8009e4e:	6085      	str	r5, [r0, #8]
 8009e50:	e00e      	b.n	8009e70 <_Balloc+0x60>
 8009e52:	2221      	movs	r2, #33	; 0x21
 8009e54:	2104      	movs	r1, #4
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fbc6 	bl	800a5e8 <_calloc_r>
 8009e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e5e:	60e8      	str	r0, [r5, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e4      	bne.n	8009e30 <_Balloc+0x20>
 8009e66:	2000      	movs	r0, #0
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	6802      	ldr	r2, [r0, #0]
 8009e6c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009e70:	2300      	movs	r3, #0
 8009e72:	6103      	str	r3, [r0, #16]
 8009e74:	60c3      	str	r3, [r0, #12]
 8009e76:	bd70      	pop	{r4, r5, r6, pc}

08009e78 <_Bfree>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	b93c      	cbnz	r4, 8009e92 <_Bfree+0x1a>
 8009e82:	2010      	movs	r0, #16
 8009e84:	f7fd ff70 	bl	8007d68 <malloc>
 8009e88:	6270      	str	r0, [r6, #36]	; 0x24
 8009e8a:	6044      	str	r4, [r0, #4]
 8009e8c:	6084      	str	r4, [r0, #8]
 8009e8e:	6004      	str	r4, [r0, #0]
 8009e90:	60c4      	str	r4, [r0, #12]
 8009e92:	b13d      	cbz	r5, 8009ea4 <_Bfree+0x2c>
 8009e94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e96:	686a      	ldr	r2, [r5, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e9e:	6029      	str	r1, [r5, #0]
 8009ea0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}

08009ea6 <__multadd>:
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	690d      	ldr	r5, [r1, #16]
 8009eac:	461f      	mov	r7, r3
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	f101 0e14 	add.w	lr, r1, #20
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f8de 0000 	ldr.w	r0, [lr]
 8009ebc:	b281      	uxth	r1, r0
 8009ebe:	fb02 7101 	mla	r1, r2, r1, r7
 8009ec2:	0c0f      	lsrs	r7, r1, #16
 8009ec4:	0c00      	lsrs	r0, r0, #16
 8009ec6:	fb02 7000 	mla	r0, r2, r0, r7
 8009eca:	b289      	uxth	r1, r1
 8009ecc:	3301      	adds	r3, #1
 8009ece:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009ed2:	429d      	cmp	r5, r3
 8009ed4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009ed8:	f84e 1b04 	str.w	r1, [lr], #4
 8009edc:	dcec      	bgt.n	8009eb8 <__multadd+0x12>
 8009ede:	b1d7      	cbz	r7, 8009f16 <__multadd+0x70>
 8009ee0:	68a3      	ldr	r3, [r4, #8]
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	db12      	blt.n	8009f0c <__multadd+0x66>
 8009ee6:	6861      	ldr	r1, [r4, #4]
 8009ee8:	4630      	mov	r0, r6
 8009eea:	3101      	adds	r1, #1
 8009eec:	f7ff ff90 	bl	8009e10 <_Balloc>
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	3202      	adds	r2, #2
 8009ef4:	f104 010c 	add.w	r1, r4, #12
 8009ef8:	4680      	mov	r8, r0
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	300c      	adds	r0, #12
 8009efe:	f7fd ff43 	bl	8007d88 <memcpy>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff ffb7 	bl	8009e78 <_Bfree>
 8009f0a:	4644      	mov	r4, r8
 8009f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f10:	3501      	adds	r5, #1
 8009f12:	615f      	str	r7, [r3, #20]
 8009f14:	6125      	str	r5, [r4, #16]
 8009f16:	4620      	mov	r0, r4
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f1c <__s2b>:
 8009f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f20:	460c      	mov	r4, r1
 8009f22:	4615      	mov	r5, r2
 8009f24:	461f      	mov	r7, r3
 8009f26:	2209      	movs	r2, #9
 8009f28:	3308      	adds	r3, #8
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f30:	2100      	movs	r1, #0
 8009f32:	2201      	movs	r2, #1
 8009f34:	429a      	cmp	r2, r3
 8009f36:	db20      	blt.n	8009f7a <__s2b+0x5e>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff ff69 	bl	8009e10 <_Balloc>
 8009f3e:	9b08      	ldr	r3, [sp, #32]
 8009f40:	6143      	str	r3, [r0, #20]
 8009f42:	2d09      	cmp	r5, #9
 8009f44:	f04f 0301 	mov.w	r3, #1
 8009f48:	6103      	str	r3, [r0, #16]
 8009f4a:	dd19      	ble.n	8009f80 <__s2b+0x64>
 8009f4c:	f104 0909 	add.w	r9, r4, #9
 8009f50:	46c8      	mov	r8, r9
 8009f52:	442c      	add	r4, r5
 8009f54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f58:	4601      	mov	r1, r0
 8009f5a:	3b30      	subs	r3, #48	; 0x30
 8009f5c:	220a      	movs	r2, #10
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7ff ffa1 	bl	8009ea6 <__multadd>
 8009f64:	45a0      	cmp	r8, r4
 8009f66:	d1f5      	bne.n	8009f54 <__s2b+0x38>
 8009f68:	f1a5 0408 	sub.w	r4, r5, #8
 8009f6c:	444c      	add	r4, r9
 8009f6e:	1b2d      	subs	r5, r5, r4
 8009f70:	1963      	adds	r3, r4, r5
 8009f72:	42bb      	cmp	r3, r7
 8009f74:	db07      	blt.n	8009f86 <__s2b+0x6a>
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	0052      	lsls	r2, r2, #1
 8009f7c:	3101      	adds	r1, #1
 8009f7e:	e7d9      	b.n	8009f34 <__s2b+0x18>
 8009f80:	340a      	adds	r4, #10
 8009f82:	2509      	movs	r5, #9
 8009f84:	e7f3      	b.n	8009f6e <__s2b+0x52>
 8009f86:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	3b30      	subs	r3, #48	; 0x30
 8009f8e:	220a      	movs	r2, #10
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7ff ff88 	bl	8009ea6 <__multadd>
 8009f96:	e7eb      	b.n	8009f70 <__s2b+0x54>

08009f98 <__hi0bits>:
 8009f98:	0c02      	lsrs	r2, r0, #16
 8009f9a:	0412      	lsls	r2, r2, #16
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	b9b2      	cbnz	r2, 8009fce <__hi0bits+0x36>
 8009fa0:	0403      	lsls	r3, r0, #16
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009fa8:	bf04      	itt	eq
 8009faa:	021b      	lsleq	r3, r3, #8
 8009fac:	3008      	addeq	r0, #8
 8009fae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009fb2:	bf04      	itt	eq
 8009fb4:	011b      	lsleq	r3, r3, #4
 8009fb6:	3004      	addeq	r0, #4
 8009fb8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009fbc:	bf04      	itt	eq
 8009fbe:	009b      	lsleq	r3, r3, #2
 8009fc0:	3002      	addeq	r0, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	db06      	blt.n	8009fd4 <__hi0bits+0x3c>
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	d503      	bpl.n	8009fd2 <__hi0bits+0x3a>
 8009fca:	3001      	adds	r0, #1
 8009fcc:	4770      	bx	lr
 8009fce:	2000      	movs	r0, #0
 8009fd0:	e7e8      	b.n	8009fa4 <__hi0bits+0xc>
 8009fd2:	2020      	movs	r0, #32
 8009fd4:	4770      	bx	lr

08009fd6 <__lo0bits>:
 8009fd6:	6803      	ldr	r3, [r0, #0]
 8009fd8:	f013 0207 	ands.w	r2, r3, #7
 8009fdc:	4601      	mov	r1, r0
 8009fde:	d00b      	beq.n	8009ff8 <__lo0bits+0x22>
 8009fe0:	07da      	lsls	r2, r3, #31
 8009fe2:	d423      	bmi.n	800a02c <__lo0bits+0x56>
 8009fe4:	0798      	lsls	r0, r3, #30
 8009fe6:	bf49      	itett	mi
 8009fe8:	085b      	lsrmi	r3, r3, #1
 8009fea:	089b      	lsrpl	r3, r3, #2
 8009fec:	2001      	movmi	r0, #1
 8009fee:	600b      	strmi	r3, [r1, #0]
 8009ff0:	bf5c      	itt	pl
 8009ff2:	600b      	strpl	r3, [r1, #0]
 8009ff4:	2002      	movpl	r0, #2
 8009ff6:	4770      	bx	lr
 8009ff8:	b298      	uxth	r0, r3
 8009ffa:	b9a8      	cbnz	r0, 800a028 <__lo0bits+0x52>
 8009ffc:	0c1b      	lsrs	r3, r3, #16
 8009ffe:	2010      	movs	r0, #16
 800a000:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a004:	bf04      	itt	eq
 800a006:	0a1b      	lsreq	r3, r3, #8
 800a008:	3008      	addeq	r0, #8
 800a00a:	071a      	lsls	r2, r3, #28
 800a00c:	bf04      	itt	eq
 800a00e:	091b      	lsreq	r3, r3, #4
 800a010:	3004      	addeq	r0, #4
 800a012:	079a      	lsls	r2, r3, #30
 800a014:	bf04      	itt	eq
 800a016:	089b      	lsreq	r3, r3, #2
 800a018:	3002      	addeq	r0, #2
 800a01a:	07da      	lsls	r2, r3, #31
 800a01c:	d402      	bmi.n	800a024 <__lo0bits+0x4e>
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	d006      	beq.n	800a030 <__lo0bits+0x5a>
 800a022:	3001      	adds	r0, #1
 800a024:	600b      	str	r3, [r1, #0]
 800a026:	4770      	bx	lr
 800a028:	4610      	mov	r0, r2
 800a02a:	e7e9      	b.n	800a000 <__lo0bits+0x2a>
 800a02c:	2000      	movs	r0, #0
 800a02e:	4770      	bx	lr
 800a030:	2020      	movs	r0, #32
 800a032:	4770      	bx	lr

0800a034 <__i2b>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	2101      	movs	r1, #1
 800a03a:	f7ff fee9 	bl	8009e10 <_Balloc>
 800a03e:	2201      	movs	r2, #1
 800a040:	6144      	str	r4, [r0, #20]
 800a042:	6102      	str	r2, [r0, #16]
 800a044:	bd10      	pop	{r4, pc}

0800a046 <__multiply>:
 800a046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	4614      	mov	r4, r2
 800a04c:	690a      	ldr	r2, [r1, #16]
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	bfb8      	it	lt
 800a054:	460b      	movlt	r3, r1
 800a056:	4689      	mov	r9, r1
 800a058:	bfbc      	itt	lt
 800a05a:	46a1      	movlt	r9, r4
 800a05c:	461c      	movlt	r4, r3
 800a05e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a062:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a066:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a06a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a06e:	eb07 060a 	add.w	r6, r7, sl
 800a072:	429e      	cmp	r6, r3
 800a074:	bfc8      	it	gt
 800a076:	3101      	addgt	r1, #1
 800a078:	f7ff feca 	bl	8009e10 <_Balloc>
 800a07c:	f100 0514 	add.w	r5, r0, #20
 800a080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a084:	462b      	mov	r3, r5
 800a086:	2200      	movs	r2, #0
 800a088:	4543      	cmp	r3, r8
 800a08a:	d316      	bcc.n	800a0ba <__multiply+0x74>
 800a08c:	f104 0214 	add.w	r2, r4, #20
 800a090:	f109 0114 	add.w	r1, r9, #20
 800a094:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800a098:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	9c01      	ldr	r4, [sp, #4]
 800a0a0:	4294      	cmp	r4, r2
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	d80c      	bhi.n	800a0c0 <__multiply+0x7a>
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	dd03      	ble.n	800a0b2 <__multiply+0x6c>
 800a0aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d054      	beq.n	800a15c <__multiply+0x116>
 800a0b2:	6106      	str	r6, [r0, #16]
 800a0b4:	b003      	add	sp, #12
 800a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ba:	f843 2b04 	str.w	r2, [r3], #4
 800a0be:	e7e3      	b.n	800a088 <__multiply+0x42>
 800a0c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0c4:	3204      	adds	r2, #4
 800a0c6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ca:	d020      	beq.n	800a10e <__multiply+0xc8>
 800a0cc:	46ae      	mov	lr, r5
 800a0ce:	4689      	mov	r9, r1
 800a0d0:	f04f 0c00 	mov.w	ip, #0
 800a0d4:	f859 4b04 	ldr.w	r4, [r9], #4
 800a0d8:	f8be b000 	ldrh.w	fp, [lr]
 800a0dc:	b2a3      	uxth	r3, r4
 800a0de:	fb0a b303 	mla	r3, sl, r3, fp
 800a0e2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800a0e6:	f8de 4000 	ldr.w	r4, [lr]
 800a0ea:	4463      	add	r3, ip
 800a0ec:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a0f0:	fb0a c40b 	mla	r4, sl, fp, ip
 800a0f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0fe:	454f      	cmp	r7, r9
 800a100:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a104:	f84e 3b04 	str.w	r3, [lr], #4
 800a108:	d8e4      	bhi.n	800a0d4 <__multiply+0x8e>
 800a10a:	f8ce c000 	str.w	ip, [lr]
 800a10e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800a112:	f1b9 0f00 	cmp.w	r9, #0
 800a116:	d01f      	beq.n	800a158 <__multiply+0x112>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	46ae      	mov	lr, r5
 800a11c:	468c      	mov	ip, r1
 800a11e:	f04f 0a00 	mov.w	sl, #0
 800a122:	f8bc 4000 	ldrh.w	r4, [ip]
 800a126:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a12a:	fb09 b404 	mla	r4, r9, r4, fp
 800a12e:	44a2      	add	sl, r4
 800a130:	b29b      	uxth	r3, r3
 800a132:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a136:	f84e 3b04 	str.w	r3, [lr], #4
 800a13a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a13e:	f8be 4000 	ldrh.w	r4, [lr]
 800a142:	0c1b      	lsrs	r3, r3, #16
 800a144:	fb09 4303 	mla	r3, r9, r3, r4
 800a148:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800a14c:	4567      	cmp	r7, ip
 800a14e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a152:	d8e6      	bhi.n	800a122 <__multiply+0xdc>
 800a154:	f8ce 3000 	str.w	r3, [lr]
 800a158:	3504      	adds	r5, #4
 800a15a:	e7a0      	b.n	800a09e <__multiply+0x58>
 800a15c:	3e01      	subs	r6, #1
 800a15e:	e7a2      	b.n	800a0a6 <__multiply+0x60>

0800a160 <__pow5mult>:
 800a160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a164:	4615      	mov	r5, r2
 800a166:	f012 0203 	ands.w	r2, r2, #3
 800a16a:	4606      	mov	r6, r0
 800a16c:	460f      	mov	r7, r1
 800a16e:	d007      	beq.n	800a180 <__pow5mult+0x20>
 800a170:	3a01      	subs	r2, #1
 800a172:	4c21      	ldr	r4, [pc, #132]	; (800a1f8 <__pow5mult+0x98>)
 800a174:	2300      	movs	r3, #0
 800a176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a17a:	f7ff fe94 	bl	8009ea6 <__multadd>
 800a17e:	4607      	mov	r7, r0
 800a180:	10ad      	asrs	r5, r5, #2
 800a182:	d035      	beq.n	800a1f0 <__pow5mult+0x90>
 800a184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a186:	b93c      	cbnz	r4, 800a198 <__pow5mult+0x38>
 800a188:	2010      	movs	r0, #16
 800a18a:	f7fd fded 	bl	8007d68 <malloc>
 800a18e:	6270      	str	r0, [r6, #36]	; 0x24
 800a190:	6044      	str	r4, [r0, #4]
 800a192:	6084      	str	r4, [r0, #8]
 800a194:	6004      	str	r4, [r0, #0]
 800a196:	60c4      	str	r4, [r0, #12]
 800a198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a19c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1a0:	b94c      	cbnz	r4, 800a1b6 <__pow5mult+0x56>
 800a1a2:	f240 2171 	movw	r1, #625	; 0x271
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f7ff ff44 	bl	800a034 <__i2b>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	f04f 0800 	mov.w	r8, #0
 800a1ba:	07eb      	lsls	r3, r5, #31
 800a1bc:	d50a      	bpl.n	800a1d4 <__pow5mult+0x74>
 800a1be:	4639      	mov	r1, r7
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7ff ff3f 	bl	800a046 <__multiply>
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4681      	mov	r9, r0
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7ff fe53 	bl	8009e78 <_Bfree>
 800a1d2:	464f      	mov	r7, r9
 800a1d4:	106d      	asrs	r5, r5, #1
 800a1d6:	d00b      	beq.n	800a1f0 <__pow5mult+0x90>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	b938      	cbnz	r0, 800a1ec <__pow5mult+0x8c>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7ff ff30 	bl	800a046 <__multiply>
 800a1e6:	6020      	str	r0, [r4, #0]
 800a1e8:	f8c0 8000 	str.w	r8, [r0]
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	e7e4      	b.n	800a1ba <__pow5mult+0x5a>
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f6:	bf00      	nop
 800a1f8:	0800b408 	.word	0x0800b408

0800a1fc <__lshift>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	460c      	mov	r4, r1
 800a202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	6849      	ldr	r1, [r1, #4]
 800a20a:	eb0a 0903 	add.w	r9, sl, r3
 800a20e:	68a3      	ldr	r3, [r4, #8]
 800a210:	4607      	mov	r7, r0
 800a212:	4616      	mov	r6, r2
 800a214:	f109 0501 	add.w	r5, r9, #1
 800a218:	42ab      	cmp	r3, r5
 800a21a:	db31      	blt.n	800a280 <__lshift+0x84>
 800a21c:	4638      	mov	r0, r7
 800a21e:	f7ff fdf7 	bl	8009e10 <_Balloc>
 800a222:	2200      	movs	r2, #0
 800a224:	4680      	mov	r8, r0
 800a226:	f100 0314 	add.w	r3, r0, #20
 800a22a:	4611      	mov	r1, r2
 800a22c:	4552      	cmp	r2, sl
 800a22e:	db2a      	blt.n	800a286 <__lshift+0x8a>
 800a230:	6920      	ldr	r0, [r4, #16]
 800a232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a236:	f104 0114 	add.w	r1, r4, #20
 800a23a:	f016 021f 	ands.w	r2, r6, #31
 800a23e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a242:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a246:	d022      	beq.n	800a28e <__lshift+0x92>
 800a248:	f1c2 0c20 	rsb	ip, r2, #32
 800a24c:	2000      	movs	r0, #0
 800a24e:	680e      	ldr	r6, [r1, #0]
 800a250:	4096      	lsls	r6, r2
 800a252:	4330      	orrs	r0, r6
 800a254:	f843 0b04 	str.w	r0, [r3], #4
 800a258:	f851 0b04 	ldr.w	r0, [r1], #4
 800a25c:	458e      	cmp	lr, r1
 800a25e:	fa20 f00c 	lsr.w	r0, r0, ip
 800a262:	d8f4      	bhi.n	800a24e <__lshift+0x52>
 800a264:	6018      	str	r0, [r3, #0]
 800a266:	b108      	cbz	r0, 800a26c <__lshift+0x70>
 800a268:	f109 0502 	add.w	r5, r9, #2
 800a26c:	3d01      	subs	r5, #1
 800a26e:	4638      	mov	r0, r7
 800a270:	f8c8 5010 	str.w	r5, [r8, #16]
 800a274:	4621      	mov	r1, r4
 800a276:	f7ff fdff 	bl	8009e78 <_Bfree>
 800a27a:	4640      	mov	r0, r8
 800a27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a280:	3101      	adds	r1, #1
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	e7c8      	b.n	800a218 <__lshift+0x1c>
 800a286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a28a:	3201      	adds	r2, #1
 800a28c:	e7ce      	b.n	800a22c <__lshift+0x30>
 800a28e:	3b04      	subs	r3, #4
 800a290:	f851 2b04 	ldr.w	r2, [r1], #4
 800a294:	f843 2f04 	str.w	r2, [r3, #4]!
 800a298:	458e      	cmp	lr, r1
 800a29a:	d8f9      	bhi.n	800a290 <__lshift+0x94>
 800a29c:	e7e6      	b.n	800a26c <__lshift+0x70>

0800a29e <__mcmp>:
 800a29e:	6903      	ldr	r3, [r0, #16]
 800a2a0:	690a      	ldr	r2, [r1, #16]
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	b530      	push	{r4, r5, lr}
 800a2a6:	d10c      	bne.n	800a2c2 <__mcmp+0x24>
 800a2a8:	0092      	lsls	r2, r2, #2
 800a2aa:	3014      	adds	r0, #20
 800a2ac:	3114      	adds	r1, #20
 800a2ae:	1884      	adds	r4, r0, r2
 800a2b0:	4411      	add	r1, r2
 800a2b2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2b6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2ba:	4295      	cmp	r5, r2
 800a2bc:	d003      	beq.n	800a2c6 <__mcmp+0x28>
 800a2be:	d305      	bcc.n	800a2cc <__mcmp+0x2e>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	bd30      	pop	{r4, r5, pc}
 800a2c6:	42a0      	cmp	r0, r4
 800a2c8:	d3f3      	bcc.n	800a2b2 <__mcmp+0x14>
 800a2ca:	e7fa      	b.n	800a2c2 <__mcmp+0x24>
 800a2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d0:	e7f7      	b.n	800a2c2 <__mcmp+0x24>

0800a2d2 <__mdiff>:
 800a2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	4607      	mov	r7, r0
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4628      	mov	r0, r5
 800a2de:	4614      	mov	r4, r2
 800a2e0:	f7ff ffdd 	bl	800a29e <__mcmp>
 800a2e4:	1e06      	subs	r6, r0, #0
 800a2e6:	d108      	bne.n	800a2fa <__mdiff+0x28>
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	f7ff fd90 	bl	8009e10 <_Balloc>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	6103      	str	r3, [r0, #16]
 800a2f4:	6146      	str	r6, [r0, #20]
 800a2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fa:	bfa4      	itt	ge
 800a2fc:	4623      	movge	r3, r4
 800a2fe:	462c      	movge	r4, r5
 800a300:	4638      	mov	r0, r7
 800a302:	6861      	ldr	r1, [r4, #4]
 800a304:	bfa6      	itte	ge
 800a306:	461d      	movge	r5, r3
 800a308:	2600      	movge	r6, #0
 800a30a:	2601      	movlt	r6, #1
 800a30c:	f7ff fd80 	bl	8009e10 <_Balloc>
 800a310:	692b      	ldr	r3, [r5, #16]
 800a312:	60c6      	str	r6, [r0, #12]
 800a314:	6926      	ldr	r6, [r4, #16]
 800a316:	f105 0914 	add.w	r9, r5, #20
 800a31a:	f104 0214 	add.w	r2, r4, #20
 800a31e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a322:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a326:	f100 0514 	add.w	r5, r0, #20
 800a32a:	f04f 0c00 	mov.w	ip, #0
 800a32e:	f852 ab04 	ldr.w	sl, [r2], #4
 800a332:	f859 4b04 	ldr.w	r4, [r9], #4
 800a336:	fa1c f18a 	uxtah	r1, ip, sl
 800a33a:	b2a3      	uxth	r3, r4
 800a33c:	1ac9      	subs	r1, r1, r3
 800a33e:	0c23      	lsrs	r3, r4, #16
 800a340:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a344:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a348:	b289      	uxth	r1, r1
 800a34a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a34e:	45c8      	cmp	r8, r9
 800a350:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a354:	4696      	mov	lr, r2
 800a356:	f845 3b04 	str.w	r3, [r5], #4
 800a35a:	d8e8      	bhi.n	800a32e <__mdiff+0x5c>
 800a35c:	45be      	cmp	lr, r7
 800a35e:	d305      	bcc.n	800a36c <__mdiff+0x9a>
 800a360:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a364:	b18b      	cbz	r3, 800a38a <__mdiff+0xb8>
 800a366:	6106      	str	r6, [r0, #16]
 800a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36c:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a370:	fa1c f381 	uxtah	r3, ip, r1
 800a374:	141a      	asrs	r2, r3, #16
 800a376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a380:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a384:	f845 3b04 	str.w	r3, [r5], #4
 800a388:	e7e8      	b.n	800a35c <__mdiff+0x8a>
 800a38a:	3e01      	subs	r6, #1
 800a38c:	e7e8      	b.n	800a360 <__mdiff+0x8e>
	...

0800a390 <__ulp>:
 800a390:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <__ulp+0x4c>)
 800a392:	ee10 2a90 	vmov	r2, s1
 800a396:	401a      	ands	r2, r3
 800a398:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dd04      	ble.n	800a3aa <__ulp+0x1a>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	ec41 0b10 	vmov	d0, r0, r1
 800a3a8:	4770      	bx	lr
 800a3aa:	425b      	negs	r3, r3
 800a3ac:	151b      	asrs	r3, r3, #20
 800a3ae:	2b13      	cmp	r3, #19
 800a3b0:	f04f 0000 	mov.w	r0, #0
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	dc04      	bgt.n	800a3c4 <__ulp+0x34>
 800a3ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a3be:	fa42 f103 	asr.w	r1, r2, r3
 800a3c2:	e7ef      	b.n	800a3a4 <__ulp+0x14>
 800a3c4:	3b14      	subs	r3, #20
 800a3c6:	2b1e      	cmp	r3, #30
 800a3c8:	f04f 0201 	mov.w	r2, #1
 800a3cc:	bfda      	itte	le
 800a3ce:	f1c3 031f 	rsble	r3, r3, #31
 800a3d2:	fa02 f303 	lslle.w	r3, r2, r3
 800a3d6:	4613      	movgt	r3, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	e7e3      	b.n	800a3a4 <__ulp+0x14>
 800a3dc:	7ff00000 	.word	0x7ff00000

0800a3e0 <__b2d>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	6905      	ldr	r5, [r0, #16]
 800a3e4:	f100 0714 	add.w	r7, r0, #20
 800a3e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a3ec:	1f2e      	subs	r6, r5, #4
 800a3ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff fdd0 	bl	8009f98 <__hi0bits>
 800a3f8:	f1c0 0320 	rsb	r3, r0, #32
 800a3fc:	280a      	cmp	r0, #10
 800a3fe:	600b      	str	r3, [r1, #0]
 800a400:	f8df e074 	ldr.w	lr, [pc, #116]	; 800a478 <__b2d+0x98>
 800a404:	dc14      	bgt.n	800a430 <__b2d+0x50>
 800a406:	f1c0 0c0b 	rsb	ip, r0, #11
 800a40a:	fa24 f10c 	lsr.w	r1, r4, ip
 800a40e:	42b7      	cmp	r7, r6
 800a410:	ea41 030e 	orr.w	r3, r1, lr
 800a414:	bf34      	ite	cc
 800a416:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a41a:	2100      	movcs	r1, #0
 800a41c:	3015      	adds	r0, #21
 800a41e:	fa04 f000 	lsl.w	r0, r4, r0
 800a422:	fa21 f10c 	lsr.w	r1, r1, ip
 800a426:	ea40 0201 	orr.w	r2, r0, r1
 800a42a:	ec43 2b10 	vmov	d0, r2, r3
 800a42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a430:	42b7      	cmp	r7, r6
 800a432:	bf3a      	itte	cc
 800a434:	f1a5 0608 	subcc.w	r6, r5, #8
 800a438:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a43c:	2100      	movcs	r1, #0
 800a43e:	380b      	subs	r0, #11
 800a440:	d015      	beq.n	800a46e <__b2d+0x8e>
 800a442:	4084      	lsls	r4, r0
 800a444:	f1c0 0520 	rsb	r5, r0, #32
 800a448:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a44c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a450:	42be      	cmp	r6, r7
 800a452:	fa21 fe05 	lsr.w	lr, r1, r5
 800a456:	ea44 030e 	orr.w	r3, r4, lr
 800a45a:	bf8c      	ite	hi
 800a45c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a460:	2400      	movls	r4, #0
 800a462:	fa01 f000 	lsl.w	r0, r1, r0
 800a466:	40ec      	lsrs	r4, r5
 800a468:	ea40 0204 	orr.w	r2, r0, r4
 800a46c:	e7dd      	b.n	800a42a <__b2d+0x4a>
 800a46e:	ea44 030e 	orr.w	r3, r4, lr
 800a472:	460a      	mov	r2, r1
 800a474:	e7d9      	b.n	800a42a <__b2d+0x4a>
 800a476:	bf00      	nop
 800a478:	3ff00000 	.word	0x3ff00000

0800a47c <__d2b>:
 800a47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a480:	460e      	mov	r6, r1
 800a482:	2101      	movs	r1, #1
 800a484:	ec59 8b10 	vmov	r8, r9, d0
 800a488:	4615      	mov	r5, r2
 800a48a:	f7ff fcc1 	bl	8009e10 <_Balloc>
 800a48e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a492:	4607      	mov	r7, r0
 800a494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a498:	bb34      	cbnz	r4, 800a4e8 <__d2b+0x6c>
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	f1b8 0f00 	cmp.w	r8, #0
 800a4a0:	d027      	beq.n	800a4f2 <__d2b+0x76>
 800a4a2:	a802      	add	r0, sp, #8
 800a4a4:	f840 8d08 	str.w	r8, [r0, #-8]!
 800a4a8:	f7ff fd95 	bl	8009fd6 <__lo0bits>
 800a4ac:	9900      	ldr	r1, [sp, #0]
 800a4ae:	b1f0      	cbz	r0, 800a4ee <__d2b+0x72>
 800a4b0:	9a01      	ldr	r2, [sp, #4]
 800a4b2:	f1c0 0320 	rsb	r3, r0, #32
 800a4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	40c2      	lsrs	r2, r0
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	9201      	str	r2, [sp, #4]
 800a4c2:	9b01      	ldr	r3, [sp, #4]
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bf14      	ite	ne
 800a4ca:	2102      	movne	r1, #2
 800a4cc:	2101      	moveq	r1, #1
 800a4ce:	6139      	str	r1, [r7, #16]
 800a4d0:	b1c4      	cbz	r4, 800a504 <__d2b+0x88>
 800a4d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a4d6:	4404      	add	r4, r0
 800a4d8:	6034      	str	r4, [r6, #0]
 800a4da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4de:	6028      	str	r0, [r5, #0]
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	b003      	add	sp, #12
 800a4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4ec:	e7d5      	b.n	800a49a <__d2b+0x1e>
 800a4ee:	6179      	str	r1, [r7, #20]
 800a4f0:	e7e7      	b.n	800a4c2 <__d2b+0x46>
 800a4f2:	a801      	add	r0, sp, #4
 800a4f4:	f7ff fd6f 	bl	8009fd6 <__lo0bits>
 800a4f8:	9b01      	ldr	r3, [sp, #4]
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	6139      	str	r1, [r7, #16]
 800a500:	3020      	adds	r0, #32
 800a502:	e7e5      	b.n	800a4d0 <__d2b+0x54>
 800a504:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	6918      	ldr	r0, [r3, #16]
 800a510:	f7ff fd42 	bl	8009f98 <__hi0bits>
 800a514:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a518:	e7e1      	b.n	800a4de <__d2b+0x62>

0800a51a <__ratio>:
 800a51a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a51e:	4688      	mov	r8, r1
 800a520:	4669      	mov	r1, sp
 800a522:	4681      	mov	r9, r0
 800a524:	f7ff ff5c 	bl	800a3e0 <__b2d>
 800a528:	a901      	add	r1, sp, #4
 800a52a:	4640      	mov	r0, r8
 800a52c:	ec55 4b10 	vmov	r4, r5, d0
 800a530:	f7ff ff56 	bl	800a3e0 <__b2d>
 800a534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a538:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a53c:	1a9a      	subs	r2, r3, r2
 800a53e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800a542:	1acb      	subs	r3, r1, r3
 800a544:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a548:	ec57 6b10 	vmov	r6, r7, d0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bfd6      	itet	le
 800a550:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a554:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800a558:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 800a55c:	4632      	mov	r2, r6
 800a55e:	463b      	mov	r3, r7
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f6 f97e 	bl	8000864 <__aeabi_ddiv>
 800a568:	ec41 0b10 	vmov	d0, r0, r1
 800a56c:	b003      	add	sp, #12
 800a56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a572 <__copybits>:
 800a572:	3901      	subs	r1, #1
 800a574:	b510      	push	{r4, lr}
 800a576:	1149      	asrs	r1, r1, #5
 800a578:	6914      	ldr	r4, [r2, #16]
 800a57a:	3101      	adds	r1, #1
 800a57c:	f102 0314 	add.w	r3, r2, #20
 800a580:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a584:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a588:	42a3      	cmp	r3, r4
 800a58a:	4602      	mov	r2, r0
 800a58c:	d303      	bcc.n	800a596 <__copybits+0x24>
 800a58e:	2300      	movs	r3, #0
 800a590:	428a      	cmp	r2, r1
 800a592:	d305      	bcc.n	800a5a0 <__copybits+0x2e>
 800a594:	bd10      	pop	{r4, pc}
 800a596:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59a:	f840 2b04 	str.w	r2, [r0], #4
 800a59e:	e7f3      	b.n	800a588 <__copybits+0x16>
 800a5a0:	f842 3b04 	str.w	r3, [r2], #4
 800a5a4:	e7f4      	b.n	800a590 <__copybits+0x1e>

0800a5a6 <__any_on>:
 800a5a6:	f100 0214 	add.w	r2, r0, #20
 800a5aa:	6900      	ldr	r0, [r0, #16]
 800a5ac:	114b      	asrs	r3, r1, #5
 800a5ae:	4298      	cmp	r0, r3
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	db11      	blt.n	800a5d8 <__any_on+0x32>
 800a5b4:	dd0a      	ble.n	800a5cc <__any_on+0x26>
 800a5b6:	f011 011f 	ands.w	r1, r1, #31
 800a5ba:	d007      	beq.n	800a5cc <__any_on+0x26>
 800a5bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5c0:	fa24 f001 	lsr.w	r0, r4, r1
 800a5c4:	fa00 f101 	lsl.w	r1, r0, r1
 800a5c8:	428c      	cmp	r4, r1
 800a5ca:	d10b      	bne.n	800a5e4 <__any_on+0x3e>
 800a5cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d803      	bhi.n	800a5dc <__any_on+0x36>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	bd10      	pop	{r4, pc}
 800a5d8:	4603      	mov	r3, r0
 800a5da:	e7f7      	b.n	800a5cc <__any_on+0x26>
 800a5dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d0f5      	beq.n	800a5d0 <__any_on+0x2a>
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	bd10      	pop	{r4, pc}

0800a5e8 <_calloc_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	fb02 f401 	mul.w	r4, r2, r1
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f7fd fe88 	bl	8008304 <_malloc_r>
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	b118      	cbz	r0, 800a600 <_calloc_r+0x18>
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	f7fd fbcf 	bl	8007d9e <memset>
 800a600:	4628      	mov	r0, r5
 800a602:	bd38      	pop	{r3, r4, r5, pc}

0800a604 <siscanf>:
 800a604:	b40e      	push	{r1, r2, r3}
 800a606:	b530      	push	{r4, r5, lr}
 800a608:	b09c      	sub	sp, #112	; 0x70
 800a60a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a60c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a610:	f854 5b04 	ldr.w	r5, [r4], #4
 800a614:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a618:	9002      	str	r0, [sp, #8]
 800a61a:	9006      	str	r0, [sp, #24]
 800a61c:	f7f5 fde2 	bl	80001e4 <strlen>
 800a620:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <siscanf+0x4c>)
 800a622:	9003      	str	r0, [sp, #12]
 800a624:	9007      	str	r0, [sp, #28]
 800a626:	930b      	str	r3, [sp, #44]	; 0x2c
 800a628:	480a      	ldr	r0, [pc, #40]	; (800a654 <siscanf+0x50>)
 800a62a:	9401      	str	r4, [sp, #4]
 800a62c:	2300      	movs	r3, #0
 800a62e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a630:	9314      	str	r3, [sp, #80]	; 0x50
 800a632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a636:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a63a:	462a      	mov	r2, r5
 800a63c:	4623      	mov	r3, r4
 800a63e:	a902      	add	r1, sp, #8
 800a640:	6800      	ldr	r0, [r0, #0]
 800a642:	f000 f935 	bl	800a8b0 <__ssvfiscanf_r>
 800a646:	b01c      	add	sp, #112	; 0x70
 800a648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a64c:	b003      	add	sp, #12
 800a64e:	4770      	bx	lr
 800a650:	0800a659 	.word	0x0800a659
 800a654:	20000010 	.word	0x20000010

0800a658 <__seofread>:
 800a658:	2000      	movs	r0, #0
 800a65a:	4770      	bx	lr

0800a65c <strcpy>:
 800a65c:	4603      	mov	r3, r0
 800a65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a662:	f803 2b01 	strb.w	r2, [r3], #1
 800a666:	2a00      	cmp	r2, #0
 800a668:	d1f9      	bne.n	800a65e <strcpy+0x2>
 800a66a:	4770      	bx	lr

0800a66c <strncmp>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	b16a      	cbz	r2, 800a68c <strncmp+0x20>
 800a670:	3901      	subs	r1, #1
 800a672:	1884      	adds	r4, r0, r2
 800a674:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a678:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d103      	bne.n	800a688 <strncmp+0x1c>
 800a680:	42a0      	cmp	r0, r4
 800a682:	d001      	beq.n	800a688 <strncmp+0x1c>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1f5      	bne.n	800a674 <strncmp+0x8>
 800a688:	1a98      	subs	r0, r3, r2
 800a68a:	bd10      	pop	{r4, pc}
 800a68c:	4610      	mov	r0, r2
 800a68e:	bd10      	pop	{r4, pc}

0800a690 <_strtoul_l.isra.0>:
 800a690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a694:	4680      	mov	r8, r0
 800a696:	4689      	mov	r9, r1
 800a698:	4692      	mov	sl, r2
 800a69a:	461e      	mov	r6, r3
 800a69c:	460f      	mov	r7, r1
 800a69e:	463d      	mov	r5, r7
 800a6a0:	9808      	ldr	r0, [sp, #32]
 800a6a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6a6:	f7ff fb8b 	bl	8009dc0 <__locale_ctype_ptr_l>
 800a6aa:	4420      	add	r0, r4
 800a6ac:	7843      	ldrb	r3, [r0, #1]
 800a6ae:	f013 0308 	ands.w	r3, r3, #8
 800a6b2:	d10a      	bne.n	800a6ca <_strtoul_l.isra.0+0x3a>
 800a6b4:	2c2d      	cmp	r4, #45	; 0x2d
 800a6b6:	d10a      	bne.n	800a6ce <_strtoul_l.isra.0+0x3e>
 800a6b8:	782c      	ldrb	r4, [r5, #0]
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	1cbd      	adds	r5, r7, #2
 800a6be:	b15e      	cbz	r6, 800a6d8 <_strtoul_l.isra.0+0x48>
 800a6c0:	2e10      	cmp	r6, #16
 800a6c2:	d113      	bne.n	800a6ec <_strtoul_l.isra.0+0x5c>
 800a6c4:	2c30      	cmp	r4, #48	; 0x30
 800a6c6:	d009      	beq.n	800a6dc <_strtoul_l.isra.0+0x4c>
 800a6c8:	e010      	b.n	800a6ec <_strtoul_l.isra.0+0x5c>
 800a6ca:	462f      	mov	r7, r5
 800a6cc:	e7e7      	b.n	800a69e <_strtoul_l.isra.0+0xe>
 800a6ce:	2c2b      	cmp	r4, #43	; 0x2b
 800a6d0:	bf04      	itt	eq
 800a6d2:	782c      	ldrbeq	r4, [r5, #0]
 800a6d4:	1cbd      	addeq	r5, r7, #2
 800a6d6:	e7f2      	b.n	800a6be <_strtoul_l.isra.0+0x2e>
 800a6d8:	2c30      	cmp	r4, #48	; 0x30
 800a6da:	d125      	bne.n	800a728 <_strtoul_l.isra.0+0x98>
 800a6dc:	782a      	ldrb	r2, [r5, #0]
 800a6de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a6e2:	2a58      	cmp	r2, #88	; 0x58
 800a6e4:	d14a      	bne.n	800a77c <_strtoul_l.isra.0+0xec>
 800a6e6:	786c      	ldrb	r4, [r5, #1]
 800a6e8:	2610      	movs	r6, #16
 800a6ea:	3502      	adds	r5, #2
 800a6ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a6f0:	2700      	movs	r7, #0
 800a6f2:	fbb1 f1f6 	udiv	r1, r1, r6
 800a6f6:	fb06 fe01 	mul.w	lr, r6, r1
 800a6fa:	ea6f 0e0e 	mvn.w	lr, lr
 800a6fe:	4638      	mov	r0, r7
 800a700:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800a704:	2a09      	cmp	r2, #9
 800a706:	d811      	bhi.n	800a72c <_strtoul_l.isra.0+0x9c>
 800a708:	4614      	mov	r4, r2
 800a70a:	42a6      	cmp	r6, r4
 800a70c:	dd1d      	ble.n	800a74a <_strtoul_l.isra.0+0xba>
 800a70e:	2f00      	cmp	r7, #0
 800a710:	db18      	blt.n	800a744 <_strtoul_l.isra.0+0xb4>
 800a712:	4281      	cmp	r1, r0
 800a714:	d316      	bcc.n	800a744 <_strtoul_l.isra.0+0xb4>
 800a716:	d101      	bne.n	800a71c <_strtoul_l.isra.0+0x8c>
 800a718:	45a6      	cmp	lr, r4
 800a71a:	db13      	blt.n	800a744 <_strtoul_l.isra.0+0xb4>
 800a71c:	fb00 4006 	mla	r0, r0, r6, r4
 800a720:	2701      	movs	r7, #1
 800a722:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a726:	e7eb      	b.n	800a700 <_strtoul_l.isra.0+0x70>
 800a728:	260a      	movs	r6, #10
 800a72a:	e7df      	b.n	800a6ec <_strtoul_l.isra.0+0x5c>
 800a72c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800a730:	2a19      	cmp	r2, #25
 800a732:	d801      	bhi.n	800a738 <_strtoul_l.isra.0+0xa8>
 800a734:	3c37      	subs	r4, #55	; 0x37
 800a736:	e7e8      	b.n	800a70a <_strtoul_l.isra.0+0x7a>
 800a738:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800a73c:	2a19      	cmp	r2, #25
 800a73e:	d804      	bhi.n	800a74a <_strtoul_l.isra.0+0xba>
 800a740:	3c57      	subs	r4, #87	; 0x57
 800a742:	e7e2      	b.n	800a70a <_strtoul_l.isra.0+0x7a>
 800a744:	f04f 37ff 	mov.w	r7, #4294967295
 800a748:	e7eb      	b.n	800a722 <_strtoul_l.isra.0+0x92>
 800a74a:	2f00      	cmp	r7, #0
 800a74c:	da09      	bge.n	800a762 <_strtoul_l.isra.0+0xd2>
 800a74e:	2322      	movs	r3, #34	; 0x22
 800a750:	f8c8 3000 	str.w	r3, [r8]
 800a754:	f04f 30ff 	mov.w	r0, #4294967295
 800a758:	f1ba 0f00 	cmp.w	sl, #0
 800a75c:	d107      	bne.n	800a76e <_strtoul_l.isra.0+0xde>
 800a75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a762:	b103      	cbz	r3, 800a766 <_strtoul_l.isra.0+0xd6>
 800a764:	4240      	negs	r0, r0
 800a766:	f1ba 0f00 	cmp.w	sl, #0
 800a76a:	d00c      	beq.n	800a786 <_strtoul_l.isra.0+0xf6>
 800a76c:	b127      	cbz	r7, 800a778 <_strtoul_l.isra.0+0xe8>
 800a76e:	3d01      	subs	r5, #1
 800a770:	f8ca 5000 	str.w	r5, [sl]
 800a774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a778:	464d      	mov	r5, r9
 800a77a:	e7f9      	b.n	800a770 <_strtoul_l.isra.0+0xe0>
 800a77c:	2430      	movs	r4, #48	; 0x30
 800a77e:	2e00      	cmp	r6, #0
 800a780:	d1b4      	bne.n	800a6ec <_strtoul_l.isra.0+0x5c>
 800a782:	2608      	movs	r6, #8
 800a784:	e7b2      	b.n	800a6ec <_strtoul_l.isra.0+0x5c>
 800a786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a78c <_strtoul_r>:
 800a78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a78e:	4c06      	ldr	r4, [pc, #24]	; (800a7a8 <_strtoul_r+0x1c>)
 800a790:	4d06      	ldr	r5, [pc, #24]	; (800a7ac <_strtoul_r+0x20>)
 800a792:	6824      	ldr	r4, [r4, #0]
 800a794:	6a24      	ldr	r4, [r4, #32]
 800a796:	2c00      	cmp	r4, #0
 800a798:	bf08      	it	eq
 800a79a:	462c      	moveq	r4, r5
 800a79c:	9400      	str	r4, [sp, #0]
 800a79e:	f7ff ff77 	bl	800a690 <_strtoul_l.isra.0>
 800a7a2:	b003      	add	sp, #12
 800a7a4:	bd30      	pop	{r4, r5, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000010 	.word	0x20000010
 800a7ac:	200000bc 	.word	0x200000bc

0800a7b0 <strtoul>:
 800a7b0:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <strtoul+0x24>)
 800a7b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b4:	681c      	ldr	r4, [r3, #0]
 800a7b6:	4d08      	ldr	r5, [pc, #32]	; (800a7d8 <strtoul+0x28>)
 800a7b8:	6a23      	ldr	r3, [r4, #32]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bf08      	it	eq
 800a7be:	462b      	moveq	r3, r5
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	460a      	mov	r2, r1
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f7ff ff61 	bl	800a690 <_strtoul_l.isra.0>
 800a7ce:	b003      	add	sp, #12
 800a7d0:	bd30      	pop	{r4, r5, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000010 	.word	0x20000010
 800a7d8:	200000bc 	.word	0x200000bc

0800a7dc <__ascii_wctomb>:
 800a7dc:	b149      	cbz	r1, 800a7f2 <__ascii_wctomb+0x16>
 800a7de:	2aff      	cmp	r2, #255	; 0xff
 800a7e0:	bf85      	ittet	hi
 800a7e2:	238a      	movhi	r3, #138	; 0x8a
 800a7e4:	6003      	strhi	r3, [r0, #0]
 800a7e6:	700a      	strbls	r2, [r1, #0]
 800a7e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7ec:	bf98      	it	ls
 800a7ee:	2001      	movls	r0, #1
 800a7f0:	4770      	bx	lr
 800a7f2:	4608      	mov	r0, r1
 800a7f4:	4770      	bx	lr

0800a7f6 <__env_lock>:
 800a7f6:	4770      	bx	lr

0800a7f8 <__env_unlock>:
 800a7f8:	4770      	bx	lr

0800a7fa <_sungetc_r>:
 800a7fa:	b538      	push	{r3, r4, r5, lr}
 800a7fc:	1c4b      	adds	r3, r1, #1
 800a7fe:	4614      	mov	r4, r2
 800a800:	d103      	bne.n	800a80a <_sungetc_r+0x10>
 800a802:	f04f 35ff 	mov.w	r5, #4294967295
 800a806:	4628      	mov	r0, r5
 800a808:	bd38      	pop	{r3, r4, r5, pc}
 800a80a:	8993      	ldrh	r3, [r2, #12]
 800a80c:	f023 0320 	bic.w	r3, r3, #32
 800a810:	8193      	strh	r3, [r2, #12]
 800a812:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a814:	6852      	ldr	r2, [r2, #4]
 800a816:	b2cd      	uxtb	r5, r1
 800a818:	b18b      	cbz	r3, 800a83e <_sungetc_r+0x44>
 800a81a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a81c:	429a      	cmp	r2, r3
 800a81e:	da08      	bge.n	800a832 <_sungetc_r+0x38>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	1e5a      	subs	r2, r3, #1
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a82a:	6863      	ldr	r3, [r4, #4]
 800a82c:	3301      	adds	r3, #1
 800a82e:	6063      	str	r3, [r4, #4]
 800a830:	e7e9      	b.n	800a806 <_sungetc_r+0xc>
 800a832:	4621      	mov	r1, r4
 800a834:	f000 fbaa 	bl	800af8c <__submore>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d0f1      	beq.n	800a820 <_sungetc_r+0x26>
 800a83c:	e7e1      	b.n	800a802 <_sungetc_r+0x8>
 800a83e:	6921      	ldr	r1, [r4, #16]
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	b151      	cbz	r1, 800a85a <_sungetc_r+0x60>
 800a844:	4299      	cmp	r1, r3
 800a846:	d208      	bcs.n	800a85a <_sungetc_r+0x60>
 800a848:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a84c:	428d      	cmp	r5, r1
 800a84e:	d104      	bne.n	800a85a <_sungetc_r+0x60>
 800a850:	3b01      	subs	r3, #1
 800a852:	3201      	adds	r2, #1
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	6062      	str	r2, [r4, #4]
 800a858:	e7d5      	b.n	800a806 <_sungetc_r+0xc>
 800a85a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a860:	6363      	str	r3, [r4, #52]	; 0x34
 800a862:	2303      	movs	r3, #3
 800a864:	63a3      	str	r3, [r4, #56]	; 0x38
 800a866:	4623      	mov	r3, r4
 800a868:	6422      	str	r2, [r4, #64]	; 0x40
 800a86a:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	2301      	movs	r3, #1
 800a872:	e7dc      	b.n	800a82e <_sungetc_r+0x34>

0800a874 <__ssrefill_r>:
 800a874:	b510      	push	{r4, lr}
 800a876:	460c      	mov	r4, r1
 800a878:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a87a:	b169      	cbz	r1, 800a898 <__ssrefill_r+0x24>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d001      	beq.n	800a888 <__ssrefill_r+0x14>
 800a884:	f7fd fcf0 	bl	8008268 <_free_r>
 800a888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a88a:	6063      	str	r3, [r4, #4]
 800a88c:	2000      	movs	r0, #0
 800a88e:	6360      	str	r0, [r4, #52]	; 0x34
 800a890:	b113      	cbz	r3, 800a898 <__ssrefill_r+0x24>
 800a892:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	bd10      	pop	{r4, pc}
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	2300      	movs	r3, #0
 800a89e:	6063      	str	r3, [r4, #4]
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f043 0320 	orr.w	r3, r3, #32
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	bd10      	pop	{r4, pc}
	...

0800a8b0 <__ssvfiscanf_r>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800a8b8:	f10d 080c 	add.w	r8, sp, #12
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	9346      	str	r3, [sp, #280]	; 0x118
 800a8c2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a8c4:	4ba0      	ldr	r3, [pc, #640]	; (800ab48 <__ssvfiscanf_r+0x298>)
 800a8c6:	93a2      	str	r3, [sp, #648]	; 0x288
 800a8c8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800ab50 <__ssvfiscanf_r+0x2a0>
 800a8cc:	4b9f      	ldr	r3, [pc, #636]	; (800ab4c <__ssvfiscanf_r+0x29c>)
 800a8ce:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	93a3      	str	r3, [sp, #652]	; 0x28c
 800a8d8:	4692      	mov	sl, r2
 800a8da:	270a      	movs	r7, #10
 800a8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 812f 	beq.w	800ab44 <__ssvfiscanf_r+0x294>
 800a8e6:	f7ff fa6f 	bl	8009dc8 <__locale_ctype_ptr>
 800a8ea:	f89a b000 	ldrb.w	fp, [sl]
 800a8ee:	4458      	add	r0, fp
 800a8f0:	7843      	ldrb	r3, [r0, #1]
 800a8f2:	f013 0308 	ands.w	r3, r3, #8
 800a8f6:	d143      	bne.n	800a980 <__ssvfiscanf_r+0xd0>
 800a8f8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a8fc:	f10a 0501 	add.w	r5, sl, #1
 800a900:	f040 8099 	bne.w	800aa36 <__ssvfiscanf_r+0x186>
 800a904:	9345      	str	r3, [sp, #276]	; 0x114
 800a906:	9343      	str	r3, [sp, #268]	; 0x10c
 800a908:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a90c:	2b2a      	cmp	r3, #42	; 0x2a
 800a90e:	d103      	bne.n	800a918 <__ssvfiscanf_r+0x68>
 800a910:	2310      	movs	r3, #16
 800a912:	9343      	str	r3, [sp, #268]	; 0x10c
 800a914:	f10a 0502 	add.w	r5, sl, #2
 800a918:	7829      	ldrb	r1, [r5, #0]
 800a91a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a91e:	2a09      	cmp	r2, #9
 800a920:	46aa      	mov	sl, r5
 800a922:	f105 0501 	add.w	r5, r5, #1
 800a926:	d941      	bls.n	800a9ac <__ssvfiscanf_r+0xfc>
 800a928:	2203      	movs	r2, #3
 800a92a:	4889      	ldr	r0, [pc, #548]	; (800ab50 <__ssvfiscanf_r+0x2a0>)
 800a92c:	f7f5 fc68 	bl	8000200 <memchr>
 800a930:	b138      	cbz	r0, 800a942 <__ssvfiscanf_r+0x92>
 800a932:	eba0 0309 	sub.w	r3, r0, r9
 800a936:	2001      	movs	r0, #1
 800a938:	4098      	lsls	r0, r3
 800a93a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a93c:	4318      	orrs	r0, r3
 800a93e:	9043      	str	r0, [sp, #268]	; 0x10c
 800a940:	46aa      	mov	sl, r5
 800a942:	f89a 3000 	ldrb.w	r3, [sl]
 800a946:	2b67      	cmp	r3, #103	; 0x67
 800a948:	f10a 0501 	add.w	r5, sl, #1
 800a94c:	d84a      	bhi.n	800a9e4 <__ssvfiscanf_r+0x134>
 800a94e:	2b65      	cmp	r3, #101	; 0x65
 800a950:	f080 80b7 	bcs.w	800aac2 <__ssvfiscanf_r+0x212>
 800a954:	2b47      	cmp	r3, #71	; 0x47
 800a956:	d82f      	bhi.n	800a9b8 <__ssvfiscanf_r+0x108>
 800a958:	2b45      	cmp	r3, #69	; 0x45
 800a95a:	f080 80b2 	bcs.w	800aac2 <__ssvfiscanf_r+0x212>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 8082 	beq.w	800aa68 <__ssvfiscanf_r+0x1b8>
 800a964:	2b25      	cmp	r3, #37	; 0x25
 800a966:	d066      	beq.n	800aa36 <__ssvfiscanf_r+0x186>
 800a968:	2303      	movs	r3, #3
 800a96a:	9349      	str	r3, [sp, #292]	; 0x124
 800a96c:	9744      	str	r7, [sp, #272]	; 0x110
 800a96e:	e045      	b.n	800a9fc <__ssvfiscanf_r+0x14c>
 800a970:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a972:	3101      	adds	r1, #1
 800a974:	9147      	str	r1, [sp, #284]	; 0x11c
 800a976:	6861      	ldr	r1, [r4, #4]
 800a978:	3301      	adds	r3, #1
 800a97a:	3901      	subs	r1, #1
 800a97c:	6061      	str	r1, [r4, #4]
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	6863      	ldr	r3, [r4, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd0b      	ble.n	800a99e <__ssvfiscanf_r+0xee>
 800a986:	f7ff fa1f 	bl	8009dc8 <__locale_ctype_ptr>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	7819      	ldrb	r1, [r3, #0]
 800a98e:	4408      	add	r0, r1
 800a990:	7841      	ldrb	r1, [r0, #1]
 800a992:	070d      	lsls	r5, r1, #28
 800a994:	d4ec      	bmi.n	800a970 <__ssvfiscanf_r+0xc0>
 800a996:	f10a 0501 	add.w	r5, sl, #1
 800a99a:	46aa      	mov	sl, r5
 800a99c:	e79e      	b.n	800a8dc <__ssvfiscanf_r+0x2c>
 800a99e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4798      	blx	r3
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d0ed      	beq.n	800a986 <__ssvfiscanf_r+0xd6>
 800a9aa:	e7f4      	b.n	800a996 <__ssvfiscanf_r+0xe6>
 800a9ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a9ae:	fb07 1303 	mla	r3, r7, r3, r1
 800a9b2:	3b30      	subs	r3, #48	; 0x30
 800a9b4:	9345      	str	r3, [sp, #276]	; 0x114
 800a9b6:	e7af      	b.n	800a918 <__ssvfiscanf_r+0x68>
 800a9b8:	2b5b      	cmp	r3, #91	; 0x5b
 800a9ba:	d061      	beq.n	800aa80 <__ssvfiscanf_r+0x1d0>
 800a9bc:	d80c      	bhi.n	800a9d8 <__ssvfiscanf_r+0x128>
 800a9be:	2b58      	cmp	r3, #88	; 0x58
 800a9c0:	d1d2      	bne.n	800a968 <__ssvfiscanf_r+0xb8>
 800a9c2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a9c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9c8:	9243      	str	r2, [sp, #268]	; 0x10c
 800a9ca:	2210      	movs	r2, #16
 800a9cc:	9244      	str	r2, [sp, #272]	; 0x110
 800a9ce:	2b6f      	cmp	r3, #111	; 0x6f
 800a9d0:	bfb4      	ite	lt
 800a9d2:	2303      	movlt	r3, #3
 800a9d4:	2304      	movge	r3, #4
 800a9d6:	e010      	b.n	800a9fa <__ssvfiscanf_r+0x14a>
 800a9d8:	2b63      	cmp	r3, #99	; 0x63
 800a9da:	d05c      	beq.n	800aa96 <__ssvfiscanf_r+0x1e6>
 800a9dc:	2b64      	cmp	r3, #100	; 0x64
 800a9de:	d1c3      	bne.n	800a968 <__ssvfiscanf_r+0xb8>
 800a9e0:	9744      	str	r7, [sp, #272]	; 0x110
 800a9e2:	e7f4      	b.n	800a9ce <__ssvfiscanf_r+0x11e>
 800a9e4:	2b70      	cmp	r3, #112	; 0x70
 800a9e6:	d042      	beq.n	800aa6e <__ssvfiscanf_r+0x1be>
 800a9e8:	d81d      	bhi.n	800aa26 <__ssvfiscanf_r+0x176>
 800a9ea:	2b6e      	cmp	r3, #110	; 0x6e
 800a9ec:	d059      	beq.n	800aaa2 <__ssvfiscanf_r+0x1f2>
 800a9ee:	d843      	bhi.n	800aa78 <__ssvfiscanf_r+0x1c8>
 800a9f0:	2b69      	cmp	r3, #105	; 0x69
 800a9f2:	d1b9      	bne.n	800a968 <__ssvfiscanf_r+0xb8>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9344      	str	r3, [sp, #272]	; 0x110
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	9349      	str	r3, [sp, #292]	; 0x124
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dd61      	ble.n	800aac6 <__ssvfiscanf_r+0x216>
 800aa02:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa04:	0659      	lsls	r1, r3, #25
 800aa06:	d56f      	bpl.n	800aae8 <__ssvfiscanf_r+0x238>
 800aa08:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	dc7c      	bgt.n	800ab08 <__ssvfiscanf_r+0x258>
 800aa0e:	ab01      	add	r3, sp, #4
 800aa10:	4622      	mov	r2, r4
 800aa12:	a943      	add	r1, sp, #268	; 0x10c
 800aa14:	4630      	mov	r0, r6
 800aa16:	f000 f89f 	bl	800ab58 <_scanf_chars>
 800aa1a:	2801      	cmp	r0, #1
 800aa1c:	f000 8092 	beq.w	800ab44 <__ssvfiscanf_r+0x294>
 800aa20:	2802      	cmp	r0, #2
 800aa22:	d1ba      	bne.n	800a99a <__ssvfiscanf_r+0xea>
 800aa24:	e01d      	b.n	800aa62 <__ssvfiscanf_r+0x1b2>
 800aa26:	2b75      	cmp	r3, #117	; 0x75
 800aa28:	d0da      	beq.n	800a9e0 <__ssvfiscanf_r+0x130>
 800aa2a:	2b78      	cmp	r3, #120	; 0x78
 800aa2c:	d0c9      	beq.n	800a9c2 <__ssvfiscanf_r+0x112>
 800aa2e:	2b73      	cmp	r3, #115	; 0x73
 800aa30:	d19a      	bne.n	800a968 <__ssvfiscanf_r+0xb8>
 800aa32:	2302      	movs	r3, #2
 800aa34:	e7e1      	b.n	800a9fa <__ssvfiscanf_r+0x14a>
 800aa36:	6863      	ldr	r3, [r4, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	dd0c      	ble.n	800aa56 <__ssvfiscanf_r+0x1a6>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	781a      	ldrb	r2, [r3, #0]
 800aa40:	4593      	cmp	fp, r2
 800aa42:	d17f      	bne.n	800ab44 <__ssvfiscanf_r+0x294>
 800aa44:	3301      	adds	r3, #1
 800aa46:	6862      	ldr	r2, [r4, #4]
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa4c:	3a01      	subs	r2, #1
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6062      	str	r2, [r4, #4]
 800aa52:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa54:	e7a1      	b.n	800a99a <__ssvfiscanf_r+0xea>
 800aa56:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	4798      	blx	r3
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d0ec      	beq.n	800aa3c <__ssvfiscanf_r+0x18c>
 800aa62:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d163      	bne.n	800ab30 <__ssvfiscanf_r+0x280>
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	e066      	b.n	800ab3c <__ssvfiscanf_r+0x28c>
 800aa6e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800aa70:	f042 0220 	orr.w	r2, r2, #32
 800aa74:	9243      	str	r2, [sp, #268]	; 0x10c
 800aa76:	e7a4      	b.n	800a9c2 <__ssvfiscanf_r+0x112>
 800aa78:	2308      	movs	r3, #8
 800aa7a:	9344      	str	r3, [sp, #272]	; 0x110
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	e7bc      	b.n	800a9fa <__ssvfiscanf_r+0x14a>
 800aa80:	4629      	mov	r1, r5
 800aa82:	4640      	mov	r0, r8
 800aa84:	f000 f9c0 	bl	800ae08 <__sccl>
 800aa88:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa8e:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa90:	4605      	mov	r5, r0
 800aa92:	2301      	movs	r3, #1
 800aa94:	e7b1      	b.n	800a9fa <__ssvfiscanf_r+0x14a>
 800aa96:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9c:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e7ab      	b.n	800a9fa <__ssvfiscanf_r+0x14a>
 800aaa2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800aaa4:	06d0      	lsls	r0, r2, #27
 800aaa6:	f53f af78 	bmi.w	800a99a <__ssvfiscanf_r+0xea>
 800aaaa:	f012 0f01 	tst.w	r2, #1
 800aaae:	9a01      	ldr	r2, [sp, #4]
 800aab0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aab2:	f102 0104 	add.w	r1, r2, #4
 800aab6:	9101      	str	r1, [sp, #4]
 800aab8:	6812      	ldr	r2, [r2, #0]
 800aaba:	bf14      	ite	ne
 800aabc:	8013      	strhne	r3, [r2, #0]
 800aabe:	6013      	streq	r3, [r2, #0]
 800aac0:	e76b      	b.n	800a99a <__ssvfiscanf_r+0xea>
 800aac2:	2305      	movs	r3, #5
 800aac4:	e799      	b.n	800a9fa <__ssvfiscanf_r+0x14a>
 800aac6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aac8:	4621      	mov	r1, r4
 800aaca:	4630      	mov	r0, r6
 800aacc:	4798      	blx	r3
 800aace:	2800      	cmp	r0, #0
 800aad0:	d097      	beq.n	800aa02 <__ssvfiscanf_r+0x152>
 800aad2:	e7c6      	b.n	800aa62 <__ssvfiscanf_r+0x1b2>
 800aad4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800aad6:	3201      	adds	r2, #1
 800aad8:	9247      	str	r2, [sp, #284]	; 0x11c
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	3a01      	subs	r2, #1
 800aade:	2a00      	cmp	r2, #0
 800aae0:	6062      	str	r2, [r4, #4]
 800aae2:	dd0a      	ble.n	800aafa <__ssvfiscanf_r+0x24a>
 800aae4:	3301      	adds	r3, #1
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	f7ff f96e 	bl	8009dc8 <__locale_ctype_ptr>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	781a      	ldrb	r2, [r3, #0]
 800aaf0:	4410      	add	r0, r2
 800aaf2:	7842      	ldrb	r2, [r0, #1]
 800aaf4:	0712      	lsls	r2, r2, #28
 800aaf6:	d4ed      	bmi.n	800aad4 <__ssvfiscanf_r+0x224>
 800aaf8:	e786      	b.n	800aa08 <__ssvfiscanf_r+0x158>
 800aafa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aafc:	4621      	mov	r1, r4
 800aafe:	4630      	mov	r0, r6
 800ab00:	4798      	blx	r3
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0f0      	beq.n	800aae8 <__ssvfiscanf_r+0x238>
 800ab06:	e7ac      	b.n	800aa62 <__ssvfiscanf_r+0x1b2>
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	dc06      	bgt.n	800ab1a <__ssvfiscanf_r+0x26a>
 800ab0c:	ab01      	add	r3, sp, #4
 800ab0e:	4622      	mov	r2, r4
 800ab10:	a943      	add	r1, sp, #268	; 0x10c
 800ab12:	4630      	mov	r0, r6
 800ab14:	f000 f884 	bl	800ac20 <_scanf_i>
 800ab18:	e77f      	b.n	800aa1a <__ssvfiscanf_r+0x16a>
 800ab1a:	4b0e      	ldr	r3, [pc, #56]	; (800ab54 <__ssvfiscanf_r+0x2a4>)
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f43f af3c 	beq.w	800a99a <__ssvfiscanf_r+0xea>
 800ab22:	ab01      	add	r3, sp, #4
 800ab24:	4622      	mov	r2, r4
 800ab26:	a943      	add	r1, sp, #268	; 0x10c
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f3af 8000 	nop.w
 800ab2e:	e774      	b.n	800aa1a <__ssvfiscanf_r+0x16a>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab36:	bf18      	it	ne
 800ab38:	f04f 30ff 	movne.w	r0, #4294967295
 800ab3c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	9846      	ldr	r0, [sp, #280]	; 0x118
 800ab46:	e7f9      	b.n	800ab3c <__ssvfiscanf_r+0x28c>
 800ab48:	0800a7fb 	.word	0x0800a7fb
 800ab4c:	0800a875 	.word	0x0800a875
 800ab50:	0800b515 	.word	0x0800b515
 800ab54:	00000000 	.word	0x00000000

0800ab58 <_scanf_chars>:
 800ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	688a      	ldr	r2, [r1, #8]
 800ab60:	4680      	mov	r8, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b932      	cbnz	r2, 800ab74 <_scanf_chars+0x1c>
 800ab66:	698a      	ldr	r2, [r1, #24]
 800ab68:	2a00      	cmp	r2, #0
 800ab6a:	bf0c      	ite	eq
 800ab6c:	2201      	moveq	r2, #1
 800ab6e:	f04f 32ff 	movne.w	r2, #4294967295
 800ab72:	608a      	str	r2, [r1, #8]
 800ab74:	6822      	ldr	r2, [r4, #0]
 800ab76:	06d1      	lsls	r1, r2, #27
 800ab78:	bf5f      	itttt	pl
 800ab7a:	681a      	ldrpl	r2, [r3, #0]
 800ab7c:	1d11      	addpl	r1, r2, #4
 800ab7e:	6019      	strpl	r1, [r3, #0]
 800ab80:	6817      	ldrpl	r7, [r2, #0]
 800ab82:	2600      	movs	r6, #0
 800ab84:	69a3      	ldr	r3, [r4, #24]
 800ab86:	b1db      	cbz	r3, 800abc0 <_scanf_chars+0x68>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d107      	bne.n	800ab9c <_scanf_chars+0x44>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	6962      	ldr	r2, [r4, #20]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	5cd3      	ldrb	r3, [r2, r3]
 800ab94:	b9a3      	cbnz	r3, 800abc0 <_scanf_chars+0x68>
 800ab96:	2e00      	cmp	r6, #0
 800ab98:	d132      	bne.n	800ac00 <_scanf_chars+0xa8>
 800ab9a:	e006      	b.n	800abaa <_scanf_chars+0x52>
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d007      	beq.n	800abb0 <_scanf_chars+0x58>
 800aba0:	2e00      	cmp	r6, #0
 800aba2:	d12d      	bne.n	800ac00 <_scanf_chars+0xa8>
 800aba4:	69a3      	ldr	r3, [r4, #24]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d12a      	bne.n	800ac00 <_scanf_chars+0xa8>
 800abaa:	2001      	movs	r0, #1
 800abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb0:	f7ff f90a 	bl	8009dc8 <__locale_ctype_ptr>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	4418      	add	r0, r3
 800abba:	7843      	ldrb	r3, [r0, #1]
 800abbc:	071b      	lsls	r3, r3, #28
 800abbe:	d4ef      	bmi.n	800aba0 <_scanf_chars+0x48>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	06da      	lsls	r2, r3, #27
 800abc4:	bf5e      	ittt	pl
 800abc6:	682b      	ldrpl	r3, [r5, #0]
 800abc8:	781b      	ldrbpl	r3, [r3, #0]
 800abca:	703b      	strbpl	r3, [r7, #0]
 800abcc:	682a      	ldr	r2, [r5, #0]
 800abce:	686b      	ldr	r3, [r5, #4]
 800abd0:	f102 0201 	add.w	r2, r2, #1
 800abd4:	602a      	str	r2, [r5, #0]
 800abd6:	68a2      	ldr	r2, [r4, #8]
 800abd8:	f103 33ff 	add.w	r3, r3, #4294967295
 800abdc:	f102 32ff 	add.w	r2, r2, #4294967295
 800abe0:	606b      	str	r3, [r5, #4]
 800abe2:	f106 0601 	add.w	r6, r6, #1
 800abe6:	bf58      	it	pl
 800abe8:	3701      	addpl	r7, #1
 800abea:	60a2      	str	r2, [r4, #8]
 800abec:	b142      	cbz	r2, 800ac00 <_scanf_chars+0xa8>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dcc8      	bgt.n	800ab84 <_scanf_chars+0x2c>
 800abf2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abf6:	4629      	mov	r1, r5
 800abf8:	4640      	mov	r0, r8
 800abfa:	4798      	blx	r3
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d0c1      	beq.n	800ab84 <_scanf_chars+0x2c>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	f013 0310 	ands.w	r3, r3, #16
 800ac06:	d105      	bne.n	800ac14 <_scanf_chars+0xbc>
 800ac08:	68e2      	ldr	r2, [r4, #12]
 800ac0a:	3201      	adds	r2, #1
 800ac0c:	60e2      	str	r2, [r4, #12]
 800ac0e:	69a2      	ldr	r2, [r4, #24]
 800ac10:	b102      	cbz	r2, 800ac14 <_scanf_chars+0xbc>
 800ac12:	703b      	strb	r3, [r7, #0]
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	441e      	add	r6, r3
 800ac18:	6126      	str	r6, [r4, #16]
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac20 <_scanf_i>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	469a      	mov	sl, r3
 800ac26:	4b74      	ldr	r3, [pc, #464]	; (800adf8 <_scanf_i+0x1d8>)
 800ac28:	460c      	mov	r4, r1
 800ac2a:	4683      	mov	fp, r0
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac32:	b087      	sub	sp, #28
 800ac34:	ab03      	add	r3, sp, #12
 800ac36:	68a7      	ldr	r7, [r4, #8]
 800ac38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ac3c:	4b6f      	ldr	r3, [pc, #444]	; (800adfc <_scanf_i+0x1dc>)
 800ac3e:	69a1      	ldr	r1, [r4, #24]
 800ac40:	4a6f      	ldr	r2, [pc, #444]	; (800ae00 <_scanf_i+0x1e0>)
 800ac42:	2903      	cmp	r1, #3
 800ac44:	bf18      	it	ne
 800ac46:	461a      	movne	r2, r3
 800ac48:	1e7b      	subs	r3, r7, #1
 800ac4a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800ac4e:	bf84      	itt	hi
 800ac50:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac54:	60a3      	strhi	r3, [r4, #8]
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	9200      	str	r2, [sp, #0]
 800ac5a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ac5e:	bf88      	it	hi
 800ac60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac64:	f104 091c 	add.w	r9, r4, #28
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bf8c      	ite	hi
 800ac6c:	197f      	addhi	r7, r7, r5
 800ac6e:	2700      	movls	r7, #0
 800ac70:	464b      	mov	r3, r9
 800ac72:	f04f 0800 	mov.w	r8, #0
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	6831      	ldr	r1, [r6, #0]
 800ac7a:	ab03      	add	r3, sp, #12
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ac82:	7809      	ldrb	r1, [r1, #0]
 800ac84:	f7f5 fabc 	bl	8000200 <memchr>
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	b328      	cbz	r0, 800acd8 <_scanf_i+0xb8>
 800ac8c:	f1b8 0f01 	cmp.w	r8, #1
 800ac90:	d156      	bne.n	800ad40 <_scanf_i+0x120>
 800ac92:	6862      	ldr	r2, [r4, #4]
 800ac94:	b92a      	cbnz	r2, 800aca2 <_scanf_i+0x82>
 800ac96:	2208      	movs	r2, #8
 800ac98:	6062      	str	r2, [r4, #4]
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aca0:	6022      	str	r2, [r4, #0]
 800aca2:	6822      	ldr	r2, [r4, #0]
 800aca4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aca8:	6022      	str	r2, [r4, #0]
 800acaa:	68a2      	ldr	r2, [r4, #8]
 800acac:	1e51      	subs	r1, r2, #1
 800acae:	60a1      	str	r1, [r4, #8]
 800acb0:	b192      	cbz	r2, 800acd8 <_scanf_i+0xb8>
 800acb2:	6832      	ldr	r2, [r6, #0]
 800acb4:	1c51      	adds	r1, r2, #1
 800acb6:	6031      	str	r1, [r6, #0]
 800acb8:	7812      	ldrb	r2, [r2, #0]
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	1c5d      	adds	r5, r3, #1
 800acbe:	6873      	ldr	r3, [r6, #4]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	6073      	str	r3, [r6, #4]
 800acc6:	dc06      	bgt.n	800acd6 <_scanf_i+0xb6>
 800acc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800accc:	4631      	mov	r1, r6
 800acce:	4658      	mov	r0, fp
 800acd0:	4798      	blx	r3
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d176      	bne.n	800adc4 <_scanf_i+0x1a4>
 800acd6:	462b      	mov	r3, r5
 800acd8:	f108 0801 	add.w	r8, r8, #1
 800acdc:	f1b8 0f03 	cmp.w	r8, #3
 800ace0:	d1c9      	bne.n	800ac76 <_scanf_i+0x56>
 800ace2:	6862      	ldr	r2, [r4, #4]
 800ace4:	b90a      	cbnz	r2, 800acea <_scanf_i+0xca>
 800ace6:	220a      	movs	r2, #10
 800ace8:	6062      	str	r2, [r4, #4]
 800acea:	6862      	ldr	r2, [r4, #4]
 800acec:	4945      	ldr	r1, [pc, #276]	; (800ae04 <_scanf_i+0x1e4>)
 800acee:	6960      	ldr	r0, [r4, #20]
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	1a89      	subs	r1, r1, r2
 800acf4:	f000 f888 	bl	800ae08 <__sccl>
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	f04f 0800 	mov.w	r8, #0
 800acfe:	461d      	mov	r5, r3
 800ad00:	68a3      	ldr	r3, [r4, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d038      	beq.n	800ad78 <_scanf_i+0x158>
 800ad06:	6831      	ldr	r1, [r6, #0]
 800ad08:	6960      	ldr	r0, [r4, #20]
 800ad0a:	780a      	ldrb	r2, [r1, #0]
 800ad0c:	5c80      	ldrb	r0, [r0, r2]
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d032      	beq.n	800ad78 <_scanf_i+0x158>
 800ad12:	2a30      	cmp	r2, #48	; 0x30
 800ad14:	6822      	ldr	r2, [r4, #0]
 800ad16:	d121      	bne.n	800ad5c <_scanf_i+0x13c>
 800ad18:	0510      	lsls	r0, r2, #20
 800ad1a:	d51f      	bpl.n	800ad5c <_scanf_i+0x13c>
 800ad1c:	f108 0801 	add.w	r8, r8, #1
 800ad20:	b117      	cbz	r7, 800ad28 <_scanf_i+0x108>
 800ad22:	3301      	adds	r3, #1
 800ad24:	3f01      	subs	r7, #1
 800ad26:	60a3      	str	r3, [r4, #8]
 800ad28:	6873      	ldr	r3, [r6, #4]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	6073      	str	r3, [r6, #4]
 800ad30:	dd1b      	ble.n	800ad6a <_scanf_i+0x14a>
 800ad32:	6833      	ldr	r3, [r6, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	6033      	str	r3, [r6, #0]
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	e7df      	b.n	800ad00 <_scanf_i+0xe0>
 800ad40:	f1b8 0f02 	cmp.w	r8, #2
 800ad44:	d1b1      	bne.n	800acaa <_scanf_i+0x8a>
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ad4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ad50:	d1c2      	bne.n	800acd8 <_scanf_i+0xb8>
 800ad52:	2110      	movs	r1, #16
 800ad54:	6061      	str	r1, [r4, #4]
 800ad56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad5a:	e7a5      	b.n	800aca8 <_scanf_i+0x88>
 800ad5c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ad60:	6022      	str	r2, [r4, #0]
 800ad62:	780b      	ldrb	r3, [r1, #0]
 800ad64:	702b      	strb	r3, [r5, #0]
 800ad66:	3501      	adds	r5, #1
 800ad68:	e7de      	b.n	800ad28 <_scanf_i+0x108>
 800ad6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4658      	mov	r0, fp
 800ad72:	4798      	blx	r3
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d0df      	beq.n	800ad38 <_scanf_i+0x118>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	05d9      	lsls	r1, r3, #23
 800ad7c:	d50c      	bpl.n	800ad98 <_scanf_i+0x178>
 800ad7e:	454d      	cmp	r5, r9
 800ad80:	d908      	bls.n	800ad94 <_scanf_i+0x174>
 800ad82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad8a:	4632      	mov	r2, r6
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	4798      	blx	r3
 800ad90:	1e6f      	subs	r7, r5, #1
 800ad92:	463d      	mov	r5, r7
 800ad94:	454d      	cmp	r5, r9
 800ad96:	d02c      	beq.n	800adf2 <_scanf_i+0x1d2>
 800ad98:	6822      	ldr	r2, [r4, #0]
 800ad9a:	f012 0210 	ands.w	r2, r2, #16
 800ad9e:	d11e      	bne.n	800adde <_scanf_i+0x1be>
 800ada0:	702a      	strb	r2, [r5, #0]
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	9e00      	ldr	r6, [sp, #0]
 800ada6:	4649      	mov	r1, r9
 800ada8:	4658      	mov	r0, fp
 800adaa:	47b0      	blx	r6
 800adac:	6822      	ldr	r2, [r4, #0]
 800adae:	f8da 3000 	ldr.w	r3, [sl]
 800adb2:	f012 0f20 	tst.w	r2, #32
 800adb6:	d008      	beq.n	800adca <_scanf_i+0x1aa>
 800adb8:	1d1a      	adds	r2, r3, #4
 800adba:	f8ca 2000 	str.w	r2, [sl]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6018      	str	r0, [r3, #0]
 800adc2:	e009      	b.n	800add8 <_scanf_i+0x1b8>
 800adc4:	f04f 0800 	mov.w	r8, #0
 800adc8:	e7d6      	b.n	800ad78 <_scanf_i+0x158>
 800adca:	07d2      	lsls	r2, r2, #31
 800adcc:	d5f4      	bpl.n	800adb8 <_scanf_i+0x198>
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	f8ca 2000 	str.w	r2, [sl]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	8018      	strh	r0, [r3, #0]
 800add8:	68e3      	ldr	r3, [r4, #12]
 800adda:	3301      	adds	r3, #1
 800addc:	60e3      	str	r3, [r4, #12]
 800adde:	eba5 0509 	sub.w	r5, r5, r9
 800ade2:	44a8      	add	r8, r5
 800ade4:	6925      	ldr	r5, [r4, #16]
 800ade6:	4445      	add	r5, r8
 800ade8:	6125      	str	r5, [r4, #16]
 800adea:	2000      	movs	r0, #0
 800adec:	b007      	add	sp, #28
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	2001      	movs	r0, #1
 800adf4:	e7fa      	b.n	800adec <_scanf_i+0x1cc>
 800adf6:	bf00      	nop
 800adf8:	0800b160 	.word	0x0800b160
 800adfc:	0800a78d 	.word	0x0800a78d
 800ae00:	0800af69 	.word	0x0800af69
 800ae04:	0800b529 	.word	0x0800b529

0800ae08 <__sccl>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	780b      	ldrb	r3, [r1, #0]
 800ae0c:	2b5e      	cmp	r3, #94	; 0x5e
 800ae0e:	bf13      	iteet	ne
 800ae10:	1c4a      	addne	r2, r1, #1
 800ae12:	1c8a      	addeq	r2, r1, #2
 800ae14:	784b      	ldrbeq	r3, [r1, #1]
 800ae16:	2100      	movne	r1, #0
 800ae18:	bf08      	it	eq
 800ae1a:	2101      	moveq	r1, #1
 800ae1c:	1e44      	subs	r4, r0, #1
 800ae1e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800ae22:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ae26:	42a5      	cmp	r5, r4
 800ae28:	d1fb      	bne.n	800ae22 <__sccl+0x1a>
 800ae2a:	b913      	cbnz	r3, 800ae32 <__sccl+0x2a>
 800ae2c:	3a01      	subs	r2, #1
 800ae2e:	4610      	mov	r0, r2
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	f081 0401 	eor.w	r4, r1, #1
 800ae36:	54c4      	strb	r4, [r0, r3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	780d      	ldrb	r5, [r1, #0]
 800ae3c:	2d2d      	cmp	r5, #45	; 0x2d
 800ae3e:	f101 0201 	add.w	r2, r1, #1
 800ae42:	d006      	beq.n	800ae52 <__sccl+0x4a>
 800ae44:	2d5d      	cmp	r5, #93	; 0x5d
 800ae46:	d0f2      	beq.n	800ae2e <__sccl+0x26>
 800ae48:	b90d      	cbnz	r5, 800ae4e <__sccl+0x46>
 800ae4a:	460a      	mov	r2, r1
 800ae4c:	e7ef      	b.n	800ae2e <__sccl+0x26>
 800ae4e:	462b      	mov	r3, r5
 800ae50:	e7f1      	b.n	800ae36 <__sccl+0x2e>
 800ae52:	784e      	ldrb	r6, [r1, #1]
 800ae54:	2e5d      	cmp	r6, #93	; 0x5d
 800ae56:	d0fa      	beq.n	800ae4e <__sccl+0x46>
 800ae58:	42b3      	cmp	r3, r6
 800ae5a:	dcf8      	bgt.n	800ae4e <__sccl+0x46>
 800ae5c:	3102      	adds	r1, #2
 800ae5e:	3301      	adds	r3, #1
 800ae60:	429e      	cmp	r6, r3
 800ae62:	54c4      	strb	r4, [r0, r3]
 800ae64:	dcfb      	bgt.n	800ae5e <__sccl+0x56>
 800ae66:	e7e8      	b.n	800ae3a <__sccl+0x32>

0800ae68 <_strtol_l.isra.0>:
 800ae68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	4689      	mov	r9, r1
 800ae70:	4692      	mov	sl, r2
 800ae72:	461f      	mov	r7, r3
 800ae74:	468b      	mov	fp, r1
 800ae76:	465d      	mov	r5, fp
 800ae78:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae7e:	f7fe ff9f 	bl	8009dc0 <__locale_ctype_ptr_l>
 800ae82:	4420      	add	r0, r4
 800ae84:	7846      	ldrb	r6, [r0, #1]
 800ae86:	f016 0608 	ands.w	r6, r6, #8
 800ae8a:	d10b      	bne.n	800aea4 <_strtol_l.isra.0+0x3c>
 800ae8c:	2c2d      	cmp	r4, #45	; 0x2d
 800ae8e:	d10b      	bne.n	800aea8 <_strtol_l.isra.0+0x40>
 800ae90:	782c      	ldrb	r4, [r5, #0]
 800ae92:	2601      	movs	r6, #1
 800ae94:	f10b 0502 	add.w	r5, fp, #2
 800ae98:	b167      	cbz	r7, 800aeb4 <_strtol_l.isra.0+0x4c>
 800ae9a:	2f10      	cmp	r7, #16
 800ae9c:	d114      	bne.n	800aec8 <_strtol_l.isra.0+0x60>
 800ae9e:	2c30      	cmp	r4, #48	; 0x30
 800aea0:	d00a      	beq.n	800aeb8 <_strtol_l.isra.0+0x50>
 800aea2:	e011      	b.n	800aec8 <_strtol_l.isra.0+0x60>
 800aea4:	46ab      	mov	fp, r5
 800aea6:	e7e6      	b.n	800ae76 <_strtol_l.isra.0+0xe>
 800aea8:	2c2b      	cmp	r4, #43	; 0x2b
 800aeaa:	bf04      	itt	eq
 800aeac:	782c      	ldrbeq	r4, [r5, #0]
 800aeae:	f10b 0502 	addeq.w	r5, fp, #2
 800aeb2:	e7f1      	b.n	800ae98 <_strtol_l.isra.0+0x30>
 800aeb4:	2c30      	cmp	r4, #48	; 0x30
 800aeb6:	d127      	bne.n	800af08 <_strtol_l.isra.0+0xa0>
 800aeb8:	782b      	ldrb	r3, [r5, #0]
 800aeba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aebe:	2b58      	cmp	r3, #88	; 0x58
 800aec0:	d14b      	bne.n	800af5a <_strtol_l.isra.0+0xf2>
 800aec2:	786c      	ldrb	r4, [r5, #1]
 800aec4:	2710      	movs	r7, #16
 800aec6:	3502      	adds	r5, #2
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	bf0c      	ite	eq
 800aecc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aed0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aed4:	2200      	movs	r2, #0
 800aed6:	fbb1 fef7 	udiv	lr, r1, r7
 800aeda:	4610      	mov	r0, r2
 800aedc:	fb07 1c1e 	mls	ip, r7, lr, r1
 800aee0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aee4:	2b09      	cmp	r3, #9
 800aee6:	d811      	bhi.n	800af0c <_strtol_l.isra.0+0xa4>
 800aee8:	461c      	mov	r4, r3
 800aeea:	42a7      	cmp	r7, r4
 800aeec:	dd1d      	ble.n	800af2a <_strtol_l.isra.0+0xc2>
 800aeee:	1c53      	adds	r3, r2, #1
 800aef0:	d007      	beq.n	800af02 <_strtol_l.isra.0+0x9a>
 800aef2:	4586      	cmp	lr, r0
 800aef4:	d316      	bcc.n	800af24 <_strtol_l.isra.0+0xbc>
 800aef6:	d101      	bne.n	800aefc <_strtol_l.isra.0+0x94>
 800aef8:	45a4      	cmp	ip, r4
 800aefa:	db13      	blt.n	800af24 <_strtol_l.isra.0+0xbc>
 800aefc:	fb00 4007 	mla	r0, r0, r7, r4
 800af00:	2201      	movs	r2, #1
 800af02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af06:	e7eb      	b.n	800aee0 <_strtol_l.isra.0+0x78>
 800af08:	270a      	movs	r7, #10
 800af0a:	e7dd      	b.n	800aec8 <_strtol_l.isra.0+0x60>
 800af0c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800af10:	2b19      	cmp	r3, #25
 800af12:	d801      	bhi.n	800af18 <_strtol_l.isra.0+0xb0>
 800af14:	3c37      	subs	r4, #55	; 0x37
 800af16:	e7e8      	b.n	800aeea <_strtol_l.isra.0+0x82>
 800af18:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800af1c:	2b19      	cmp	r3, #25
 800af1e:	d804      	bhi.n	800af2a <_strtol_l.isra.0+0xc2>
 800af20:	3c57      	subs	r4, #87	; 0x57
 800af22:	e7e2      	b.n	800aeea <_strtol_l.isra.0+0x82>
 800af24:	f04f 32ff 	mov.w	r2, #4294967295
 800af28:	e7eb      	b.n	800af02 <_strtol_l.isra.0+0x9a>
 800af2a:	1c53      	adds	r3, r2, #1
 800af2c:	d108      	bne.n	800af40 <_strtol_l.isra.0+0xd8>
 800af2e:	2322      	movs	r3, #34	; 0x22
 800af30:	f8c8 3000 	str.w	r3, [r8]
 800af34:	4608      	mov	r0, r1
 800af36:	f1ba 0f00 	cmp.w	sl, #0
 800af3a:	d107      	bne.n	800af4c <_strtol_l.isra.0+0xe4>
 800af3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	b106      	cbz	r6, 800af44 <_strtol_l.isra.0+0xdc>
 800af42:	4240      	negs	r0, r0
 800af44:	f1ba 0f00 	cmp.w	sl, #0
 800af48:	d00c      	beq.n	800af64 <_strtol_l.isra.0+0xfc>
 800af4a:	b122      	cbz	r2, 800af56 <_strtol_l.isra.0+0xee>
 800af4c:	3d01      	subs	r5, #1
 800af4e:	f8ca 5000 	str.w	r5, [sl]
 800af52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	464d      	mov	r5, r9
 800af58:	e7f9      	b.n	800af4e <_strtol_l.isra.0+0xe6>
 800af5a:	2430      	movs	r4, #48	; 0x30
 800af5c:	2f00      	cmp	r7, #0
 800af5e:	d1b3      	bne.n	800aec8 <_strtol_l.isra.0+0x60>
 800af60:	2708      	movs	r7, #8
 800af62:	e7b1      	b.n	800aec8 <_strtol_l.isra.0+0x60>
 800af64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af68 <_strtol_r>:
 800af68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af6a:	4c06      	ldr	r4, [pc, #24]	; (800af84 <_strtol_r+0x1c>)
 800af6c:	4d06      	ldr	r5, [pc, #24]	; (800af88 <_strtol_r+0x20>)
 800af6e:	6824      	ldr	r4, [r4, #0]
 800af70:	6a24      	ldr	r4, [r4, #32]
 800af72:	2c00      	cmp	r4, #0
 800af74:	bf08      	it	eq
 800af76:	462c      	moveq	r4, r5
 800af78:	9400      	str	r4, [sp, #0]
 800af7a:	f7ff ff75 	bl	800ae68 <_strtol_l.isra.0>
 800af7e:	b003      	add	sp, #12
 800af80:	bd30      	pop	{r4, r5, pc}
 800af82:	bf00      	nop
 800af84:	20000010 	.word	0x20000010
 800af88:	200000bc 	.word	0x200000bc

0800af8c <__submore>:
 800af8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	460c      	mov	r4, r1
 800af92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800af94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af98:	4299      	cmp	r1, r3
 800af9a:	d11e      	bne.n	800afda <__submore+0x4e>
 800af9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800afa0:	f7fd f9b0 	bl	8008304 <_malloc_r>
 800afa4:	b918      	cbnz	r0, 800afae <__submore+0x22>
 800afa6:	f04f 30ff 	mov.w	r0, #4294967295
 800afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afb2:	63a3      	str	r3, [r4, #56]	; 0x38
 800afb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800afb8:	6360      	str	r0, [r4, #52]	; 0x34
 800afba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800afbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800afc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800afc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800afca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800afce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800afd2:	6020      	str	r0, [r4, #0]
 800afd4:	2000      	movs	r0, #0
 800afd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afda:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800afdc:	0077      	lsls	r7, r6, #1
 800afde:	463a      	mov	r2, r7
 800afe0:	f000 f80f 	bl	800b002 <_realloc_r>
 800afe4:	4605      	mov	r5, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d0dd      	beq.n	800afa6 <__submore+0x1a>
 800afea:	eb00 0806 	add.w	r8, r0, r6
 800afee:	4601      	mov	r1, r0
 800aff0:	4632      	mov	r2, r6
 800aff2:	4640      	mov	r0, r8
 800aff4:	f7fc fec8 	bl	8007d88 <memcpy>
 800aff8:	f8c4 8000 	str.w	r8, [r4]
 800affc:	6365      	str	r5, [r4, #52]	; 0x34
 800affe:	63a7      	str	r7, [r4, #56]	; 0x38
 800b000:	e7e8      	b.n	800afd4 <__submore+0x48>

0800b002 <_realloc_r>:
 800b002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b004:	4607      	mov	r7, r0
 800b006:	4614      	mov	r4, r2
 800b008:	460e      	mov	r6, r1
 800b00a:	b921      	cbnz	r1, 800b016 <_realloc_r+0x14>
 800b00c:	4611      	mov	r1, r2
 800b00e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b012:	f7fd b977 	b.w	8008304 <_malloc_r>
 800b016:	b922      	cbnz	r2, 800b022 <_realloc_r+0x20>
 800b018:	f7fd f926 	bl	8008268 <_free_r>
 800b01c:	4625      	mov	r5, r4
 800b01e:	4628      	mov	r0, r5
 800b020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b022:	f000 f814 	bl	800b04e <_malloc_usable_size_r>
 800b026:	4284      	cmp	r4, r0
 800b028:	d90f      	bls.n	800b04a <_realloc_r+0x48>
 800b02a:	4621      	mov	r1, r4
 800b02c:	4638      	mov	r0, r7
 800b02e:	f7fd f969 	bl	8008304 <_malloc_r>
 800b032:	4605      	mov	r5, r0
 800b034:	2800      	cmp	r0, #0
 800b036:	d0f2      	beq.n	800b01e <_realloc_r+0x1c>
 800b038:	4631      	mov	r1, r6
 800b03a:	4622      	mov	r2, r4
 800b03c:	f7fc fea4 	bl	8007d88 <memcpy>
 800b040:	4631      	mov	r1, r6
 800b042:	4638      	mov	r0, r7
 800b044:	f7fd f910 	bl	8008268 <_free_r>
 800b048:	e7e9      	b.n	800b01e <_realloc_r+0x1c>
 800b04a:	4635      	mov	r5, r6
 800b04c:	e7e7      	b.n	800b01e <_realloc_r+0x1c>

0800b04e <_malloc_usable_size_r>:
 800b04e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b052:	2800      	cmp	r0, #0
 800b054:	f1a0 0004 	sub.w	r0, r0, #4
 800b058:	bfbc      	itt	lt
 800b05a:	580b      	ldrlt	r3, [r1, r0]
 800b05c:	18c0      	addlt	r0, r0, r3
 800b05e:	4770      	bx	lr

0800b060 <_gettimeofday>:
 800b060:	4b02      	ldr	r3, [pc, #8]	; (800b06c <_gettimeofday+0xc>)
 800b062:	2258      	movs	r2, #88	; 0x58
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	f04f 30ff 	mov.w	r0, #4294967295
 800b06a:	4770      	bx	lr
 800b06c:	20001c5c 	.word	0x20001c5c

0800b070 <_init>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	bf00      	nop
 800b074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b076:	bc08      	pop	{r3}
 800b078:	469e      	mov	lr, r3
 800b07a:	4770      	bx	lr

0800b07c <_fini>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	bf00      	nop
 800b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b082:	bc08      	pop	{r3}
 800b084:	469e      	mov	lr, r3
 800b086:	4770      	bx	lr
