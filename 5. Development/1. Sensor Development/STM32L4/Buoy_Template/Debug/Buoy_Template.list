
Buoy_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000510  20000000  0800601c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020510  2**0
                  CONTENTS
  8 .bss          00000130  20000510  20000510  00020510  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000640  20000640  00020510  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
 11 .debug_info   000121b7  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000025e6  00000000  00000000  000326f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000db8  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c80  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000066ae  00000000  00000000  00036718  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004774  00000000  00000000  0003cdc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004153a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e04  00000000  00000000  000415b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000510 	.word	0x20000510
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c64 	.word	0x08005c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000514 	.word	0x20000514
 80001c4:	08005c64 	.word	0x08005c64

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <HAL_Init+0x3c>)
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 f9a4 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f80f 	bl	8000528 <HAL_InitTick>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	e001      	b.n	800051a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000516:	f004 f8db 	bl	80046d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051a:	79fb      	ldrb	r3, [r7, #7]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40022000 	.word	0x40022000

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <HAL_InitTick+0x68>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d022      	beq.n	8000582 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_InitTick+0x6c>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <HAL_InitTick+0x68>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000548:	fbb1 f3f3 	udiv	r3, r1, r3
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f9b6 	bl	80008c2 <HAL_SYSTICK_Config>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d10f      	bne.n	800057c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0f      	cmp	r3, #15
 8000560:	d809      	bhi.n	8000576 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000562:	2200      	movs	r2, #0
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	f04f 30ff 	mov.w	r0, #4294967295
 800056a:	f000 f97a 	bl	8000862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <HAL_InitTick+0x70>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	e007      	b.n	8000586 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	e004      	b.n	8000586 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e001      	b.n	8000586 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000004 	.word	0x20000004
 8000594:	20000008 	.word	0x20000008
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <HAL_IncTick+0x1c>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_IncTick+0x20>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4413      	add	r3, r2
 80005aa:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x1c>)
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000564 	.word	0x20000564
 80005bc:	20000004 	.word	0x20000004

080005c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return uwTick;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <HAL_GetTick+0x14>)
 80005c6:	681b      	ldr	r3, [r3, #0]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000564 	.word	0x20000564

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d004      	beq.n	80005fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_Delay+0x40>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fc:	bf00      	nop
 80005fe:	f7ff ffdf 	bl	80005c0 <HAL_GetTick>
 8000602:	4602      	mov	r2, r0
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1ad2      	subs	r2, r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	429a      	cmp	r2, r3
 800060c:	d3f7      	bcc.n	80005fe <HAL_Delay+0x26>
  {
  }
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000620:	4a05      	ldr	r2, [pc, #20]	; (8000638 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	6053      	str	r3, [r2, #4]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e0042000 	.word	0xe0042000

0800063c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6053      	str	r3, [r2, #4]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0042000 	.word	0xe0042000

0800065c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <NVIC_SetPriorityGrouping+0x44>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <NVIC_SetPriorityGrouping+0x44>)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	60d3      	str	r3, [r2, #12]
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <NVIC_GetPriorityGrouping+0x18>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	f003 0307 	and.w	r3, r3, #7
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <NVIC_EnableIRQ+0x30>)
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	095b      	lsrs	r3, r3, #5
 80006d2:	79fa      	ldrb	r2, [r7, #7]
 80006d4:	f002 021f 	and.w	r2, r2, #31
 80006d8:	2001      	movs	r0, #1
 80006da:	fa00 f202 	lsl.w	r2, r0, r2
 80006de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006fe:	4909      	ldr	r1, [pc, #36]	; (8000724 <NVIC_ClearPendingIRQ+0x30>)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	095b      	lsrs	r3, r3, #5
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	f002 021f 	and.w	r2, r2, #31
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	3360      	adds	r3, #96	; 0x60
 8000714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100

08000728 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	da0b      	bge.n	8000754 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	490d      	ldr	r1, [pc, #52]	; (8000774 <NVIC_SetPriority+0x4c>)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 030f 	and.w	r3, r3, #15
 8000744:	3b04      	subs	r3, #4
 8000746:	683a      	ldr	r2, [r7, #0]
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000752:	e009      	b.n	8000768 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	4908      	ldr	r1, [pc, #32]	; (8000778 <NVIC_SetPriority+0x50>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	e000e100 	.word	0xe000e100

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	2201      	movs	r2, #1
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	401a      	ands	r2, r3
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c2:	2101      	movs	r1, #1
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	1e59      	subs	r1, r3, #1
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	4313      	orrs	r3, r2
         );
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3724      	adds	r7, #36	; 0x24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007e4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007e8:	4905      	ldr	r1, [pc, #20]	; (8000800 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <NVIC_SystemReset+0x20>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <NVIC_SystemReset+0x24>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	60cb      	str	r3, [r1, #12]
 80007f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80007fc:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007fe:	e7fd      	b.n	80007fc <NVIC_SystemReset+0x1c>
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	05fa0004 	.word	0x05fa0004

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff7c 	bl	8000728 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff01 	bl	800065c <NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff16 	bl	80006a4 <NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff7c 	bl	800077c <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff4b 	bl	8000728 <NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff09 	bl	80006c0 <NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80008ba:	f7ff ff91 	bl	80007e0 <NVIC_SystemReset>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff9c 	bl	8000808 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff03 	bl	80006f4 <NVIC_ClearPendingIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b02      	cmp	r3, #2
 800090c:	d005      	beq.n	800091a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2204      	movs	r2, #4
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e029      	b.n	800096e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	f022 020e 	bic.w	r2, r2, #14
 8000928:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	f022 0201 	bic.w	r2, r2, #1
 8000938:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000942:	f002 021c 	and.w	r2, r2, #28
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2201      	movs	r2, #1
 8000952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	4798      	blx	r3
    }
  }
  return status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e17f      	b.n	8000c88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 8171 	beq.w	8000c82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d00b      	beq.n	80009c0 <HAL_GPIO_Init+0x48>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d007      	beq.n	80009c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b4:	2b11      	cmp	r3, #17
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b12      	cmp	r3, #18
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	f003 0201 	and.w	r2, r3, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d118      	bne.n	8000a60 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a34:	2201      	movs	r2, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	f003 0201 	and.w	r2, r3, #1
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x128>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b12      	cmp	r3, #18
 8000a9e:	d123      	bne.n	8000ae8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	08da      	lsrs	r2, r3, #3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	691a      	ldr	r2, [r3, #16]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	08da      	lsrs	r2, r3, #3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3208      	adds	r2, #8
 8000ae2:	6939      	ldr	r1, [r7, #16]
 8000ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0203 	and.w	r2, r3, #3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 80ac 	beq.w	8000c82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4a5e      	ldr	r2, [pc, #376]	; (8000ca4 <HAL_GPIO_Init+0x32c>)
 8000b2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <HAL_GPIO_Init+0x32c>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6613      	str	r3, [r2, #96]	; 0x60
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <HAL_GPIO_Init+0x32c>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b42:	4a59      	ldr	r2, [pc, #356]	; (8000ca8 <HAL_GPIO_Init+0x330>)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	220f      	movs	r2, #15
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6c:	d025      	beq.n	8000bba <HAL_GPIO_Init+0x242>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4e      	ldr	r2, [pc, #312]	; (8000cac <HAL_GPIO_Init+0x334>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d01f      	beq.n	8000bb6 <HAL_GPIO_Init+0x23e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4d      	ldr	r2, [pc, #308]	; (8000cb0 <HAL_GPIO_Init+0x338>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d019      	beq.n	8000bb2 <HAL_GPIO_Init+0x23a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4c      	ldr	r2, [pc, #304]	; (8000cb4 <HAL_GPIO_Init+0x33c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0x236>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_GPIO_Init+0x340>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d00d      	beq.n	8000baa <HAL_GPIO_Init+0x232>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_GPIO_Init+0x344>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d007      	beq.n	8000ba6 <HAL_GPIO_Init+0x22e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a49      	ldr	r2, [pc, #292]	; (8000cc0 <HAL_GPIO_Init+0x348>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_GPIO_Init+0x22a>
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	e00c      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	e00a      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	e008      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e004      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e002      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_GPIO_Init+0x244>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	f002 0203 	and.w	r2, r2, #3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	4093      	lsls	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bcc:	4936      	ldr	r1, [pc, #216]	; (8000ca8 <HAL_GPIO_Init+0x330>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bda:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bfe:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c28:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <HAL_GPIO_Init+0x34c>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f47f ae78 	bne.w	8000988 <HAL_GPIO_Init+0x10>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	48001400 	.word	0x48001400
 8000cc0:	48001800 	.word	0x48001800
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd8:	787b      	ldrb	r3, [r7, #1]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d10:	887a      	ldrh	r2, [r7, #2]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d18:	887a      	ldrh	r2, [r7, #2]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	619a      	str	r2, [r3, #24]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40007000 	.word	0x40007000

08000d4c <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d50:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40007000 	.word	0x40007000

08000d6c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8000d8c:	4906      	ldr	r1, [pc, #24]	; (8000da8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f003 031f 	and.w	r3, r3, #31
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]


}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <HAL_PWR_DisableWakeUpPin+0x28>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 0307 	bic.w	r3, r3, #7
 8000de6:	f043 0303 	orr.w	r3, r3, #3
 8000dea:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8000df8:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40007000 	.word	0x40007000
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40007000 	.word	0x40007000

08000e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e36:	d130      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e44:	d038      	beq.n	8000eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2232      	movs	r2, #50	; 0x32
 8000e5c:	fb02 f303 	mul.w	r3, r2, r3
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	0c9b      	lsrs	r3, r3, #18
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e6c:	e002      	b.n	8000e74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e80:	d102      	bne.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f2      	bne.n	8000e6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e94:	d110      	bne.n	8000eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e00f      	b.n	8000eba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea6:	d007      	beq.n	8000eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	431bde83 	.word	0x431bde83

08000ed4 <HAL_PWREx_EnableInternalWakeUpLine>:
/**
  * @brief Enable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_EnableInternalWakeUpLine(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8000ed8:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_PWREx_EnableInternalWakeUpLine+0x1c>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee2:	6093      	str	r3, [r2, #8]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_PWREx_DisableInternalWakeUpLine>:
/**
  * @brief Disable Internal Wake-up Line.
  * @retval None
  */
void HAL_PWREx_DisableInternalWakeUpLine(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 8000ef8:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_PWREx_DisableInternalWakeUpLine+0x1c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f02:	6093      	str	r3, [r2, #8]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40007000 	.word	0x40007000

08000f14 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 0307 	bic.w	r3, r3, #7
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6113      	str	r3, [r2, #16]
 8000f34:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40007000 	.word	0x40007000
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e3d4      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5a:	4ba1      	ldr	r3, [pc, #644]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f64:	4b9e      	ldr	r3, [pc, #632]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80e4 	beq.w	8001144 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <HAL_RCC_OscConfig+0x4a>
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	f040 808b 	bne.w	80010a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8087 	bne.w	80010a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f92:	4b93      	ldr	r3, [pc, #588]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x62>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e3ac      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a1a      	ldr	r2, [r3, #32]
 8000fae:	4b8c      	ldr	r3, [pc, #560]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x7c>
 8000fba:	4b89      	ldr	r3, [pc, #548]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc2:	e005      	b.n	8000fd0 <HAL_RCC_OscConfig+0x88>
 8000fc4:	4b86      	ldr	r3, [pc, #536]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d923      	bls.n	800101c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fd73 	bl	8001ac4 <RCC_SetFlashLatencyFromMSIRange>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e38d      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe8:	4a7d      	ldr	r2, [pc, #500]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fea:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	497a      	ldr	r1, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001006:	4976      	ldr	r1, [pc, #472]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001008:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]
 800101a:	e025      	b.n	8001068 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101c:	4a70      	ldr	r2, [pc, #448]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800101e:	4b70      	ldr	r3, [pc, #448]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	496d      	ldr	r1, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800102a:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103a:	4969      	ldr	r1, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd33 	bl	8001ac4 <RCC_SetFlashLatencyFromMSIRange>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e34d      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001068:	f000 fc6a 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 800106c:	4601      	mov	r1, r0
 800106e:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	4a5a      	ldr	r2, [pc, #360]	; (80011e4 <HAL_RCC_OscConfig+0x29c>)
 800107a:	5cd3      	ldrb	r3, [r2, r3]
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	fa21 f303 	lsr.w	r3, r1, r3
 8001084:	4a58      	ldr	r2, [pc, #352]	; (80011e8 <HAL_RCC_OscConfig+0x2a0>)
 8001086:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001088:	4b58      	ldr	r3, [pc, #352]	; (80011ec <HAL_RCC_OscConfig+0x2a4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa4b 	bl	8000528 <HAL_InitTick>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d052      	beq.n	8001142 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	e331      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d032      	beq.n	800110e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010aa:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fa84 	bl	80005c0 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010bc:	f7ff fa80 	bl	80005c0 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e31a      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	493e      	ldr	r1, [pc, #248]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f8:	4939      	ldr	r1, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010fa:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e01a      	b.n	8001144 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800110e:	4a34      	ldr	r2, [pc, #208]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800111a:	f7ff fa51 	bl	80005c0 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001122:	f7ff fa4d 	bl	80005c0 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e2e7      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x1da>
 8001140:	e000      	b.n	8001144 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001142:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d074      	beq.n	800123a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d005      	beq.n	8001162 <HAL_RCC_OscConfig+0x21a>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b0c      	cmp	r3, #12
 800115a:	d10e      	bne.n	800117a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d10b      	bne.n	800117a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d064      	beq.n	8001238 <HAL_RCC_OscConfig+0x2f0>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d160      	bne.n	8001238 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e2c4      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x24a>
 8001184:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e01d      	b.n	80011ce <HAL_RCC_OscConfig+0x286>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119a:	d10c      	bne.n	80011b6 <HAL_RCC_OscConfig+0x26e>
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e00b      	b.n	80011ce <HAL_RCC_OscConfig+0x286>
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_RCC_OscConfig+0x298>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01c      	beq.n	8001210 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff f9f3 	bl	80005c0 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011dc:	e011      	b.n	8001202 <HAL_RCC_OscConfig+0x2ba>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08005f60 	.word	0x08005f60
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff f9e6 	bl	80005c0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e280      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	4baf      	ldr	r3, [pc, #700]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2a8>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff f9d6 	bl	80005c0 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff f9d2 	bl	80005c0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e26c      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122a:	4ba5      	ldr	r3, [pc, #660]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x2d0>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d060      	beq.n	8001308 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x310>
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b0c      	cmp	r3, #12
 8001250:	d119      	bne.n	8001286 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d116      	bne.n	8001286 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_OscConfig+0x328>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e249      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4993      	ldr	r1, [pc, #588]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001272:	4b93      	ldr	r3, [pc, #588]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	061b      	lsls	r3, r3, #24
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001284:	e040      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d023      	beq.n	80012d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128e:	4a8c      	ldr	r2, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001290:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff f991 	bl	80005c0 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff f98d 	bl	80005c0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e227      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b4:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	497f      	ldr	r1, [pc, #508]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012c2:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	061b      	lsls	r3, r3, #24
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e018      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4a7a      	ldr	r2, [pc, #488]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012d8:	4b79      	ldr	r3, [pc, #484]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff f96d 	bl	80005c0 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff f969 	bl	80005c0 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e203      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03c      	beq.n	800138e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01c      	beq.n	8001356 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131c:	4a68      	ldr	r2, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff f948 	bl	80005c0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff f944 	bl	80005c0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1de      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ef      	beq.n	8001334 <HAL_RCC_OscConfig+0x3ec>
 8001354:	e01b      	b.n	800138e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4a5a      	ldr	r2, [pc, #360]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001358:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff f92b 	bl	80005c0 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff f927 	bl	80005c0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1c1      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ef      	bne.n	800136e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80a6 	beq.w	80014e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10d      	bne.n	80013c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6593      	str	r3, [r2, #88]	; 0x58
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d118      	bne.n	8001406 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d4:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e0:	f7ff f8ee 	bl	80005c0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff f8ea 	bl	80005c0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e184      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_RCC_OscConfig+0x57c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_RCC_OscConfig+0x4d8>
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141e:	e024      	b.n	800146a <HAL_RCC_OscConfig+0x522>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d110      	bne.n	800144a <HAL_RCC_OscConfig+0x502>
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800142c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001438:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001448:	e00f      	b.n	800146a <HAL_RCC_OscConfig+0x522>
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d016      	beq.n	80014a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff f8a5 	bl	80005c0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff f8a1 	bl	80005c0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e139      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x578>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0ed      	beq.n	800147a <HAL_RCC_OscConfig+0x532>
 800149e:	e01a      	b.n	80014d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff f88e 	bl	80005c0 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff f88a 	bl	80005c0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d906      	bls.n	80014c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e122      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c8:	4b90      	ldr	r3, [pc, #576]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e8      	bne.n	80014a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4a8b      	ldr	r2, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8108 	beq.w	8001702 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	f040 80d0 	bne.w	800169c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014fc:	4b83      	ldr	r3, [pc, #524]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0203 	and.w	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	429a      	cmp	r2, r3
 800150e:	d130      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	3b01      	subs	r3, #1
 800151c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d127      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d11f      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800153c:	2a07      	cmp	r2, #7
 800153e:	bf14      	ite	ne
 8001540:	2201      	movne	r2, #1
 8001542:	2200      	moveq	r2, #0
 8001544:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001546:	4293      	cmp	r3, r2
 8001548:	d113      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	3b01      	subs	r3, #1
 8001558:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d109      	bne.n	8001572 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	3b01      	subs	r3, #1
 800156c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d06e      	beq.n	8001650 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d069      	beq.n	800164c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001578:	4b64      	ldr	r3, [pc, #400]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001584:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b7      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001594:	4a5d      	ldr	r2, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800159e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015a0:	f7ff f80e 	bl	80005c0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff f80a 	bl	80005c0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0a4      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c6:	4851      	ldr	r0, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x7c8>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015d8:	3a01      	subs	r2, #1
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	4311      	orrs	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015e2:	0212      	lsls	r2, r2, #8
 80015e4:	4311      	orrs	r1, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015ea:	0852      	lsrs	r2, r2, #1
 80015ec:	3a01      	subs	r2, #1
 80015ee:	0552      	lsls	r2, r2, #21
 80015f0:	4311      	orrs	r1, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015f6:	0852      	lsrs	r2, r2, #1
 80015f8:	3a01      	subs	r2, #1
 80015fa:	0652      	lsls	r2, r2, #25
 80015fc:	4311      	orrs	r1, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001602:	0912      	lsrs	r2, r2, #4
 8001604:	0452      	lsls	r2, r2, #17
 8001606:	430a      	orrs	r2, r1
 8001608:	4313      	orrs	r3, r2
 800160a:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800160c:	4a3f      	ldr	r2, [pc, #252]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001618:	4a3c      	ldr	r2, [pc, #240]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001624:	f7fe ffcc 	bl	80005c0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7fe ffc8 	bl	80005c0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e062      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800164a:	e05a      	b.n	8001702 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e059      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d152      	bne.n	8001702 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800165c:	4a2b      	ldr	r2, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800165e:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001674:	f7fe ffa4 	bl	80005c0 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7fe ffa0 	bl	80005c0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e03a      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x734>
 800169a:	e032      	b.n	8001702 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d02d      	beq.n	80016fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f023 0303 	bic.w	r3, r3, #3
 80016c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7fe ff73 	bl	80005c0 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7fe ff6f 	bl	80005c0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e009      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_OscConfig+0x7c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x796>
 80016fc:	e001      	b.n	8001702 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	f99d808c 	.word	0xf99d808c

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0c8      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0207 	and.w	r2, r3, #7
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d210      	bcs.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4963      	ldr	r1, [pc, #396]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001738:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 0207 	bic.w	r2, r3, #7
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0207 	and.w	r2, r3, #7
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b0      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d04c      	beq.n	80017fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d107      	bne.n	800177c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d121      	bne.n	80017bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e09e      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d107      	bne.n	8001794 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d115      	bne.n	80017bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e092      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179c:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e086      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e07e      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017bc:	4942      	ldr	r1, [pc, #264]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ce:	f7fe fef7 	bl	80005c0 <HAL_GetTick>
 80017d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d6:	f7fe fef3 	bl	80005c0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e066      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 020c 	and.w	r2, r3, #12
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d1eb      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180a:	492f      	ldr	r1, [pc, #188]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0207 	and.w	r2, r3, #7
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4926      	ldr	r1, [pc, #152]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 0207 	bic.w	r2, r3, #7
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_RCC_ClockConfig+0x1b0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0207 	and.w	r2, r3, #7
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e036      	b.n	80018ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001858:	491b      	ldr	r1, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001876:	4914      	ldr	r1, [pc, #80]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800188a:	f000 f859 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 800188e:	4601      	mov	r1, r0
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_ClockConfig+0x1b4>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	5cd3      	ldrb	r3, [r2, r3]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	fa21 f303 	lsr.w	r3, r1, r3
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe3a 	bl	8000528 <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80018b8:	7afb      	ldrb	r3, [r7, #11]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08005f60 	.word	0x08005f60
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80018e4:	4a15      	ldr	r2, [pc, #84]	; (800193c <HAL_RCC_MCOConfig+0x64>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_MCOConfig+0x64>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_MCOConfig+0x64>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80018fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2302      	movs	r3, #2
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191c:	f7ff f82c 	bl	8000978 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <HAL_RCC_MCOConfig+0x64>)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCC_MCOConfig+0x64>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	430b      	orrs	r3, r1
 8001930:	4313      	orrs	r3, r2
 8001932:	6083      	str	r3, [r0, #8]
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x34>
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d121      	bne.n	80019b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d11e      	bne.n	80019b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	e005      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800199c:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x108>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10d      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d102      	bne.n	80019be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	e004      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80019c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d133      	bne.n	8001a36 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0xa4>
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0xaa>
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 80019e6:	617b      	str	r3, [r7, #20]
      break;
 80019e8:	e005      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80019ec:	617b      	str	r3, [r7, #20]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	617b      	str	r3, [r7, #20]
      break;
 80019f4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	3301      	adds	r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	fb02 f203 	mul.w	r2, r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0e5b      	lsrs	r3, r3, #25
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a36:	69bb      	ldr	r3, [r7, #24]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3724      	adds	r7, #36	; 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08005f78 	.word	0x08005f78
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200

08001a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a74:	4601      	mov	r1, r0
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08005f70 	.word	0x08005f70

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a9c:	f7ff ffda 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0adb      	lsrs	r3, r3, #11
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08005f70 	.word	0x08005f70

08001ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001adc:	f7ff f996 	bl	8000e0c <HAL_PWREx_GetVoltageRange>
 8001ae0:	6178      	str	r0, [r7, #20]
 8001ae2:	e014      	b.n	8001b0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001afc:	f7ff f986 	bl	8000e0c <HAL_PWREx_GetVoltageRange>
 8001b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d10b      	bne.n	8001b2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b80      	cmp	r3, #128	; 0x80
 8001b1a:	d919      	bls.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001b20:	d902      	bls.n	8001b28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b22:	2302      	movs	r3, #2
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	e013      	b.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b28:	2301      	movs	r3, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	e010      	b.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	d902      	bls.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b34:	2303      	movs	r3, #3
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	e00a      	b.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b80      	cmp	r3, #128	; 0x80
 8001b3e:	d102      	bne.n	8001b46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	e004      	b.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b70      	cmp	r3, #112	; 0x70
 8001b4a:	d101      	bne.n	8001b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b50:	490b      	ldr	r1, [pc, #44]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0207 	and.w	r2, r3, #7
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b90:	2300      	movs	r3, #0
 8001b92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d03f      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba8:	d01c      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bae:	d802      	bhi.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001bb4:	e01f      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bba:	d003      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001bc0:	d01c      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bc4:	4a85      	ldr	r2, [pc, #532]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bd0:	e015      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fac9 	bl	8002170 <RCCEx_PLLSAI1_Config>
 8001bde:	4603      	mov	r3, r0
 8001be0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001be2:	e00c      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3320      	adds	r3, #32
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fbb0 	bl	8002350 <RCCEx_PLLSAI2_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bf4:	e003      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8001bfa:	e000      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c04:	4975      	ldr	r1, [pc, #468]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c06:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c1a:	e001      	b.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c1c:	7cfb      	ldrb	r3, [r7, #19]
 8001c1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03f      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d01c      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3a:	d802      	bhi.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00e      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001c40:	e01f      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c46:	d003      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c4c:	d01c      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001c4e:	e018      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c50:	4a62      	ldr	r2, [pc, #392]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c52:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c5c:	e015      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fa83 	bl	8002170 <RCCEx_PLLSAI1_Config>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c6e:	e00c      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3320      	adds	r3, #32
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fb6a 	bl	8002350 <RCCEx_PLLSAI2_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c80:	e003      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	74fb      	strb	r3, [r7, #19]
      break;
 8001c86:	e000      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c8a:	7cfb      	ldrb	r3, [r7, #19]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c90:	4952      	ldr	r1, [pc, #328]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c92:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ca6:	e001      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a0 	beq.w	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4a41      	ldr	r2, [pc, #260]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fc60 	bl	80005c0 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d02:	e009      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7fe fc5c 	bl	80005c0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d902      	bls.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	74fb      	strb	r3, [r7, #19]
        break;
 8001d16:	e005      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ef      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d15c      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01f      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d019      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d54:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d64:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7fe fc1b 	bl	80005c0 <HAL_GetTick>
 8001d8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8c:	e00b      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fc17 	bl	80005c0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d902      	bls.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	74fb      	strb	r3, [r7, #19]
            break;
 8001da4:	e006      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ec      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dd2:	e009      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	74bb      	strb	r3, [r7, #18]
 8001dd8:	e006      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de8:	7c7b      	ldrb	r3, [r7, #17]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d105      	bne.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4a9e      	ldr	r2, [pc, #632]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df0:	4b9d      	ldr	r3, [pc, #628]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e06:	4998      	ldr	r1, [pc, #608]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e08:	4b97      	ldr	r3, [pc, #604]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e28:	498f      	ldr	r1, [pc, #572]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2a:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e30:	f023 020c 	bic.w	r2, r3, #12
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e4a:	4987      	ldr	r1, [pc, #540]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4c:	4b86      	ldr	r3, [pc, #536]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e6c:	497e      	ldr	r1, [pc, #504]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e6e:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e8e:	4976      	ldr	r1, [pc, #472]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e90:	4b75      	ldr	r3, [pc, #468]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eb0:	496d      	ldr	r1, [pc, #436]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ed2:	4965      	ldr	r1, [pc, #404]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ef4:	495c      	ldr	r1, [pc, #368]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f16:	4954      	ldr	r1, [pc, #336]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f38:	494b      	ldr	r1, [pc, #300]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f5a:	4943      	ldr	r1, [pc, #268]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d028      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7c:	493a      	ldr	r1, [pc, #232]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9a:	d106      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f9c:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	e011      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f8d8 	bl	8002170 <RCCEx_PLLSAI1_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d028      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fda:	4923      	ldr	r1, [pc, #140]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002004:	60d3      	str	r3, [r2, #12]
 8002006:	e011      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002010:	d10c      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f8a9 	bl	8002170 <RCCEx_PLLSAI1_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d02b      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002038:	490b      	ldr	r1, [pc, #44]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002056:	d109      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205a:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002062:	60d3      	str	r3, [r2, #12]
 8002064:	e014      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002074:	d10c      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f877 	bl	8002170 <RCCEx_PLLSAI1_Config>
 8002082:	4603      	mov	r3, r0
 8002084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d02f      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800209c:	492b      	ldr	r1, [pc, #172]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ba:	d10d      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	2102      	movs	r1, #2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f854 	bl	8002170 <RCCEx_PLLSAI1_Config>
 80020c8:	4603      	mov	r3, r0
 80020ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d014      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	74bb      	strb	r3, [r7, #18]
 80020d6:	e011      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3320      	adds	r3, #32
 80020e6:	2102      	movs	r1, #2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f931 	bl	8002350 <RCCEx_PLLSAI2_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002108:	4910      	ldr	r1, [pc, #64]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002142:	7cbb      	ldrb	r3, [r7, #18]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800217e:	4b73      	ldr	r3, [pc, #460]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d018      	beq.n	80021bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800218a:	4b70      	ldr	r3, [pc, #448]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0203 	and.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d10d      	bne.n	80021b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
       ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021a2:	4b6a      	ldr	r3, [pc, #424]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
       ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d044      	beq.n	8002240 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e041      	b.n	8002240 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d00c      	beq.n	80021de <RCCEx_PLLSAI1_Config+0x6e>
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d013      	beq.n	80021f0 <RCCEx_PLLSAI1_Config+0x80>
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d120      	bne.n	800220e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021cc:	4b5f      	ldr	r3, [pc, #380]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d11d      	bne.n	8002214 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021dc:	e01a      	b.n	8002214 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021de:	4b5b      	ldr	r3, [pc, #364]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ee:	e013      	b.n	8002218 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021f0:	4b56      	ldr	r3, [pc, #344]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10f      	bne.n	800221c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800220c:	e006      	b.n	800221c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
      break;
 8002212:	e004      	b.n	800221e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002214:	bf00      	nop
 8002216:	e002      	b.n	800221e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002218:	bf00      	nop
 800221a:	e000      	b.n	800221e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800221c:	bf00      	nop
    }

    if(status == HAL_OK)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002224:	4849      	ldr	r0, [pc, #292]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	430b      	orrs	r3, r1
 800223c:	4313      	orrs	r3, r2
 800223e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d17d      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002246:	4a41      	ldr	r2, [pc, #260]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002248:	4b40      	ldr	r3, [pc, #256]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002252:	f7fe f9b5 	bl	80005c0 <HAL_GetTick>
 8002256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002258:	e009      	b.n	800226e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800225a:	f7fe f9b1 	bl	80005c0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d902      	bls.n	800226e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	73fb      	strb	r3, [r7, #15]
        break;
 800226c:	e005      	b.n	800227a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ef      	bne.n	800225a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d160      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d111      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002286:	4831      	ldr	r0, [pc, #196]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6892      	ldr	r2, [r2, #8]
 8002298:	0211      	lsls	r1, r2, #8
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68d2      	ldr	r2, [r2, #12]
 800229e:	0912      	lsrs	r2, r2, #4
 80022a0:	0452      	lsls	r2, r2, #17
 80022a2:	430a      	orrs	r2, r1
 80022a4:	4313      	orrs	r3, r2
 80022a6:	6103      	str	r3, [r0, #16]
 80022a8:	e027      	b.n	80022fa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d112      	bne.n	80022d6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022b0:	4826      	ldr	r0, [pc, #152]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	0211      	lsls	r1, r2, #8
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6912      	ldr	r2, [r2, #16]
 80022c8:	0852      	lsrs	r2, r2, #1
 80022ca:	3a01      	subs	r2, #1
 80022cc:	0552      	lsls	r2, r2, #21
 80022ce:	430a      	orrs	r2, r1
 80022d0:	4313      	orrs	r3, r2
 80022d2:	6103      	str	r3, [r0, #16]
 80022d4:	e011      	b.n	80022fa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d6:	481d      	ldr	r0, [pc, #116]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	0211      	lsls	r1, r2, #8
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6952      	ldr	r2, [r2, #20]
 80022ee:	0852      	lsrs	r2, r2, #1
 80022f0:	3a01      	subs	r2, #1
 80022f2:	0652      	lsls	r2, r2, #25
 80022f4:	430a      	orrs	r2, r1
 80022f6:	4313      	orrs	r3, r2
 80022f8:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002304:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe f95b 	bl	80005c0 <HAL_GetTick>
 800230a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800230c:	e009      	b.n	8002322 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800230e:	f7fe f957 	bl	80005c0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d902      	bls.n	8002322 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	73fb      	strb	r3, [r7, #15]
          break;
 8002320:	e005      	b.n	800232e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0ef      	beq.n	800230e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002334:	4905      	ldr	r1, [pc, #20]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000

08002350 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235e:	4b68      	ldr	r3, [pc, #416]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d018      	beq.n	800239c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0203 	and.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d10d      	bne.n	8002396 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
       ||
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
       ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d044      	beq.n	8002420 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e041      	b.n	8002420 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d00c      	beq.n	80023be <RCCEx_PLLSAI2_Config+0x6e>
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d013      	beq.n	80023d0 <RCCEx_PLLSAI2_Config+0x80>
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d120      	bne.n	80023ee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ac:	4b54      	ldr	r3, [pc, #336]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11d      	bne.n	80023f4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023bc:	e01a      	b.n	80023f4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e013      	b.n	80023f8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10f      	bne.n	80023fc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023dc:	4b48      	ldr	r3, [pc, #288]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ec:	e006      	b.n	80023fc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e004      	b.n	80023fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80023f4:	bf00      	nop
 80023f6:	e002      	b.n	80023fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80023f8:	bf00      	nop
 80023fa:	e000      	b.n	80023fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80023fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002404:	483e      	ldr	r0, [pc, #248]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	430b      	orrs	r3, r1
 800241c:	4313      	orrs	r3, r2
 800241e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d167      	bne.n	80024f6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002426:	4a36      	ldr	r2, [pc, #216]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002432:	f7fe f8c5 	bl	80005c0 <HAL_GetTick>
 8002436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002438:	e009      	b.n	800244e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800243a:	f7fe f8c1 	bl	80005c0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d902      	bls.n	800244e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	73fb      	strb	r3, [r7, #15]
        break;
 800244c:	e005      	b.n	800245a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ef      	bne.n	800243a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d14a      	bne.n	80024f6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d111      	bne.n	800248a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002466:	4826      	ldr	r0, [pc, #152]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6892      	ldr	r2, [r2, #8]
 8002478:	0211      	lsls	r1, r2, #8
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68d2      	ldr	r2, [r2, #12]
 800247e:	0912      	lsrs	r2, r2, #4
 8002480:	0452      	lsls	r2, r2, #17
 8002482:	430a      	orrs	r2, r1
 8002484:	4313      	orrs	r3, r2
 8002486:	6143      	str	r3, [r0, #20]
 8002488:	e011      	b.n	80024ae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800248a:	481d      	ldr	r0, [pc, #116]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002494:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6892      	ldr	r2, [r2, #8]
 800249c:	0211      	lsls	r1, r2, #8
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6912      	ldr	r2, [r2, #16]
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	3a01      	subs	r2, #1
 80024a6:	0652      	lsls	r2, r2, #25
 80024a8:	430a      	orrs	r2, r1
 80024aa:	4313      	orrs	r3, r2
 80024ac:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe f881 	bl	80005c0 <HAL_GetTick>
 80024be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024c0:	e009      	b.n	80024d6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024c2:	f7fe f87d 	bl	80005c0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d902      	bls.n	80024d6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	73fb      	strb	r3, [r7, #15]
          break;
 80024d4:	e005      	b.n	80024e2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ef      	beq.n	80024c2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80024e8:	4905      	ldr	r1, [pc, #20]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000

08002504 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d06c      	beq.n	80025f0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f002 f8f4 	bl	8004718 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	22ca      	movs	r2, #202	; 0xca
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2253      	movs	r2, #83	; 0x53
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9a0 	bl	800288e <RTC_EnterInitMode>
 800254e:	4603      	mov	r3, r0
 8002550:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d14b      	bne.n	80025f0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	6891      	ldr	r1, [r2, #8]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6850      	ldr	r0, [r2, #4]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6912      	ldr	r2, [r2, #16]
 800257e:	4310      	orrs	r0, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6992      	ldr	r2, [r2, #24]
 8002584:	4302      	orrs	r2, r0
 8002586:	430a      	orrs	r2, r1
 8002588:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	6911      	ldr	r1, [r2, #16]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6892      	ldr	r2, [r2, #8]
 80025a2:	0412      	lsls	r2, r2, #16
 80025a4:	430a      	orrs	r2, r1
 80025a6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f9a3 	bl	80028f4 <RTC_ExitInitMode>
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11b      	bne.n	80025f0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025c2:	f022 0203 	bic.w	r2, r2, #3
 80025c6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	69d0      	ldr	r0, [r2, #28]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6952      	ldr	r2, [r2, #20]
 80025da:	4302      	orrs	r2, r0
 80025dc:	430a      	orrs	r2, r1
 80025de:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	22ff      	movs	r2, #255	; 0xff
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025fa:	b590      	push	{r4, r7, lr}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_RTC_SetTime+0x1a>
 8002610:	2302      	movs	r3, #2
 8002612:	e08b      	b.n	800272c <HAL_RTC_SetTime+0x132>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	22ca      	movs	r2, #202	; 0xca
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2253      	movs	r2, #83	; 0x53
 8002632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f92a 	bl	800288e <RTC_EnterInitMode>
 800263a:	4603      	mov	r3, r0
 800263c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d163      	bne.n	800270c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d126      	bne.n	8002698 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f984 	bl	8002970 <RTC_ByteToBcd2>
 8002668:	4603      	mov	r3, r0
 800266a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f97d 	bl	8002970 <RTC_ByteToBcd2>
 8002676:	4603      	mov	r3, r0
 8002678:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800267a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	789b      	ldrb	r3, [r3, #2]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f975 	bl	8002970 <RTC_ByteToBcd2>
 8002686:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002688:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	78db      	ldrb	r3, [r3, #3]
 8002690:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e018      	b.n	80026ca <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026b8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80026be:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	78db      	ldrb	r3, [r3, #3]
 80026c4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80026d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6891      	ldr	r1, [r2, #8]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	68d0      	ldr	r0, [r2, #12]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	6912      	ldr	r2, [r2, #16]
 80026fc:	4302      	orrs	r2, r0
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f8f6 	bl	80028f4 <RTC_ExitInitMode>
 8002708:	4603      	mov	r3, r0
 800270a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	22ff      	movs	r2, #255	; 0xff
 8002712:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800272a:	7cfb      	ldrb	r3, [r7, #19]
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}

08002734 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_RTC_SetDate+0x1a>
 800274a:	2302      	movs	r3, #2
 800274c:	e075      	b.n	800283a <HAL_RTC_SetDate+0x106>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10e      	bne.n	8002782 <HAL_RTC_SetDate+0x4e>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	785b      	ldrb	r3, [r3, #1]
 8002774:	f023 0310 	bic.w	r3, r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	330a      	adds	r3, #10
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11c      	bne.n	80027c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f8ef 	bl	8002970 <RTC_ByteToBcd2>
 8002792:	4603      	mov	r3, r0
 8002794:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f8e8 	bl	8002970 <RTC_ByteToBcd2>
 80027a0:	4603      	mov	r3, r0
 80027a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80027a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	789b      	ldrb	r3, [r3, #2]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8e0 	bl	8002970 <RTC_ByteToBcd2>
 80027b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80027b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e00e      	b.n	80027e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	78db      	ldrb	r3, [r3, #3]
 80027c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80027ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80027d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	22ca      	movs	r2, #202	; 0xca
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2253      	movs	r2, #83	; 0x53
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f84c 	bl	800288e <RTC_EnterInitMode>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800280a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800280e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f86f 	bl	80028f4 <RTC_ExitInitMode>
 8002816:	4603      	mov	r3, r0
 8002818:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002838:	7cfb      	ldrb	r3, [r7, #19]
}
 800283a:	4618      	mov	r0, r3
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}

08002842 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68d2      	ldr	r2, [r2, #12]
 8002854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002858:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800285a:	f7fd feb1 	bl	80005c0 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002860:	e009      	b.n	8002876 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002862:	f7fd fead 	bl	80005c0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002870:	d901      	bls.n	8002876 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e007      	b.n	8002886 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d120      	bne.n	80028ea <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028b2:	f7fd fe85 	bl	80005c0 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028b8:	e00d      	b.n	80028d6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80028ba:	f7fd fe81 	bl	80005c0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c8:	d905      	bls.n	80028d6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <RTC_EnterInitMode+0x5c>
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d1e7      	bne.n	80028ba <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <RTC_ExitInitMode+0x78>)
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <RTC_ExitInitMode+0x78>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800290a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <RTC_ExitInitMode+0x78>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10c      	bne.n	8002932 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff92 	bl	8002842 <HAL_RTC_WaitForSynchro>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01e      	beq.n	8002962 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e017      	b.n	8002962 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <RTC_ExitInitMode+0x78>)
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <RTC_ExitInitMode+0x78>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 0320 	bic.w	r3, r3, #32
 800293c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ff7f 	bl	8002842 <HAL_RTC_WaitForSynchro>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2203      	movs	r2, #3
 800294e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <RTC_ExitInitMode+0x78>)
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <RTC_ExitInitMode+0x78>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f043 0320 	orr.w	r3, r3, #32
 8002960:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40002800 	.word	0x40002800

08002970 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002982:	e005      	b.n	8002990 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800298a:	7afb      	ldrb	r3, [r7, #11]
 800298c:	3b0a      	subs	r3, #10
 800298e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	2b09      	cmp	r3, #9
 8002994:	d8f6      	bhi.n	8002984 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	b2da      	uxtb	r2, r3
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e07f      	b.n	8002aca <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	22ca      	movs	r2, #202	; 0xca
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2253      	movs	r2, #83	; 0x53
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	6892      	ldr	r2, [r2, #8]
 80029f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a0a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d120      	bne.n	8002a5c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002a1a:	f7fd fdd1 	bl	80005c0 <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002a20:	e015      	b.n	8002a4e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a22:	f7fd fdcd 	bl	80005c0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d90d      	bls.n	8002a4e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e03d      	b.n	8002aca <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0e2      	beq.n	8002a22 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	f022 0107 	bic.w	r1, r2, #7
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	6892      	ldr	r2, [r2, #8]
 8002a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a9e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	6892      	ldr	r2, [r2, #8]
 8002aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	22ff      	movs	r2, #255	; 0xff
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002ae2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ae6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	68d2      	ldr	r2, [r2, #12]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b06:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f80b 	bl	8002b24 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e040      	b.n	8002bcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f001 fdfe 	bl	800475c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa1a 	bl	8002fb0 <UART_SetConfig>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e022      	b.n	8002bcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fd72 	bl	8003678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	6852      	ldr	r2, [r2, #4]
 8002b9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fdf9 	bl	80037bc <UART_CheckIdleState>
 8002bca:	4603      	mov	r3, r0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 8081 	bne.w	8002cf0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_UART_Transmit+0x26>
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e079      	b.n	8002cf2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_UART_Transmit+0x38>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e072      	b.n	8002cf2 <HAL_UART_Transmit+0x11e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2221      	movs	r2, #33	; 0x21
 8002c1e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c20:	f7fd fcce 	bl	80005c0 <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	88fa      	ldrh	r2, [r7, #6]
 8002c2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3e:	d108      	bne.n	8002c52 <HAL_UART_Transmit+0x7e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	e003      	b.n	8002c5a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002c62:	e02d      	b.n	8002cc0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fde9 	bl	8003846 <UART_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e039      	b.n	8002cf2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c90:	b292      	uxth	r2, r2
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3302      	adds	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e008      	b.n	8002cae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	b292      	uxth	r2, r2
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1cb      	bne.n	8002c64 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2140      	movs	r1, #64	; 0x40
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fdb5 	bl	8003846 <UART_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e005      	b.n	8002cf2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d113      	bne.n	8002d54 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8114 	beq.w	8002f72 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
      }
      return;
 8002d52:	e10e      	b.n	8002f72 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80d6 	beq.w	8002f08 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80cb 	beq.w	8002f08 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <HAL_UART_IRQHandler+0x9e>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <HAL_UART_IRQHandler+0xc6>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2202      	movs	r2, #2
 8002db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <HAL_UART_IRQHandler+0xee>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de2:	f043 0202 	orr.w	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e14:	f043 0208 	orr.w	r2, r3, #8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00f      	beq.n	8002e46 <HAL_UART_IRQHandler+0x14a>
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8093 	beq.w	8002f76 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d004      	beq.n	8002e92 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d031      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fd52 	bl	800393c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d123      	bne.n	8002eee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	6892      	ldr	r2, [r2, #8]
 8002eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d013      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	4a30      	ldr	r2, [pc, #192]	; (8002f84 <HAL_UART_IRQHandler+0x288>)
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fd13 	bl	80008f6 <HAL_DMA_Abort_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	e00e      	b.n	8002f04 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f858 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	e00a      	b.n	8002f04 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f854 	bl	8002f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	e006      	b.n	8002f04 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f850 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002f02:	e038      	b.n	8002f76 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	bf00      	nop
    return;
 8002f06:	e036      	b.n	8002f76 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_UART_IRQHandler+0x232>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fd57 	bl	80039da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f2c:	e026      	b.n	8002f7c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d017      	beq.n	8002f7a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
    }
    return;
 8002f52:	e012      	b.n	8002f7a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00e      	beq.n	8002f7c <HAL_UART_IRQHandler+0x280>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fd1d 	bl	80039a8 <UART_EndTransmit_IT>
    return;
 8002f6e:	bf00      	nop
 8002f70:	e004      	b.n	8002f7c <HAL_UART_IRQHandler+0x280>
      return;
 8002f72:	bf00      	nop
 8002f74:	e002      	b.n	8002f7c <HAL_UART_IRQHandler+0x280>
    return;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <HAL_UART_IRQHandler+0x280>
    return;
 8002f7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	0800397d 	.word	0x0800397d

08002f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fb4:	b08a      	sub	sp, #40	; 0x28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	4bb7      	ldr	r3, [pc, #732]	; (80032c8 <UART_SetConfig+0x318>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	6852      	ldr	r2, [r2, #4]
 8002ffc:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68d2      	ldr	r2, [r2, #12]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4aae      	ldr	r2, [pc, #696]	; (80032cc <UART_SetConfig+0x31c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	4313      	orrs	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	6892      	ldr	r2, [r2, #8]
 800302c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4aa5      	ldr	r2, [pc, #660]	; (80032d0 <UART_SetConfig+0x320>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d126      	bne.n	800308e <UART_SetConfig+0xde>
 8003040:	4ba4      	ldr	r3, [pc, #656]	; (80032d4 <UART_SetConfig+0x324>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b03      	cmp	r3, #3
 800304c:	d81a      	bhi.n	8003084 <UART_SetConfig+0xd4>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0xa4>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003065 	.word	0x08003065
 8003058:	08003075 	.word	0x08003075
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307d 	.word	0x0800307d
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e105      	b.n	8003278 <UART_SetConfig+0x2c8>
 800306c:	2302      	movs	r3, #2
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e101      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003074:	2304      	movs	r3, #4
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e0fd      	b.n	8003278 <UART_SetConfig+0x2c8>
 800307c:	2308      	movs	r3, #8
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e0f9      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003084:	2310      	movs	r3, #16
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	bf00      	nop
 800308c:	e0f4      	b.n	8003278 <UART_SetConfig+0x2c8>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a91      	ldr	r2, [pc, #580]	; (80032d8 <UART_SetConfig+0x328>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d138      	bne.n	800310a <UART_SetConfig+0x15a>
 8003098:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <UART_SetConfig+0x324>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d82c      	bhi.n	8003100 <UART_SetConfig+0x150>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0xfc>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003101 	.word	0x08003101
 80030b8:	08003101 	.word	0x08003101
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003101 	.word	0x08003101
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	08003101 	.word	0x08003101
 80030dc:	080030f9 	.word	0x080030f9
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e0c7      	b.n	8003278 <UART_SetConfig+0x2c8>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e0c3      	b.n	8003278 <UART_SetConfig+0x2c8>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e0bf      	b.n	8003278 <UART_SetConfig+0x2c8>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e0bb      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	bf00      	nop
 8003108:	e0b6      	b.n	8003278 <UART_SetConfig+0x2c8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a73      	ldr	r2, [pc, #460]	; (80032dc <UART_SetConfig+0x32c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d125      	bne.n	8003160 <UART_SetConfig+0x1b0>
 8003114:	4b6f      	ldr	r3, [pc, #444]	; (80032d4 <UART_SetConfig+0x324>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800311e:	2b10      	cmp	r3, #16
 8003120:	d011      	beq.n	8003146 <UART_SetConfig+0x196>
 8003122:	2b10      	cmp	r3, #16
 8003124:	d802      	bhi.n	800312c <UART_SetConfig+0x17c>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <UART_SetConfig+0x186>
 800312a:	e014      	b.n	8003156 <UART_SetConfig+0x1a6>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d006      	beq.n	800313e <UART_SetConfig+0x18e>
 8003130:	2b30      	cmp	r3, #48	; 0x30
 8003132:	d00c      	beq.n	800314e <UART_SetConfig+0x19e>
 8003134:	e00f      	b.n	8003156 <UART_SetConfig+0x1a6>
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313c:	e09c      	b.n	8003278 <UART_SetConfig+0x2c8>
 800313e:	2302      	movs	r3, #2
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003144:	e098      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003146:	2304      	movs	r3, #4
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314c:	e094      	b.n	8003278 <UART_SetConfig+0x2c8>
 800314e:	2308      	movs	r3, #8
 8003150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003154:	e090      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003156:	2310      	movs	r3, #16
 8003158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315c:	bf00      	nop
 800315e:	e08b      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <UART_SetConfig+0x330>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d125      	bne.n	80031b6 <UART_SetConfig+0x206>
 800316a:	4b5a      	ldr	r3, [pc, #360]	; (80032d4 <UART_SetConfig+0x324>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d011      	beq.n	800319c <UART_SetConfig+0x1ec>
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d802      	bhi.n	8003182 <UART_SetConfig+0x1d2>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <UART_SetConfig+0x1dc>
 8003180:	e014      	b.n	80031ac <UART_SetConfig+0x1fc>
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d006      	beq.n	8003194 <UART_SetConfig+0x1e4>
 8003186:	2bc0      	cmp	r3, #192	; 0xc0
 8003188:	d00c      	beq.n	80031a4 <UART_SetConfig+0x1f4>
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x1fc>
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e071      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003194:	2302      	movs	r3, #2
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e06d      	b.n	8003278 <UART_SetConfig+0x2c8>
 800319c:	2304      	movs	r3, #4
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e069      	b.n	8003278 <UART_SetConfig+0x2c8>
 80031a4:	2308      	movs	r3, #8
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e065      	b.n	8003278 <UART_SetConfig+0x2c8>
 80031ac:	2310      	movs	r3, #16
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	bf00      	nop
 80031b4:	e060      	b.n	8003278 <UART_SetConfig+0x2c8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <UART_SetConfig+0x334>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d129      	bne.n	8003214 <UART_SetConfig+0x264>
 80031c0:	4b44      	ldr	r3, [pc, #272]	; (80032d4 <UART_SetConfig+0x324>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ce:	d014      	beq.n	80031fa <UART_SetConfig+0x24a>
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d802      	bhi.n	80031dc <UART_SetConfig+0x22c>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <UART_SetConfig+0x23a>
 80031da:	e016      	b.n	800320a <UART_SetConfig+0x25a>
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e0:	d007      	beq.n	80031f2 <UART_SetConfig+0x242>
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e6:	d00c      	beq.n	8003202 <UART_SetConfig+0x252>
 80031e8:	e00f      	b.n	800320a <UART_SetConfig+0x25a>
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f0:	e042      	b.n	8003278 <UART_SetConfig+0x2c8>
 80031f2:	2302      	movs	r3, #2
 80031f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f8:	e03e      	b.n	8003278 <UART_SetConfig+0x2c8>
 80031fa:	2304      	movs	r3, #4
 80031fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003200:	e03a      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003202:	2308      	movs	r3, #8
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003208:	e036      	b.n	8003278 <UART_SetConfig+0x2c8>
 800320a:	2310      	movs	r3, #16
 800320c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003210:	bf00      	nop
 8003212:	e031      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_SetConfig+0x31c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d129      	bne.n	8003272 <UART_SetConfig+0x2c2>
 800321e:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <UART_SetConfig+0x324>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322c:	d014      	beq.n	8003258 <UART_SetConfig+0x2a8>
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d802      	bhi.n	800323a <UART_SetConfig+0x28a>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <UART_SetConfig+0x298>
 8003238:	e016      	b.n	8003268 <UART_SetConfig+0x2b8>
 800323a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323e:	d007      	beq.n	8003250 <UART_SetConfig+0x2a0>
 8003240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003244:	d00c      	beq.n	8003260 <UART_SetConfig+0x2b0>
 8003246:	e00f      	b.n	8003268 <UART_SetConfig+0x2b8>
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324e:	e013      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003250:	2302      	movs	r3, #2
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e00f      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e00b      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e007      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	bf00      	nop
 8003270:	e002      	b.n	8003278 <UART_SetConfig+0x2c8>
 8003272:	2310      	movs	r3, #16
 8003274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <UART_SetConfig+0x31c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	f040 80f1 	bne.w	8003466 <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003288:	2b08      	cmp	r3, #8
 800328a:	d837      	bhi.n	80032fc <UART_SetConfig+0x34c>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <UART_SetConfig+0x2e4>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032fd 	.word	0x080032fd
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032fd 	.word	0x080032fd
 80032a4:	080032ed 	.word	0x080032ed
 80032a8:	080032fd 	.word	0x080032fd
 80032ac:	080032fd 	.word	0x080032fd
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	080032f5 	.word	0x080032f5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7fe fbd8 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80032bc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032be:	e020      	b.n	8003302 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <UART_SetConfig+0x338>)
 80032c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032c4:	e01d      	b.n	8003302 <UART_SetConfig+0x352>
 80032c6:	bf00      	nop
 80032c8:	efff69f3 	.word	0xefff69f3
 80032cc:	40008000 	.word	0x40008000
 80032d0:	40013800 	.word	0x40013800
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40004400 	.word	0x40004400
 80032dc:	40004800 	.word	0x40004800
 80032e0:	40004c00 	.word	0x40004c00
 80032e4:	40005000 	.word	0x40005000
 80032e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80032ec:	f7fe fb28 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80032f0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032f2:	e006      	b.n	8003302 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80032f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032fa:	e002      	b.n	8003302 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	76fb      	strb	r3, [r7, #27]
        break;
 8003300:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 81ab 	beq.w	8003660 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	441a      	add	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d805      	bhi.n	8003326 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	429a      	cmp	r2, r3
 8003324:	d202      	bcs.n	800332c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	76fb      	strb	r3, [r7, #27]
 800332a:	e199      	b.n	8003660 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 800332c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003330:	2b08      	cmp	r3, #8
 8003332:	f200 8085 	bhi.w	8003440 <UART_SetConfig+0x490>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <UART_SetConfig+0x38c>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003361 	.word	0x08003361
 8003340:	08003441 	.word	0x08003441
 8003344:	080033a3 	.word	0x080033a3
 8003348:	08003441 	.word	0x08003441
 800334c:	080033d7 	.word	0x080033d7
 8003350:	08003441 	.word	0x08003441
 8003354:	08003441 	.word	0x08003441
 8003358:	08003441 	.word	0x08003441
 800335c:	08003417 	.word	0x08003417
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003360:	f7fe fb84 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8003364:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8003370:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8003374:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	f04f 0400 	mov.w	r4, #0
 8003382:	eb18 0003 	adds.w	r0, r8, r3
 8003386:	eb49 0104 	adc.w	r1, r9, r4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	461a      	mov	r2, r3
 8003394:	4623      	mov	r3, r4
 8003396:	f7fc ff1f 	bl	80001d8 <__aeabi_uldivmod>
 800339a:	4603      	mov	r3, r0
 800339c:	460c      	mov	r4, r1
 800339e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033a0:	e051      	b.n	8003446 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	f04f 0400 	mov.w	r4, #0
 80033ac:	49aa      	ldr	r1, [pc, #680]	; (8003658 <UART_SetConfig+0x6a8>)
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	eb13 0801 	adds.w	r8, r3, r1
 80033b6:	eb44 0902 	adc.w	r9, r4, r2
 80033ba:	4640      	mov	r0, r8
 80033bc:	4649      	mov	r1, r9
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f04f 0400 	mov.w	r4, #0
 80033c6:	461a      	mov	r2, r3
 80033c8:	4623      	mov	r3, r4
 80033ca:	f7fc ff05 	bl	80001d8 <__aeabi_uldivmod>
 80033ce:	4603      	mov	r3, r0
 80033d0:	460c      	mov	r4, r1
 80033d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033d4:	e037      	b.n	8003446 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe fab3 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80033da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	461a      	mov	r2, r3
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	021d      	lsls	r5, r3, #8
 80033e6:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80033ea:	0214      	lsls	r4, r2, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	461a      	mov	r2, r3
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	18a0      	adds	r0, r4, r2
 80033fa:	eb45 0103 	adc.w	r1, r5, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	461a      	mov	r2, r3
 8003408:	4623      	mov	r3, r4
 800340a:	f7fc fee5 	bl	80001d8 <__aeabi_uldivmod>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003414:	e017      	b.n	8003446 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003424:	f144 0100 	adc.w	r1, r4, #0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f04f 0400 	mov.w	r4, #0
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	f7fc fed0 	bl	80001d8 <__aeabi_uldivmod>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800343e:	e002      	b.n	8003446 <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	76fb      	strb	r3, [r7, #27]
            break;
 8003444:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344c:	d308      	bcc.n	8003460 <UART_SetConfig+0x4b0>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003454:	d204      	bcs.n	8003460 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e0ff      	b.n	8003660 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	76fb      	strb	r3, [r7, #27]
 8003464:	e0fc      	b.n	8003660 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346e:	f040 8083 	bne.w	8003578 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 8003472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003476:	2b08      	cmp	r3, #8
 8003478:	d85e      	bhi.n	8003538 <UART_SetConfig+0x588>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x4d0>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034e5 	.word	0x080034e5
 800348c:	08003539 	.word	0x08003539
 8003490:	08003501 	.word	0x08003501
 8003494:	08003539 	.word	0x08003539
 8003498:	08003539 	.word	0x08003539
 800349c:	08003539 	.word	0x08003539
 80034a0:	08003521 	.word	0x08003521
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7fe fae2 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80034a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	005a      	lsls	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034c2:	e03c      	b.n	800353e <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7fe fae8 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 80034c8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	005a      	lsls	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	441a      	add	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034e2:	e02c      	b.n	800353e <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80034ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6852      	ldr	r2, [r2, #4]
 80034f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034fe:	e01e      	b.n	800353e <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003500:	f7fe fa1e 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8003504:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	005a      	lsls	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	b29b      	uxth	r3, r3
 800351c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800351e:	e00e      	b.n	800353e <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003536:	e002      	b.n	800353e <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	76fb      	strb	r3, [r7, #27]
        break;
 800353c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d916      	bls.n	8003572 <UART_SetConfig+0x5c2>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d212      	bcs.n	8003572 <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f023 030f 	bic.w	r3, r3, #15
 8003554:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	b29b      	uxth	r3, r3
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	b29a      	uxth	r2, r3
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	4313      	orrs	r3, r2
 8003566:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	89fa      	ldrh	r2, [r7, #14]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e076      	b.n	8003660 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	76fb      	strb	r3, [r7, #27]
 8003576:	e073      	b.n	8003660 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 8003578:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800357c:	2b08      	cmp	r3, #8
 800357e:	d85c      	bhi.n	800363a <UART_SetConfig+0x68a>
 8003580:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <UART_SetConfig+0x5d8>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035e9 	.word	0x080035e9
 8003594:	0800363b 	.word	0x0800363b
 8003598:	08003605 	.word	0x08003605
 800359c:	0800363b 	.word	0x0800363b
 80035a0:	0800363b 	.word	0x0800363b
 80035a4:	0800363b 	.word	0x0800363b
 80035a8:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7fe fa5e 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 80035b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	085a      	lsrs	r2, r3, #1
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	441a      	add	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035c8:	e03a      	b.n	8003640 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ca:	f7fe fa65 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 80035ce:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	085a      	lsrs	r2, r3, #1
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035e6:	e02b      	b.n	8003640 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035f2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6852      	ldr	r2, [r2, #4]
 80035fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003602:	e01d      	b.n	8003640 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003604:	f7fe f99c 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 8003608:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	085a      	lsrs	r2, r3, #1
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	441a      	add	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	b29b      	uxth	r3, r3
 800361e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003620:	e00e      	b.n	8003640 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	b29b      	uxth	r3, r3
 8003636:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003638:	e002      	b.n	8003640 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	76fb      	strb	r3, [r7, #27]
        break;
 800363e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d90a      	bls.n	800365c <UART_SetConfig+0x6ac>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d206      	bcs.n	800365c <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	e003      	b.n	8003660 <UART_SetConfig+0x6b0>
 8003658:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800366c:	7efb      	ldrb	r3, [r7, #27]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	6852      	ldr	r2, [r2, #4]
 8003696:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	6852      	ldr	r2, [r2, #4]
 80036b8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	6852      	ldr	r2, [r2, #4]
 80036da:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	6852      	ldr	r2, [r2, #4]
 80036fc:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003704:	430a      	orrs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01a      	beq.n	800378e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	6852      	ldr	r2, [r2, #4]
 8003762:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003776:	d10a      	bne.n	800378e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	6852      	ldr	r2, [r2, #4]
 8003782:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80037ca:	f7fc fef9 	bl	80005c0 <HAL_GetTick>
 80037ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d10e      	bne.n	80037fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f82a 	bl	8003846 <UART_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e020      	b.n	800383e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d10e      	bne.n	8003828 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f814 	bl	8003846 <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e00a      	b.n	800383e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003856:	e05d      	b.n	8003914 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d059      	beq.n	8003914 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f7fc feae 	bl	80005c0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	d802      	bhi.n	8003876 <UART_WaitOnFlagUntilTimeout+0x30>
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11b      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003884:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	6892      	ldr	r2, [r2, #8]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e042      	b.n	8003934 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02b      	beq.n	8003914 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ca:	d123      	bne.n	8003914 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e00f      	b.n	8003934 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	401a      	ands	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	429a      	cmp	r2, r3
 8003930:	d092      	beq.n	8003858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003952:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	6892      	ldr	r2, [r2, #8]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff fafe 	bl	8002f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fadb 	bl	8002f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <Init_Debug>:

#include "Sharc_Frame.h"


HAL_StatusTypeDef Init_Debug(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
	// set up clock output on GPIO Pin A8 for testing
#ifdef DEBUG_HSE_OUTPUT_ENABLE
	//configure pin
	/*Configure GPIO pin : PA8 */
	 GPIO_InitTypeDef GPIO_InitStruct;
	 GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039fa:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a14:	f7fc ffb0 	bl	8000978 <HAL_GPIO_Init>
	 //map clock output to PIN PA8
	 HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fd ff5a 	bl	80018d8 <HAL_RCC_MCOConfig>
#endif
	//initialise USART 2 for USB comms
#ifdef DEBUG_USART_ENABLE
	  huart2.Instance = USART2;
 8003a24:	4b26      	ldr	r3, [pc, #152]	; (8003ac0 <Init_Debug+0xd0>)
 8003a26:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <Init_Debug+0xd4>)
 8003a28:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8003a2a:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <Init_Debug+0xd0>)
 8003a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a30:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <Init_Debug+0xd0>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <Init_Debug+0xd0>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <Init_Debug+0xd0>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a44:	4b1e      	ldr	r3, [pc, #120]	; (8003ac0 <Init_Debug+0xd0>)
 8003a46:	220c      	movs	r2, #12
 8003a48:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <Init_Debug+0xd0>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <Init_Debug+0xd0>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <Init_Debug+0xd0>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <Init_Debug+0xd0>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a62:	4817      	ldr	r0, [pc, #92]	; (8003ac0 <Init_Debug+0xd0>)
 8003a64:	f7ff f868 	bl	8002b38 <HAL_UART_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <Init_Debug+0x82>
	  {
	    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e022      	b.n	8003ab8 <Init_Debug+0xc8>
	  }
	  setbuf(stdout, NULL);
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <Init_Debug+0xd8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 f9de 	bl	8004e3c <setbuf>
#endif

#ifdef DEBUG_LED1_ENABLE
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2120      	movs	r1, #32
 8003a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a88:	f7fd f91e 	bl	8000cc8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PD2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a90:	2303      	movs	r3, #3
 8003a92:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	480b      	ldr	r0, [pc, #44]	; (8003acc <Init_Debug+0xdc>)
 8003a9e:	f7fc ff6b 	bl	8000978 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	2120      	movs	r1, #32
 8003aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aaa:	f7fd f90d 	bl	8000cc8 <HAL_GPIO_WritePin>
#endif

#ifdef DEBUG_LP_ENABLE
	  HAL_DBGMCU_EnableDBGStandbyMode();	//enable for shutdown mode
 8003aae:	f7fc fdc5 	bl	800063c <HAL_DBGMCU_EnableDBGStandbyMode>
	  HAL_DBGMCU_EnableDBGStopMode();
 8003ab2:	f7fc fdb3 	bl	800061c <HAL_DBGMCU_EnableDBGStopMode>

#endif

	  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000588 	.word	0x20000588
 8003ac4:	40004400 	.word	0x40004400
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	48000c00 	.word	0x48000c00

08003ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
HAL_StatusTypeDef SystemClock_Config(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b0b8      	sub	sp, #224	; 0xe0
 8003ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ada:	2244      	movs	r2, #68	; 0x44
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f9a4 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ae4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003af4:	463b      	mov	r3, r7
 8003af6:	2288      	movs	r2, #136	; 0x88
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f996 	bl	8004e2c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b00:	f7fd f914 	bl	8000d2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b04:	4a3c      	ldr	r2, [pc, #240]	; (8003bf8 <SystemClock_Config+0x128>)
 8003b06:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <SystemClock_Config+0x128>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f023 0318 	bic.w	r3, r3, #24
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003b14:	2316      	movs	r3, #22
 8003b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b28:	2310      	movs	r3, #16
 8003b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b3a:	2360      	movs	r3, #96	; 0x60
 8003b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b40:	2302      	movs	r3, #2
 8003b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 26;
 8003b52:	231a      	movs	r3, #26
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b58:	2307      	movs	r3, #7
 8003b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b64:	2302      	movs	r3, #2
 8003b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd f9ea 	bl	8000f48 <HAL_RCC_OscConfig>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <SystemClock_Config+0xae>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e037      	b.n	8003bee <SystemClock_Config+0x11e>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b7e:	230f      	movs	r3, #15
 8003b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b84:	2303      	movs	r3, #3
 8003b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b9c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fdb6 	bl	8001714 <HAL_RCC_ClockConfig>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <SystemClock_Config+0xe2>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e01d      	b.n	8003bee <SystemClock_Config+0x11e>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8003bb2:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8003bb6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8003bb8:	2308      	movs	r3, #8
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd ffdc 	bl	8001b84 <HAL_RCCEx_PeriphCLKConfig>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <SystemClock_Config+0x106>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e00b      	b.n	8003bee <SystemClock_Config+0x11e>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003bd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003bda:	f7fd f925 	bl	8000e28 <HAL_PWREx_ControlVoltageScaling>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <SystemClock_Config+0x118>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e002      	b.n	8003bee <SystemClock_Config+0x11e>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003be8:	f7fe fab2 	bl	8002150 <HAL_RCCEx_EnableMSIPLLMode>
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	37e0      	adds	r7, #224	; 0xe0
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000

08003bfc <Go_To_Sleep>:

HAL_StatusTypeDef Go_To_Sleep(PWR_MODE_t mode, uint32_t seconds)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
	//reset wake up pin interrupt
	__HAL_RCC_PWR_CLK_ENABLE();
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <Go_To_Sleep+0x68>)
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <Go_To_Sleep+0x68>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6593      	str	r3, [r2, #88]	; 0x58
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <Go_To_Sleep+0x68>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
	/* Enable Wake Up timer in interrupt mode */
	//set alarm
	if(seconds > 0)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <Go_To_Sleep+0x42>
	{
	 if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,(seconds-1),RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	480e      	ldr	r0, [pc, #56]	; (8003c68 <Go_To_Sleep+0x6c>)
 8003c30:	f7fe febe 	bl	80029b0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <Go_To_Sleep+0x42>
	  {
		 return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e00d      	b.n	8003c5a <Go_To_Sleep+0x5e>
	  }
	}
	 HAL_PWREx_EnableInternalWakeUpLine();
 8003c3e:	f7fd f949 	bl	8000ed4 <HAL_PWREx_EnableInternalWakeUpLine>
	 //if shutdown mode enabled
	 if(mode == SHUTDOWN)
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <Go_To_Sleep+0x52>
	 {
		 HAL_PWREx_EnterSHUTDOWNMode();
 8003c48:	f7fd f964 	bl	8000f14 <HAL_PWREx_EnterSHUTDOWNMode>
 8003c4c:	e004      	b.n	8003c58 <Go_To_Sleep+0x5c>
	 }
	 else if(mode == STDBY)
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <Go_To_Sleep+0x5c>
	 {
		 HAL_PWR_EnterSTANDBYMode();
 8003c54:	f7fd f8c0 	bl	8000dd8 <HAL_PWR_EnterSTANDBYMode>
	 }
	 return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	2000060c 	.word	0x2000060c

08003c6c <set_WUP_Pin>:
	return HAL_OK;
}


void set_WUP_Pin(uint32_t Pin, PinMode_typedef mode)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b090      	sub	sp, #64	; 0x40
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]

	GPIO_TypeDef *Pin_Port;
	IRQn_Type WUP_IRQn;
	GPIO_InitTypeDef GPIO_InitStruct;
	switch (Pin) {
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	f200 808a 	bhi.w	8003d96 <set_WUP_Pin+0x12a>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <set_WUP_Pin+0x1c>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cc9 	.word	0x08003cc9
 8003c8c:	08003cf3 	.word	0x08003cf3
 8003c90:	08003d97 	.word	0x08003d97
 8003c94:	08003d1d 	.word	0x08003d1d
 8003c98:	08003d97 	.word	0x08003d97
 8003c9c:	08003d97 	.word	0x08003d97
 8003ca0:	08003d97 	.word	0x08003d97
 8003ca4:	08003d45 	.word	0x08003d45
 8003ca8:	08003d97 	.word	0x08003d97
 8003cac:	08003d97 	.word	0x08003d97
 8003cb0:	08003d97 	.word	0x08003d97
 8003cb4:	08003d97 	.word	0x08003d97
 8003cb8:	08003d97 	.word	0x08003d97
 8003cbc:	08003d97 	.word	0x08003d97
 8003cc0:	08003d97 	.word	0x08003d97
 8003cc4:	08003d6f 	.word	0x08003d6f
		case PWR_WAKEUP_PIN1:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc8:	4a61      	ldr	r2, [pc, #388]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003cca:	4b61      	ldr	r3, [pc, #388]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
			Pin_Port = GPIOA;
 8003ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI0_IRQn;
 8003cea:	2306      	movs	r3, #6
 8003cec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003cf0:	e052      	b.n	8003d98 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN2:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf2:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003cf4:	4b56      	ldr	r3, [pc, #344]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfe:	4b54      	ldr	r3, [pc, #336]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	69fb      	ldr	r3, [r7, #28]
			Pin_Port = GPIOC;
 8003d0a:	4b52      	ldr	r3, [pc, #328]	; (8003e54 <set_WUP_Pin+0x1e8>)
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI15_10_IRQn;
 8003d14:	2328      	movs	r3, #40	; 0x28
 8003d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003d1a:	e03d      	b.n	8003d98 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN3:
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8003d1c:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d1e:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	f043 0310 	orr.w	r3, r3, #16
 8003d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	69bb      	ldr	r3, [r7, #24]
			Pin_Port = GPIOE;
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <set_WUP_Pin+0x1ec>)
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 8003d3c:	2317      	movs	r3, #23
 8003d3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003d42:	e029      	b.n	8003d98 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN4:
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d46:	4b42      	ldr	r3, [pc, #264]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d50:	4b3f      	ldr	r3, [pc, #252]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	697b      	ldr	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
			Pin_Port = GPIOA;
 8003d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c
			WUP_IRQn = EXTI2_IRQn;
 8003d66:	2308      	movs	r3, #8
 8003d68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003d6c:	e014      	b.n	8003d98 <set_WUP_Pin+0x12c>
		case PWR_WAKEUP_PIN5:
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6e:	4a38      	ldr	r2, [pc, #224]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d70:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	f043 0304 	orr.w	r3, r3, #4
 8003d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d7a:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
			Pin_Port = GPIOC;
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <set_WUP_Pin+0x1e8>)
 8003d88:	63fb      	str	r3, [r7, #60]	; 0x3c
			GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
			WUP_IRQn = EXTI9_5_IRQn;
 8003d8e:	2317      	movs	r3, #23
 8003d90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			break;
 8003d94:	e000      	b.n	8003d98 <set_WUP_Pin+0x12c>
		default:
			break;
 8003d96:	bf00      	nop
	}
	//configure pin for exti map


	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d98:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <set_WUP_Pin+0x1f0>)
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003da0:	2302      	movs	r3, #2
 8003da2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Pin_Port,&GPIO_InitStruct);
 8003da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da8:	4619      	mov	r1, r3
 8003daa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dac:	f7fc fde4 	bl	8000978 <HAL_GPIO_Init>
	//set NVIC interrupt
    HAL_NVIC_SetPriority(WUP_IRQn, 0x0F, 0);
 8003db0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003db4:	2200      	movs	r2, #0
 8003db6:	210f      	movs	r1, #15
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fd52 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WUP_IRQn);
 8003dbe:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fd69 	bl	800089a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(WUP_IRQn);
 8003dc8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fd84 	bl	80008da <HAL_NVIC_ClearPendingIRQ>
    //enable wup in PWR register
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
    if(mode == MODE_WUP)
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10f      	bne.n	8003e10 <set_WUP_Pin+0x1a4>
    {
    	__HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
    	HAL_PWR_EnableWakeUpPin(Pin);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fc ffaf 	bl	8000d6c <HAL_PWR_EnableWakeUpPin>
 8003e0e:	e005      	b.n	8003e1c <set_WUP_Pin+0x1b0>

    }else if (mode == MODE_EXTI)
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <set_WUP_Pin+0x1b0>
    {
    	HAL_PWR_DisableWakeUpPin(Pin);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fc ffc8 	bl	8000dac <HAL_PWR_DisableWakeUpPin>
    }
	//clear unwanted interrupts
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <set_WUP_Pin+0x1f4>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF2);
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <set_WUP_Pin+0x1f4>)
 8003e24:	2202      	movs	r2, #2
 8003e26:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF3);
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <set_WUP_Pin+0x1f4>)
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF4);
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <set_WUP_Pin+0x1f4>)
 8003e30:	2208      	movs	r2, #8
 8003e32:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF5);
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <set_WUP_Pin+0x1f4>)
 8003e36:	2210      	movs	r2, #16
 8003e38:	619a      	str	r2, [r3, #24]
	__HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <set_WUP_Pin+0x1e4>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003e46:	bf00      	nop
 8003e48:	3740      	adds	r7, #64	; 0x40
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	48000800 	.word	0x48000800
 8003e58:	48001000 	.word	0x48001000
 8003e5c:	10110000 	.word	0x10110000
 8003e60:	40007000 	.word	0x40007000

08003e64 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) &ch,1,0xFFFF);
 8003e6c:	1d39      	adds	r1, r7, #4
 8003e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e72:	2201      	movs	r2, #1
 8003e74:	4803      	ldr	r0, [pc, #12]	; (8003e84 <__io_putchar+0x20>)
 8003e76:	f7fe fead 	bl	8002bd4 <HAL_UART_Transmit>
	return ch;
 8003e7a:	687b      	ldr	r3, [r7, #4]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000588 	.word	0x20000588

08003e88 <GPIO_Set_Pin_LP>:

void GPIO_Set_Pin_LP(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8e:	f107 0314 	add.w	r3, r7, #20
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9e:	4a3e      	ldr	r2, [pc, #248]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ea0:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eb6:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003eb8:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ec2:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ece:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ee8:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efe:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f04:	f043 0308 	orr.w	r3, r3, #8
 8003f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <GPIO_Set_Pin_LP+0x110>)
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f16:	2200      	movs	r2, #0
 8003f18:	2120      	movs	r1, #32
 8003f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f1e:	f7fc fed3 	bl	8000cc8 <HAL_GPIO_WritePin>
	  /*Configure GPIO pins : PC13 PC0 PC1 PC2
	                           PC3 PC4 PC5 PC6
	                           PC7 PC8 PC9 PC10
	                           PC11 PC12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003f22:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003f26:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
	                          |GPIO_PIN_11|GPIO_PIN_12;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	4619      	mov	r1, r3
 8003f36:	4819      	ldr	r0, [pc, #100]	; (8003f9c <GPIO_Set_Pin_LP+0x114>)
 8003f38:	f7fc fd1e 	bl	8000978 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA0 PA1 PA4 PA6
	                           PA7 PA9 PA10 PA11
	                           PA12 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8003f3c:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 8003f40:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
	                          |GPIO_PIN_12|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f42:	2303      	movs	r3, #3
 8003f44:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f54:	f7fc fd10 	bl	8000978 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8003f58:	2320      	movs	r3, #32
 8003f5a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	2300      	movs	r3, #0
 8003f66:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f72:	f7fc fd01 	bl	8000978 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 PB10
	                           PB11 PB12 PB13 PB14
	                           PB15 PB3 PB4 PB5
	                           PB6 PB7 PB8 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f7a:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <GPIO_Set_Pin_LP+0x118>)
 8003f8c:	f7fc fcf4 	bl	8000978 <HAL_GPIO_Init>

}
 8003f90:	bf00      	nop
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48000400 	.word	0x48000400

08003fa4 <EXTI15_10_IRQHandler>:
/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 2 (PC13)
 */

void EXTI15_10_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN))
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <EXTI15_10_IRQHandler+0x54>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01b      	beq.n	8003fee <EXTI15_10_IRQHandler+0x4a>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IRIDIUM_RING_WAKE_PIN);
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <EXTI15_10_IRQHandler+0x54>)
 8003fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fbc:	615a      	str	r2, [r3, #20]
		//interrupt source from PWR WAKE PIN 2 == IRIDIUM Recieve Event

		//ROUTINE START
		printf("Incoming Message from Satellite detected while awake: Receiving...");
 8003fbe:	480f      	ldr	r0, [pc, #60]	; (8003ffc <EXTI15_10_IRQHandler+0x58>)
 8003fc0:	f000 fe94 	bl	8004cec <iprintf>
		for (int i = 0; i < 10; ++i)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	607b      	str	r3, [r7, #4]
 8003fc8:	e00b      	b.n	8003fe2 <EXTI15_10_IRQHandler+0x3e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8003fca:	2120      	movs	r1, #32
 8003fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd0:	f7fc fe92 	bl	8000cf8 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8003fd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fd8:	f7fc fafe 	bl	80005d8 <HAL_Delay>
		for (int i = 0; i < 10; ++i)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b09      	cmp	r3, #9
 8003fe6:	ddf0      	ble.n	8003fca <EXTI15_10_IRQHandler+0x26>
		}
		printf("Message Recieved!\r\n");
 8003fe8:	4805      	ldr	r0, [pc, #20]	; (8004000 <EXTI15_10_IRQHandler+0x5c>)
 8003fea:	f000 fec9 	bl	8004d80 <puts>
		//ROUTINE END

	}
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40010400 	.word	0x40010400
 8003ffc:	08005c90 	.word	0x08005c90
 8004000:	08005cd4 	.word	0x08005cd4

08004004 <EXTI9_5_IRQHandler>:

/*
 * @brief: EXTI IRQ Handler for Wake Up Pin 5 (PC5)
 */
void EXTI9_5_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(EXTI_IMU_EVENT_WAKE_PIN))
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <EXTI9_5_IRQHandler+0x50>)
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d019      	beq.n	800404a <EXTI9_5_IRQHandler+0x46>
	{
		__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI_IMU_EVENT_WAKE_PIN);
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <EXTI9_5_IRQHandler+0x50>)
 8004018:	2220      	movs	r2, #32
 800401a:	615a      	str	r2, [r3, #20]

		//ROUTINE START

		 printf("IMU Event Detected while awake: Sampling...");
 800401c:	480e      	ldr	r0, [pc, #56]	; (8004058 <EXTI9_5_IRQHandler+0x54>)
 800401e:	f000 fe65 	bl	8004cec <iprintf>
		for (int i = 0; i < 50; ++i)
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	e00a      	b.n	800403e <EXTI9_5_IRQHandler+0x3a>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004028:	2120      	movs	r1, #32
 800402a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402e:	f7fc fe63 	bl	8000cf8 <HAL_GPIO_TogglePin>
		 	HAL_Delay(100);
 8004032:	2064      	movs	r0, #100	; 0x64
 8004034:	f7fc fad0 	bl	80005d8 <HAL_Delay>
		for (int i = 0; i < 50; ++i)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b31      	cmp	r3, #49	; 0x31
 8004042:	ddf1      	ble.n	8004028 <EXTI9_5_IRQHandler+0x24>
		}
		printf("Done\r\n");
 8004044:	4805      	ldr	r0, [pc, #20]	; (800405c <EXTI9_5_IRQHandler+0x58>)
 8004046:	f000 fe9b 	bl	8004d80 <puts>
		//ROUTINE END

	}
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40010400 	.word	0x40010400
 8004058:	08005ce8 	.word	0x08005ce8
 800405c:	08005d14 	.word	0x08005d14

08004060 <POR_Handler>:
/*
 * @brief: Power On Reset Handler for BUOY (CASE: NRST Line Pulled low)
 */
void POR_Handler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <POR_Handler+0x58>)
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <POR_Handler+0x58>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  //clear the back up registers
	  HAL_PWR_EnableBkUpAccess();
 8004074:	f7fc fe5a 	bl	8000d2c <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_BACKUPRESET_FORCE();
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <POR_Handler+0x58>)
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <POR_Handler+0x58>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  __HAL_RCC_BACKUPRESET_RELEASE();
 8004088:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <POR_Handler+0x58>)
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <POR_Handler+0x58>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  HAL_PWR_DisableBkUpAccess();
 8004098:	f7fc fe58 	bl	8000d4c <HAL_PWR_DisableBkUpAccess>
	  SystemClock_Config();
 800409c:	f7ff fd18 	bl	8003ad0 <SystemClock_Config>
	  //deactivate and disable wake up timers
	  HAL_PWREx_DisableInternalWakeUpLine();
 80040a0:	f7fc ff28 	bl	8000ef4 <HAL_PWREx_DisableInternalWakeUpLine>
	  /* Clear PWR wake up Flag */
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <POR_Handler+0x5c>)
 80040a6:	221f      	movs	r2, #31
 80040a8:	619a      	str	r2, [r3, #24]
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <POR_Handler+0x5c>)
 80040ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b0:	619a      	str	r2, [r3, #24]
	  //reinitialise the clock
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000

080040c0 <BOR_Handler>:
/*
 * @brief: Brown Out Reset Handler for BUOY (case Vbat < Vbrownoutthreshold)
 */
void BOR_Handler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
	  //clear flags
	  __HAL_RCC_CLEAR_RESET_FLAGS();
 80040c6:	4a11      	ldr	r2, [pc, #68]	; (800410c <BOR_Handler+0x4c>)
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <BOR_Handler+0x4c>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	  // transmit log to PC

	  char* msg= "Warning! Device encountered a Brown Out. Exiting Program...\r\n";
 80040d6:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <BOR_Handler+0x50>)
 80040d8:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),100);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc f874 	bl	80001c8 <strlen>
 80040e0:	4603      	mov	r3, r0
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	2364      	movs	r3, #100	; 0x64
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	480a      	ldr	r0, [pc, #40]	; (8004114 <BOR_Handler+0x54>)
 80040ea:	f7fe fd73 	bl	8002bd4 <HAL_UART_Transmit>
	  //perform system reset
	  POR_Handler();
 80040ee:	f7ff ffb7 	bl	8004060 <POR_Handler>
	  HAL_NVIC_SystemReset();
 80040f2:	f7fc fbe0 	bl	80008b6 <HAL_NVIC_SystemReset>
	  /*
	   * Failure to perform system reset causes device to enter an infinite loop
	   */
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80040f6:	2120      	movs	r1, #32
 80040f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fc:	f7fc fdfc 	bl	8000cf8 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8004100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004104:	f7fc fa68 	bl	80005d8 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8004108:	e7f5      	b.n	80040f6 <BOR_Handler+0x36>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	08005d1c 	.word	0x08005d1c
 8004114:	20000588 	.word	0x20000588

08004118 <main>:
 **
 **===========================================================================
 **/

int main(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
//======================== 1. SYSTEM INIT & CLOCK CONFIG ========================//

	HAL_Init();				//Init Flash prefetch, systick timer, NVIC and LL functions
 800411e:	f7fc f9e3 	bl	80004e8 <HAL_Init>
	SystemClock_Config();	//configure clock
 8004122:	f7ff fcd5 	bl	8003ad0 <SystemClock_Config>
	GPIO_Set_Pin_LP();		//Configure all unused GPIO pins to low Power mode
 8004126:	f7ff feaf 	bl	8003e88 <GPIO_Set_Pin_LP>
	Init_Debug();			// initialize debug peripherals
 800412a:	f7ff fc61 	bl	80039f0 <Init_Debug>

/*
 * When system powers on, check for any asynchronous resets that
 * may have occured. Use this area to add in any reset handling
 */
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == SET)
 800412e:	4b9b      	ldr	r3, [pc, #620]	; (800439c <main+0x284>)
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <main+0x28>
	{
	  BOR_Handler();
 800413c:	f7ff ffc0 	bl	80040c0 <BOR_Handler>
	}
	uint8_t flag = __HAL_RCC_GET_PORRST_FLAG();
 8004140:	4b96      	ldr	r3, [pc, #600]	; (800439c <main+0x284>)
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	0e9b      	lsrs	r3, r3, #26
 8004148:	f003 0305 	and.w	r3, r3, #5
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <main+0x3c>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <main+0x3e>
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]
	if(flag  == SET)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d104      	bne.n	8004168 <main+0x50>
	{
	  printf("Software Reset Detected. Initializing main program...\r\n");
 800415e:	4890      	ldr	r0, [pc, #576]	; (80043a0 <main+0x288>)
 8004160:	f000 fe0e 	bl	8004d80 <puts>
	  POR_Handler();
 8004164:	f7ff ff7c 	bl	8004060 <POR_Handler>
	   * If an interrupt occurred while the device was sleeping, check the
	   * flags to determine if this occurred
	   */

	  //check for interrupts on wake up pins during deep sleep
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	4a8c      	ldr	r2, [pc, #560]	; (800439c <main+0x284>)
 800416a:	4b8c      	ldr	r3, [pc, #560]	; (800439c <main+0x284>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004172:	6593      	str	r3, [r2, #88]	; 0x58
 8004174:	4b89      	ldr	r3, [pc, #548]	; (800439c <main+0x284>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]
	  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG)|| __HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))
 8004180:	4b88      	ldr	r3, [pc, #544]	; (80043a4 <main+0x28c>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <main+0x80>
 800418c:	4b85      	ldr	r3, [pc, #532]	; (80043a4 <main+0x28c>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d039      	beq.n	800420c <main+0xf4>
	  {
		  Current_State = __GET_PREV_STATE();			//get previous state from back up reg
 8004198:	4b83      	ldr	r3, [pc, #524]	; (80043a8 <main+0x290>)
 800419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b83      	ldr	r3, [pc, #524]	; (80043ac <main+0x294>)
 80041a0:	701a      	strb	r2, [r3, #0]
		  if(__HAL_PWR_GET_FLAG(IMU_EVENT_WAKE_FLAG))
 80041a2:	4b80      	ldr	r3, [pc, #512]	; (80043a4 <main+0x28c>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <main+0xa0>
		  {
			  __HAL_PWR_CLEAR_FLAG(IMU_EVENT_WAKE_FLAG);	//clear  flag in PWR SR
 80041ae:	4b7d      	ldr	r3, [pc, #500]	; (80043a4 <main+0x28c>)
 80041b0:	2210      	movs	r2, #16
 80041b2:	619a      	str	r2, [r3, #24]
			  Routine_ASYNC_IMU_EVENT();				//Perform IMU Event Detection Routine
 80041b4:	f000 f978 	bl	80044a8 <Routine_ASYNC_IMU_EVENT>
		  }
		  if(__HAL_PWR_GET_FLAG(IRIDIUM_RING_WAKE_FLAG))	//clear  flag in PWR SR
 80041b8:	4b7a      	ldr	r3, [pc, #488]	; (80043a4 <main+0x28c>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <main+0xb6>
		  {
			__HAL_PWR_CLEAR_FLAG(IRIDIUM_RING_WAKE_FLAG);
 80041c4:	4b77      	ldr	r3, [pc, #476]	; (80043a4 <main+0x28c>)
 80041c6:	2202      	movs	r2, #2
 80041c8:	619a      	str	r2, [r3, #24]
			Routine_ASYNC_IRIDIUM_RX();
 80041ca:	f000 f98f 	bl	80044ec <Routine_ASYNC_IRIDIUM_RX>

		  }
		  if(Current_State == STATE_SLEEP)				//return to sleep if Interrupt event handled before wake up
 80041ce:	4b77      	ldr	r3, [pc, #476]	; (80043ac <main+0x294>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d10f      	bne.n	80041f6 <main+0xde>
		  {

			  printf("System Going Back To Sleep\r\n"); 	//check how long device was asleep for
 80041d6:	4876      	ldr	r0, [pc, #472]	; (80043b0 <main+0x298>)
 80041d8:	f000 fdd2 	bl	8004d80 <puts>
			  set_WUP_Pin(IMU_EVENT_WAKE_PIN, MODE_WUP);	//reenable wake up pins
 80041dc:	2100      	movs	r1, #0
 80041de:	2010      	movs	r0, #16
 80041e0:	f7ff fd44 	bl	8003c6c <set_WUP_Pin>
			  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN, MODE_WUP);
 80041e4:	2100      	movs	r1, #0
 80041e6:	2002      	movs	r0, #2
 80041e8:	f7ff fd40 	bl	8003c6c <set_WUP_Pin>
			  Go_To_Sleep(STDBY,10);						//return to sleep
 80041ec:	210a      	movs	r1, #10
 80041ee:	2001      	movs	r0, #1
 80041f0:	f7ff fd04 	bl	8003bfc <Go_To_Sleep>
 80041f4:	e00a      	b.n	800420c <main+0xf4>
		  }
		  	 else
		  {

		  	  printf("Going Back to Main Loop:\r\n");		//if come from wake mode
 80041f6:	486f      	ldr	r0, [pc, #444]	; (80043b4 <main+0x29c>)
 80041f8:	f000 fdc2 	bl	8004d80 <puts>
			  __SET_CURRENT_STATE(STATE_ASYNCINT);
 80041fc:	4a6a      	ldr	r2, [pc, #424]	; (80043a8 <main+0x290>)
 80041fe:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <main+0x290>)
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004206:	f043 0307 	orr.w	r3, r3, #7
 800420a:	6513      	str	r3, [r2, #80]	; 0x50
	   * states are defined in the enum Buoy_State_typedef. The state check block performs the following routine
	   *
	   */

	  //enable access to back up registers
	  switch(__GET_PREV_STATE())
 800420c:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <main+0x290>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	b2db      	uxtb	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	2b06      	cmp	r3, #6
 8004216:	d867      	bhi.n	80042e8 <main+0x1d0>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <main+0x108>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	0800423d 	.word	0x0800423d
 8004224:	08004245 	.word	0x08004245
 8004228:	0800429f 	.word	0x0800429f
 800422c:	080042e9 	.word	0x080042e9
 8004230:	080042e9 	.word	0x080042e9
 8004234:	080042cf 	.word	0x080042cf
 8004238:	0800423d 	.word	0x0800423d
	  {
	  	 case STATE_ASYNCINT:
	  	 case STATE_RESET:
	  	 //system encountered a power on reset, put peripherals here
	  	 Current_State = STATE_SAMPLE;
 800423c:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <main+0x294>)
 800423e:	2202      	movs	r2, #2
 8004240:	701a      	strb	r2, [r3, #0]
	  	 break;
 8004242:	e054      	b.n	80042ee <main+0x1d6>

	  	 case STATE_SAMPLE:
	  	 //check how many samples have been recorded by the Buoy
	  	 sample_count = __GET_SAMPLE_COUNT();
 8004244:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <main+0x290>)
 8004246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	b2da      	uxtb	r2, r3
 800424c:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <main+0x2a0>)
 800424e:	701a      	strb	r2, [r3, #0]
	  	 if(sample_count > 3)
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <main+0x2a0>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d903      	bls.n	8004260 <main+0x148>
	  	 {
	  		 //set next Buoy State to Transmit
	  		 Current_State = STATE_TRANSMIT;
 8004258:	4b54      	ldr	r3, [pc, #336]	; (80043ac <main+0x294>)
 800425a:	2206      	movs	r2, #6
 800425c:	701a      	strb	r2, [r3, #0]
	  		 Current_State = STATE_SLEEP;
	  		 __HAL_RCC_PWR_CLK_ENABLE();
	  		 __SET_CURRENT_STATE(Current_State);
	  		 __HAL_RCC_PWR_CLK_DISABLE();
	  	 }
	  	 break;
 800425e:	e046      	b.n	80042ee <main+0x1d6>
	  		 Current_State = STATE_SLEEP;
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <main+0x294>)
 8004262:	2203      	movs	r2, #3
 8004264:	701a      	strb	r2, [r3, #0]
	  		 __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	4a4d      	ldr	r2, [pc, #308]	; (800439c <main+0x284>)
 8004268:	4b4c      	ldr	r3, [pc, #304]	; (800439c <main+0x284>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6593      	str	r3, [r2, #88]	; 0x58
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <main+0x284>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
	  		 __SET_CURRENT_STATE(Current_State);
 800427e:	4a4a      	ldr	r2, [pc, #296]	; (80043a8 <main+0x290>)
 8004280:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <main+0x290>)
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004288:	4948      	ldr	r1, [pc, #288]	; (80043ac <main+0x294>)
 800428a:	7809      	ldrb	r1, [r1, #0]
 800428c:	430b      	orrs	r3, r1
 800428e:	6513      	str	r3, [r2, #80]	; 0x50
	  		 __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4a42      	ldr	r2, [pc, #264]	; (800439c <main+0x284>)
 8004292:	4b42      	ldr	r3, [pc, #264]	; (800439c <main+0x284>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	6593      	str	r3, [r2, #88]	; 0x58
	  	 break;
 800429c:	e027      	b.n	80042ee <main+0x1d6>

	  	 case STATE_SLEEP:
	  	hrtc.Instance = RTC;					 //attach RTC instance to handler
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <main+0x2a4>)
 80042a0:	4a41      	ldr	r2, [pc, #260]	; (80043a8 <main+0x290>)
 80042a2:	601a      	str	r2, [r3, #0]
	  	HAL_PWREx_DisableInternalWakeUpLine();	 //clear wake up pending interrupt from internal wake up
 80042a4:	f7fc fe26 	bl	8000ef4 <HAL_PWREx_DisableInternalWakeUpLine>
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);		 //clear pending interrupt from ext wake up pins
 80042a8:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <main+0x28c>)
 80042aa:	221f      	movs	r2, #31
 80042ac:	619a      	str	r2, [r3, #24]
	  	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80042ae:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <main+0x28c>)
 80042b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b4:	619a      	str	r2, [r3, #24]
		set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI); 	  	//reconfigure wake up pins
 80042b6:	2101      	movs	r1, #1
 80042b8:	2010      	movs	r0, #16
 80042ba:	f7ff fcd7 	bl	8003c6c <set_WUP_Pin>
		set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);  	  	//set Current State to Sample
 80042be:	2101      	movs	r1, #1
 80042c0:	2002      	movs	r0, #2
 80042c2:	f7ff fcd3 	bl	8003c6c <set_WUP_Pin>
	  	Current_State = STATE_SAMPLE;
 80042c6:	4b39      	ldr	r3, [pc, #228]	; (80043ac <main+0x294>)
 80042c8:	2202      	movs	r2, #2
 80042ca:	701a      	strb	r2, [r3, #0]
	  	 break;
 80042cc:	e00f      	b.n	80042ee <main+0x1d6>

	  	 case STATE_TRANSMIT:
	  	 Current_State = STATE_SLEEP;
 80042ce:	4b37      	ldr	r3, [pc, #220]	; (80043ac <main+0x294>)
 80042d0:	2203      	movs	r2, #3
 80042d2:	701a      	strb	r2, [r3, #0]
  		 __SET_CURRENT_STATE(Current_State);
 80042d4:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <main+0x290>)
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <main+0x290>)
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80042de:	4933      	ldr	r1, [pc, #204]	; (80043ac <main+0x294>)
 80042e0:	7809      	ldrb	r1, [r1, #0]
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6513      	str	r3, [r2, #80]	; 0x50
	  	 break;
 80042e6:	e002      	b.n	80042ee <main+0x1d6>

	  	 //default case: reset state
	  	 default:
	  	 Current_State = STATE_RESET;
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <main+0x294>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
	  }
	  __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <main+0x284>)
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <main+0x284>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6593      	str	r3, [r2, #88]	; 0x58

	  /*
	   * Place Routine code Here
	   */
	  // SLEEP STATE
	  if(Current_State == STATE_SLEEP)
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <main+0x294>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d102      	bne.n	8004308 <main+0x1f0>
	  {
		  Routine_STATE_SLEEP();
 8004302:	f000 f935 	bl	8004570 <Routine_STATE_SLEEP>
 8004306:	e013      	b.n	8004330 <main+0x218>
	  }
	  //RESET STATE
	  else if(Current_State == STATE_RESET)
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <main+0x294>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d102      	bne.n	8004316 <main+0x1fe>
	  {
		  Routine_STATE_RESET();
 8004310:	f000 f910 	bl	8004534 <Routine_STATE_RESET>
 8004314:	e00c      	b.n	8004330 <main+0x218>
	  }
	  //SAMPLE STATE
	  else if(Current_State == STATE_SAMPLE)
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <main+0x294>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d102      	bne.n	8004324 <main+0x20c>
	  {
		  Routine_STATE_SAMPLE();
 800431e:	f000 f941 	bl	80045a4 <Routine_STATE_SAMPLE>
 8004322:	e005      	b.n	8004330 <main+0x218>
	  }
	  //TRANSMIT STATE
	  else if(Current_State == STATE_TRANSMIT)
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <main+0x294>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d101      	bne.n	8004330 <main+0x218>
	  {
		  Routine_STATE_TRANSMIT();
 800432c:	f000 f96c 	bl	8004608 <Routine_STATE_TRANSMIT>

//========================= 6. END OF ROUTINE FUNCTION ==========================//
	  /*
	   * After each routine has run, save state to the back up registers
	   */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <main+0x284>)
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <main+0x284>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <main+0x284>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
	  if(Current_State == STATE_SAMPLE)			//increment sample counter after each sampe
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <main+0x294>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d114      	bne.n	800437a <main+0x262>
	  {
		  sample_count = __GET_SAMPLE_COUNT();
 8004350:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <main+0x290>)
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <main+0x2a0>)
 800435a:	701a      	strb	r2, [r3, #0]
		  __SET_SAMPLE_COUNT(++sample_count);
 800435c:	4912      	ldr	r1, [pc, #72]	; (80043a8 <main+0x290>)
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <main+0x290>)
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4a14      	ldr	r2, [pc, #80]	; (80043b8 <main+0x2a0>)
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	3201      	adds	r2, #1
 800436a:	b2d0      	uxtb	r0, r2
 800436c:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <main+0x2a0>)
 800436e:	7010      	strb	r0, [r2, #0]
 8004370:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <main+0x2a0>)
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	0212      	lsls	r2, r2, #8
 8004376:	4313      	orrs	r3, r2
 8004378:	650b      	str	r3, [r1, #80]	; 0x50
	  }
	  __SET_CURRENT_STATE(Current_State);	    //write value to back up register
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <main+0x290>)
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <main+0x290>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004384:	4909      	ldr	r1, [pc, #36]	; (80043ac <main+0x294>)
 8004386:	7809      	ldrb	r1, [r1, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	6513      	str	r3, [r2, #80]	; 0x50
	  __HAL_RCC_PWR_CLK_DISABLE();
 800438c:	4a03      	ldr	r2, [pc, #12]	; (800439c <main+0x284>)
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <main+0x284>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004396:	6593      	str	r3, [r2, #88]	; 0x58
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004398:	e6e6      	b.n	8004168 <main+0x50>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	08005d5c 	.word	0x08005d5c
 80043a4:	40007000 	.word	0x40007000
 80043a8:	40002800 	.word	0x40002800
 80043ac:	20000608 	.word	0x20000608
 80043b0:	08005d94 	.word	0x08005d94
 80043b4:	08005db0 	.word	0x08005db0
 80043b8:	2000057d 	.word	0x2000057d
 80043bc:	2000060c 	.word	0x2000060c

080043c0 <MX_RTC_Init>:
//==================== 7. Configuration & Initialization Functions ====================//

/* Private functions */

static void MX_RTC_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80043d8:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <MX_RTC_Init+0xd0>)
 80043da:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <MX_RTC_Init+0xd4>)
 80043dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80043de:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <MX_RTC_Init+0xd0>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80043e4:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <MX_RTC_Init+0xd0>)
 80043e6:	227f      	movs	r2, #127	; 0x7f
 80043e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80043ea:	4b29      	ldr	r3, [pc, #164]	; (8004490 <MX_RTC_Init+0xd0>)
 80043ec:	22ff      	movs	r2, #255	; 0xff
 80043ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043f0:	4b27      	ldr	r3, [pc, #156]	; (8004490 <MX_RTC_Init+0xd0>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <MX_RTC_Init+0xd0>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80043fc:	4b24      	ldr	r3, [pc, #144]	; (8004490 <MX_RTC_Init+0xd0>)
 80043fe:	2200      	movs	r2, #0
 8004400:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004402:	4b23      	ldr	r3, [pc, #140]	; (8004490 <MX_RTC_Init+0xd0>)
 8004404:	2200      	movs	r2, #0
 8004406:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004408:	4821      	ldr	r0, [pc, #132]	; (8004490 <MX_RTC_Init+0xd0>)
 800440a:	f7fe f87b 	bl	8002504 <HAL_RTC_Init>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8004414:	f000 f840 	bl	8004498 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 8004418:	230c      	movs	r3, #12
 800441a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 57;
 800441c:	2339      	movs	r3, #57	; 0x39
 800441e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	2200      	movs	r2, #0
 8004430:	4619      	mov	r1, r3
 8004432:	4817      	ldr	r0, [pc, #92]	; (8004490 <MX_RTC_Init+0xd0>)
 8004434:	f7fe f8e1 	bl	80025fa <HAL_RTC_SetTime>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800443e:	f000 f82b 	bl	8004498 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8004442:	2305      	movs	r3, #5
 8004444:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8004446:	2305      	movs	r3, #5
 8004448:	707b      	strb	r3, [r7, #1]
  sDate.Date = 8;
 800444a:	2308      	movs	r3, #8
 800444c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004452:	463b      	mov	r3, r7
 8004454:	2200      	movs	r2, #0
 8004456:	4619      	mov	r1, r3
 8004458:	480d      	ldr	r0, [pc, #52]	; (8004490 <MX_RTC_Init+0xd0>)
 800445a:	f7fe f96b 	bl	8002734 <HAL_RTC_SetDate>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8004464:	f000 f818 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //Configure RTC_Wake up time for range 250ms - 36 Hours
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc,RTC_FLAG_WUTF))
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <MX_RTC_Init+0xd0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <MX_RTC_Init+0xc8>
  {
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc,RTC_FLAG_WUTF);
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <MX_RTC_Init+0xd0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <MX_RTC_Init+0xd0>)
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	68d2      	ldr	r2, [r2, #12]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004486:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE END RTC_Init 2 */

}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	2000060c 	.word	0x2000060c
 8004494:	40002800 	.word	0x40002800

08004498 <Error_Handler>:
//====================================== 7. END ======================================//

//==================================== 8. Handlers ===================================//

void Error_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <Routine_ASYNC_IMU_EVENT>:
//===================================== 8. END ======================================//

//=============================== 9. Routines =======================================//

static void Routine_ASYNC_IMU_EVENT(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	 printf("IMU Event Detected: Sampling...");
 80044ae:	480d      	ldr	r0, [pc, #52]	; (80044e4 <Routine_ASYNC_IMU_EVENT+0x3c>)
 80044b0:	f000 fc1c 	bl	8004cec <iprintf>
	 for (int i = 0; i < 50; ++i)
 80044b4:	2300      	movs	r3, #0
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e00a      	b.n	80044d0 <Routine_ASYNC_IMU_EVENT+0x28>
	 {
	 	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80044ba:	2120      	movs	r1, #32
 80044bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044c0:	f7fc fc1a 	bl	8000cf8 <HAL_GPIO_TogglePin>
	 	HAL_Delay(100);
 80044c4:	2064      	movs	r0, #100	; 0x64
 80044c6:	f7fc f887 	bl	80005d8 <HAL_Delay>
	 for (int i = 0; i < 50; ++i)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3301      	adds	r3, #1
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b31      	cmp	r3, #49	; 0x31
 80044d4:	ddf1      	ble.n	80044ba <Routine_ASYNC_IMU_EVENT+0x12>
	 }
	 printf("Done\r\n");
 80044d6:	4804      	ldr	r0, [pc, #16]	; (80044e8 <Routine_ASYNC_IMU_EVENT+0x40>)
 80044d8:	f000 fc52 	bl	8004d80 <puts>
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	08005dcc 	.word	0x08005dcc
 80044e8:	08005dec 	.word	0x08005dec

080044ec <Routine_ASYNC_IRIDIUM_RX>:

static void Routine_ASYNC_IRIDIUM_RX(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
	printf("Incoming Message from Satellite: Receiving...");
 80044f2:	480e      	ldr	r0, [pc, #56]	; (800452c <Routine_ASYNC_IRIDIUM_RX+0x40>)
 80044f4:	f000 fbfa 	bl	8004cec <iprintf>
	for (int i = 0; i < 10; ++i)
 80044f8:	2300      	movs	r3, #0
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	e00b      	b.n	8004516 <Routine_ASYNC_IRIDIUM_RX+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80044fe:	2120      	movs	r1, #32
 8004500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004504:	f7fc fbf8 	bl	8000cf8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8004508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800450c:	f7fc f864 	bl	80005d8 <HAL_Delay>
	for (int i = 0; i < 10; ++i)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3301      	adds	r3, #1
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b09      	cmp	r3, #9
 800451a:	ddf0      	ble.n	80044fe <Routine_ASYNC_IRIDIUM_RX+0x12>
	}
	printf("Message Received!\r\n");
 800451c:	4804      	ldr	r0, [pc, #16]	; (8004530 <Routine_ASYNC_IRIDIUM_RX+0x44>)
 800451e:	f000 fc2f 	bl	8004d80 <puts>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	08005df4 	.word	0x08005df4
 8004530:	08005e24 	.word	0x08005e24

08004534 <Routine_STATE_RESET>:

static void Routine_STATE_RESET(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
	 //initialise RTC
	 MX_RTC_Init();
 8004538:	f7ff ff42 	bl	80043c0 <MX_RTC_Init>

	 set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_EXTI);
 800453c:	2101      	movs	r1, #1
 800453e:	2002      	movs	r0, #2
 8004540:	f7ff fb94 	bl	8003c6c <set_WUP_Pin>
	 set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_EXTI);
 8004544:	2101      	movs	r1, #1
 8004546:	2010      	movs	r0, #16
 8004548:	f7ff fb90 	bl	8003c6c <set_WUP_Pin>
	 printf("All Systems Online!\r\n");
 800454c:	4806      	ldr	r0, [pc, #24]	; (8004568 <Routine_STATE_RESET+0x34>)
 800454e:	f000 fc17 	bl	8004d80 <puts>
	 printf("Current State: RESET \t Next State: SAMPLE\r\n");
 8004552:	4806      	ldr	r0, [pc, #24]	; (800456c <Routine_STATE_RESET+0x38>)
 8004554:	f000 fc14 	bl	8004d80 <puts>
	 HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8004558:	2201      	movs	r2, #1
 800455a:	2120      	movs	r1, #32
 800455c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004560:	f7fc fbb2 	bl	8000cc8 <HAL_GPIO_WritePin>
	 //Enable Interrupt pins as EXTI Outputs
}
 8004564:	bf00      	nop
 8004566:	bd80      	pop	{r7, pc}
 8004568:	08005e38 	.word	0x08005e38
 800456c:	08005e50 	.word	0x08005e50

08004570 <Routine_STATE_SLEEP>:

static void Routine_STATE_SLEEP(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
	  printf("Current State: SLEEP \t Next State: SAMPLE\r\n");
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <Routine_STATE_SLEEP+0x2c>)
 8004576:	f000 fc03 	bl	8004d80 <puts>
	  printf("Good Night! \r\n");
 800457a:	4809      	ldr	r0, [pc, #36]	; (80045a0 <Routine_STATE_SLEEP+0x30>)
 800457c:	f000 fc00 	bl	8004d80 <puts>
	  set_WUP_Pin(IRIDIUM_RING_WAKE_PIN,MODE_WUP);
 8004580:	2100      	movs	r1, #0
 8004582:	2002      	movs	r0, #2
 8004584:	f7ff fb72 	bl	8003c6c <set_WUP_Pin>
	  set_WUP_Pin(IMU_EVENT_WAKE_PIN,MODE_WUP);
 8004588:	2100      	movs	r1, #0
 800458a:	2010      	movs	r0, #16
 800458c:	f7ff fb6e 	bl	8003c6c <set_WUP_Pin>
	  Go_To_Sleep(STDBY,10);
 8004590:	210a      	movs	r1, #10
 8004592:	2001      	movs	r0, #1
 8004594:	f7ff fb32 	bl	8003bfc <Go_To_Sleep>
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	08005e7c 	.word	0x08005e7c
 80045a0:	08005ea8 	.word	0x08005ea8

080045a4 <Routine_STATE_SAMPLE>:

static void Routine_STATE_SAMPLE(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
	  sample_count = __GET_SAMPLE_COUNT();
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <Routine_STATE_SAMPLE+0x54>)
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <Routine_STATE_SAMPLE+0x58>)
 80045b4:	701a      	strb	r2, [r3, #0]
	  if(sample_count < 3)
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <Routine_STATE_SAMPLE+0x58>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d803      	bhi.n	80045c6 <Routine_STATE_SAMPLE+0x22>
	  {
		  printf("Current State: SAMPLE \t Next State: SLEEP\r\n");
 80045be:	4810      	ldr	r0, [pc, #64]	; (8004600 <Routine_STATE_SAMPLE+0x5c>)
 80045c0:	f000 fbde 	bl	8004d80 <puts>
 80045c4:	e002      	b.n	80045cc <Routine_STATE_SAMPLE+0x28>
	  } else
	  {
		  printf("Current State: SAMPLE \t Next State: TRANS\r\n");
 80045c6:	480f      	ldr	r0, [pc, #60]	; (8004604 <Routine_STATE_SAMPLE+0x60>)
 80045c8:	f000 fbda 	bl	8004d80 <puts>
	  }
	  //TODO: SAMPLE SENSORS:

	  //increment sample counter
	  //routine: Flash LED 3 times every 500 ms
	  for (int var = 0; var < 6; ++var)
 80045cc:	2300      	movs	r3, #0
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e00a      	b.n	80045e8 <Routine_STATE_SAMPLE+0x44>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80045d2:	2120      	movs	r1, #32
 80045d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045d8:	f7fc fb8e 	bl	8000cf8 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 80045dc:	20fa      	movs	r0, #250	; 0xfa
 80045de:	f7fb fffb 	bl	80005d8 <HAL_Delay>
	  for (int var = 0; var < 6; ++var)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3301      	adds	r3, #1
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	ddf1      	ble.n	80045d2 <Routine_STATE_SAMPLE+0x2e>
	  }
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40002800 	.word	0x40002800
 80045fc:	2000057d 	.word	0x2000057d
 8004600:	08005eb8 	.word	0x08005eb8
 8004604:	08005ee4 	.word	0x08005ee4

08004608 <Routine_STATE_TRANSMIT>:

static void Routine_STATE_TRANSMIT(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
	  printf("Current State: TRANS \t Next State: SLEEP\r\n");
 800460e:	4817      	ldr	r0, [pc, #92]	; (800466c <Routine_STATE_TRANSMIT+0x64>)
 8004610:	f000 fbb6 	bl	8004d80 <puts>
	  printf("Transmitting Package...");
 8004614:	4816      	ldr	r0, [pc, #88]	; (8004670 <Routine_STATE_TRANSMIT+0x68>)
 8004616:	f000 fb69 	bl	8004cec <iprintf>
	  for (int var = 0; var < 6; ++var)
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	e015      	b.n	800464c <Routine_STATE_TRANSMIT+0x44>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8004620:	2201      	movs	r2, #1
 8004622:	2120      	movs	r1, #32
 8004624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004628:	f7fc fb4e 	bl	8000cc8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800462c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004630:	f7fb ffd2 	bl	80005d8 <HAL_Delay>
		  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8004634:	2200      	movs	r2, #0
 8004636:	2120      	movs	r1, #32
 8004638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800463c:	f7fc fb44 	bl	8000cc8 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8004640:	20fa      	movs	r0, #250	; 0xfa
 8004642:	f7fb ffc9 	bl	80005d8 <HAL_Delay>
	  for (int var = 0; var < 6; ++var)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3301      	adds	r3, #1
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b05      	cmp	r3, #5
 8004650:	dde6      	ble.n	8004620 <Routine_STATE_TRANSMIT+0x18>
	  }
	  printf("Done!\r\n");
 8004652:	4808      	ldr	r0, [pc, #32]	; (8004674 <Routine_STATE_TRANSMIT+0x6c>)
 8004654:	f000 fb94 	bl	8004d80 <puts>
	  //reset sample count
	  __SET_SAMPLE_COUNT(0);
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <Routine_STATE_TRANSMIT+0x70>)
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <Routine_STATE_TRANSMIT+0x70>)
 800465c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465e:	b2db      	uxtb	r3, r3
 8004660:	6513      	str	r3, [r2, #80]	; 0x50
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	08005f10 	.word	0x08005f10
 8004670:	08005f3c 	.word	0x08005f3c
 8004674:	08005f54 	.word	0x08005f54
 8004678:	40002800 	.word	0x40002800

0800467c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800467c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004680:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004682:	e003      	b.n	800468c <LoopCopyDataInit>

08004684 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004686:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004688:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800468a:	3104      	adds	r1, #4

0800468c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800468c:	480b      	ldr	r0, [pc, #44]	; (80046bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004690:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004692:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004694:	d3f6      	bcc.n	8004684 <CopyDataInit>
	ldr	r2, =_sbss
 8004696:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004698:	e002      	b.n	80046a0 <LoopFillZerobss>

0800469a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800469a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800469c:	f842 3b04 	str.w	r3, [r2], #4

080046a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <LoopForever+0x16>)
	cmp	r2, r3
 80046a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80046a4:	d3f9      	bcc.n	800469a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046a6:	f000 f975 	bl	8004994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046aa:	f000 fb9b 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046ae:	f7ff fd33 	bl	8004118 <main>

080046b2 <LoopForever>:

LoopForever:
    b LoopForever
 80046b2:	e7fe      	b.n	80046b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046b4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80046b8:	0800601c 	.word	0x0800601c
	ldr	r0, =_sdata
 80046bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80046c0:	20000510 	.word	0x20000510
	ldr	r2, =_sbss
 80046c4:	20000510 	.word	0x20000510
	ldr	r3, = _ebss
 80046c8:	20000640 	.word	0x20000640

080046cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046cc:	e7fe      	b.n	80046cc <ADC1_2_IRQHandler>
	...

080046d0 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d6:	4a0f      	ldr	r2, [pc, #60]	; (8004714 <HAL_MspInit+0x44>)
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_MspInit+0x44>)
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	6613      	str	r3, [r2, #96]	; 0x60
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_MspInit+0x44>)
 80046e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4a09      	ldr	r2, [pc, #36]	; (8004714 <HAL_MspInit+0x44>)
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_MspInit+0x44>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6593      	str	r3, [r2, #88]	; 0x58
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_MspInit+0x44>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0b      	ldr	r2, [pc, #44]	; (8004754 <HAL_RTC_MspInit+0x3c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10f      	bne.n	800474a <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800472a:	4a0b      	ldr	r2, [pc, #44]	; (8004758 <HAL_RTC_MspInit+0x40>)
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <HAL_RTC_MspInit+0x40>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	2100      	movs	r1, #0
 800473e:	2003      	movs	r0, #3
 8004740:	f7fc f88f 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004744:	2003      	movs	r0, #3
 8004746:	f7fc f8a8 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40002800 	.word	0x40002800
 8004758:	40021000 	.word	0x40021000

0800475c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004764:	f107 0314 	add.w	r3, r7, #20
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_UART_MspInit+0x8c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d130      	bne.n	80047e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800477e:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_UART_MspInit+0x90>)
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_UART_MspInit+0x90>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004788:	6593      	str	r3, [r2, #88]	; 0x58
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_UART_MspInit+0x90>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004796:	4a15      	ldr	r2, [pc, #84]	; (80047ec <HAL_UART_MspInit+0x90>)
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <HAL_UART_MspInit+0x90>)
 800479a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_UART_MspInit+0x90>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047ae:	230c      	movs	r3, #12
 80047b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b2:	2302      	movs	r3, #2
 80047b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ba:	2303      	movs	r3, #3
 80047bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047be:	2307      	movs	r3, #7
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c2:	f107 0314 	add.w	r3, r7, #20
 80047c6:	4619      	mov	r1, r3
 80047c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047cc:	f7fc f8d4 	bl	8000978 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	2026      	movs	r0, #38	; 0x26
 80047d6:	f7fc f844 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80047da:	2026      	movs	r0, #38	; 0x26
 80047dc:	f7fc f85d 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047e0:	bf00      	nop
 80047e2:	3728      	adds	r7, #40	; 0x28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40004400 	.word	0x40004400
 80047ec:	40021000 	.word	0x40021000

080047f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE NonMaskableInt_IRQn 0 */


}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  /* USER CODE HardFault_IRQn 0 */


  while (1)
 8004802:	e7fe      	b.n	8004802 <HardFault_Handler+0x4>

08004804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE MemoryManagement_IRQn 0 */


  while (1)
 8004808:	e7fe      	b.n	8004808 <MemManage_Handler+0x4>

0800480a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */


  while (1)
 800480e:	e7fe      	b.n	800480e <BusFault_Handler+0x4>

08004810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */


  while (1)
 8004814:	e7fe      	b.n	8004814 <UsageFault_Handler+0x4>

08004816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0
  /* USER CODE SVCall_IRQn 0 */


}
 800481a:	bf00      	nop
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE DebugMonitor_IRQn 0 */


}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0
  /* USER CODE PendSV_IRQn 0 */


}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8004844:	f7fb feaa 	bl	800059c <HAL_IncTick>

}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}

0800484c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004850:	4802      	ldr	r0, [pc, #8]	; (800485c <RTC_WKUP_IRQHandler+0x10>)
 8004852:	f7fe f941 	bl	8002ad8 <HAL_RTCEx_WakeUpTimerIRQHandler>

}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	2000060c 	.word	0x2000060c

08004860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004864:	4802      	ldr	r0, [pc, #8]	; (8004870 <USART2_IRQHandler+0x10>)
 8004866:	f7fe fa49 	bl	8002cfc <HAL_UART_IRQHandler>

}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000588 	.word	0x20000588

08004874 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e00a      	b.n	800489c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004886:	68bc      	ldr	r4, [r7, #8]
 8004888:	1c63      	adds	r3, r4, #1
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	f3af 8000 	nop.w
 8004890:	4603      	mov	r3, r0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	3301      	adds	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	dbf0      	blt.n	8004886 <_read+0x12>
	}

return len;
 80048a4:	687b      	ldr	r3, [r7, #4]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}

080048ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b086      	sub	sp, #24
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e009      	b.n	80048d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	60ba      	str	r2, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff facb 	bl	8003e64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	3301      	adds	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	dbf1      	blt.n	80048c0 <_write+0x12>
	}
	return len;
 80048dc:	687b      	ldr	r3, [r7, #4]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <_sbrk+0x50>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <_sbrk+0x16>
		heap_end = &end;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <_sbrk+0x50>)
 80048fa:	4a10      	ldr	r2, [pc, #64]	; (800493c <_sbrk+0x54>)
 80048fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <_sbrk+0x50>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <_sbrk+0x50>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	466a      	mov	r2, sp
 800490e:	4293      	cmp	r3, r2
 8004910:	d907      	bls.n	8004922 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004912:	f000 fa61 	bl	8004dd8 <__errno>
 8004916:	4602      	mov	r2, r0
 8004918:	230c      	movs	r3, #12
 800491a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
 8004920:	e006      	b.n	8004930 <_sbrk+0x48>
	}

	heap_end += incr;
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <_sbrk+0x50>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	4a03      	ldr	r2, [pc, #12]	; (8004938 <_sbrk+0x50>)
 800492c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800492e:	68fb      	ldr	r3, [r7, #12]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	2000052c 	.word	0x2000052c
 800493c:	20000640 	.word	0x20000640

08004940 <_close>:

int _close(int file)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	return -1;
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004968:	605a      	str	r2, [r3, #4]
	return 0;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
	return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004998:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <SystemInit+0x64>)
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <SystemInit+0x64>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80049a8:	4a14      	ldr	r2, [pc, #80]	; (80049fc <SystemInit+0x68>)
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <SystemInit+0x68>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <SystemInit+0x68>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <SystemInit+0x68>)
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <SystemInit+0x68>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80049c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80049c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <SystemInit+0x68>)
 80049cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <SystemInit+0x68>)
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <SystemInit+0x68>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <SystemInit+0x68>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <SystemInit+0x64>)
 80049e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049ea:	609a      	str	r2, [r3, #8]
#endif
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000ed00 	.word	0xe000ed00
 80049fc:	40021000 	.word	0x40021000

08004a00 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004a10:	e004      	b.n	8004a1c <ts_itoa+0x1c>
		div *= base;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d2f3      	bcs.n	8004a12 <ts_itoa+0x12>

	while (div != 0)
 8004a2a:	e029      	b.n	8004a80 <ts_itoa+0x80>
	{
		int num = d/div;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a3e:	fb02 f201 	mul.w	r2, r2, r1
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b09      	cmp	r3, #9
 8004a54:	dd0a      	ble.n	8004a6c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	6011      	str	r1, [r2, #0]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	3237      	adds	r2, #55	; 0x37
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e009      	b.n	8004a80 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	1c59      	adds	r1, r3, #1
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	3230      	adds	r2, #48	; 0x30
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1d2      	bne.n	8004a2c <ts_itoa+0x2c>
	}
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b088      	sub	sp, #32
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004aa2:	e07d      	b.n	8004ba0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b25      	cmp	r3, #37	; 0x25
 8004aaa:	d171      	bne.n	8004b90 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d01e      	beq.n	8004af8 <ts_formatstring+0x66>
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	dc06      	bgt.n	8004acc <ts_formatstring+0x3a>
 8004abe:	2b58      	cmp	r3, #88	; 0x58
 8004ac0:	d050      	beq.n	8004b64 <ts_formatstring+0xd2>
 8004ac2:	2b63      	cmp	r3, #99	; 0x63
 8004ac4:	d00e      	beq.n	8004ae4 <ts_formatstring+0x52>
 8004ac6:	2b25      	cmp	r3, #37	; 0x25
 8004ac8:	d058      	beq.n	8004b7c <ts_formatstring+0xea>
 8004aca:	e05d      	b.n	8004b88 <ts_formatstring+0xf6>
 8004acc:	2b73      	cmp	r3, #115	; 0x73
 8004ace:	d02b      	beq.n	8004b28 <ts_formatstring+0x96>
 8004ad0:	2b73      	cmp	r3, #115	; 0x73
 8004ad2:	dc02      	bgt.n	8004ada <ts_formatstring+0x48>
 8004ad4:	2b69      	cmp	r3, #105	; 0x69
 8004ad6:	d00f      	beq.n	8004af8 <ts_formatstring+0x66>
 8004ad8:	e056      	b.n	8004b88 <ts_formatstring+0xf6>
 8004ada:	2b75      	cmp	r3, #117	; 0x75
 8004adc:	d037      	beq.n	8004b4e <ts_formatstring+0xbc>
 8004ade:	2b78      	cmp	r3, #120	; 0x78
 8004ae0:	d040      	beq.n	8004b64 <ts_formatstring+0xd2>
 8004ae2:	e051      	b.n	8004b88 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	60fa      	str	r2, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	1d11      	adds	r1, r2, #4
 8004aee:	6079      	str	r1, [r7, #4]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
				break;
 8004af6:	e047      	b.n	8004b88 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da07      	bge.n	8004b18 <ts_formatstring+0x86>
					{
						val *= -1;
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	425b      	negs	r3, r3
 8004b0c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	60fa      	str	r2, [r7, #12]
 8004b14:	222d      	movs	r2, #45	; 0x2d
 8004b16:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004b18:	69f9      	ldr	r1, [r7, #28]
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	220a      	movs	r2, #10
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff6d 	bl	8004a00 <ts_itoa>
				}
				break;
 8004b26:	e02f      	b.n	8004b88 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004b32:	e007      	b.n	8004b44 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	60fa      	str	r2, [r7, #12]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	1c51      	adds	r1, r2, #1
 8004b3e:	61b9      	str	r1, [r7, #24]
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f3      	bne.n	8004b34 <ts_formatstring+0xa2>
					}
				}
				break;
 8004b4c:	e01c      	b.n	8004b88 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	220a      	movs	r2, #10
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff4f 	bl	8004a00 <ts_itoa>
				break;
 8004b62:	e011      	b.n	8004b88 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1d1a      	adds	r2, r3, #4
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	2210      	movs	r2, #16
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff43 	bl	8004a00 <ts_itoa>
				break;
 8004b7a:	e005      	b.n	8004b88 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	60fa      	str	r2, [r7, #12]
 8004b82:	2225      	movs	r2, #37	; 0x25
 8004b84:	701a      	strb	r2, [r3, #0]
				  break;
 8004b86:	bf00      	nop
			}
			fmt++;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	e007      	b.n	8004ba0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	60fa      	str	r2, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	1c51      	adds	r1, r2, #1
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f af7d 	bne.w	8004aa4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004bce:	e081      	b.n	8004cd4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b25      	cmp	r3, #37	; 0x25
 8004bd6:	d177      	bne.n	8004cc8 <ts_formatlength+0x108>
		{
			++fmt;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	3b58      	subs	r3, #88	; 0x58
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d86a      	bhi.n	8004cbe <ts_formatlength+0xfe>
 8004be8:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <ts_formatlength+0x30>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004cb1 	.word	0x08004cb1
 8004bf4:	08004cbf 	.word	0x08004cbf
 8004bf8:	08004cbf 	.word	0x08004cbf
 8004bfc:	08004cbf 	.word	0x08004cbf
 8004c00:	08004cbf 	.word	0x08004cbf
 8004c04:	08004cbf 	.word	0x08004cbf
 8004c08:	08004cbf 	.word	0x08004cbf
 8004c0c:	08004cbf 	.word	0x08004cbf
 8004c10:	08004cbf 	.word	0x08004cbf
 8004c14:	08004cbf 	.word	0x08004cbf
 8004c18:	08004cbf 	.word	0x08004cbf
 8004c1c:	08004c75 	.word	0x08004c75
 8004c20:	08004c83 	.word	0x08004c83
 8004c24:	08004cbf 	.word	0x08004cbf
 8004c28:	08004cbf 	.word	0x08004cbf
 8004c2c:	08004cbf 	.word	0x08004cbf
 8004c30:	08004cbf 	.word	0x08004cbf
 8004c34:	08004c83 	.word	0x08004c83
 8004c38:	08004cbf 	.word	0x08004cbf
 8004c3c:	08004cbf 	.word	0x08004cbf
 8004c40:	08004cbf 	.word	0x08004cbf
 8004c44:	08004cbf 	.word	0x08004cbf
 8004c48:	08004cbf 	.word	0x08004cbf
 8004c4c:	08004cbf 	.word	0x08004cbf
 8004c50:	08004cbf 	.word	0x08004cbf
 8004c54:	08004cbf 	.word	0x08004cbf
 8004c58:	08004cbf 	.word	0x08004cbf
 8004c5c:	08004c91 	.word	0x08004c91
 8004c60:	08004cbf 	.word	0x08004cbf
 8004c64:	08004c83 	.word	0x08004c83
 8004c68:	08004cbf 	.word	0x08004cbf
 8004c6c:	08004cbf 	.word	0x08004cbf
 8004c70:	08004cb1 	.word	0x08004cb1
			{
			  case 'c':
		  		  va_arg(va, int);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	3304      	adds	r3, #4
 8004c78:	603b      	str	r3, [r7, #0]
				  ++length;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
				  break;
 8004c80:	e025      	b.n	8004cce <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	330b      	adds	r3, #11
 8004c86:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	603b      	str	r3, [r7, #0]
				  break;
 8004c8e:	e01e      	b.n	8004cce <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	603a      	str	r2, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004c9a:	e002      	b.n	8004ca2 <ts_formatlength+0xe2>
			  			  ++length;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	60ba      	str	r2, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f6      	bne.n	8004c9c <ts_formatlength+0xdc>
			  	  }
				  break;
 8004cae:	e00e      	b.n	8004cce <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	603b      	str	r3, [r7, #0]
				  break;
 8004cbc:	e007      	b.n	8004cce <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
				  break;
 8004cc4:	bf00      	nop
 8004cc6:	e002      	b.n	8004cce <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f47f af79 	bne.w	8004bd0 <ts_formatlength+0x10>
	}
	return length;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8004cec:	b40f      	push	{r0, r1, r2, r3}
 8004cee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
	int length = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cfe:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d04:	f7ff ff5c 	bl	8004bc0 <ts_formatlength>
 8004d08:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004d0a:	466b      	mov	r3, sp
 8004d0c:	461e      	mov	r6, r3
		char buf[length];
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	1e4b      	subs	r3, r1, #1
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	460b      	mov	r3, r1
 8004d16:	461a      	mov	r2, r3
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004d20:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004d24:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004d28:	460b      	mov	r3, r1
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	00dd      	lsls	r5, r3, #3
 8004d32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d36:	00d4      	lsls	r4, r2, #3
 8004d38:	460b      	mov	r3, r1
 8004d3a:	3307      	adds	r3, #7
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	ebad 0d03 	sub.w	sp, sp, r3
 8004d44:	466b      	mov	r3, sp
 8004d46:	3300      	adds	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004d4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d4e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fe9b 	bl	8004a92 <ts_formatstring>
 8004d5c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4619      	mov	r1, r3
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7ff fda2 	bl	80048ae <_write>
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d7a:	b004      	add	sp, #16
 8004d7c:	4770      	bx	lr
	...

08004d80 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fb fa1d 	bl	80001c8 <strlen>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f7ff fd87 	bl	80048ae <_write>
 8004da0:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8004da2:	2201      	movs	r2, #1
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <puts+0x54>)
 8004da6:	2001      	movs	r0, #1
 8004da8:	f7ff fd81 	bl	80048ae <_write>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d102      	bne.n	8004dc4 <puts+0x44>
	{
		res = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e002      	b.n	8004dca <puts+0x4a>
	}
	else
	{
		res = EOF;
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc8:	617b      	str	r3, [r7, #20]
	}

	return res;
 8004dca:	697b      	ldr	r3, [r7, #20]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	08005f5c 	.word	0x08005f5c

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4e0d      	ldr	r6, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1ba4      	subs	r4, r4, r6
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2500      	movs	r5, #0
 8004df0:	42a5      	cmp	r5, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4e0b      	ldr	r6, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f000 ff34 	bl	8005c64 <_init>
 8004dfc:	1ba4      	subs	r4, r4, r6
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2500      	movs	r5, #0
 8004e02:	42a5      	cmp	r5, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e0c:	4798      	blx	r3
 8004e0e:	3501      	adds	r5, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e16:	4798      	blx	r3
 8004e18:	3501      	adds	r5, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08006014 	.word	0x08006014
 8004e20:	08006014 	.word	0x08006014
 8004e24:	08006014 	.word	0x08006014
 8004e28:	08006018 	.word	0x08006018

08004e2c <memset>:
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <setbuf>:
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e42:	bf0c      	ite	eq
 8004e44:	2202      	moveq	r2, #2
 8004e46:	2200      	movne	r2, #0
 8004e48:	f000 b800 	b.w	8004e4c <setvbuf>

08004e4c <setvbuf>:
 8004e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e50:	461d      	mov	r5, r3
 8004e52:	4b60      	ldr	r3, [pc, #384]	; (8004fd4 <setvbuf+0x188>)
 8004e54:	681e      	ldr	r6, [r3, #0]
 8004e56:	4604      	mov	r4, r0
 8004e58:	460f      	mov	r7, r1
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	b126      	cbz	r6, 8004e68 <setvbuf+0x1c>
 8004e5e:	69b3      	ldr	r3, [r6, #24]
 8004e60:	b913      	cbnz	r3, 8004e68 <setvbuf+0x1c>
 8004e62:	4630      	mov	r0, r6
 8004e64:	f000 f9e4 	bl	8005230 <__sinit>
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <setvbuf+0x18c>)
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	d166      	bne.n	8004f3c <setvbuf+0xf0>
 8004e6e:	6874      	ldr	r4, [r6, #4]
 8004e70:	f1b8 0f02 	cmp.w	r8, #2
 8004e74:	d006      	beq.n	8004e84 <setvbuf+0x38>
 8004e76:	f1b8 0f01 	cmp.w	r8, #1
 8004e7a:	f200 80a7 	bhi.w	8004fcc <setvbuf+0x180>
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	f2c0 80a4 	blt.w	8004fcc <setvbuf+0x180>
 8004e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e86:	07da      	lsls	r2, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <setvbuf+0x4a>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	059b      	lsls	r3, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <setvbuf+0x4a>
 8004e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e92:	f000 fb7f 	bl	8005594 <__retarget_lock_acquire_recursive>
 8004e96:	4621      	mov	r1, r4
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f935 	bl	8005108 <_fflush_r>
 8004e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ea0:	b141      	cbz	r1, 8004eb4 <setvbuf+0x68>
 8004ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea6:	4299      	cmp	r1, r3
 8004ea8:	d002      	beq.n	8004eb0 <setvbuf+0x64>
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f000 fa96 	bl	80053dc <_free_r>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6363      	str	r3, [r4, #52]	; 0x34
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61a3      	str	r3, [r4, #24]
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	0618      	lsls	r0, r3, #24
 8004ebe:	d503      	bpl.n	8004ec8 <setvbuf+0x7c>
 8004ec0:	6921      	ldr	r1, [r4, #16]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 fa8a 	bl	80053dc <_free_r>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	f1b8 0f02 	cmp.w	r8, #2
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	d072      	beq.n	8004fc0 <setvbuf+0x174>
 8004eda:	ab01      	add	r3, sp, #4
 8004edc:	466a      	mov	r2, sp
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 fb59 	bl	8005598 <__swhatbuf_r>
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	4318      	orrs	r0, r3
 8004eea:	81a0      	strh	r0, [r4, #12]
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	d12f      	bne.n	8004f50 <setvbuf+0x104>
 8004ef0:	9d00      	ldr	r5, [sp, #0]
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 fb7c 	bl	80055f0 <malloc>
 8004ef8:	4607      	mov	r7, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d162      	bne.n	8004fc4 <setvbuf+0x178>
 8004efe:	f8dd 9000 	ldr.w	r9, [sp]
 8004f02:	45a9      	cmp	r9, r5
 8004f04:	d150      	bne.n	8004fa8 <setvbuf+0x15c>
 8004f06:	f04f 35ff 	mov.w	r5, #4294967295
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60a2      	str	r2, [r4, #8]
 8004f0e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004f12:	6022      	str	r2, [r4, #0]
 8004f14:	6122      	str	r2, [r4, #16]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1c:	6162      	str	r2, [r4, #20]
 8004f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	07d1      	lsls	r1, r2, #31
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	d404      	bmi.n	8004f34 <setvbuf+0xe8>
 8004f2a:	059b      	lsls	r3, r3, #22
 8004f2c:	d402      	bmi.n	8004f34 <setvbuf+0xe8>
 8004f2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f30:	f000 fb31 	bl	8005596 <__retarget_lock_release_recursive>
 8004f34:	4628      	mov	r0, r5
 8004f36:	b003      	add	sp, #12
 8004f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f3c:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <setvbuf+0x190>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d101      	bne.n	8004f46 <setvbuf+0xfa>
 8004f42:	68b4      	ldr	r4, [r6, #8]
 8004f44:	e794      	b.n	8004e70 <setvbuf+0x24>
 8004f46:	4b26      	ldr	r3, [pc, #152]	; (8004fe0 <setvbuf+0x194>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	bf08      	it	eq
 8004f4c:	68f4      	ldreq	r4, [r6, #12]
 8004f4e:	e78f      	b.n	8004e70 <setvbuf+0x24>
 8004f50:	2f00      	cmp	r7, #0
 8004f52:	d0ce      	beq.n	8004ef2 <setvbuf+0xa6>
 8004f54:	69b3      	ldr	r3, [r6, #24]
 8004f56:	b913      	cbnz	r3, 8004f5e <setvbuf+0x112>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 f969 	bl	8005230 <__sinit>
 8004f5e:	9b00      	ldr	r3, [sp, #0]
 8004f60:	6127      	str	r7, [r4, #16]
 8004f62:	429d      	cmp	r5, r3
 8004f64:	bf18      	it	ne
 8004f66:	89a3      	ldrhne	r3, [r4, #12]
 8004f68:	6027      	str	r7, [r4, #0]
 8004f6a:	bf1c      	itt	ne
 8004f6c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8004f70:	81a3      	strhne	r3, [r4, #12]
 8004f72:	f1b8 0f01 	cmp.w	r8, #1
 8004f76:	bf08      	it	eq
 8004f78:	89a3      	ldrheq	r3, [r4, #12]
 8004f7a:	6165      	str	r5, [r4, #20]
 8004f7c:	bf04      	itt	eq
 8004f7e:	f043 0301 	orreq.w	r3, r3, #1
 8004f82:	81a3      	strheq	r3, [r4, #12]
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f013 0208 	ands.w	r2, r3, #8
 8004f8a:	d01d      	beq.n	8004fc8 <setvbuf+0x17c>
 8004f8c:	07da      	lsls	r2, r3, #31
 8004f8e:	bf41      	itttt	mi
 8004f90:	2200      	movmi	r2, #0
 8004f92:	426d      	negmi	r5, r5
 8004f94:	60a2      	strmi	r2, [r4, #8]
 8004f96:	61a5      	strmi	r5, [r4, #24]
 8004f98:	bf58      	it	pl
 8004f9a:	60a5      	strpl	r5, [r4, #8]
 8004f9c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004f9e:	f015 0501 	ands.w	r5, r5, #1
 8004fa2:	d0c2      	beq.n	8004f2a <setvbuf+0xde>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	e7c5      	b.n	8004f34 <setvbuf+0xe8>
 8004fa8:	4648      	mov	r0, r9
 8004faa:	f000 fb21 	bl	80055f0 <malloc>
 8004fae:	4607      	mov	r7, r0
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d0a8      	beq.n	8004f06 <setvbuf+0xba>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	464d      	mov	r5, r9
 8004fbe:	e7c9      	b.n	8004f54 <setvbuf+0x108>
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	e7a2      	b.n	8004f0a <setvbuf+0xbe>
 8004fc4:	46a9      	mov	r9, r5
 8004fc6:	e7f5      	b.n	8004fb4 <setvbuf+0x168>
 8004fc8:	60a2      	str	r2, [r4, #8]
 8004fca:	e7e7      	b.n	8004f9c <setvbuf+0x150>
 8004fcc:	f04f 35ff 	mov.w	r5, #4294967295
 8004fd0:	e7b0      	b.n	8004f34 <setvbuf+0xe8>
 8004fd2:	bf00      	nop
 8004fd4:	2000000c 	.word	0x2000000c
 8004fd8:	08005fcc 	.word	0x08005fcc
 8004fdc:	08005fec 	.word	0x08005fec
 8004fe0:	08005fac 	.word	0x08005fac

08004fe4 <__sflush_r>:
 8004fe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fe8:	b293      	uxth	r3, r2
 8004fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	0718      	lsls	r0, r3, #28
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	d461      	bmi.n	80050ba <__sflush_r+0xd6>
 8004ff6:	684b      	ldr	r3, [r1, #4]
 8004ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	818a      	strh	r2, [r1, #12]
 8005000:	dc05      	bgt.n	800500e <__sflush_r+0x2a>
 8005002:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	dc02      	bgt.n	800500e <__sflush_r+0x2a>
 8005008:	2000      	movs	r0, #0
 800500a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800500e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005010:	2e00      	cmp	r6, #0
 8005012:	d0f9      	beq.n	8005008 <__sflush_r+0x24>
 8005014:	2300      	movs	r3, #0
 8005016:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800501a:	682f      	ldr	r7, [r5, #0]
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	d037      	beq.n	8005090 <__sflush_r+0xac>
 8005020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	075a      	lsls	r2, r3, #29
 8005026:	d505      	bpl.n	8005034 <__sflush_r+0x50>
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	1ac0      	subs	r0, r0, r3
 800502c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800502e:	b10b      	cbz	r3, 8005034 <__sflush_r+0x50>
 8005030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005032:	1ac0      	subs	r0, r0, r3
 8005034:	2300      	movs	r3, #0
 8005036:	4602      	mov	r2, r0
 8005038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800503a:	6a21      	ldr	r1, [r4, #32]
 800503c:	4628      	mov	r0, r5
 800503e:	47b0      	blx	r6
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	d106      	bne.n	8005054 <__sflush_r+0x70>
 8005046:	6829      	ldr	r1, [r5, #0]
 8005048:	291d      	cmp	r1, #29
 800504a:	d84f      	bhi.n	80050ec <__sflush_r+0x108>
 800504c:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <__sflush_r+0x120>)
 800504e:	40ca      	lsrs	r2, r1
 8005050:	07d6      	lsls	r6, r2, #31
 8005052:	d54b      	bpl.n	80050ec <__sflush_r+0x108>
 8005054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005058:	b21b      	sxth	r3, r3
 800505a:	2200      	movs	r2, #0
 800505c:	6062      	str	r2, [r4, #4]
 800505e:	04d9      	lsls	r1, r3, #19
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	d504      	bpl.n	8005072 <__sflush_r+0x8e>
 8005068:	1c42      	adds	r2, r0, #1
 800506a:	d101      	bne.n	8005070 <__sflush_r+0x8c>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b903      	cbnz	r3, 8005072 <__sflush_r+0x8e>
 8005070:	6560      	str	r0, [r4, #84]	; 0x54
 8005072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005074:	602f      	str	r7, [r5, #0]
 8005076:	2900      	cmp	r1, #0
 8005078:	d0c6      	beq.n	8005008 <__sflush_r+0x24>
 800507a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800507e:	4299      	cmp	r1, r3
 8005080:	d002      	beq.n	8005088 <__sflush_r+0xa4>
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f9aa 	bl	80053dc <_free_r>
 8005088:	2000      	movs	r0, #0
 800508a:	6360      	str	r0, [r4, #52]	; 0x34
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005090:	6a21      	ldr	r1, [r4, #32]
 8005092:	2301      	movs	r3, #1
 8005094:	4628      	mov	r0, r5
 8005096:	47b0      	blx	r6
 8005098:	1c41      	adds	r1, r0, #1
 800509a:	d1c2      	bne.n	8005022 <__sflush_r+0x3e>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0bf      	beq.n	8005022 <__sflush_r+0x3e>
 80050a2:	2b1d      	cmp	r3, #29
 80050a4:	d001      	beq.n	80050aa <__sflush_r+0xc6>
 80050a6:	2b16      	cmp	r3, #22
 80050a8:	d101      	bne.n	80050ae <__sflush_r+0xca>
 80050aa:	602f      	str	r7, [r5, #0]
 80050ac:	e7ac      	b.n	8005008 <__sflush_r+0x24>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b4:	81a3      	strh	r3, [r4, #12]
 80050b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ba:	690f      	ldr	r7, [r1, #16]
 80050bc:	2f00      	cmp	r7, #0
 80050be:	d0a3      	beq.n	8005008 <__sflush_r+0x24>
 80050c0:	079b      	lsls	r3, r3, #30
 80050c2:	680e      	ldr	r6, [r1, #0]
 80050c4:	bf08      	it	eq
 80050c6:	694b      	ldreq	r3, [r1, #20]
 80050c8:	600f      	str	r7, [r1, #0]
 80050ca:	bf18      	it	ne
 80050cc:	2300      	movne	r3, #0
 80050ce:	eba6 0807 	sub.w	r8, r6, r7
 80050d2:	608b      	str	r3, [r1, #8]
 80050d4:	f1b8 0f00 	cmp.w	r8, #0
 80050d8:	dd96      	ble.n	8005008 <__sflush_r+0x24>
 80050da:	4643      	mov	r3, r8
 80050dc:	463a      	mov	r2, r7
 80050de:	6a21      	ldr	r1, [r4, #32]
 80050e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b0      	blx	r6
 80050e6:	2800      	cmp	r0, #0
 80050e8:	dc07      	bgt.n	80050fa <__sflush_r+0x116>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	f04f 30ff 	mov.w	r0, #4294967295
 80050f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050fa:	4407      	add	r7, r0
 80050fc:	eba8 0800 	sub.w	r8, r8, r0
 8005100:	e7e8      	b.n	80050d4 <__sflush_r+0xf0>
 8005102:	bf00      	nop
 8005104:	20400001 	.word	0x20400001

08005108 <_fflush_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	690b      	ldr	r3, [r1, #16]
 800510c:	4605      	mov	r5, r0
 800510e:	460c      	mov	r4, r1
 8005110:	b913      	cbnz	r3, 8005118 <_fflush_r+0x10>
 8005112:	2500      	movs	r5, #0
 8005114:	4628      	mov	r0, r5
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	b118      	cbz	r0, 8005122 <_fflush_r+0x1a>
 800511a:	6983      	ldr	r3, [r0, #24]
 800511c:	b90b      	cbnz	r3, 8005122 <_fflush_r+0x1a>
 800511e:	f000 f887 	bl	8005230 <__sinit>
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <_fflush_r+0x6c>)
 8005124:	429c      	cmp	r4, r3
 8005126:	d11b      	bne.n	8005160 <_fflush_r+0x58>
 8005128:	686c      	ldr	r4, [r5, #4]
 800512a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0ef      	beq.n	8005112 <_fflush_r+0xa>
 8005132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005134:	07d0      	lsls	r0, r2, #31
 8005136:	d404      	bmi.n	8005142 <_fflush_r+0x3a>
 8005138:	0599      	lsls	r1, r3, #22
 800513a:	d402      	bmi.n	8005142 <_fflush_r+0x3a>
 800513c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513e:	f000 fa29 	bl	8005594 <__retarget_lock_acquire_recursive>
 8005142:	4628      	mov	r0, r5
 8005144:	4621      	mov	r1, r4
 8005146:	f7ff ff4d 	bl	8004fe4 <__sflush_r>
 800514a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800514c:	07da      	lsls	r2, r3, #31
 800514e:	4605      	mov	r5, r0
 8005150:	d4e0      	bmi.n	8005114 <_fflush_r+0xc>
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	059b      	lsls	r3, r3, #22
 8005156:	d4dd      	bmi.n	8005114 <_fflush_r+0xc>
 8005158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800515a:	f000 fa1c 	bl	8005596 <__retarget_lock_release_recursive>
 800515e:	e7d9      	b.n	8005114 <_fflush_r+0xc>
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <_fflush_r+0x70>)
 8005162:	429c      	cmp	r4, r3
 8005164:	d101      	bne.n	800516a <_fflush_r+0x62>
 8005166:	68ac      	ldr	r4, [r5, #8]
 8005168:	e7df      	b.n	800512a <_fflush_r+0x22>
 800516a:	4b04      	ldr	r3, [pc, #16]	; (800517c <_fflush_r+0x74>)
 800516c:	429c      	cmp	r4, r3
 800516e:	bf08      	it	eq
 8005170:	68ec      	ldreq	r4, [r5, #12]
 8005172:	e7da      	b.n	800512a <_fflush_r+0x22>
 8005174:	08005fcc 	.word	0x08005fcc
 8005178:	08005fec 	.word	0x08005fec
 800517c:	08005fac 	.word	0x08005fac

08005180 <_cleanup_r>:
 8005180:	4901      	ldr	r1, [pc, #4]	; (8005188 <_cleanup_r+0x8>)
 8005182:	f000 b9e7 	b.w	8005554 <_fwalk_reent>
 8005186:	bf00      	nop
 8005188:	08005b21 	.word	0x08005b21

0800518c <std.isra.0>:
 800518c:	2300      	movs	r3, #0
 800518e:	b510      	push	{r4, lr}
 8005190:	4604      	mov	r4, r0
 8005192:	6003      	str	r3, [r0, #0]
 8005194:	6043      	str	r3, [r0, #4]
 8005196:	6083      	str	r3, [r0, #8]
 8005198:	8181      	strh	r1, [r0, #12]
 800519a:	6643      	str	r3, [r0, #100]	; 0x64
 800519c:	81c2      	strh	r2, [r0, #14]
 800519e:	6103      	str	r3, [r0, #16]
 80051a0:	6143      	str	r3, [r0, #20]
 80051a2:	6183      	str	r3, [r0, #24]
 80051a4:	4619      	mov	r1, r3
 80051a6:	2208      	movs	r2, #8
 80051a8:	305c      	adds	r0, #92	; 0x5c
 80051aa:	f7ff fe3f 	bl	8004e2c <memset>
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <std.isra.0+0x38>)
 80051b0:	6263      	str	r3, [r4, #36]	; 0x24
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std.isra.0+0x3c>)
 80051b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std.isra.0+0x40>)
 80051b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <std.isra.0+0x44>)
 80051bc:	6224      	str	r4, [r4, #32]
 80051be:	6323      	str	r3, [r4, #48]	; 0x30
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	bf00      	nop
 80051c4:	08005a55 	.word	0x08005a55
 80051c8:	08005a77 	.word	0x08005a77
 80051cc:	08005aaf 	.word	0x08005aaf
 80051d0:	08005ad3 	.word	0x08005ad3

080051d4 <__sfmoreglue>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	1e4a      	subs	r2, r1, #1
 80051d8:	2568      	movs	r5, #104	; 0x68
 80051da:	4355      	muls	r5, r2
 80051dc:	460e      	mov	r6, r1
 80051de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051e2:	f000 fa0d 	bl	8005600 <_malloc_r>
 80051e6:	4604      	mov	r4, r0
 80051e8:	b140      	cbz	r0, 80051fc <__sfmoreglue+0x28>
 80051ea:	2100      	movs	r1, #0
 80051ec:	e880 0042 	stmia.w	r0, {r1, r6}
 80051f0:	300c      	adds	r0, #12
 80051f2:	60a0      	str	r0, [r4, #8]
 80051f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051f8:	f7ff fe18 	bl	8004e2c <memset>
 80051fc:	4620      	mov	r0, r4
 80051fe:	bd70      	pop	{r4, r5, r6, pc}

08005200 <__sfp_lock_acquire>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__sfp_lock_acquire+0x8>)
 8005202:	f000 b9c7 	b.w	8005594 <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	20000638 	.word	0x20000638

0800520c <__sfp_lock_release>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__sfp_lock_release+0x8>)
 800520e:	f000 b9c2 	b.w	8005596 <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	20000638 	.word	0x20000638

08005218 <__sinit_lock_acquire>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__sinit_lock_acquire+0x8>)
 800521a:	f000 b9bb 	b.w	8005594 <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	20000633 	.word	0x20000633

08005224 <__sinit_lock_release>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__sinit_lock_release+0x8>)
 8005226:	f000 b9b6 	b.w	8005596 <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	20000633 	.word	0x20000633

08005230 <__sinit>:
 8005230:	b510      	push	{r4, lr}
 8005232:	4604      	mov	r4, r0
 8005234:	f7ff fff0 	bl	8005218 <__sinit_lock_acquire>
 8005238:	69a3      	ldr	r3, [r4, #24]
 800523a:	b11b      	cbz	r3, 8005244 <__sinit+0x14>
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005240:	f7ff bff0 	b.w	8005224 <__sinit_lock_release>
 8005244:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005248:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800524c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005250:	4b12      	ldr	r3, [pc, #72]	; (800529c <__sinit+0x6c>)
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <__sinit+0x70>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	62a2      	str	r2, [r4, #40]	; 0x28
 8005258:	429c      	cmp	r4, r3
 800525a:	bf04      	itt	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	61a3      	streq	r3, [r4, #24]
 8005260:	4620      	mov	r0, r4
 8005262:	f000 f81f 	bl	80052a4 <__sfp>
 8005266:	6060      	str	r0, [r4, #4]
 8005268:	4620      	mov	r0, r4
 800526a:	f000 f81b 	bl	80052a4 <__sfp>
 800526e:	60a0      	str	r0, [r4, #8]
 8005270:	4620      	mov	r0, r4
 8005272:	f000 f817 	bl	80052a4 <__sfp>
 8005276:	2200      	movs	r2, #0
 8005278:	60e0      	str	r0, [r4, #12]
 800527a:	2104      	movs	r1, #4
 800527c:	6860      	ldr	r0, [r4, #4]
 800527e:	f7ff ff85 	bl	800518c <std.isra.0>
 8005282:	2201      	movs	r2, #1
 8005284:	2109      	movs	r1, #9
 8005286:	68a0      	ldr	r0, [r4, #8]
 8005288:	f7ff ff80 	bl	800518c <std.isra.0>
 800528c:	2202      	movs	r2, #2
 800528e:	2112      	movs	r1, #18
 8005290:	68e0      	ldr	r0, [r4, #12]
 8005292:	f7ff ff7b 	bl	800518c <std.isra.0>
 8005296:	2301      	movs	r3, #1
 8005298:	61a3      	str	r3, [r4, #24]
 800529a:	e7cf      	b.n	800523c <__sinit+0xc>
 800529c:	08005fa8 	.word	0x08005fa8
 80052a0:	08005181 	.word	0x08005181

080052a4 <__sfp>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	4607      	mov	r7, r0
 80052a8:	f7ff ffaa 	bl	8005200 <__sfp_lock_acquire>
 80052ac:	4b1f      	ldr	r3, [pc, #124]	; (800532c <__sfp+0x88>)
 80052ae:	681e      	ldr	r6, [r3, #0]
 80052b0:	69b3      	ldr	r3, [r6, #24]
 80052b2:	b913      	cbnz	r3, 80052ba <__sfp+0x16>
 80052b4:	4630      	mov	r0, r6
 80052b6:	f7ff ffbb 	bl	8005230 <__sinit>
 80052ba:	36d8      	adds	r6, #216	; 0xd8
 80052bc:	68b4      	ldr	r4, [r6, #8]
 80052be:	6873      	ldr	r3, [r6, #4]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	d503      	bpl.n	80052cc <__sfp+0x28>
 80052c4:	6833      	ldr	r3, [r6, #0]
 80052c6:	b133      	cbz	r3, 80052d6 <__sfp+0x32>
 80052c8:	6836      	ldr	r6, [r6, #0]
 80052ca:	e7f7      	b.n	80052bc <__sfp+0x18>
 80052cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052d0:	b17d      	cbz	r5, 80052f2 <__sfp+0x4e>
 80052d2:	3468      	adds	r4, #104	; 0x68
 80052d4:	e7f4      	b.n	80052c0 <__sfp+0x1c>
 80052d6:	2104      	movs	r1, #4
 80052d8:	4638      	mov	r0, r7
 80052da:	f7ff ff7b 	bl	80051d4 <__sfmoreglue>
 80052de:	4604      	mov	r4, r0
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d1f0      	bne.n	80052c8 <__sfp+0x24>
 80052e6:	f7ff ff91 	bl	800520c <__sfp_lock_release>
 80052ea:	230c      	movs	r3, #12
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4620      	mov	r0, r4
 80052f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052f6:	81e3      	strh	r3, [r4, #14]
 80052f8:	2301      	movs	r3, #1
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005300:	6665      	str	r5, [r4, #100]	; 0x64
 8005302:	f000 f945 	bl	8005590 <__retarget_lock_init_recursive>
 8005306:	f7ff ff81 	bl	800520c <__sfp_lock_release>
 800530a:	6025      	str	r5, [r4, #0]
 800530c:	60a5      	str	r5, [r4, #8]
 800530e:	6065      	str	r5, [r4, #4]
 8005310:	6125      	str	r5, [r4, #16]
 8005312:	6165      	str	r5, [r4, #20]
 8005314:	61a5      	str	r5, [r4, #24]
 8005316:	2208      	movs	r2, #8
 8005318:	4629      	mov	r1, r5
 800531a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800531e:	f7ff fd85 	bl	8004e2c <memset>
 8005322:	6365      	str	r5, [r4, #52]	; 0x34
 8005324:	63a5      	str	r5, [r4, #56]	; 0x38
 8005326:	64a5      	str	r5, [r4, #72]	; 0x48
 8005328:	64e5      	str	r5, [r4, #76]	; 0x4c
 800532a:	e7e0      	b.n	80052ee <__sfp+0x4a>
 800532c:	08005fa8 	.word	0x08005fa8

08005330 <_malloc_trim_r>:
 8005330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005334:	4f25      	ldr	r7, [pc, #148]	; (80053cc <_malloc_trim_r+0x9c>)
 8005336:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80053d8 <_malloc_trim_r+0xa8>
 800533a:	4689      	mov	r9, r1
 800533c:	4606      	mov	r6, r0
 800533e:	f000 fb6d 	bl	8005a1c <__malloc_lock>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	685d      	ldr	r5, [r3, #4]
 8005346:	f1a8 0411 	sub.w	r4, r8, #17
 800534a:	f025 0503 	bic.w	r5, r5, #3
 800534e:	eba4 0409 	sub.w	r4, r4, r9
 8005352:	442c      	add	r4, r5
 8005354:	fbb4 f4f8 	udiv	r4, r4, r8
 8005358:	3c01      	subs	r4, #1
 800535a:	fb08 f404 	mul.w	r4, r8, r4
 800535e:	4544      	cmp	r4, r8
 8005360:	da05      	bge.n	800536e <_malloc_trim_r+0x3e>
 8005362:	4630      	mov	r0, r6
 8005364:	f000 fb60 	bl	8005a28 <__malloc_unlock>
 8005368:	2000      	movs	r0, #0
 800536a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536e:	2100      	movs	r1, #0
 8005370:	4630      	mov	r0, r6
 8005372:	f000 fb5f 	bl	8005a34 <_sbrk_r>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	442b      	add	r3, r5
 800537a:	4298      	cmp	r0, r3
 800537c:	d1f1      	bne.n	8005362 <_malloc_trim_r+0x32>
 800537e:	4261      	negs	r1, r4
 8005380:	4630      	mov	r0, r6
 8005382:	f000 fb57 	bl	8005a34 <_sbrk_r>
 8005386:	3001      	adds	r0, #1
 8005388:	d110      	bne.n	80053ac <_malloc_trim_r+0x7c>
 800538a:	2100      	movs	r1, #0
 800538c:	4630      	mov	r0, r6
 800538e:	f000 fb51 	bl	8005a34 <_sbrk_r>
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	1a83      	subs	r3, r0, r2
 8005396:	2b0f      	cmp	r3, #15
 8005398:	dde3      	ble.n	8005362 <_malloc_trim_r+0x32>
 800539a:	490d      	ldr	r1, [pc, #52]	; (80053d0 <_malloc_trim_r+0xa0>)
 800539c:	6809      	ldr	r1, [r1, #0]
 800539e:	1a40      	subs	r0, r0, r1
 80053a0:	490c      	ldr	r1, [pc, #48]	; (80053d4 <_malloc_trim_r+0xa4>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6008      	str	r0, [r1, #0]
 80053a8:	6053      	str	r3, [r2, #4]
 80053aa:	e7da      	b.n	8005362 <_malloc_trim_r+0x32>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <_malloc_trim_r+0xa4>)
 80053b0:	1b2d      	subs	r5, r5, r4
 80053b2:	f045 0501 	orr.w	r5, r5, #1
 80053b6:	605d      	str	r5, [r3, #4]
 80053b8:	6813      	ldr	r3, [r2, #0]
 80053ba:	4630      	mov	r0, r6
 80053bc:	1b1c      	subs	r4, r3, r4
 80053be:	6014      	str	r4, [r2, #0]
 80053c0:	f000 fb32 	bl	8005a28 <__malloc_unlock>
 80053c4:	2001      	movs	r0, #1
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ca:	bf00      	nop
 80053cc:	20000100 	.word	0x20000100
 80053d0:	20000508 	.word	0x20000508
 80053d4:	20000530 	.word	0x20000530
 80053d8:	00000080 	.word	0x00000080

080053dc <_free_r>:
 80053dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e0:	4604      	mov	r4, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	2900      	cmp	r1, #0
 80053e6:	f000 80ab 	beq.w	8005540 <_free_r+0x164>
 80053ea:	f000 fb17 	bl	8005a1c <__malloc_lock>
 80053ee:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80053f2:	4d54      	ldr	r5, [pc, #336]	; (8005544 <_free_r+0x168>)
 80053f4:	f022 0001 	bic.w	r0, r2, #1
 80053f8:	f1a8 0308 	sub.w	r3, r8, #8
 80053fc:	181f      	adds	r7, r3, r0
 80053fe:	68a9      	ldr	r1, [r5, #8]
 8005400:	687e      	ldr	r6, [r7, #4]
 8005402:	428f      	cmp	r7, r1
 8005404:	f026 0603 	bic.w	r6, r6, #3
 8005408:	f002 0201 	and.w	r2, r2, #1
 800540c:	d11b      	bne.n	8005446 <_free_r+0x6a>
 800540e:	4430      	add	r0, r6
 8005410:	b93a      	cbnz	r2, 8005422 <_free_r+0x46>
 8005412:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	4410      	add	r0, r2
 800541a:	6899      	ldr	r1, [r3, #8]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	60ca      	str	r2, [r1, #12]
 8005420:	6091      	str	r1, [r2, #8]
 8005422:	f040 0201 	orr.w	r2, r0, #1
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	60ab      	str	r3, [r5, #8]
 800542a:	4b47      	ldr	r3, [pc, #284]	; (8005548 <_free_r+0x16c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4298      	cmp	r0, r3
 8005430:	d304      	bcc.n	800543c <_free_r+0x60>
 8005432:	4b46      	ldr	r3, [pc, #280]	; (800554c <_free_r+0x170>)
 8005434:	4620      	mov	r0, r4
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	f7ff ff7a 	bl	8005330 <_malloc_trim_r>
 800543c:	4620      	mov	r0, r4
 800543e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005442:	f000 baf1 	b.w	8005a28 <__malloc_unlock>
 8005446:	607e      	str	r6, [r7, #4]
 8005448:	2a00      	cmp	r2, #0
 800544a:	d139      	bne.n	80054c0 <_free_r+0xe4>
 800544c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005450:	1a5b      	subs	r3, r3, r1
 8005452:	4408      	add	r0, r1
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	f105 0e08 	add.w	lr, r5, #8
 800545a:	4571      	cmp	r1, lr
 800545c:	d032      	beq.n	80054c4 <_free_r+0xe8>
 800545e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005462:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005466:	f8ce 1008 	str.w	r1, [lr, #8]
 800546a:	19b9      	adds	r1, r7, r6
 800546c:	6849      	ldr	r1, [r1, #4]
 800546e:	07c9      	lsls	r1, r1, #31
 8005470:	d40a      	bmi.n	8005488 <_free_r+0xac>
 8005472:	4430      	add	r0, r6
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	bb3a      	cbnz	r2, 80054c8 <_free_r+0xec>
 8005478:	4e35      	ldr	r6, [pc, #212]	; (8005550 <_free_r+0x174>)
 800547a:	42b1      	cmp	r1, r6
 800547c:	d124      	bne.n	80054c8 <_free_r+0xec>
 800547e:	616b      	str	r3, [r5, #20]
 8005480:	612b      	str	r3, [r5, #16]
 8005482:	2201      	movs	r2, #1
 8005484:	60d9      	str	r1, [r3, #12]
 8005486:	6099      	str	r1, [r3, #8]
 8005488:	f040 0101 	orr.w	r1, r0, #1
 800548c:	6059      	str	r1, [r3, #4]
 800548e:	5018      	str	r0, [r3, r0]
 8005490:	2a00      	cmp	r2, #0
 8005492:	d1d3      	bne.n	800543c <_free_r+0x60>
 8005494:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005498:	d21a      	bcs.n	80054d0 <_free_r+0xf4>
 800549a:	08c0      	lsrs	r0, r0, #3
 800549c:	1081      	asrs	r1, r0, #2
 800549e:	2201      	movs	r2, #1
 80054a0:	408a      	lsls	r2, r1
 80054a2:	6869      	ldr	r1, [r5, #4]
 80054a4:	3001      	adds	r0, #1
 80054a6:	430a      	orrs	r2, r1
 80054a8:	606a      	str	r2, [r5, #4]
 80054aa:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80054ae:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80054b2:	6099      	str	r1, [r3, #8]
 80054b4:	3a08      	subs	r2, #8
 80054b6:	60da      	str	r2, [r3, #12]
 80054b8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80054bc:	60cb      	str	r3, [r1, #12]
 80054be:	e7bd      	b.n	800543c <_free_r+0x60>
 80054c0:	2200      	movs	r2, #0
 80054c2:	e7d2      	b.n	800546a <_free_r+0x8e>
 80054c4:	2201      	movs	r2, #1
 80054c6:	e7d0      	b.n	800546a <_free_r+0x8e>
 80054c8:	68fe      	ldr	r6, [r7, #12]
 80054ca:	60ce      	str	r6, [r1, #12]
 80054cc:	60b1      	str	r1, [r6, #8]
 80054ce:	e7db      	b.n	8005488 <_free_r+0xac>
 80054d0:	0a42      	lsrs	r2, r0, #9
 80054d2:	2a04      	cmp	r2, #4
 80054d4:	d813      	bhi.n	80054fe <_free_r+0x122>
 80054d6:	0982      	lsrs	r2, r0, #6
 80054d8:	3238      	adds	r2, #56	; 0x38
 80054da:	1c51      	adds	r1, r2, #1
 80054dc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80054e0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80054e4:	428e      	cmp	r6, r1
 80054e6:	d124      	bne.n	8005532 <_free_r+0x156>
 80054e8:	2001      	movs	r0, #1
 80054ea:	1092      	asrs	r2, r2, #2
 80054ec:	fa00 f202 	lsl.w	r2, r0, r2
 80054f0:	6868      	ldr	r0, [r5, #4]
 80054f2:	4302      	orrs	r2, r0
 80054f4:	606a      	str	r2, [r5, #4]
 80054f6:	60de      	str	r6, [r3, #12]
 80054f8:	6099      	str	r1, [r3, #8]
 80054fa:	60b3      	str	r3, [r6, #8]
 80054fc:	e7de      	b.n	80054bc <_free_r+0xe0>
 80054fe:	2a14      	cmp	r2, #20
 8005500:	d801      	bhi.n	8005506 <_free_r+0x12a>
 8005502:	325b      	adds	r2, #91	; 0x5b
 8005504:	e7e9      	b.n	80054da <_free_r+0xfe>
 8005506:	2a54      	cmp	r2, #84	; 0x54
 8005508:	d802      	bhi.n	8005510 <_free_r+0x134>
 800550a:	0b02      	lsrs	r2, r0, #12
 800550c:	326e      	adds	r2, #110	; 0x6e
 800550e:	e7e4      	b.n	80054da <_free_r+0xfe>
 8005510:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005514:	d802      	bhi.n	800551c <_free_r+0x140>
 8005516:	0bc2      	lsrs	r2, r0, #15
 8005518:	3277      	adds	r2, #119	; 0x77
 800551a:	e7de      	b.n	80054da <_free_r+0xfe>
 800551c:	f240 5154 	movw	r1, #1364	; 0x554
 8005520:	428a      	cmp	r2, r1
 8005522:	bf9a      	itte	ls
 8005524:	0c82      	lsrls	r2, r0, #18
 8005526:	327c      	addls	r2, #124	; 0x7c
 8005528:	227e      	movhi	r2, #126	; 0x7e
 800552a:	e7d6      	b.n	80054da <_free_r+0xfe>
 800552c:	6889      	ldr	r1, [r1, #8]
 800552e:	428e      	cmp	r6, r1
 8005530:	d004      	beq.n	800553c <_free_r+0x160>
 8005532:	684a      	ldr	r2, [r1, #4]
 8005534:	f022 0203 	bic.w	r2, r2, #3
 8005538:	4290      	cmp	r0, r2
 800553a:	d3f7      	bcc.n	800552c <_free_r+0x150>
 800553c:	68ce      	ldr	r6, [r1, #12]
 800553e:	e7da      	b.n	80054f6 <_free_r+0x11a>
 8005540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005544:	20000100 	.word	0x20000100
 8005548:	2000050c 	.word	0x2000050c
 800554c:	20000560 	.word	0x20000560
 8005550:	20000108 	.word	0x20000108

08005554 <_fwalk_reent>:
 8005554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005558:	4680      	mov	r8, r0
 800555a:	4689      	mov	r9, r1
 800555c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005560:	2600      	movs	r6, #0
 8005562:	b914      	cbnz	r4, 800556a <_fwalk_reent+0x16>
 8005564:	4630      	mov	r0, r6
 8005566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800556a:	68a5      	ldr	r5, [r4, #8]
 800556c:	6867      	ldr	r7, [r4, #4]
 800556e:	3f01      	subs	r7, #1
 8005570:	d501      	bpl.n	8005576 <_fwalk_reent+0x22>
 8005572:	6824      	ldr	r4, [r4, #0]
 8005574:	e7f5      	b.n	8005562 <_fwalk_reent+0xe>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d907      	bls.n	800558c <_fwalk_reent+0x38>
 800557c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005580:	3301      	adds	r3, #1
 8005582:	d003      	beq.n	800558c <_fwalk_reent+0x38>
 8005584:	4629      	mov	r1, r5
 8005586:	4640      	mov	r0, r8
 8005588:	47c8      	blx	r9
 800558a:	4306      	orrs	r6, r0
 800558c:	3568      	adds	r5, #104	; 0x68
 800558e:	e7ee      	b.n	800556e <_fwalk_reent+0x1a>

08005590 <__retarget_lock_init_recursive>:
 8005590:	4770      	bx	lr

08005592 <__retarget_lock_close_recursive>:
 8005592:	4770      	bx	lr

08005594 <__retarget_lock_acquire_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_release_recursive>:
 8005596:	4770      	bx	lr

08005598 <__swhatbuf_r>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	460e      	mov	r6, r1
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	2900      	cmp	r1, #0
 80055a2:	b090      	sub	sp, #64	; 0x40
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	da09      	bge.n	80055be <__swhatbuf_r+0x26>
 80055aa:	89b3      	ldrh	r3, [r6, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80055b2:	602a      	str	r2, [r5, #0]
 80055b4:	d116      	bne.n	80055e4 <__swhatbuf_r+0x4c>
 80055b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	e015      	b.n	80055ea <__swhatbuf_r+0x52>
 80055be:	aa01      	add	r2, sp, #4
 80055c0:	f000 fb1a 	bl	8005bf8 <_fstat_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	dbf0      	blt.n	80055aa <__swhatbuf_r+0x12>
 80055c8:	9a02      	ldr	r2, [sp, #8]
 80055ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055d2:	425a      	negs	r2, r3
 80055d4:	415a      	adcs	r2, r3
 80055d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055da:	602a      	str	r2, [r5, #0]
 80055dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	e002      	b.n	80055ea <__swhatbuf_r+0x52>
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	4610      	mov	r0, r2
 80055ea:	b010      	add	sp, #64	; 0x40
 80055ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080055f0 <malloc>:
 80055f0:	4b02      	ldr	r3, [pc, #8]	; (80055fc <malloc+0xc>)
 80055f2:	4601      	mov	r1, r0
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	f000 b803 	b.w	8005600 <_malloc_r>
 80055fa:	bf00      	nop
 80055fc:	2000000c 	.word	0x2000000c

08005600 <_malloc_r>:
 8005600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	f101 040b 	add.w	r4, r1, #11
 8005608:	2c16      	cmp	r4, #22
 800560a:	4681      	mov	r9, r0
 800560c:	d907      	bls.n	800561e <_malloc_r+0x1e>
 800560e:	f034 0407 	bics.w	r4, r4, #7
 8005612:	d505      	bpl.n	8005620 <_malloc_r+0x20>
 8005614:	230c      	movs	r3, #12
 8005616:	f8c9 3000 	str.w	r3, [r9]
 800561a:	2600      	movs	r6, #0
 800561c:	e131      	b.n	8005882 <_malloc_r+0x282>
 800561e:	2410      	movs	r4, #16
 8005620:	428c      	cmp	r4, r1
 8005622:	d3f7      	bcc.n	8005614 <_malloc_r+0x14>
 8005624:	4648      	mov	r0, r9
 8005626:	f000 f9f9 	bl	8005a1c <__malloc_lock>
 800562a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800562e:	4d9c      	ldr	r5, [pc, #624]	; (80058a0 <_malloc_r+0x2a0>)
 8005630:	d236      	bcs.n	80056a0 <_malloc_r+0xa0>
 8005632:	f104 0208 	add.w	r2, r4, #8
 8005636:	442a      	add	r2, r5
 8005638:	f1a2 0108 	sub.w	r1, r2, #8
 800563c:	6856      	ldr	r6, [r2, #4]
 800563e:	428e      	cmp	r6, r1
 8005640:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005644:	d102      	bne.n	800564c <_malloc_r+0x4c>
 8005646:	68d6      	ldr	r6, [r2, #12]
 8005648:	42b2      	cmp	r2, r6
 800564a:	d010      	beq.n	800566e <_malloc_r+0x6e>
 800564c:	6873      	ldr	r3, [r6, #4]
 800564e:	68f2      	ldr	r2, [r6, #12]
 8005650:	68b1      	ldr	r1, [r6, #8]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60ca      	str	r2, [r1, #12]
 8005658:	4433      	add	r3, r6
 800565a:	6091      	str	r1, [r2, #8]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	4648      	mov	r0, r9
 8005666:	f000 f9df 	bl	8005a28 <__malloc_unlock>
 800566a:	3608      	adds	r6, #8
 800566c:	e109      	b.n	8005882 <_malloc_r+0x282>
 800566e:	3302      	adds	r3, #2
 8005670:	4a8c      	ldr	r2, [pc, #560]	; (80058a4 <_malloc_r+0x2a4>)
 8005672:	692e      	ldr	r6, [r5, #16]
 8005674:	4296      	cmp	r6, r2
 8005676:	4611      	mov	r1, r2
 8005678:	d06d      	beq.n	8005756 <_malloc_r+0x156>
 800567a:	6870      	ldr	r0, [r6, #4]
 800567c:	f020 0003 	bic.w	r0, r0, #3
 8005680:	1b07      	subs	r7, r0, r4
 8005682:	2f0f      	cmp	r7, #15
 8005684:	dd47      	ble.n	8005716 <_malloc_r+0x116>
 8005686:	1933      	adds	r3, r6, r4
 8005688:	f044 0401 	orr.w	r4, r4, #1
 800568c:	6074      	str	r4, [r6, #4]
 800568e:	616b      	str	r3, [r5, #20]
 8005690:	612b      	str	r3, [r5, #16]
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	f047 0201 	orr.w	r2, r7, #1
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	5037      	str	r7, [r6, r0]
 800569e:	e7e1      	b.n	8005664 <_malloc_r+0x64>
 80056a0:	0a63      	lsrs	r3, r4, #9
 80056a2:	d02a      	beq.n	80056fa <_malloc_r+0xfa>
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d812      	bhi.n	80056ce <_malloc_r+0xce>
 80056a8:	09a3      	lsrs	r3, r4, #6
 80056aa:	3338      	adds	r3, #56	; 0x38
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80056b2:	f1a2 0008 	sub.w	r0, r2, #8
 80056b6:	6856      	ldr	r6, [r2, #4]
 80056b8:	4286      	cmp	r6, r0
 80056ba:	d006      	beq.n	80056ca <_malloc_r+0xca>
 80056bc:	6872      	ldr	r2, [r6, #4]
 80056be:	f022 0203 	bic.w	r2, r2, #3
 80056c2:	1b11      	subs	r1, r2, r4
 80056c4:	290f      	cmp	r1, #15
 80056c6:	dd1c      	ble.n	8005702 <_malloc_r+0x102>
 80056c8:	3b01      	subs	r3, #1
 80056ca:	3301      	adds	r3, #1
 80056cc:	e7d0      	b.n	8005670 <_malloc_r+0x70>
 80056ce:	2b14      	cmp	r3, #20
 80056d0:	d801      	bhi.n	80056d6 <_malloc_r+0xd6>
 80056d2:	335b      	adds	r3, #91	; 0x5b
 80056d4:	e7ea      	b.n	80056ac <_malloc_r+0xac>
 80056d6:	2b54      	cmp	r3, #84	; 0x54
 80056d8:	d802      	bhi.n	80056e0 <_malloc_r+0xe0>
 80056da:	0b23      	lsrs	r3, r4, #12
 80056dc:	336e      	adds	r3, #110	; 0x6e
 80056de:	e7e5      	b.n	80056ac <_malloc_r+0xac>
 80056e0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80056e4:	d802      	bhi.n	80056ec <_malloc_r+0xec>
 80056e6:	0be3      	lsrs	r3, r4, #15
 80056e8:	3377      	adds	r3, #119	; 0x77
 80056ea:	e7df      	b.n	80056ac <_malloc_r+0xac>
 80056ec:	f240 5254 	movw	r2, #1364	; 0x554
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d804      	bhi.n	80056fe <_malloc_r+0xfe>
 80056f4:	0ca3      	lsrs	r3, r4, #18
 80056f6:	337c      	adds	r3, #124	; 0x7c
 80056f8:	e7d8      	b.n	80056ac <_malloc_r+0xac>
 80056fa:	233f      	movs	r3, #63	; 0x3f
 80056fc:	e7d6      	b.n	80056ac <_malloc_r+0xac>
 80056fe:	237e      	movs	r3, #126	; 0x7e
 8005700:	e7d4      	b.n	80056ac <_malloc_r+0xac>
 8005702:	2900      	cmp	r1, #0
 8005704:	68f1      	ldr	r1, [r6, #12]
 8005706:	db04      	blt.n	8005712 <_malloc_r+0x112>
 8005708:	68b3      	ldr	r3, [r6, #8]
 800570a:	60d9      	str	r1, [r3, #12]
 800570c:	608b      	str	r3, [r1, #8]
 800570e:	18b3      	adds	r3, r6, r2
 8005710:	e7a4      	b.n	800565c <_malloc_r+0x5c>
 8005712:	460e      	mov	r6, r1
 8005714:	e7d0      	b.n	80056b8 <_malloc_r+0xb8>
 8005716:	2f00      	cmp	r7, #0
 8005718:	616a      	str	r2, [r5, #20]
 800571a:	612a      	str	r2, [r5, #16]
 800571c:	db05      	blt.n	800572a <_malloc_r+0x12a>
 800571e:	4430      	add	r0, r6
 8005720:	6843      	ldr	r3, [r0, #4]
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6043      	str	r3, [r0, #4]
 8005728:	e79c      	b.n	8005664 <_malloc_r+0x64>
 800572a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800572e:	d244      	bcs.n	80057ba <_malloc_r+0x1ba>
 8005730:	08c0      	lsrs	r0, r0, #3
 8005732:	1087      	asrs	r7, r0, #2
 8005734:	2201      	movs	r2, #1
 8005736:	fa02 f707 	lsl.w	r7, r2, r7
 800573a:	686a      	ldr	r2, [r5, #4]
 800573c:	3001      	adds	r0, #1
 800573e:	433a      	orrs	r2, r7
 8005740:	606a      	str	r2, [r5, #4]
 8005742:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005746:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800574a:	60b7      	str	r7, [r6, #8]
 800574c:	3a08      	subs	r2, #8
 800574e:	60f2      	str	r2, [r6, #12]
 8005750:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005754:	60fe      	str	r6, [r7, #12]
 8005756:	2001      	movs	r0, #1
 8005758:	109a      	asrs	r2, r3, #2
 800575a:	fa00 f202 	lsl.w	r2, r0, r2
 800575e:	6868      	ldr	r0, [r5, #4]
 8005760:	4282      	cmp	r2, r0
 8005762:	f200 80a1 	bhi.w	80058a8 <_malloc_r+0x2a8>
 8005766:	4202      	tst	r2, r0
 8005768:	d106      	bne.n	8005778 <_malloc_r+0x178>
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	0052      	lsls	r2, r2, #1
 8005770:	4202      	tst	r2, r0
 8005772:	f103 0304 	add.w	r3, r3, #4
 8005776:	d0fa      	beq.n	800576e <_malloc_r+0x16e>
 8005778:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800577c:	46e0      	mov	r8, ip
 800577e:	469e      	mov	lr, r3
 8005780:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005784:	4546      	cmp	r6, r8
 8005786:	d153      	bne.n	8005830 <_malloc_r+0x230>
 8005788:	f10e 0e01 	add.w	lr, lr, #1
 800578c:	f01e 0f03 	tst.w	lr, #3
 8005790:	f108 0808 	add.w	r8, r8, #8
 8005794:	d1f4      	bne.n	8005780 <_malloc_r+0x180>
 8005796:	0798      	lsls	r0, r3, #30
 8005798:	d179      	bne.n	800588e <_malloc_r+0x28e>
 800579a:	686b      	ldr	r3, [r5, #4]
 800579c:	ea23 0302 	bic.w	r3, r3, r2
 80057a0:	606b      	str	r3, [r5, #4]
 80057a2:	6868      	ldr	r0, [r5, #4]
 80057a4:	0052      	lsls	r2, r2, #1
 80057a6:	4282      	cmp	r2, r0
 80057a8:	d87e      	bhi.n	80058a8 <_malloc_r+0x2a8>
 80057aa:	2a00      	cmp	r2, #0
 80057ac:	d07c      	beq.n	80058a8 <_malloc_r+0x2a8>
 80057ae:	4673      	mov	r3, lr
 80057b0:	4202      	tst	r2, r0
 80057b2:	d1e1      	bne.n	8005778 <_malloc_r+0x178>
 80057b4:	3304      	adds	r3, #4
 80057b6:	0052      	lsls	r2, r2, #1
 80057b8:	e7fa      	b.n	80057b0 <_malloc_r+0x1b0>
 80057ba:	0a42      	lsrs	r2, r0, #9
 80057bc:	2a04      	cmp	r2, #4
 80057be:	d815      	bhi.n	80057ec <_malloc_r+0x1ec>
 80057c0:	0982      	lsrs	r2, r0, #6
 80057c2:	3238      	adds	r2, #56	; 0x38
 80057c4:	1c57      	adds	r7, r2, #1
 80057c6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80057ca:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80057ce:	45be      	cmp	lr, r7
 80057d0:	d126      	bne.n	8005820 <_malloc_r+0x220>
 80057d2:	2001      	movs	r0, #1
 80057d4:	1092      	asrs	r2, r2, #2
 80057d6:	fa00 f202 	lsl.w	r2, r0, r2
 80057da:	6868      	ldr	r0, [r5, #4]
 80057dc:	4310      	orrs	r0, r2
 80057de:	6068      	str	r0, [r5, #4]
 80057e0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80057e4:	60b7      	str	r7, [r6, #8]
 80057e6:	f8ce 6008 	str.w	r6, [lr, #8]
 80057ea:	e7b3      	b.n	8005754 <_malloc_r+0x154>
 80057ec:	2a14      	cmp	r2, #20
 80057ee:	d801      	bhi.n	80057f4 <_malloc_r+0x1f4>
 80057f0:	325b      	adds	r2, #91	; 0x5b
 80057f2:	e7e7      	b.n	80057c4 <_malloc_r+0x1c4>
 80057f4:	2a54      	cmp	r2, #84	; 0x54
 80057f6:	d802      	bhi.n	80057fe <_malloc_r+0x1fe>
 80057f8:	0b02      	lsrs	r2, r0, #12
 80057fa:	326e      	adds	r2, #110	; 0x6e
 80057fc:	e7e2      	b.n	80057c4 <_malloc_r+0x1c4>
 80057fe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005802:	d802      	bhi.n	800580a <_malloc_r+0x20a>
 8005804:	0bc2      	lsrs	r2, r0, #15
 8005806:	3277      	adds	r2, #119	; 0x77
 8005808:	e7dc      	b.n	80057c4 <_malloc_r+0x1c4>
 800580a:	f240 5754 	movw	r7, #1364	; 0x554
 800580e:	42ba      	cmp	r2, r7
 8005810:	bf9a      	itte	ls
 8005812:	0c82      	lsrls	r2, r0, #18
 8005814:	327c      	addls	r2, #124	; 0x7c
 8005816:	227e      	movhi	r2, #126	; 0x7e
 8005818:	e7d4      	b.n	80057c4 <_malloc_r+0x1c4>
 800581a:	68bf      	ldr	r7, [r7, #8]
 800581c:	45be      	cmp	lr, r7
 800581e:	d004      	beq.n	800582a <_malloc_r+0x22a>
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	f022 0203 	bic.w	r2, r2, #3
 8005826:	4290      	cmp	r0, r2
 8005828:	d3f7      	bcc.n	800581a <_malloc_r+0x21a>
 800582a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800582e:	e7d7      	b.n	80057e0 <_malloc_r+0x1e0>
 8005830:	6870      	ldr	r0, [r6, #4]
 8005832:	68f7      	ldr	r7, [r6, #12]
 8005834:	f020 0003 	bic.w	r0, r0, #3
 8005838:	eba0 0a04 	sub.w	sl, r0, r4
 800583c:	f1ba 0f0f 	cmp.w	sl, #15
 8005840:	dd10      	ble.n	8005864 <_malloc_r+0x264>
 8005842:	68b2      	ldr	r2, [r6, #8]
 8005844:	1933      	adds	r3, r6, r4
 8005846:	f044 0401 	orr.w	r4, r4, #1
 800584a:	6074      	str	r4, [r6, #4]
 800584c:	60d7      	str	r7, [r2, #12]
 800584e:	60ba      	str	r2, [r7, #8]
 8005850:	f04a 0201 	orr.w	r2, sl, #1
 8005854:	616b      	str	r3, [r5, #20]
 8005856:	612b      	str	r3, [r5, #16]
 8005858:	60d9      	str	r1, [r3, #12]
 800585a:	6099      	str	r1, [r3, #8]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	f846 a000 	str.w	sl, [r6, r0]
 8005862:	e6ff      	b.n	8005664 <_malloc_r+0x64>
 8005864:	f1ba 0f00 	cmp.w	sl, #0
 8005868:	db0f      	blt.n	800588a <_malloc_r+0x28a>
 800586a:	4430      	add	r0, r6
 800586c:	6843      	ldr	r3, [r0, #4]
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6043      	str	r3, [r0, #4]
 8005874:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005878:	4648      	mov	r0, r9
 800587a:	60df      	str	r7, [r3, #12]
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	f000 f8d3 	bl	8005a28 <__malloc_unlock>
 8005882:	4630      	mov	r0, r6
 8005884:	b003      	add	sp, #12
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	463e      	mov	r6, r7
 800588c:	e77a      	b.n	8005784 <_malloc_r+0x184>
 800588e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005892:	4584      	cmp	ip, r0
 8005894:	f103 33ff 	add.w	r3, r3, #4294967295
 8005898:	f43f af7d 	beq.w	8005796 <_malloc_r+0x196>
 800589c:	e781      	b.n	80057a2 <_malloc_r+0x1a2>
 800589e:	bf00      	nop
 80058a0:	20000100 	.word	0x20000100
 80058a4:	20000108 	.word	0x20000108
 80058a8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80058ac:	f8db 6004 	ldr.w	r6, [fp, #4]
 80058b0:	f026 0603 	bic.w	r6, r6, #3
 80058b4:	42b4      	cmp	r4, r6
 80058b6:	d803      	bhi.n	80058c0 <_malloc_r+0x2c0>
 80058b8:	1b33      	subs	r3, r6, r4
 80058ba:	2b0f      	cmp	r3, #15
 80058bc:	f300 8096 	bgt.w	80059ec <_malloc_r+0x3ec>
 80058c0:	4a4f      	ldr	r2, [pc, #316]	; (8005a00 <_malloc_r+0x400>)
 80058c2:	6817      	ldr	r7, [r2, #0]
 80058c4:	4a4f      	ldr	r2, [pc, #316]	; (8005a04 <_malloc_r+0x404>)
 80058c6:	6811      	ldr	r1, [r2, #0]
 80058c8:	3710      	adds	r7, #16
 80058ca:	3101      	adds	r1, #1
 80058cc:	eb0b 0306 	add.w	r3, fp, r6
 80058d0:	4427      	add	r7, r4
 80058d2:	d005      	beq.n	80058e0 <_malloc_r+0x2e0>
 80058d4:	494c      	ldr	r1, [pc, #304]	; (8005a08 <_malloc_r+0x408>)
 80058d6:	3901      	subs	r1, #1
 80058d8:	440f      	add	r7, r1
 80058da:	3101      	adds	r1, #1
 80058dc:	4249      	negs	r1, r1
 80058de:	400f      	ands	r7, r1
 80058e0:	4639      	mov	r1, r7
 80058e2:	4648      	mov	r0, r9
 80058e4:	9201      	str	r2, [sp, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	f000 f8a4 	bl	8005a34 <_sbrk_r>
 80058ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80058f0:	4680      	mov	r8, r0
 80058f2:	d056      	beq.n	80059a2 <_malloc_r+0x3a2>
 80058f4:	9b00      	ldr	r3, [sp, #0]
 80058f6:	9a01      	ldr	r2, [sp, #4]
 80058f8:	4283      	cmp	r3, r0
 80058fa:	d901      	bls.n	8005900 <_malloc_r+0x300>
 80058fc:	45ab      	cmp	fp, r5
 80058fe:	d150      	bne.n	80059a2 <_malloc_r+0x3a2>
 8005900:	4842      	ldr	r0, [pc, #264]	; (8005a0c <_malloc_r+0x40c>)
 8005902:	6801      	ldr	r1, [r0, #0]
 8005904:	4543      	cmp	r3, r8
 8005906:	eb07 0e01 	add.w	lr, r7, r1
 800590a:	f8c0 e000 	str.w	lr, [r0]
 800590e:	4940      	ldr	r1, [pc, #256]	; (8005a10 <_malloc_r+0x410>)
 8005910:	4682      	mov	sl, r0
 8005912:	d113      	bne.n	800593c <_malloc_r+0x33c>
 8005914:	420b      	tst	r3, r1
 8005916:	d111      	bne.n	800593c <_malloc_r+0x33c>
 8005918:	68ab      	ldr	r3, [r5, #8]
 800591a:	443e      	add	r6, r7
 800591c:	f046 0601 	orr.w	r6, r6, #1
 8005920:	605e      	str	r6, [r3, #4]
 8005922:	4a3c      	ldr	r2, [pc, #240]	; (8005a14 <_malloc_r+0x414>)
 8005924:	f8da 3000 	ldr.w	r3, [sl]
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	428b      	cmp	r3, r1
 800592c:	bf88      	it	hi
 800592e:	6013      	strhi	r3, [r2, #0]
 8005930:	4a39      	ldr	r2, [pc, #228]	; (8005a18 <_malloc_r+0x418>)
 8005932:	6811      	ldr	r1, [r2, #0]
 8005934:	428b      	cmp	r3, r1
 8005936:	bf88      	it	hi
 8005938:	6013      	strhi	r3, [r2, #0]
 800593a:	e032      	b.n	80059a2 <_malloc_r+0x3a2>
 800593c:	6810      	ldr	r0, [r2, #0]
 800593e:	3001      	adds	r0, #1
 8005940:	bf1b      	ittet	ne
 8005942:	eba8 0303 	subne.w	r3, r8, r3
 8005946:	4473      	addne	r3, lr
 8005948:	f8c2 8000 	streq.w	r8, [r2]
 800594c:	f8ca 3000 	strne.w	r3, [sl]
 8005950:	f018 0007 	ands.w	r0, r8, #7
 8005954:	bf1c      	itt	ne
 8005956:	f1c0 0008 	rsbne	r0, r0, #8
 800595a:	4480      	addne	r8, r0
 800595c:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <_malloc_r+0x408>)
 800595e:	4447      	add	r7, r8
 8005960:	4418      	add	r0, r3
 8005962:	400f      	ands	r7, r1
 8005964:	1bc7      	subs	r7, r0, r7
 8005966:	4639      	mov	r1, r7
 8005968:	4648      	mov	r0, r9
 800596a:	f000 f863 	bl	8005a34 <_sbrk_r>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	bf08      	it	eq
 8005972:	4640      	moveq	r0, r8
 8005974:	f8da 3000 	ldr.w	r3, [sl]
 8005978:	f8c5 8008 	str.w	r8, [r5, #8]
 800597c:	bf08      	it	eq
 800597e:	2700      	moveq	r7, #0
 8005980:	eba0 0008 	sub.w	r0, r0, r8
 8005984:	443b      	add	r3, r7
 8005986:	4407      	add	r7, r0
 8005988:	f047 0701 	orr.w	r7, r7, #1
 800598c:	45ab      	cmp	fp, r5
 800598e:	f8ca 3000 	str.w	r3, [sl]
 8005992:	f8c8 7004 	str.w	r7, [r8, #4]
 8005996:	d0c4      	beq.n	8005922 <_malloc_r+0x322>
 8005998:	2e0f      	cmp	r6, #15
 800599a:	d810      	bhi.n	80059be <_malloc_r+0x3be>
 800599c:	2301      	movs	r3, #1
 800599e:	f8c8 3004 	str.w	r3, [r8, #4]
 80059a2:	68ab      	ldr	r3, [r5, #8]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	f022 0203 	bic.w	r2, r2, #3
 80059aa:	4294      	cmp	r4, r2
 80059ac:	eba2 0304 	sub.w	r3, r2, r4
 80059b0:	d801      	bhi.n	80059b6 <_malloc_r+0x3b6>
 80059b2:	2b0f      	cmp	r3, #15
 80059b4:	dc1a      	bgt.n	80059ec <_malloc_r+0x3ec>
 80059b6:	4648      	mov	r0, r9
 80059b8:	f000 f836 	bl	8005a28 <__malloc_unlock>
 80059bc:	e62d      	b.n	800561a <_malloc_r+0x1a>
 80059be:	f8db 3004 	ldr.w	r3, [fp, #4]
 80059c2:	3e0c      	subs	r6, #12
 80059c4:	f026 0607 	bic.w	r6, r6, #7
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	4333      	orrs	r3, r6
 80059ce:	f8cb 3004 	str.w	r3, [fp, #4]
 80059d2:	eb0b 0306 	add.w	r3, fp, r6
 80059d6:	2205      	movs	r2, #5
 80059d8:	2e0f      	cmp	r6, #15
 80059da:	605a      	str	r2, [r3, #4]
 80059dc:	609a      	str	r2, [r3, #8]
 80059de:	d9a0      	bls.n	8005922 <_malloc_r+0x322>
 80059e0:	f10b 0108 	add.w	r1, fp, #8
 80059e4:	4648      	mov	r0, r9
 80059e6:	f7ff fcf9 	bl	80053dc <_free_r>
 80059ea:	e79a      	b.n	8005922 <_malloc_r+0x322>
 80059ec:	68ae      	ldr	r6, [r5, #8]
 80059ee:	f044 0201 	orr.w	r2, r4, #1
 80059f2:	4434      	add	r4, r6
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	6072      	str	r2, [r6, #4]
 80059fa:	60ac      	str	r4, [r5, #8]
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	e631      	b.n	8005664 <_malloc_r+0x64>
 8005a00:	20000560 	.word	0x20000560
 8005a04:	20000508 	.word	0x20000508
 8005a08:	00000080 	.word	0x00000080
 8005a0c:	20000530 	.word	0x20000530
 8005a10:	0000007f 	.word	0x0000007f
 8005a14:	20000558 	.word	0x20000558
 8005a18:	2000055c 	.word	0x2000055c

08005a1c <__malloc_lock>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	; (8005a24 <__malloc_lock+0x8>)
 8005a1e:	f7ff bdb9 	b.w	8005594 <__retarget_lock_acquire_recursive>
 8005a22:	bf00      	nop
 8005a24:	20000634 	.word	0x20000634

08005a28 <__malloc_unlock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__malloc_unlock+0x8>)
 8005a2a:	f7ff bdb4 	b.w	8005596 <__retarget_lock_release_recursive>
 8005a2e:	bf00      	nop
 8005a30:	20000634 	.word	0x20000634

08005a34 <_sbrk_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4c06      	ldr	r4, [pc, #24]	; (8005a50 <_sbrk_r+0x1c>)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	6023      	str	r3, [r4, #0]
 8005a40:	f7fe ff52 	bl	80048e8 <_sbrk>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_sbrk_r+0x1a>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_sbrk_r+0x1a>
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	2000063c 	.word	0x2000063c

08005a54 <__sread>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	460c      	mov	r4, r1
 8005a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5c:	f000 f8f0 	bl	8005c40 <_read_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	bfab      	itete	ge
 8005a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a66:	89a3      	ldrhlt	r3, [r4, #12]
 8005a68:	181b      	addge	r3, r3, r0
 8005a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a6e:	bfac      	ite	ge
 8005a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a72:	81a3      	strhlt	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__swrite>:
 8005a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	898b      	ldrh	r3, [r1, #12]
 8005a7e:	05db      	lsls	r3, r3, #23
 8005a80:	4605      	mov	r5, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4616      	mov	r6, r2
 8005a86:	d505      	bpl.n	8005a94 <__swrite+0x1e>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	f000 f8c4 	bl	8005c1c <_lseek_r>
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	4632      	mov	r2, r6
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	f000 b817 	b.w	8005adc <_write_r>

08005aae <__sseek>:
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab6:	f000 f8b1 	bl	8005c1c <_lseek_r>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	bf15      	itete	ne
 8005ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aca:	81a3      	strheq	r3, [r4, #12]
 8005acc:	bf18      	it	ne
 8005ace:	81a3      	strhne	r3, [r4, #12]
 8005ad0:	bd10      	pop	{r4, pc}

08005ad2 <__sclose>:
 8005ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad6:	f000 b813 	b.w	8005b00 <_close_r>
	...

08005adc <_write_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4c07      	ldr	r4, [pc, #28]	; (8005afc <_write_r+0x20>)
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	6022      	str	r2, [r4, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fe fedf 	bl	80048ae <_write>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_write_r+0x1e>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_write_r+0x1e>
 8005af8:	602b      	str	r3, [r5, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	2000063c 	.word	0x2000063c

08005b00 <_close_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4c06      	ldr	r4, [pc, #24]	; (8005b1c <_close_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4605      	mov	r5, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	f7fe ff18 	bl	8004940 <_close>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_close_r+0x1a>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_close_r+0x1a>
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	2000063c 	.word	0x2000063c

08005b20 <_fclose_r>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4605      	mov	r5, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	b911      	cbnz	r1, 8005b2e <_fclose_r+0xe>
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	bd70      	pop	{r4, r5, r6, pc}
 8005b2e:	b118      	cbz	r0, 8005b38 <_fclose_r+0x18>
 8005b30:	6983      	ldr	r3, [r0, #24]
 8005b32:	b90b      	cbnz	r3, 8005b38 <_fclose_r+0x18>
 8005b34:	f7ff fb7c 	bl	8005230 <__sinit>
 8005b38:	4b2c      	ldr	r3, [pc, #176]	; (8005bec <_fclose_r+0xcc>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d114      	bne.n	8005b68 <_fclose_r+0x48>
 8005b3e:	686c      	ldr	r4, [r5, #4]
 8005b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b42:	07d8      	lsls	r0, r3, #31
 8005b44:	d405      	bmi.n	8005b52 <_fclose_r+0x32>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	0599      	lsls	r1, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <_fclose_r+0x32>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b4e:	f7ff fd21 	bl	8005594 <__retarget_lock_acquire_recursive>
 8005b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b56:	b98b      	cbnz	r3, 8005b7c <_fclose_r+0x5c>
 8005b58:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8005b5a:	f016 0601 	ands.w	r6, r6, #1
 8005b5e:	d1e3      	bne.n	8005b28 <_fclose_r+0x8>
 8005b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b62:	f7ff fd18 	bl	8005596 <__retarget_lock_release_recursive>
 8005b66:	e7e0      	b.n	8005b2a <_fclose_r+0xa>
 8005b68:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <_fclose_r+0xd0>)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d101      	bne.n	8005b72 <_fclose_r+0x52>
 8005b6e:	68ac      	ldr	r4, [r5, #8]
 8005b70:	e7e6      	b.n	8005b40 <_fclose_r+0x20>
 8005b72:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <_fclose_r+0xd4>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	bf08      	it	eq
 8005b78:	68ec      	ldreq	r4, [r5, #12]
 8005b7a:	e7e1      	b.n	8005b40 <_fclose_r+0x20>
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f7ff fa30 	bl	8004fe4 <__sflush_r>
 8005b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b86:	4606      	mov	r6, r0
 8005b88:	b133      	cbz	r3, 8005b98 <_fclose_r+0x78>
 8005b8a:	6a21      	ldr	r1, [r4, #32]
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	4798      	blx	r3
 8005b90:	2800      	cmp	r0, #0
 8005b92:	bfb8      	it	lt
 8005b94:	f04f 36ff 	movlt.w	r6, #4294967295
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	061a      	lsls	r2, r3, #24
 8005b9c:	d503      	bpl.n	8005ba6 <_fclose_r+0x86>
 8005b9e:	6921      	ldr	r1, [r4, #16]
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f7ff fc1b 	bl	80053dc <_free_r>
 8005ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba8:	b141      	cbz	r1, 8005bbc <_fclose_r+0x9c>
 8005baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	d002      	beq.n	8005bb8 <_fclose_r+0x98>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f7ff fc12 	bl	80053dc <_free_r>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6363      	str	r3, [r4, #52]	; 0x34
 8005bbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005bbe:	b121      	cbz	r1, 8005bca <_fclose_r+0xaa>
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff fc0b 	bl	80053dc <_free_r>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005bca:	f7ff fb19 	bl	8005200 <__sfp_lock_acquire>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	81a3      	strh	r3, [r4, #12]
 8005bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd4:	07db      	lsls	r3, r3, #31
 8005bd6:	d402      	bmi.n	8005bde <_fclose_r+0xbe>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bda:	f7ff fcdc 	bl	8005596 <__retarget_lock_release_recursive>
 8005bde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be0:	f7ff fcd7 	bl	8005592 <__retarget_lock_close_recursive>
 8005be4:	f7ff fb12 	bl	800520c <__sfp_lock_release>
 8005be8:	e79f      	b.n	8005b2a <_fclose_r+0xa>
 8005bea:	bf00      	nop
 8005bec:	08005fcc 	.word	0x08005fcc
 8005bf0:	08005fec 	.word	0x08005fec
 8005bf4:	08005fac 	.word	0x08005fac

08005bf8 <_fstat_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4c07      	ldr	r4, [pc, #28]	; (8005c18 <_fstat_r+0x20>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4605      	mov	r5, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	f7fe fea7 	bl	8004958 <_fstat>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d102      	bne.n	8005c14 <_fstat_r+0x1c>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	b103      	cbz	r3, 8005c14 <_fstat_r+0x1c>
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	2000063c 	.word	0x2000063c

08005c1c <_lseek_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4c07      	ldr	r4, [pc, #28]	; (8005c3c <_lseek_r+0x20>)
 8005c20:	4605      	mov	r5, r0
 8005c22:	4608      	mov	r0, r1
 8005c24:	4611      	mov	r1, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f7fe fea4 	bl	8004978 <_lseek>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_lseek_r+0x1e>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_lseek_r+0x1e>
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	2000063c 	.word	0x2000063c

08005c40 <_read_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4c07      	ldr	r4, [pc, #28]	; (8005c60 <_read_r+0x20>)
 8005c44:	4605      	mov	r5, r0
 8005c46:	4608      	mov	r0, r1
 8005c48:	4611      	mov	r1, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fe fe10 	bl	8004874 <_read>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_read_r+0x1e>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_read_r+0x1e>
 8005c5c:	602b      	str	r3, [r5, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	2000063c 	.word	0x2000063c

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
