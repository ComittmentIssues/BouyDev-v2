
Download_Buoy_Data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006040  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000514  20000000  0800629c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020514  2**0
                  CONTENTS
  8 .bss          000003e4  20000514  20000514  00020514  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200008f8  200008f8  00020514  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018ec6  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002f62  00000000  00000000  0003940a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001598  00000000  00000000  0003c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001420  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009699  00000000  00000000  0003ed28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000069f2  00000000  00000000  000483c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004edb3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006188  00000000  00000000  0004ee30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000514 	.word	0x20000514
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080061b0 	.word	0x080061b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000518 	.word	0x20000518
 80001c4:	080061b0 	.word	0x080061b0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <HAL_Init+0x3c>)
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_Init+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 f919 	bl	8000736 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000504:	2000      	movs	r0, #0
 8000506:	f002 fff7 	bl	80034f8 <HAL_InitTick>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	e001      	b.n	800051a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000516:	f004 fd13 	bl	8004f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051a:	79fb      	ldrb	r3, [r7, #7]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40022000 	.word	0x40022000

08000528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_IncTick+0x1c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_IncTick+0x20>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4413      	add	r3, r2
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x1c>)
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	2000077c 	.word	0x2000077c
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000077c 	.word	0x2000077c

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d004      	beq.n	8000588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000588:	bf00      	nop
 800058a:	f7ff ffdf 	bl	800054c <HAL_GetTick>
 800058e:	4602      	mov	r2, r0
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3f7      	bcc.n	800058a <HAL_Delay+0x26>
  {
  }
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6053      	str	r3, [r2, #4]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e0042000 	.word	0xe0042000

080005c8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6053      	str	r3, [r2, #4]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e0042000 	.word	0xe0042000

080005e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <NVIC_EnableIRQ+0x30>)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	095b      	lsrs	r3, r3, #5
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	f002 021f 	and.w	r2, r2, #31
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	da0b      	bge.n	80006ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	490d      	ldr	r1, [pc, #52]	; (80006cc <NVIC_SetPriority+0x4c>)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 030f 	and.w	r3, r3, #15
 800069c:	3b04      	subs	r3, #4
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006aa:	e009      	b.n	80006c0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	4908      	ldr	r1, [pc, #32]	; (80006d0 <NVIC_SetPriority+0x50>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	2201      	movs	r2, #1
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	401a      	ands	r2, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071a:	2101      	movs	r1, #1
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	1e59      	subs	r1, r3, #1
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff52 	bl	80005e8 <NVIC_SetPriorityGrouping>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800075e:	f7ff ff67 	bl	8000630 <NVIC_GetPriorityGrouping>
 8000762:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	6978      	ldr	r0, [r7, #20]
 800076a:	f7ff ffb3 	bl	80006d4 <NVIC_EncodePriority>
 800076e:	4602      	mov	r2, r0
 8000770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff82 	bl	8000680 <NVIC_SetPriority>
}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff5a 	bl	800064c <NVIC_EnableIRQ>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d005      	beq.n	80007c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2204      	movs	r2, #4
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	e029      	b.n	8000818 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	f022 020e 	bic.w	r2, r2, #14
 80007d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	f022 0201 	bic.w	r2, r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007ec:	f002 021c 	and.w	r2, r2, #28
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2201      	movs	r2, #1
 80007fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	4798      	blx	r3
    }
  }
  return status;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e17f      	b.n	8000b34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2101      	movs	r1, #1
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	f000 8171 	beq.w	8000b2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d00b      	beq.n	800086c <HAL_GPIO_Init+0x48>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b02      	cmp	r3, #2
 800085a:	d007      	beq.n	800086c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000860:	2b11      	cmp	r3, #17
 8000862:	d003      	beq.n	800086c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b12      	cmp	r3, #18
 800086a:	d130      	bne.n	80008ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2203      	movs	r2, #3
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008a2:	2201      	movs	r2, #1
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	f003 0201 	and.w	r2, r3, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d118      	bne.n	800090c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0x128>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d123      	bne.n	8000994 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	220f      	movs	r2, #15
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	691a      	ldr	r2, [r3, #16]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	08da      	lsrs	r2, r3, #3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3208      	adds	r2, #8
 800098e:	6939      	ldr	r1, [r7, #16]
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0203 	and.w	r2, r3, #3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80ac 	beq.w	8000b2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4a5e      	ldr	r2, [pc, #376]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 80009d8:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 80009da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b5b      	ldr	r3, [pc, #364]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009ee:	4a59      	ldr	r2, [pc, #356]	; (8000b54 <HAL_GPIO_Init+0x330>)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a18:	d025      	beq.n	8000a66 <HAL_GPIO_Init+0x242>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4e      	ldr	r2, [pc, #312]	; (8000b58 <HAL_GPIO_Init+0x334>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d01f      	beq.n	8000a62 <HAL_GPIO_Init+0x23e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4d      	ldr	r2, [pc, #308]	; (8000b5c <HAL_GPIO_Init+0x338>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d019      	beq.n	8000a5e <HAL_GPIO_Init+0x23a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4c      	ldr	r2, [pc, #304]	; (8000b60 <HAL_GPIO_Init+0x33c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0x236>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a4b      	ldr	r2, [pc, #300]	; (8000b64 <HAL_GPIO_Init+0x340>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d00d      	beq.n	8000a56 <HAL_GPIO_Init+0x232>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4a      	ldr	r2, [pc, #296]	; (8000b68 <HAL_GPIO_Init+0x344>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d007      	beq.n	8000a52 <HAL_GPIO_Init+0x22e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a49      	ldr	r2, [pc, #292]	; (8000b6c <HAL_GPIO_Init+0x348>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_GPIO_Init+0x22a>
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	e00c      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a4e:	2307      	movs	r3, #7
 8000a50:	e00a      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a52:	2305      	movs	r3, #5
 8000a54:	e008      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a56:	2304      	movs	r3, #4
 8000a58:	e006      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e004      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e002      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <HAL_GPIO_Init+0x244>
 8000a66:	2300      	movs	r3, #0
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	f002 0203 	and.w	r2, r2, #3
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	4093      	lsls	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a78:	4936      	ldr	r1, [pc, #216]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a86:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aaa:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ad4:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b28:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <HAL_GPIO_Init+0x34c>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ae78 	bne.w	8000834 <HAL_GPIO_Init+0x10>
  }
}
 8000b44:	bf00      	nop
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	48000c00 	.word	0x48000c00
 8000b64:	48001000 	.word	0x48001000
 8000b68:	48001400 	.word	0x48001400
 8000b6c:	48001800 	.word	0x48001800
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ba8:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40007000 	.word	0x40007000

08000be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bee:	d130      	bne.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfc:	d038      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfe:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2232      	movs	r2, #50	; 0x32
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c24:	e002      	b.n	8000c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c38:	d102      	bne.n	8000c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f2      	bne.n	8000c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4c:	d110      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e00f      	b.n	8000c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5e:	d007      	beq.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40007000 	.word	0x40007000
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	431bde83 	.word	0x431bde83

08000c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e3d4      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c9e:	4ba1      	ldr	r3, [pc, #644]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca8:	4b9e      	ldr	r3, [pc, #632]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80e4 	beq.w	8000e88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x4a>
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b0c      	cmp	r3, #12
 8000cca:	f040 808b 	bne.w	8000de4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	f040 8087 	bne.w	8000de4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cd6:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d005      	beq.n	8000cee <HAL_RCC_OscConfig+0x62>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e3ac      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	4b8c      	ldr	r3, [pc, #560]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d004      	beq.n	8000d08 <HAL_RCC_OscConfig+0x7c>
 8000cfe:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d06:	e005      	b.n	8000d14 <HAL_RCC_OscConfig+0x88>
 8000d08:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d923      	bls.n	8000d60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fda5 	bl	800186c <RCC_SetFlashLatencyFromMSIRange>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e38d      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2c:	4a7d      	ldr	r2, [pc, #500]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d2e:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	497a      	ldr	r1, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d3a:	4b7a      	ldr	r3, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d4a:	4976      	ldr	r1, [pc, #472]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d4c:	4b75      	ldr	r3, [pc, #468]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
 8000d5e:	e025      	b.n	8000dac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d60:	4a70      	ldr	r2, [pc, #448]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d62:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	496d      	ldr	r1, [pc, #436]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d6e:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7e:	4969      	ldr	r1, [pc, #420]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d80:	4b68      	ldr	r3, [pc, #416]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fd65 	bl	800186c <RCC_SetFlashLatencyFromMSIRange>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e34d      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dac:	f000 fc6a 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8000db0:	4601      	mov	r1, r0
 8000db2:	4b5c      	ldr	r3, [pc, #368]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	4a5a      	ldr	r2, [pc, #360]	; (8000f28 <HAL_RCC_OscConfig+0x29c>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc8:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <HAL_RCC_OscConfig+0x2a0>)
 8000dca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dcc:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fb91 	bl	80034f8 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d052      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	e331      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d032      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dec:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000dee:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fba8 	bl	800054c <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e00:	f7ff fba4 	bl	800054c <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e31a      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1e:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	493e      	ldr	r1, [pc, #248]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3c:	4939      	ldr	r1, [pc, #228]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e3e:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	e01a      	b.n	8000e88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e52:	4a34      	ldr	r2, [pc, #208]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fb75 	bl	800054c <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e66:	f7ff fb71 	bl	800054c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e2e7      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1da>
 8000e84:	e000      	b.n	8000e88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d074      	beq.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x21a>
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b0c      	cmp	r3, #12
 8000e9e:	d10e      	bne.n	8000ebe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d10b      	bne.n	8000ebe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d064      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d160      	bne.n	8000f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e2c4      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x24a>
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e01d      	b.n	8000f12 <HAL_RCC_OscConfig+0x286>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ede:	d10c      	bne.n	8000efa <HAL_RCC_OscConfig+0x26e>
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e00b      	b.n	8000f12 <HAL_RCC_OscConfig+0x286>
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d01c      	beq.n	8000f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fb17 	bl	800054c <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f20:	e011      	b.n	8000f46 <HAL_RCC_OscConfig+0x2ba>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	080061e0 	.word	0x080061e0
 8000f2c:	2000000c 	.word	0x2000000c
 8000f30:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fb0a 	bl	800054c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e280      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f46:	4baf      	ldr	r3, [pc, #700]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2a8>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f54:	f7ff fafa 	bl	800054c <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff faf6 	bl	800054c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e26c      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6e:	4ba5      	ldr	r3, [pc, #660]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2d0>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d060      	beq.n	800104c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d005      	beq.n	8000f9c <HAL_RCC_OscConfig+0x310>
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d119      	bne.n	8000fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d116      	bne.n	8000fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9c:	4b99      	ldr	r3, [pc, #612]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x328>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e249      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4993      	ldr	r1, [pc, #588]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fb6:	4b93      	ldr	r3, [pc, #588]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	061b      	lsls	r3, r3, #24
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc8:	e040      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d023      	beq.n	800101a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd2:	4a8c      	ldr	r2, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fde:	f7ff fab5 	bl	800054c <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fab1 	bl	800054c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e227      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001004:	497f      	ldr	r1, [pc, #508]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001006:	4b7f      	ldr	r3, [pc, #508]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	061b      	lsls	r3, r3, #24
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e018      	b.n	800104c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101a:	4a7a      	ldr	r2, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800101c:	4b79      	ldr	r3, [pc, #484]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001026:	f7ff fa91 	bl	800054c <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fa8d 	bl	800054c <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e203      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001040:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03c      	beq.n	80010d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d01c      	beq.n	800109a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001060:	4a68      	ldr	r2, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001062:	4b68      	ldr	r3, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001070:	f7ff fa6c 	bl	800054c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fa68 	bl	800054c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1de      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800108a:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800108c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ef      	beq.n	8001078 <HAL_RCC_OscConfig+0x3ec>
 8001098:	e01b      	b.n	80010d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109a:	4a5a      	ldr	r2, [pc, #360]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010aa:	f7ff fa4f 	bl	800054c <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa4b 	bl	800054c <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1c1      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c4:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1ef      	bne.n	80010b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a6 	beq.w	800122c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e4:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10d      	bne.n	800110c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	4a44      	ldr	r2, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001108:	2301      	movs	r3, #1
 800110a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d118      	bne.n	800114a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001118:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001124:	f7ff fa12 	bl	800054c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112c:	f7ff fa0e 	bl	800054c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e184      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_RCC_OscConfig+0x57c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d8>
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001162:	e024      	b.n	80011ae <HAL_RCC_OscConfig+0x522>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d110      	bne.n	800118e <HAL_RCC_OscConfig+0x502>
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118c:	e00f      	b.n	80011ae <HAL_RCC_OscConfig+0x522>
 800118e:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 8001192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a6:	f023 0304 	bic.w	r3, r3, #4
 80011aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d016      	beq.n	80011e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff f9c9 	bl	800054c <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff f9c5 	bl	800054c <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e139      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x578>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0ed      	beq.n	80011be <HAL_RCC_OscConfig+0x532>
 80011e2:	e01a      	b.n	800121a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff f9b2 	bl	800054c <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ea:	e00f      	b.n	800120c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff f9ae 	bl	800054c <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d906      	bls.n	800120c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e122      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800120c:	4b90      	ldr	r3, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800120e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1e8      	bne.n	80011ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001220:	4a8b      	ldr	r2, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001222:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8108 	beq.w	8001446 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	2b02      	cmp	r3, #2
 800123c:	f040 80d0 	bne.w	80013e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001240:	4b83      	ldr	r3, [pc, #524]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d130      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	3b01      	subs	r3, #1
 8001260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d127      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001270:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001272:	429a      	cmp	r2, r3
 8001274:	d11f      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001280:	2a07      	cmp	r2, #7
 8001282:	bf14      	ite	ne
 8001284:	2201      	movne	r2, #1
 8001286:	2200      	moveq	r2, #0
 8001288:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	3b01      	subs	r3, #1
 800129c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	085b      	lsrs	r3, r3, #1
 80012ae:	3b01      	subs	r3, #1
 80012b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d06e      	beq.n	8001394 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d069      	beq.n	8001390 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b7      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012d8:	4a5d      	ldr	r2, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012e4:	f7ff f932 	bl	800054c <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ec:	f7ff f92e 	bl	800054c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0a4      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fe:	4b54      	ldr	r3, [pc, #336]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130a:	4851      	ldr	r0, [pc, #324]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	4b50      	ldr	r3, [pc, #320]	; (8001454 <HAL_RCC_OscConfig+0x7c8>)
 8001312:	4013      	ands	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800131c:	3a01      	subs	r2, #1
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	4311      	orrs	r1, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	4311      	orrs	r1, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800132e:	0852      	lsrs	r2, r2, #1
 8001330:	3a01      	subs	r2, #1
 8001332:	0552      	lsls	r2, r2, #21
 8001334:	4311      	orrs	r1, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800133a:	0852      	lsrs	r2, r2, #1
 800133c:	3a01      	subs	r2, #1
 800133e:	0652      	lsls	r2, r2, #25
 8001340:	4311      	orrs	r1, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001346:	0912      	lsrs	r2, r2, #4
 8001348:	0452      	lsls	r2, r2, #17
 800134a:	430a      	orrs	r2, r1
 800134c:	4313      	orrs	r3, r2
 800134e:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001350:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800135c:	4a3c      	ldr	r2, [pc, #240]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001368:	f7ff f8f0 	bl	800054c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff f8ec 	bl	800054c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e062      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138e:	e05a      	b.n	8001446 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e059      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d152      	bne.n	8001446 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013a0:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013b8:	f7ff f8c8 	bl	800054c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff f8c4 	bl	800054c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e03a      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x734>
 80013de:	e032      	b.n	8001446 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d02d      	beq.n	8001442 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e6:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f023 0303 	bic.w	r3, r3, #3
 8001408:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001418:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff f897 	bl	800054c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff f893 	bl	800054c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e009      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_RCC_OscConfig+0x7c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x796>
 8001440:	e001      	b.n	8001446 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000
 8001454:	f99d808c 	.word	0xf99d808c

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0c8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0207 	and.w	r2, r3, #7
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d210      	bcs.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4963      	ldr	r1, [pc, #396]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800147c:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 0207 	bic.w	r2, r3, #7
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0207 	and.w	r2, r3, #7
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b0      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d04c      	beq.n	8001542 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b0:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d121      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e09e      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d115      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e092      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e086      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e07e      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001500:	4942      	ldr	r1, [pc, #264]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001502:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001512:	f7ff f81b 	bl	800054c <HAL_GetTick>
 8001516:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001518:	e00a      	b.n	8001530 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151a:	f7ff f817 	bl	800054c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e066      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 020c 	and.w	r2, r3, #12
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	429a      	cmp	r2, r3
 8001540:	d1eb      	bne.n	800151a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154e:	492f      	ldr	r1, [pc, #188]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0207 	and.w	r2, r3, #7
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4926      	ldr	r1, [pc, #152]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 0207 	bic.w	r2, r3, #7
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_ClockConfig+0x1b0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0207 	and.w	r2, r3, #7
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e036      	b.n	80015fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	491b      	ldr	r1, [pc, #108]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ba:	4914      	ldr	r1, [pc, #80]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ce:	f000 f859 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 80015d2:	4601      	mov	r1, r0
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_RCC_ClockConfig+0x1b4>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	fa21 f303 	lsr.w	r3, r1, r3
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 ff80 	bl	80034f8 <HAL_InitTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80015fc:	7afb      	ldrb	r3, [r7, #11]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	080061e0 	.word	0x080061e0
 8001614:	2000000c 	.word	0x2000000c
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8001628:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_RCC_MCOConfig+0x64>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_RCC_MCOConfig+0x64>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_RCC_MCOConfig+0x64>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f7ff f8e0 	bl	8000824 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001664:	4806      	ldr	r0, [pc, #24]	; (8001680 <HAL_RCC_MCOConfig+0x64>)
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RCC_MCOConfig+0x64>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	430b      	orrs	r3, r1
 8001674:	4313      	orrs	r3, r2
 8001676:	6083      	str	r3, [r0, #8]
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001692:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x34>
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d121      	bne.n	80016f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d11e      	bne.n	80016f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e005      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016e0:	4a2a      	ldr	r2, [pc, #168]	; (800178c <HAL_RCC_GetSysClockFreq+0x108>)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10d      	bne.n	800170c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	e004      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b08      	cmp	r3, #8
 8001706:	d101      	bne.n	800170c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_RCC_GetSysClockFreq+0x110>)
 800170a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b0c      	cmp	r3, #12
 8001710:	d133      	bne.n	800177a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0xa4>
 8001722:	2b03      	cmp	r3, #3
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0xaa>
 8001726:	e005      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_GetSysClockFreq+0x10c>)
 800172a:	617b      	str	r3, [r7, #20]
      break;
 800172c:	e005      	b.n	800173a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_GetSysClockFreq+0x110>)
 8001730:	617b      	str	r3, [r7, #20]
      break;
 8001732:	e002      	b.n	800173a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	617b      	str	r3, [r7, #20]
      break;
 8001738:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	3301      	adds	r3, #1
 8001746:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_GetSysClockFreq+0x104>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0e5b      	lsrs	r3, r3, #25
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	3301      	adds	r3, #1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800177a:	69bb      	ldr	r3, [r7, #24]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3724      	adds	r7, #36	; 0x24
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40021000 	.word	0x40021000
 800178c:	080061f8 	.word	0x080061f8
 8001790:	00f42400 	.word	0x00f42400
 8001794:	007a1200 	.word	0x007a1200

08001798 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_RCC_GetHCLKFreq+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80017b4:	f7ff fff0 	bl	8001798 <HAL_RCC_GetHCLKFreq>
 80017b8:	4601      	mov	r1, r0
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017c6:	5cd3      	ldrb	r3, [r2, r3]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	080061f0 	.word	0x080061f0

080017dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017e0:	f7ff ffda 	bl	8001798 <HAL_RCC_GetHCLKFreq>
 80017e4:	4601      	mov	r1, r0
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	0adb      	lsrs	r3, r3, #11
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	080061f0 	.word	0x080061f0

08001808 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	220f      	movs	r2, #15
 8001816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_GetClockConfig+0x5c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_RCC_GetClockConfig+0x5c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_RCC_GetClockConfig+0x5c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_GetClockConfig+0x5c>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <HAL_RCC_GetClockConfig+0x60>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0207 	and.w	r2, r3, #7
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	601a      	str	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40022000 	.word	0x40022000

0800186c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001884:	f7ff f99e 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 8001888:	6178      	str	r0, [r7, #20]
 800188a:	e014      	b.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018a4:	f7ff f98e 	bl	8000bc4 <HAL_PWREx_GetVoltageRange>
 80018a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018bc:	d10b      	bne.n	80018d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b80      	cmp	r3, #128	; 0x80
 80018c2:	d919      	bls.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2ba0      	cmp	r3, #160	; 0xa0
 80018c8:	d902      	bls.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018ca:	2302      	movs	r3, #2
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e013      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018d0:	2301      	movs	r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	e010      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b80      	cmp	r3, #128	; 0x80
 80018da:	d902      	bls.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018dc:	2303      	movs	r3, #3
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	e00a      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b80      	cmp	r3, #128	; 0x80
 80018e6:	d102      	bne.n	80018ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e004      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b70      	cmp	r3, #112	; 0x70
 80018f2:	d101      	bne.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018f4:	2301      	movs	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018f8:	490b      	ldr	r1, [pc, #44]	; (8001928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0207 	and.w	r2, r3, #7
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	40022000 	.word	0x40022000

0800192c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001934:	2300      	movs	r3, #0
 8001936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001938:	2300      	movs	r3, #0
 800193a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03f      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800194c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001950:	d01c      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001956:	d802      	bhi.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800195c:	e01f      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800195e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001962:	d003      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001968:	d01c      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800196a:	e018      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800196c:	4a85      	ldr	r2, [pc, #532]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001978:	e015      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fac9 	bl	8001f18 <RCCEx_PLLSAI1_Config>
 8001986:	4603      	mov	r3, r0
 8001988:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800198a:	e00c      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3320      	adds	r3, #32
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fbb0 	bl	80020f8 <RCCEx_PLLSAI2_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800199c:	e003      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	74fb      	strb	r3, [r7, #19]
      break;
 80019a2:	e000      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80019a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019a6:	7cfb      	ldrb	r3, [r7, #19]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019ac:	4975      	ldr	r1, [pc, #468]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ae:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019bc:	4313      	orrs	r3, r2
 80019be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80019c2:	e001      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
 80019c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03f      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d01c      	beq.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80019de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e2:	d802      	bhi.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80019e8:	e01f      	b.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80019ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ee:	d003      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80019f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019f4:	d01c      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80019f6:	e018      	b.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019f8:	4a62      	ldr	r2, [pc, #392]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019fa:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a04:	e015      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fa83 	bl	8001f18 <RCCEx_PLLSAI1_Config>
 8001a12:	4603      	mov	r3, r0
 8001a14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a16:	e00c      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3320      	adds	r3, #32
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fb6a 	bl	80020f8 <RCCEx_PLLSAI2_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a28:	e003      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a2e:	e000      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a32:	7cfb      	ldrb	r3, [r7, #19]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a38:	4952      	ldr	r1, [pc, #328]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a4e:	e001      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a0 	beq.w	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001a76:	2300      	movs	r3, #0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	4a41      	ldr	r2, [pc, #260]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6593      	str	r3, [r2, #88]	; 0x58
 8001a88:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a98:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001aa4:	f7fe fd52 	bl	800054c <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aac:	f7fe fd4e 	bl	800054c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d902      	bls.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	74fb      	strb	r3, [r7, #19]
        break;
 8001abe:	e005      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001acc:	7cfb      	ldrb	r3, [r7, #19]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d15c      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001adc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01f      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d019      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001afa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d016      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7fe fd0d 	bl	800054c <HAL_GetTick>
 8001b32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b34:	e00b      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7fe fd09 	bl	800054c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d902      	bls.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	74fb      	strb	r3, [r7, #19]
            break;
 8001b4c:	e006      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ec      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b74:	4313      	orrs	r3, r2
 8001b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001b7a:	e009      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b7c:	7cfb      	ldrb	r3, [r7, #19]
 8001b7e:	74bb      	strb	r3, [r7, #18]
 8001b80:	e006      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b90:	7c7b      	ldrb	r3, [r7, #17]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	4a9e      	ldr	r2, [pc, #632]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b98:	4b9d      	ldr	r3, [pc, #628]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bae:	4998      	ldr	r1, [pc, #608]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb0:	4b97      	ldr	r3, [pc, #604]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb6:	f023 0203 	bic.w	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bd0:	498f      	ldr	r1, [pc, #572]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd2:	4b8f      	ldr	r3, [pc, #572]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd8:	f023 020c 	bic.w	r2, r3, #12
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bf2:	4987      	ldr	r1, [pc, #540]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf4:	4b86      	ldr	r3, [pc, #536]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00a      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c14:	497e      	ldr	r1, [pc, #504]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c16:	4b7e      	ldr	r3, [pc, #504]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c36:	4976      	ldr	r1, [pc, #472]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c38:	4b75      	ldr	r3, [pc, #468]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c58:	496d      	ldr	r1, [pc, #436]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00a      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c7a:	4965      	ldr	r1, [pc, #404]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7c:	4b64      	ldr	r3, [pc, #400]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001c9c:	495c      	ldr	r1, [pc, #368]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cbe:	4954      	ldr	r1, [pc, #336]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ce0:	494b      	ldr	r1, [pc, #300]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce2:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d02:	4943      	ldr	r1, [pc, #268]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d04:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d028      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d24:	493a      	ldr	r1, [pc, #232]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d42:	d106      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d44:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d4e:	60d3      	str	r3, [r2, #12]
 8001d50:	e011      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	2101      	movs	r1, #1
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f8d8 	bl	8001f18 <RCCEx_PLLSAI1_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d028      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d82:	4923      	ldr	r1, [pc, #140]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001da0:	d106      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dac:	60d3      	str	r3, [r2, #12]
 8001dae:	e011      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f8a9 	bl	8001f18 <RCCEx_PLLSAI1_Config>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02b      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001de0:	490b      	ldr	r1, [pc, #44]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e02:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0a:	60d3      	str	r3, [r2, #12]
 8001e0c:	e014      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 f877 	bl	8001f18 <RCCEx_PLLSAI1_Config>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e2e:	7cfb      	ldrb	r3, [r7, #19]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d02f      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e44:	492b      	ldr	r1, [pc, #172]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e62:	d10d      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f854 	bl	8001f18 <RCCEx_PLLSAI1_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d014      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	74bb      	strb	r3, [r7, #18]
 8001e7e:	e011      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3320      	adds	r3, #32
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f931 	bl	80020f8 <RCCEx_PLLSAI2_Config>
 8001e96:	4603      	mov	r3, r0
 8001e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001eb0:	4910      	ldr	r1, [pc, #64]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001eea:	7cbb      	ldrb	r3, [r7, #18]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f26:	4b73      	ldr	r3, [pc, #460]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d018      	beq.n	8001f64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f32:	4b70      	ldr	r3, [pc, #448]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0203 	and.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d10d      	bne.n	8001f5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
       ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f4a:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
       ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d044      	beq.n	8001fe8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e041      	b.n	8001fe8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d00c      	beq.n	8001f86 <RCCEx_PLLSAI1_Config+0x6e>
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d013      	beq.n	8001f98 <RCCEx_PLLSAI1_Config+0x80>
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d120      	bne.n	8001fb6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f74:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11d      	bne.n	8001fbc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e01a      	b.n	8001fbc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f96:	e013      	b.n	8001fc0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f98:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10f      	bne.n	8001fc4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001fb4:	e006      	b.n	8001fc4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001fba:	e004      	b.n	8001fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fcc:	4849      	ldr	r0, [pc, #292]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fce:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d17d      	bne.n	80020ea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001fee:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffa:	f7fe faa7 	bl	800054c <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002000:	e009      	b.n	8002016 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002002:	f7fe faa3 	bl	800054c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	73fb      	strb	r3, [r7, #15]
        break;
 8002014:	e005      	b.n	8002022 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ef      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d160      	bne.n	80020ea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d111      	bne.n	8002052 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800202e:	4831      	ldr	r0, [pc, #196]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6892      	ldr	r2, [r2, #8]
 8002040:	0211      	lsls	r1, r2, #8
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	0912      	lsrs	r2, r2, #4
 8002048:	0452      	lsls	r2, r2, #17
 800204a:	430a      	orrs	r2, r1
 800204c:	4313      	orrs	r3, r2
 800204e:	6103      	str	r3, [r0, #16]
 8002050:	e027      	b.n	80020a2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d112      	bne.n	800207e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002058:	4826      	ldr	r0, [pc, #152]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002062:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6892      	ldr	r2, [r2, #8]
 800206a:	0211      	lsls	r1, r2, #8
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6912      	ldr	r2, [r2, #16]
 8002070:	0852      	lsrs	r2, r2, #1
 8002072:	3a01      	subs	r2, #1
 8002074:	0552      	lsls	r2, r2, #21
 8002076:	430a      	orrs	r2, r1
 8002078:	4313      	orrs	r3, r2
 800207a:	6103      	str	r3, [r0, #16]
 800207c:	e011      	b.n	80020a2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800207e:	481d      	ldr	r0, [pc, #116]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6892      	ldr	r2, [r2, #8]
 8002090:	0211      	lsls	r1, r2, #8
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6952      	ldr	r2, [r2, #20]
 8002096:	0852      	lsrs	r2, r2, #1
 8002098:	3a01      	subs	r2, #1
 800209a:	0652      	lsls	r2, r2, #25
 800209c:	430a      	orrs	r2, r1
 800209e:	4313      	orrs	r3, r2
 80020a0:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7fe fa4d 	bl	800054c <HAL_GetTick>
 80020b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020b4:	e009      	b.n	80020ca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020b6:	f7fe fa49 	bl	800054c <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d902      	bls.n	80020ca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	73fb      	strb	r3, [r7, #15]
          break;
 80020c8:	e005      	b.n	80020d6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ef      	beq.n	80020b6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80020dc:	4905      	ldr	r1, [pc, #20]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000

080020f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002106:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d018      	beq.n	8002144 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d10d      	bne.n	800213e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
       ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
       ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d044      	beq.n	80021c8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e041      	b.n	80021c8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d00c      	beq.n	8002166 <RCCEx_PLLSAI2_Config+0x6e>
 800214c:	2b03      	cmp	r3, #3
 800214e:	d013      	beq.n	8002178 <RCCEx_PLLSAI2_Config+0x80>
 8002150:	2b01      	cmp	r3, #1
 8002152:	d120      	bne.n	8002196 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002154:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11d      	bne.n	800219c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002164:	e01a      	b.n	800219c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002166:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002176:	e013      	b.n	80021a0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002178:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002194:	e006      	b.n	80021a4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      break;
 800219a:	e004      	b.n	80021a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800219c:	bf00      	nop
 800219e:	e002      	b.n	80021a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021ac:	483e      	ldr	r0, [pc, #248]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021ae:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	430b      	orrs	r3, r1
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d167      	bne.n	800229e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80021ce:	4a36      	ldr	r2, [pc, #216]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021da:	f7fe f9b7 	bl	800054c <HAL_GetTick>
 80021de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021e0:	e009      	b.n	80021f6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021e2:	f7fe f9b3 	bl	800054c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d902      	bls.n	80021f6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	73fb      	strb	r3, [r7, #15]
        break;
 80021f4:	e005      	b.n	8002202 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d14a      	bne.n	800229e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d111      	bne.n	8002232 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800220e:	4826      	ldr	r0, [pc, #152]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6892      	ldr	r2, [r2, #8]
 8002220:	0211      	lsls	r1, r2, #8
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	0912      	lsrs	r2, r2, #4
 8002228:	0452      	lsls	r2, r2, #17
 800222a:	430a      	orrs	r2, r1
 800222c:	4313      	orrs	r3, r2
 800222e:	6143      	str	r3, [r0, #20]
 8002230:	e011      	b.n	8002256 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002232:	481d      	ldr	r0, [pc, #116]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800223c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6892      	ldr	r2, [r2, #8]
 8002244:	0211      	lsls	r1, r2, #8
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6912      	ldr	r2, [r2, #16]
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0652      	lsls	r2, r2, #25
 8002250:	430a      	orrs	r2, r1
 8002252:	4313      	orrs	r3, r2
 8002254:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002256:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe f973 	bl	800054c <HAL_GetTick>
 8002266:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002268:	e009      	b.n	800227e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800226a:	f7fe f96f 	bl	800054c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d902      	bls.n	800227e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	73fb      	strb	r3, [r7, #15]
          break;
 800227c:	e005      	b.n	800228a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0ef      	beq.n	800226a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d106      	bne.n	800229e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002290:	4905      	ldr	r1, [pc, #20]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80022b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ba:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	68d2      	ldr	r2, [r2, #12]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80022da:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f80b 	bl	80022f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40010400 	.word	0x40010400

080022f8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07a      	b.n	8002414 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f002 fe6f 	bl	800501c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002354:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800235e:	d902      	bls.n	8002366 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002374:	d007      	beq.n	8002386 <HAL_SPI_Init+0x7a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800237e:	d002      	beq.n	8002386 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002396:	d903      	bls.n	80023a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
 800239e:	e002      	b.n	80023a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6851      	ldr	r1, [r2, #4]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6892      	ldr	r2, [r2, #8]
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6912      	ldr	r2, [r2, #16]
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6952      	ldr	r2, [r2, #20]
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6992      	ldr	r2, [r2, #24]
 80023c4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	69d2      	ldr	r2, [r2, #28]
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6a12      	ldr	r2, [r2, #32]
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6992      	ldr	r2, [r2, #24]
 80023e6:	0c12      	lsrs	r2, r2, #16
 80023e8:	f002 0104 	and.w	r1, r2, #4
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68d2      	ldr	r2, [r2, #12]
 80023fc:	4311      	orrs	r1, r2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_SPI_Transmit+0x22>
 800243a:	2302      	movs	r3, #2
 800243c:	e14e      	b.n	80026dc <HAL_SPI_Transmit+0x2c0>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002446:	f7fe f881 	bl	800054c <HAL_GetTick>
 800244a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800245c:	2302      	movs	r3, #2
 800245e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002460:	e133      	b.n	80026ca <HAL_SPI_Transmit+0x2ae>
  }

  if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0x52>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002472:	e12a      	b.n	80026ca <HAL_SPI_Transmit+0x2ae>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024be:	d107      	bne.n	80024d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f6:	d94b      	bls.n	8002590 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_Transmit+0xea>
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d13e      	bne.n	8002584 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800252a:	e02b      	b.n	8002584 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d112      	bne.n	8002560 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002542:	8812      	ldrh	r2, [r2, #0]
 8002544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	1c9a      	adds	r2, r3, #2
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800255e:	e011      	b.n	8002584 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002560:	f7fd fff4 	bl	800054c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad2      	subs	r2, r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d303      	bcc.n	8002578 <HAL_SPI_Transmit+0x15c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d102      	bne.n	800257e <HAL_SPI_Transmit+0x162>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002582:	e0a2      	b.n	80026ca <HAL_SPI_Transmit+0x2ae>
    while (hspi->TxXferCount > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ce      	bne.n	800252c <HAL_SPI_Transmit+0x110>
 800258e:	e07c      	b.n	800268a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_SPI_Transmit+0x182>
 8002598:	8afb      	ldrh	r3, [r7, #22]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d170      	bne.n	8002680 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d912      	bls.n	80025ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	1c9a      	adds	r2, r3, #2
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b02      	subs	r3, #2
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025cc:	e058      	b.n	8002680 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	330c      	adds	r3, #12
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025f4:	e044      	b.n	8002680 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d12b      	bne.n	800265c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d912      	bls.n	8002634 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	1c9a      	adds	r2, r3, #2
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b02      	subs	r3, #2
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002632:	e025      	b.n	8002680 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	87da      	strh	r2, [r3, #62]	; 0x3e
 800265a:	e011      	b.n	8002680 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800265c:	f7fd ff76 	bl	800054c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d303      	bcc.n	8002674 <HAL_SPI_Transmit+0x258>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d102      	bne.n	800267a <HAL_SPI_Transmit+0x25e>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800267e:	e024      	b.n	80026ca <HAL_SPI_Transmit+0x2ae>
    while (hspi->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1b5      	bne.n	80025f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fc8c 	bl	8002fac <SPI_EndRxTxTransaction>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_SPI_Transmit+0x2ae>
  {
    errorcode = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026da:	7ffb      	ldrb	r3, [r7, #31]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002700:	d112      	bne.n	8002728 <HAL_SPI_Receive+0x44>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10e      	bne.n	8002728 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2204      	movs	r2, #4
 800270e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f905 	bl	800292e <HAL_SPI_TransmitReceive>
 8002724:	4603      	mov	r3, r0
 8002726:	e0fe      	b.n	8002926 <HAL_SPI_Receive+0x242>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_SPI_Receive+0x52>
 8002732:	2302      	movs	r3, #2
 8002734:	e0f7      	b.n	8002926 <HAL_SPI_Receive+0x242>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800273e:	f7fd ff05 	bl	800054c <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d002      	beq.n	8002756 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002750:	2302      	movs	r3, #2
 8002752:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002754:	e0de      	b.n	8002914 <HAL_SPI_Receive+0x230>
  }

  if ((pData == NULL) || (Size == 0U))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_Receive+0x7e>
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002766:	e0d5      	b.n	8002914 <HAL_SPI_Receive+0x230>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2204      	movs	r2, #4
 800276c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b2:	d908      	bls.n	80027c6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	6852      	ldr	r2, [r2, #4]
 80027be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	e007      	b.n	80027d6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	6852      	ldr	r2, [r2, #4]
 80027d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027d4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027de:	d107      	bne.n	80027f0 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d007      	beq.n	800280e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002816:	d866      	bhi.n	80028e6 <HAL_SPI_Receive+0x202>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002818:	e02f      	b.n	800287a <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d116      	bne.n	8002856 <HAL_SPI_Receive+0x172>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	320c      	adds	r2, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002854:	e011      	b.n	800287a <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002856:	f7fd fe79 	bl	800054c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad2      	subs	r2, r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d303      	bcc.n	800286e <HAL_SPI_Receive+0x18a>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d102      	bne.n	8002874 <HAL_SPI_Receive+0x190>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002878:	e04c      	b.n	8002914 <HAL_SPI_Receive+0x230>
    while (hspi->RxXferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1c9      	bne.n	800281a <HAL_SPI_Receive+0x136>
 8002886:	e034      	b.n	80028f2 <HAL_SPI_Receive+0x20e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d115      	bne.n	80028c2 <HAL_SPI_Receive+0x1de>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	68d2      	ldr	r2, [r2, #12]
 80028a0:	b292      	uxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80028c0:	e011      	b.n	80028e6 <HAL_SPI_Receive+0x202>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c2:	f7fd fe43 	bl	800054c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d303      	bcc.n	80028da <HAL_SPI_Receive+0x1f6>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Receive+0x1fc>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_SPI_Receive+0x202>
        {
          errorcode = HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028e4:	e016      	b.n	8002914 <HAL_SPI_Receive+0x230>
    while (hspi->RxXferCount > 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ca      	bne.n	8002888 <HAL_SPI_Receive+0x1a4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fb00 	bl	8002efc <SPI_EndRxTransaction>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Receive+0x224>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_SPI_Receive+0x230>
  {
    errorcode = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08a      	sub	sp, #40	; 0x28
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800293c:	2301      	movs	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x26>
 8002950:	2302      	movs	r3, #2
 8002952:	e1f8      	b.n	8002d46 <HAL_SPI_TransmitReceive+0x418>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800295c:	f7fd fdf6 	bl	800054c <HAL_GetTick>
 8002960:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002968:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002978:	7efb      	ldrb	r3, [r7, #27]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d00e      	beq.n	800299c <HAL_SPI_TransmitReceive+0x6e>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002984:	d106      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x66>
 800298e:	7efb      	ldrb	r3, [r7, #27]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d003      	beq.n	800299c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002994:	2302      	movs	r3, #2
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800299a:	e1ca      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x404>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_SPI_TransmitReceive+0x80>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_SPI_TransmitReceive+0x80>
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029b4:	e1bd      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x404>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d003      	beq.n	80029ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2205      	movs	r2, #5
 80029c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	887a      	ldrh	r2, [r7, #2]
 80029f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a0c:	d802      	bhi.n	8002a14 <HAL_SPI_TransmitReceive+0xe6>
 8002a0e:	8a3b      	ldrh	r3, [r7, #16]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d908      	bls.n	8002a26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	6852      	ldr	r2, [r2, #4]
 8002a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	e007      	b.n	8002a36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	6852      	ldr	r2, [r2, #4]
 8002a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d007      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a5c:	d97c      	bls.n	8002b58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x13e>
 8002a66:	8a7b      	ldrh	r3, [r7, #18]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d169      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a74:	8812      	ldrh	r2, [r2, #0]
 8002a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a90:	e056      	b.n	8002b40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x1aa>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x1aa>
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d113      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d11c      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x1f2>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	68d2      	ldr	r2, [r2, #12]
 8002afc:	b292      	uxth	r2, r2
 8002afe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	1c9a      	adds	r2, r3, #2
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b20:	f7fd fd14 	bl	800054c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	1ad2      	subs	r2, r2, r3
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d307      	bcc.n	8002b40 <HAL_SPI_TransmitReceive+0x212>
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d003      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b3e:	e0f8      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1a3      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0x164>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d19d      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0x164>
 8002b56:	e0de      	b.n	8002d16 <HAL_SPI_TransmitReceive+0x3e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_SPI_TransmitReceive+0x23a>
 8002b60:	8a7b      	ldrh	r3, [r7, #18]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	f040 80ca 	bne.w	8002cfc <HAL_SPI_TransmitReceive+0x3ce>
    {
      if (hspi->TxXferCount > 1U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d912      	bls.n	8002b98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	1c9a      	adds	r2, r3, #2
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b02      	subs	r3, #2
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b96:	e0b1      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x3ce>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbe:	e09d      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x3ce>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d134      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x30a>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02f      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x30a>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d12c      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d912      	bls.n	8002c0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b02      	subs	r3, #2
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c0c:	e012      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d147      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x3a8>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d041      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x3a8>
      {
        if (hspi->RxXferCount > 1U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d923      	bls.n	8002ca6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	68d2      	ldr	r2, [r2, #12]
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b02      	subs	r3, #2
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d81e      	bhi.n	8002cd2 <HAL_SPI_TransmitReceive+0x3a4>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	6852      	ldr	r2, [r2, #4]
 8002c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e015      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x3a4>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	320c      	adds	r2, #12
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd6:	f7fd fc39 	bl	800054c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d303      	bcc.n	8002cee <HAL_SPI_TransmitReceive+0x3c0>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d102      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x3c6>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x3ce>
      {
        errorcode = HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002cfa:	e01a      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f47f af5c 	bne.w	8002bc0 <HAL_SPI_TransmitReceive+0x292>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af55 	bne.w	8002bc0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f946 	bl	8002fac <SPI_EndRxTxTransaction>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x404>
  {
    errorcode = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	661a      	str	r2, [r3, #96]	; 0x60
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d5e:	e04c      	b.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d048      	beq.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d68:	f7fd fbf0 	bl	800054c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d202      	bcs.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d13d      	bne.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d96:	d111      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da0:	d004      	beq.n	8002dac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d107      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc4:	d10f      	bne.n	8002de6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e00f      	b.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1a3      	bne.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e30:	e057      	b.n	8002ee2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e38:	d106      	bne.n	8002e48 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d048      	beq.n	8002ee2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e50:	f7fd fb7c 	bl	800054c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad2      	subs	r2, r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d202      	bcs.n	8002e66 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d13d      	bne.n	8002ee2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	6852      	ldr	r2, [r2, #4]
 8002e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7e:	d111      	bne.n	8002ea4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e88:	d004      	beq.n	8002e94 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d107      	bne.n	8002ea4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d10f      	bne.n	8002ece <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e008      	b.n	8002ef4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d19f      	bne.n	8002e32 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f10:	d111      	bne.n	8002f36 <SPI_EndRxTransaction+0x3a>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1a:	d004      	beq.n	8002f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d107      	bne.n	8002f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff04 	bl	8002d4e <SPI_WaitFlagStateUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e023      	b.n	8002fa4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f64:	d11d      	bne.n	8002fa2 <SPI_EndRxTransaction+0xa6>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6e:	d004      	beq.n	8002f7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f78:	d113      	bne.n	8002fa2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff ff4b 	bl	8002e22 <SPI_WaitFifoStateUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e000      	b.n	8002fa4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff ff2c 	bl	8002e22 <SPI_WaitFifoStateUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e027      	b.n	8003030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff feaf 	bl	8002d4e <SPI_WaitFlagStateUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e014      	b.n	8003030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff05 	bl	8002e22 <SPI_WaitFifoStateUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e000      	b.n	8003030 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e01d      	b.n	8003086 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f815 	bl	800308e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 f986 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_TIM_Base_Start_IT+0x50>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d00b      	beq.n	80030e6 <HAL_TIM_Base_Start_IT+0x42>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d007      	beq.n	80030e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	00010007 	.word	0x00010007

080030f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0202 	mvn.w	r2, #2
 8003124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f905 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8f7 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f908 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0204 	mvn.w	r2, #4
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8db 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8cd 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8de 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0208 	mvn.w	r2, #8
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8b1 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8a3 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8b4 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b10      	cmp	r3, #16
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0210 	mvn.w	r2, #16
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2208      	movs	r2, #8
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f887 	bl	800334a <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f879 	bl	8003336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f88a 	bl	800335e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f9a2 	bl	80035c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f914 	bl	80034d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d10e      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f907 	bl	80034e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d10e      	bne.n	8003302 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f838 	bl	8003372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d10e      	bne.n	800332e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b20      	cmp	r3, #32
 800331c:	d107      	bne.n	800332e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0220 	mvn.w	r2, #32
 8003326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8c7 	bl	80034bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a40      	ldr	r2, [pc, #256]	; (800349c <TIM_Base_SetConfig+0x114>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d00f      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3d      	ldr	r2, [pc, #244]	; (80034a0 <TIM_Base_SetConfig+0x118>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3c      	ldr	r2, [pc, #240]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <TIM_Base_SetConfig+0x120>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <TIM_Base_SetConfig+0x124>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d108      	bne.n	80033da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2f      	ldr	r2, [pc, #188]	; (800349c <TIM_Base_SetConfig+0x114>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01f      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d01b      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <TIM_Base_SetConfig+0x118>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d017      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <TIM_Base_SetConfig+0x120>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00f      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a29      	ldr	r2, [pc, #164]	; (80034ac <TIM_Base_SetConfig+0x124>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <TIM_Base_SetConfig+0x128>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <TIM_Base_SetConfig+0x12c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_Base_SetConfig+0x9a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <TIM_Base_SetConfig+0x130>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <TIM_Base_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00f      	beq.n	8003480 <TIM_Base_SetConfig+0xf8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a12      	ldr	r2, [pc, #72]	; (80034ac <TIM_Base_SetConfig+0x124>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_Base_SetConfig+0xf8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <TIM_Base_SetConfig+0x128>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <TIM_Base_SetConfig+0xf8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <TIM_Base_SetConfig+0x12c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_Base_SetConfig+0xf8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <TIM_Base_SetConfig+0x130>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	615a      	str	r2, [r3, #20]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800

080034bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003508:	2200      	movs	r2, #0
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	2036      	movs	r0, #54	; 0x36
 800350e:	f7fd f91d 	bl	800074c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003512:	2036      	movs	r0, #54	; 0x36
 8003514:	f7fd f936 	bl	8000784 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003518:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <HAL_InitTick+0xb8>)
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_InitTick+0xb8>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	f043 0310 	orr.w	r3, r3, #16
 8003522:	6593      	str	r3, [r2, #88]	; 0x58
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_InitTick+0xb8>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003530:	f107 020c 	add.w	r2, r7, #12
 8003534:	f107 0310 	add.w	r3, r7, #16
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe f964 	bl	8001808 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800354a:	f7fe f931 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 800354e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003550:	e004      	b.n	800355c <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003552:	f7fe f92d 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8003556:	4603      	mov	r3, r0
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_InitTick+0xbc>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	0c9b      	lsrs	r3, r3, #18
 8003566:	3b01      	subs	r3, #1
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_InitTick+0xc0>)
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <HAL_InitTick+0xc4>)
 800356e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_InitTick+0xc0>)
 8003572:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003576:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8003578:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_InitTick+0xc0>)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_InitTick+0xc0>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_InitTick+0xc0>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_InitTick+0xc0>)
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8003590:	4809      	ldr	r0, [pc, #36]	; (80035b8 <HAL_InitTick+0xc0>)
 8003592:	f7ff fd51 	bl	8003038 <HAL_TIM_Base_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800359c:	4806      	ldr	r0, [pc, #24]	; (80035b8 <HAL_InitTick+0xc0>)
 800359e:	f7ff fd81 	bl	80030a4 <HAL_TIM_Base_Start_IT>
 80035a2:	4603      	mov	r3, r0
 80035a4:	e000      	b.n	80035a8 <HAL_InitTick+0xb0>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3730      	adds	r7, #48	; 0x30
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	431bde83 	.word	0x431bde83
 80035b8:	20000780 	.word	0x20000780
 80035bc:	40001000 	.word	0x40001000

080035c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 80035c8:	f7fc ffae 	bl	8000528 <HAL_IncTick>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <TIM6_DAC_IRQHandler+0x10>)
 80035da:	f7ff fd8d 	bl	80030f8 <HAL_TIM_IRQHandler>
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000780 	.word	0x20000780

080035e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e040      	b.n	800367c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 fcbc 	bl	8004f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa1a 	bl	8003a60 <UART_SetConfig>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e022      	b.n	800367c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fd72 	bl	8004128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	6852      	ldr	r2, [r2, #4]
 800364e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fdf9 	bl	800426c <UART_CheckIdleState>
 800367a:	4603      	mov	r3, r0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	2b20      	cmp	r3, #32
 800369a:	f040 8081 	bne.w	80037a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_UART_Transmit+0x26>
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e079      	b.n	80037a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Transmit+0x38>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e072      	b.n	80037a2 <HAL_UART_Transmit+0x11e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2221      	movs	r2, #33	; 0x21
 80036ce:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80036d0:	f7fc ff3c 	bl	800054c <HAL_GetTick>
 80036d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d108      	bne.n	8003702 <HAL_UART_Transmit+0x7e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e003      	b.n	800370a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003712:	e02d      	b.n	8003770 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2200      	movs	r2, #0
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fde9 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e039      	b.n	80037a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	8812      	ldrh	r2, [r2, #0]
 800373c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003740:	b292      	uxth	r2, r2
 8003742:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	3302      	adds	r3, #2
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e008      	b.n	800375e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	7812      	ldrb	r2, [r2, #0]
 8003754:	b292      	uxth	r2, r2
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3301      	adds	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1cb      	bne.n	8003714 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fdb5 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e005      	b.n	80037a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8114 	beq.w	8003a22 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	4798      	blx	r3
      }
      return;
 8003802:	e10e      	b.n	8003a22 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80d6 	beq.w	80039b8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80cb 	beq.w	80039b8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <HAL_UART_IRQHandler+0x9e>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_UART_IRQHandler+0xc6>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2202      	movs	r2, #2
 8003864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00e      	beq.n	800389a <HAL_UART_IRQHandler+0xee>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2204      	movs	r2, #4
 800388c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2208      	movs	r2, #8
 80038be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c4:	f043 0208 	orr.w	r2, r3, #8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00f      	beq.n	80038f6 <HAL_UART_IRQHandler+0x14a>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8093 	beq.w	8003a26 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003928:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d004      	beq.n	8003942 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d031      	beq.n	80039a6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fd52 	bl	80043ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d123      	bne.n	800399e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003964:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d013      	beq.n	8003996 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003972:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_UART_IRQHandler+0x288>)
 8003974:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc ff10 	bl	80007a0 <HAL_DMA_Abort_IT>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003990:	4610      	mov	r0, r2
 8003992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	e00e      	b.n	80039b4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f858 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	e00a      	b.n	80039b4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f854 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	e006      	b.n	80039b4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f850 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80039b2:	e038      	b.n	8003a26 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	bf00      	nop
    return;
 80039b6:	e036      	b.n	8003a26 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <HAL_UART_IRQHandler+0x232>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fd57 	bl	800448a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039dc:	e026      	b.n	8003a2c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d017      	beq.n	8003a2a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
    }
    return;
 8003a02:	e012      	b.n	8003a2a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <HAL_UART_IRQHandler+0x280>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fd1d 	bl	8004458 <UART_EndTransmit_IT>
    return;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <HAL_UART_IRQHandler+0x280>
      return;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <HAL_UART_IRQHandler+0x280>
    return;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_UART_IRQHandler+0x280>
    return;
 8003a2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	0800442d 	.word	0x0800442d

08003a38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a64:	b08a      	sub	sp, #40	; 0x28
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	4bb7      	ldr	r3, [pc, #732]	; (8003d78 <UART_SetConfig+0x318>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68d2      	ldr	r2, [r2, #12]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4aae      	ldr	r2, [pc, #696]	; (8003d7c <UART_SetConfig+0x31c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4aa5      	ldr	r2, [pc, #660]	; (8003d80 <UART_SetConfig+0x320>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d126      	bne.n	8003b3e <UART_SetConfig+0xde>
 8003af0:	4ba4      	ldr	r3, [pc, #656]	; (8003d84 <UART_SetConfig+0x324>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d81a      	bhi.n	8003b34 <UART_SetConfig+0xd4>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <UART_SetConfig+0xa4>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b25 	.word	0x08003b25
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2d 	.word	0x08003b2d
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e105      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e101      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003b24:	2304      	movs	r3, #4
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e0fd      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e0f9      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003b34:	2310      	movs	r3, #16
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	bf00      	nop
 8003b3c:	e0f4      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a91      	ldr	r2, [pc, #580]	; (8003d88 <UART_SetConfig+0x328>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d138      	bne.n	8003bba <UART_SetConfig+0x15a>
 8003b48:	4b8e      	ldr	r3, [pc, #568]	; (8003d84 <UART_SetConfig+0x324>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d82c      	bhi.n	8003bb0 <UART_SetConfig+0x150>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0xfc>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003bb1 	.word	0x08003bb1
 8003b64:	08003bb1 	.word	0x08003bb1
 8003b68:	08003bb1 	.word	0x08003bb1
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003bb1 	.word	0x08003bb1
 8003b74:	08003bb1 	.word	0x08003bb1
 8003b78:	08003bb1 	.word	0x08003bb1
 8003b7c:	08003b99 	.word	0x08003b99
 8003b80:	08003bb1 	.word	0x08003bb1
 8003b84:	08003bb1 	.word	0x08003bb1
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003ba9 	.word	0x08003ba9
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b96:	e0c7      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9e:	e0c3      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e0bf      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e0bb      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	bf00      	nop
 8003bb8:	e0b6      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a73      	ldr	r2, [pc, #460]	; (8003d8c <UART_SetConfig+0x32c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d125      	bne.n	8003c10 <UART_SetConfig+0x1b0>
 8003bc4:	4b6f      	ldr	r3, [pc, #444]	; (8003d84 <UART_SetConfig+0x324>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d011      	beq.n	8003bf6 <UART_SetConfig+0x196>
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d802      	bhi.n	8003bdc <UART_SetConfig+0x17c>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <UART_SetConfig+0x186>
 8003bda:	e014      	b.n	8003c06 <UART_SetConfig+0x1a6>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d006      	beq.n	8003bee <UART_SetConfig+0x18e>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d00c      	beq.n	8003bfe <UART_SetConfig+0x19e>
 8003be4:	e00f      	b.n	8003c06 <UART_SetConfig+0x1a6>
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bec:	e09c      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf4:	e098      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfc:	e094      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c04:	e090      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c06:	2310      	movs	r3, #16
 8003c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0c:	bf00      	nop
 8003c0e:	e08b      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a5e      	ldr	r2, [pc, #376]	; (8003d90 <UART_SetConfig+0x330>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d125      	bne.n	8003c66 <UART_SetConfig+0x206>
 8003c1a:	4b5a      	ldr	r3, [pc, #360]	; (8003d84 <UART_SetConfig+0x324>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c24:	2b40      	cmp	r3, #64	; 0x40
 8003c26:	d011      	beq.n	8003c4c <UART_SetConfig+0x1ec>
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d802      	bhi.n	8003c32 <UART_SetConfig+0x1d2>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <UART_SetConfig+0x1dc>
 8003c30:	e014      	b.n	8003c5c <UART_SetConfig+0x1fc>
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d006      	beq.n	8003c44 <UART_SetConfig+0x1e4>
 8003c36:	2bc0      	cmp	r3, #192	; 0xc0
 8003c38:	d00c      	beq.n	8003c54 <UART_SetConfig+0x1f4>
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x1fc>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e071      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e06d      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e069      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e065      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	bf00      	nop
 8003c64:	e060      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a4a      	ldr	r2, [pc, #296]	; (8003d94 <UART_SetConfig+0x334>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d129      	bne.n	8003cc4 <UART_SetConfig+0x264>
 8003c70:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <UART_SetConfig+0x324>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7e:	d014      	beq.n	8003caa <UART_SetConfig+0x24a>
 8003c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c84:	d802      	bhi.n	8003c8c <UART_SetConfig+0x22c>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <UART_SetConfig+0x23a>
 8003c8a:	e016      	b.n	8003cba <UART_SetConfig+0x25a>
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d007      	beq.n	8003ca2 <UART_SetConfig+0x242>
 8003c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c96:	d00c      	beq.n	8003cb2 <UART_SetConfig+0x252>
 8003c98:	e00f      	b.n	8003cba <UART_SetConfig+0x25a>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca0:	e042      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca8:	e03e      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003caa:	2304      	movs	r3, #4
 8003cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb0:	e03a      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb8:	e036      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003cba:	2310      	movs	r3, #16
 8003cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc0:	bf00      	nop
 8003cc2:	e031      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <UART_SetConfig+0x31c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d129      	bne.n	8003d22 <UART_SetConfig+0x2c2>
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <UART_SetConfig+0x324>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d014      	beq.n	8003d08 <UART_SetConfig+0x2a8>
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	d802      	bhi.n	8003cea <UART_SetConfig+0x28a>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <UART_SetConfig+0x298>
 8003ce8:	e016      	b.n	8003d18 <UART_SetConfig+0x2b8>
 8003cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cee:	d007      	beq.n	8003d00 <UART_SetConfig+0x2a0>
 8003cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf4:	d00c      	beq.n	8003d10 <UART_SetConfig+0x2b0>
 8003cf6:	e00f      	b.n	8003d18 <UART_SetConfig+0x2b8>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e013      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d06:	e00f      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0e:	e00b      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003d10:	2308      	movs	r3, #8
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d16:	e007      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <UART_SetConfig+0x2c8>
 8003d22:	2310      	movs	r3, #16
 8003d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <UART_SetConfig+0x31c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f040 80f1 	bne.w	8003f16 <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d837      	bhi.n	8003dac <UART_SetConfig+0x34c>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0x2e4>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003dad 	.word	0x08003dad
 8003d54:	08003d9d 	.word	0x08003d9d
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003da5 	.word	0x08003da5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fd fd22 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d6e:	e020      	b.n	8003db2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <UART_SetConfig+0x338>)
 8003d72:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d74:	e01d      	b.n	8003db2 <UART_SetConfig+0x352>
 8003d76:	bf00      	nop
 8003d78:	efff69f3 	.word	0xefff69f3
 8003d7c:	40008000 	.word	0x40008000
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40004400 	.word	0x40004400
 8003d8c:	40004800 	.word	0x40004800
 8003d90:	40004c00 	.word	0x40004c00
 8003d94:	40005000 	.word	0x40005000
 8003d98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003d9c:	f7fd fc72 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8003da0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003da2:	e006      	b.n	8003db2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003daa:	e002      	b.n	8003db2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	76fb      	strb	r3, [r7, #27]
        break;
 8003db0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 81ab 	beq.w	8004110 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	441a      	add	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d805      	bhi.n	8003dd6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d202      	bcs.n	8003ddc <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e199      	b.n	8004110 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 8003ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	f200 8085 	bhi.w	8003ef0 <UART_SetConfig+0x490>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <UART_SetConfig+0x38c>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003ef1 	.word	0x08003ef1
 8003df4:	08003e53 	.word	0x08003e53
 8003df8:	08003ef1 	.word	0x08003ef1
 8003dfc:	08003e87 	.word	0x08003e87
 8003e00:	08003ef1 	.word	0x08003ef1
 8003e04:	08003ef1 	.word	0x08003ef1
 8003e08:	08003ef1 	.word	0x08003ef1
 8003e0c:	08003ec7 	.word	0x08003ec7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003e10:	f7fd fcce 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8003e14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8003e20:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8003e24:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	f04f 0400 	mov.w	r4, #0
 8003e32:	eb18 0003 	adds.w	r0, r8, r3
 8003e36:	eb49 0104 	adc.w	r1, r9, r4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f04f 0400 	mov.w	r4, #0
 8003e42:	461a      	mov	r2, r3
 8003e44:	4623      	mov	r3, r4
 8003e46:	f7fc f9c7 	bl	80001d8 <__aeabi_uldivmod>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e50:	e051      	b.n	8003ef6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	49aa      	ldr	r1, [pc, #680]	; (8004108 <UART_SetConfig+0x6a8>)
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	eb13 0801 	adds.w	r8, r3, r1
 8003e66:	eb44 0902 	adc.w	r9, r4, r2
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4623      	mov	r3, r4
 8003e7a:	f7fc f9ad 	bl	80001d8 <__aeabi_uldivmod>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e84:	e037      	b.n	8003ef6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7fd fbfd 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8003e8a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	021d      	lsls	r5, r3, #8
 8003e96:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003e9a:	0214      	lsls	r4, r2, #8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	18a0      	adds	r0, r4, r2
 8003eaa:	eb45 0103 	adc.w	r1, r5, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f04f 0400 	mov.w	r4, #0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4623      	mov	r3, r4
 8003eba:	f7fc f98d 	bl	80001d8 <__aeabi_uldivmod>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ec4:	e017      	b.n	8003ef6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	f04f 0400 	mov.w	r4, #0
 8003ed0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003ed4:	f144 0100 	adc.w	r1, r4, #0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f04f 0400 	mov.w	r4, #0
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	f7fc f978 	bl	80001d8 <__aeabi_uldivmod>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003eee:	e002      	b.n	8003ef6 <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	76fb      	strb	r3, [r7, #27]
            break;
 8003ef4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efc:	d308      	bcc.n	8003f10 <UART_SetConfig+0x4b0>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f04:	d204      	bcs.n	8003f10 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	e0ff      	b.n	8004110 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	76fb      	strb	r3, [r7, #27]
 8003f14:	e0fc      	b.n	8004110 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1e:	f040 8083 	bne.w	8004028 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 8003f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d85e      	bhi.n	8003fe8 <UART_SetConfig+0x588>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x4d0>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f95 	.word	0x08003f95
 8003f3c:	08003fe9 	.word	0x08003fe9
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08003fe9 	.word	0x08003fe9
 8003f48:	08003fe9 	.word	0x08003fe9
 8003f4c:	08003fe9 	.word	0x08003fe9
 8003f50:	08003fd1 	.word	0x08003fd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fd fc2c 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8003f58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	005a      	lsls	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f72:	e03c      	b.n	8003fee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7fd fc32 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8003f78:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	005a      	lsls	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	441a      	add	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f92:	e02c      	b.n	8003fee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003f9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6852      	ldr	r2, [r2, #4]
 8003fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fae:	e01e      	b.n	8003fee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb0:	f7fd fb68 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8003fb4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	005a      	lsls	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fce:	e00e      	b.n	8003fee <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fe6:	e002      	b.n	8003fee <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	76fb      	strb	r3, [r7, #27]
        break;
 8003fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b0f      	cmp	r3, #15
 8003ff2:	d916      	bls.n	8004022 <UART_SetConfig+0x5c2>
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d212      	bcs.n	8004022 <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f023 030f 	bic.w	r3, r3, #15
 8004004:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	b29a      	uxth	r2, r3
 8004012:	89fb      	ldrh	r3, [r7, #14]
 8004014:	4313      	orrs	r3, r2
 8004016:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	89fa      	ldrh	r2, [r7, #14]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e076      	b.n	8004110 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	76fb      	strb	r3, [r7, #27]
 8004026:	e073      	b.n	8004110 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 8004028:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402c:	2b08      	cmp	r3, #8
 800402e:	d85c      	bhi.n	80040ea <UART_SetConfig+0x68a>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x5d8>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	0800407b 	.word	0x0800407b
 8004040:	08004099 	.word	0x08004099
 8004044:	080040eb 	.word	0x080040eb
 8004048:	080040b5 	.word	0x080040b5
 800404c:	080040eb 	.word	0x080040eb
 8004050:	080040eb 	.word	0x080040eb
 8004054:	080040eb 	.word	0x080040eb
 8004058:	080040d3 	.word	0x080040d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fd fba8 	bl	80017b0 <HAL_RCC_GetPCLK1Freq>
 8004060:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085a      	lsrs	r2, r3, #1
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	441a      	add	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	b29b      	uxth	r3, r3
 8004076:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004078:	e03a      	b.n	80040f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407a:	f7fd fbaf 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 800407e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	085a      	lsrs	r2, r3, #1
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	441a      	add	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	b29b      	uxth	r3, r3
 8004094:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004096:	e02b      	b.n	80040f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80040a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6852      	ldr	r2, [r2, #4]
 80040aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b2:	e01d      	b.n	80040f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b4:	f7fd fae6 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 80040b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	085a      	lsrs	r2, r3, #1
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	441a      	add	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040d0:	e00e      	b.n	80040f0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040e8:	e002      	b.n	80040f0 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	76fb      	strb	r3, [r7, #27]
        break;
 80040ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d90a      	bls.n	800410c <UART_SetConfig+0x6ac>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d206      	bcs.n	800410c <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e003      	b.n	8004110 <UART_SetConfig+0x6b0>
 8004108:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800411c:	7efb      	ldrb	r3, [r7, #27]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3728      	adds	r7, #40	; 0x28
 8004122:	46bd      	mov	sp, r7
 8004124:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	6852      	ldr	r2, [r2, #4]
 8004146:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	6852      	ldr	r2, [r2, #4]
 8004168:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	6852      	ldr	r2, [r2, #4]
 800418a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	6852      	ldr	r2, [r2, #4]
 80041ac:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	6892      	ldr	r2, [r2, #8]
 80041f0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01a      	beq.n	800423e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	6852      	ldr	r2, [r2, #4]
 8004212:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004226:	d10a      	bne.n	800423e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	6852      	ldr	r2, [r2, #4]
 8004232:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6852      	ldr	r2, [r2, #4]
 8004254:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800427a:	f7fc f967 	bl	800054c <HAL_GetTick>
 800427e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b08      	cmp	r3, #8
 800428c:	d10e      	bne.n	80042ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f82a 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e020      	b.n	80042ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d10e      	bne.n	80042d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f814 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e00a      	b.n	80042ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004306:	e05d      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d059      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004310:	f7fc f91c 	bl	800054c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	429a      	cmp	r2, r3
 800431e:	d802      	bhi.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11b      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004334:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	6892      	ldr	r2, [r2, #8]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e042      	b.n	80043e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02b      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437a:	d123      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004384:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004394:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	6892      	ldr	r2, [r2, #8]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e00f      	b.n	80043e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	401a      	ands	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d092      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004402:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	6892      	ldr	r2, [r2, #8]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff fafe 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff fadb 	bl	8003a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <Init_Flash_Chips>:
 * Configures the SPI settings, GPIO Settings and checks to see how many flash chips
 * are online.
 */

HAL_StatusTypeDef Init_Flash_Chips(uint8_t * chipstatus)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	//control Pin init
	MX_GPIO_Init();
 80044a8:	f000 fa02 	bl	80048b0 <MX_GPIO_Init>
	//SPI int
	if(MX_SPI_Init(SPI2,&hspi2)		!= HAL_OK) return HAL_ERROR;
 80044ac:	4915      	ldr	r1, [pc, #84]	; (8004504 <Init_Flash_Chips+0x64>)
 80044ae:	4816      	ldr	r0, [pc, #88]	; (8004508 <Init_Flash_Chips+0x68>)
 80044b0:	f000 f9be 	bl	8004830 <MX_SPI_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <Init_Flash_Chips+0x1e>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e01d      	b.n	80044fa <Init_Flash_Chips+0x5a>
	//check the status of each chip
	for (int chipnumber = 1; chipnumber < 5; ++chipnumber)
 80044be:	2301      	movs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e016      	b.n	80044f2 <Init_Flash_Chips+0x52>
	{
		if(FLASH_Is_Online(chipnumber))
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f843 	bl	8004550 <FLASH_Is_Online>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <Init_Flash_Chips+0x4c>
		{
			//set bit at position to show chip is online
			*chipstatus |=0b1<<(chipnumber-1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b25a      	sxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b01      	subs	r3, #1
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	b25b      	sxtb	r3, r3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	701a      	strb	r2, [r3, #0]
	for (int chipnumber = 1; chipnumber < 5; ++chipnumber)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	dde5      	ble.n	80044c4 <Init_Flash_Chips+0x24>
		}
	}
	return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200007c0 	.word	0x200007c0
 8004508:	40003800 	.word	0x40003800

0800450c <FLASH_Get_ID>:

/*
 * @Description: Reads the Chip ID
 */
void FLASH_Get_ID(int ChipNumber,uint8_t* id)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]

	uint8_t cmd = 0x9F;
 8004516:	239f      	movs	r3, #159	; 0x9f
 8004518:	73fb      	strb	r3, [r7, #15]
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 800451a:	2100      	movs	r1, #0
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f83d 	bl	800459c <FLASH_ChipSelect_setState>
	HAL_SPI_Transmit(&hspi2,&cmd,1,100);
 8004522:	f107 010f 	add.w	r1, r7, #15
 8004526:	2364      	movs	r3, #100	; 0x64
 8004528:	2201      	movs	r2, #1
 800452a:	4808      	ldr	r0, [pc, #32]	; (800454c <FLASH_Get_ID+0x40>)
 800452c:	f7fd ff76 	bl	800241c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,id,5,100);
 8004530:	2364      	movs	r3, #100	; 0x64
 8004532:	2205      	movs	r2, #5
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	4805      	ldr	r0, [pc, #20]	; (800454c <FLASH_Get_ID+0x40>)
 8004538:	f7fe f8d4 	bl	80026e4 <HAL_SPI_Receive>
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 800453c:	2101      	movs	r1, #1
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f82c 	bl	800459c <FLASH_ChipSelect_setState>
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200007c0 	.word	0x200007c0

08004550 <FLASH_Is_Online>:
 * Byte 4 = 0x00
 * If the sequence is not valid, the function returns a 0 otherwise, the function
 * returns a 1
 */
uint8_t FLASH_Is_Online(int ChipNumber)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	uint8_t id[5] = {0};
 8004558:	f107 0308 	add.w	r3, r7, #8
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	711a      	strb	r2, [r3, #4]
	FLASH_Get_ID(ChipNumber,id);
 8004562:	f107 0308 	add.w	r3, r7, #8
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ffcf 	bl	800450c <FLASH_Get_ID>
	return (id[0] == 0x1f)&&(id[1] == 0x28)&&(id[2] == 0)&&(id[3] == 1)&&(id[4] == 0);
 800456e:	7a3b      	ldrb	r3, [r7, #8]
 8004570:	2b1f      	cmp	r3, #31
 8004572:	d10d      	bne.n	8004590 <FLASH_Is_Online+0x40>
 8004574:	7a7b      	ldrb	r3, [r7, #9]
 8004576:	2b28      	cmp	r3, #40	; 0x28
 8004578:	d10a      	bne.n	8004590 <FLASH_Is_Online+0x40>
 800457a:	7abb      	ldrb	r3, [r7, #10]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <FLASH_Is_Online+0x40>
 8004580:	7afb      	ldrb	r3, [r7, #11]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d104      	bne.n	8004590 <FLASH_Is_Online+0x40>
 8004586:	7b3b      	ldrb	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <FLASH_Is_Online+0x40>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <FLASH_Is_Online+0x42>
 8004590:	2300      	movs	r3, #0
 8004592:	b2db      	uxtb	r3, r3

}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <FLASH_ChipSelect_setState>:
  * If more chips are added this function needs to be expanded to include
  * those chips. Just Copy one of cases and change the GPIO settings to
  * match the GPIO pin and port used for the new chip.
  */
void FLASH_ChipSelect_setState(int ChipNumber, CS_State_t state)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
	/*If more Dataflash chips are added
	 * this needs to be expanded to include their respective NSS pins*/
	switch (ChipNumber)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d828      	bhi.n	8004602 <FLASH_ChipSelect_setState+0x66>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <FLASH_ChipSelect_setState+0x1c>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045d7 	.word	0x080045d7
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045f3 	.word	0x080045f3
	{
		case 1:
	    	HAL_GPIO_WritePin(GPIO_CHIP_1_CS_PORT, GPIO_CHIP_1_CS, state);
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	461a      	mov	r2, r3
 80045cc:	2101      	movs	r1, #1
 80045ce:	480f      	ldr	r0, [pc, #60]	; (800460c <FLASH_ChipSelect_setState+0x70>)
 80045d0:	f7fc fad0 	bl	8000b74 <HAL_GPIO_WritePin>
	      break;
 80045d4:	e015      	b.n	8004602 <FLASH_ChipSelect_setState+0x66>
	    case 2:
	    	HAL_GPIO_WritePin(GPIO_CHIP_2_CS_PORT, GPIO_CHIP_2_CS, state);
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	461a      	mov	r2, r3
 80045da:	2102      	movs	r1, #2
 80045dc:	480b      	ldr	r0, [pc, #44]	; (800460c <FLASH_ChipSelect_setState+0x70>)
 80045de:	f7fc fac9 	bl	8000b74 <HAL_GPIO_WritePin>
	      break;
 80045e2:	e00e      	b.n	8004602 <FLASH_ChipSelect_setState+0x66>
	    case 3:
	    	HAL_GPIO_WritePin(GPIO_CHIP_3_CS_PORT, GPIO_CHIP_3_CS, state);
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	461a      	mov	r2, r3
 80045e8:	2101      	movs	r1, #1
 80045ea:	4809      	ldr	r0, [pc, #36]	; (8004610 <FLASH_ChipSelect_setState+0x74>)
 80045ec:	f7fc fac2 	bl	8000b74 <HAL_GPIO_WritePin>
	      break;
 80045f0:	e007      	b.n	8004602 <FLASH_ChipSelect_setState+0x66>
	    case 4:
	    	HAL_GPIO_WritePin(GPIO_CHIP_4_CS_PORT, GPIO_CHIP_4_CS, state);
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	461a      	mov	r2, r3
 80045f6:	2110      	movs	r1, #16
 80045f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045fc:	f7fc faba 	bl	8000b74 <HAL_GPIO_WritePin>
	      break;
 8004600:	bf00      	nop
	}
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	48000800 	.word	0x48000800
 8004610:	48000400 	.word	0x48000400

08004614 <FLASH_GetStatusRegister>:
  * 					  	Bit 5 of Byte 2			-> EPE bit (1 if Erase/Program Error occured in latest ERASE/WRITE operation)
  * 					  	See DataSheet for more information (Page 28-29)
  * 					  	Returns a pointer to FLASH_STATUS_REGISTER
  */
uint8_t* FLASH_GetStatusRegister(int ChipNumber)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	//Define Command
	uint8_t command[1] = {0xD7};
 800461c:	23d7      	movs	r3, #215	; 0xd7
 800461e:	733b      	strb	r3, [r7, #12]

	//Open line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 8004620:	2100      	movs	r1, #0
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffba 	bl	800459c <FLASH_ChipSelect_setState>

	//Transmit command
	HAL_SPI_Transmit(&hspi2, command, 1, 100);
 8004628:	f107 010c 	add.w	r1, r7, #12
 800462c:	2364      	movs	r3, #100	; 0x64
 800462e:	2201      	movs	r2, #1
 8004630:	4808      	ldr	r0, [pc, #32]	; (8004654 <FLASH_GetStatusRegister+0x40>)
 8004632:	f7fd fef3 	bl	800241c <HAL_SPI_Transmit>

	//Update Register
	HAL_SPI_Receive(&hspi2, FLASH_STATUS_REGISTER, 2, 100);
 8004636:	2364      	movs	r3, #100	; 0x64
 8004638:	2202      	movs	r2, #2
 800463a:	4907      	ldr	r1, [pc, #28]	; (8004658 <FLASH_GetStatusRegister+0x44>)
 800463c:	4805      	ldr	r0, [pc, #20]	; (8004654 <FLASH_GetStatusRegister+0x40>)
 800463e:	f7fe f851 	bl	80026e4 <HAL_SPI_Receive>

	//Close line to slave
	FLASH_ChipSelect_setState(ChipNumber,CS_CLOSED);
 8004642:	2101      	movs	r1, #1
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ffa9 	bl	800459c <FLASH_ChipSelect_setState>

	//Return pointer to FLASH_STATUS_REGISTER
	return FLASH_STATUS_REGISTER;
 800464a:	4b03      	ldr	r3, [pc, #12]	; (8004658 <FLASH_GetStatusRegister+0x44>)
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	200007c0 	.word	0x200007c0
 8004658:	20000534 	.word	0x20000534

0800465c <FLASH_Delay>:
/**
  * @DESCRIPTION Constantly calls 1ms delay if the selected chip is bust with an operation
  * This is called in most functions in this library already to ensure no data corruption occurs.
  */
void FLASH_Delay(int ChipNumber)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

	FLASH_GetStatusRegister(ChipNumber); 					//Sets FLASH_STATUS_REGISTER
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ffd5 	bl	8004614 <FLASH_GetStatusRegister>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	//Turns off OnBoard LED for visual display
 800466a:	2200      	movs	r2, #0
 800466c:	2120      	movs	r1, #32
 800466e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004672:	f7fc fa7f 	bl	8000b74 <HAL_GPIO_WritePin>
	while((FLASH_STATUS_REGISTER[0])<128){					//Checks if RDY bit is off
 8004676:	e005      	b.n	8004684 <FLASH_Delay+0x28>
		FLASH_GetStatusRegister(ChipNumber);				//Sets FLASH_STATUS_REGISTER for next iteration
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ffcb 	bl	8004614 <FLASH_GetStatusRegister>
		HAL_Delay(1);										//1ms Delay while not RDY
 800467e:	2001      	movs	r0, #1
 8004680:	f7fb ff70 	bl	8000564 <HAL_Delay>
	while((FLASH_STATUS_REGISTER[0])<128){					//Checks if RDY bit is off
 8004684:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <FLASH_Delay+0x48>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b25b      	sxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	daf4      	bge.n	8004678 <FLASH_Delay+0x1c>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);		//Turns on OnBoard LED to show Delay is finished
 800468e:	2201      	movs	r2, #1
 8004690:	2120      	movs	r1, #32
 8004692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004696:	f7fc fa6d 	bl	8000b74 <HAL_GPIO_WritePin>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000534 	.word	0x20000534

080046a8 <Data_rx>:
  * @DESCRIPTION Returns a pointer to the 264 or 256 Byte buffer depending on current page size.
  * Called in READ functions. The Page size int is changed automatically by
  * FLASH_CONFIG_PageSize(). Static function and so is "hidden" from outside use.
  */
static uint8_t* Data_rx()
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	if (_264or256 == 256){ 	//Checks if Page size is 256
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <Data_rx+0x20>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b4:	d101      	bne.n	80046ba <Data_rx+0x12>
		return Data_r256;	//Returns the 256 Byte buffer
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <Data_rx+0x24>)
 80046b8:	e000      	b.n	80046bc <Data_rx+0x14>
	} else
	{
		return Data_r264;	//Returns the 264 Byte buffer
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <Data_rx+0x28>)
	}
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000008 	.word	0x20000008
 80046cc:	20000538 	.word	0x20000538
 80046d0:	20000638 	.word	0x20000638

080046d4 <FLASH_SetAddress>:
  * is Most Significant Byte of the address and the last element is the Least Significant byte of the
  * address. Recommended to set the current address to {0x00, 0x00, 0x00} and then use FLASH_IncAddress
  * function to handle addressing of the chip.
  */
void FLASH_SetAddress(uint8_t MSB,uint8_t MID,uint8_t LSB)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
 80046de:	460b      	mov	r3, r1
 80046e0:	71bb      	strb	r3, [r7, #6]
 80046e2:	4613      	mov	r3, r2
 80046e4:	717b      	strb	r3, [r7, #5]
	Current_Address[0] = MSB;	//Sets the Most Significant Byte of Address
 80046e6:	4a07      	ldr	r2, [pc, #28]	; (8004704 <FLASH_SetAddress+0x30>)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	7013      	strb	r3, [r2, #0]
	Current_Address[1] = MID;	//Sets the Middle Byte of Address
 80046ec:	4a05      	ldr	r2, [pc, #20]	; (8004704 <FLASH_SetAddress+0x30>)
 80046ee:	79bb      	ldrb	r3, [r7, #6]
 80046f0:	7053      	strb	r3, [r2, #1]
	Current_Address[2] = LSB;	//Sets the Least Significant Byte of Address
 80046f2:	4a04      	ldr	r2, [pc, #16]	; (8004704 <FLASH_SetAddress+0x30>)
 80046f4:	797b      	ldrb	r3, [r7, #5]
 80046f6:	7093      	strb	r3, [r2, #2]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	20000530 	.word	0x20000530

08004708 <FLASH_IncAddress>:
  * address. Recommended to be used after a FLASH READ, WRITE or ERASE operation.
  * E.g. if 256 Bytes is written to the chip then call FLASH_IncAddres(256) to move to the next empty
  * address.
  */
void FLASH_IncAddress(int size)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	int address = (Current_Address[0]<<16)+(Current_Address[1]<<8)+(Current_Address[2]); //Turns array into 24 bit int
 8004710:	4b16      	ldr	r3, [pc, #88]	; (800476c <FLASH_IncAddress+0x64>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	041a      	lsls	r2, r3, #16
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <FLASH_IncAddress+0x64>)
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	4413      	add	r3, r2
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <FLASH_IncAddress+0x64>)
 8004720:	7892      	ldrb	r2, [r2, #2]
 8004722:	4413      	add	r3, r2
 8004724:	60bb      	str	r3, [r7, #8]
	int new_address = address + size; //Increments address by number of bytes entered
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
	if (new_address >= FLASH_MAX_ADDRESS)	//Checks if  Address has gone over MAX_ADDRESS
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <FLASH_IncAddress+0x68>)
 8004732:	4293      	cmp	r3, r2
 8004734:	dd06      	ble.n	8004744 <FLASH_IncAddress+0x3c>
	{
		new_address = new_address - FLASH_MAX_ADDRESS;	//Sets the new address to however much it went over by
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <FLASH_IncAddress+0x6c>)
 800473a:	4413      	add	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
		FLASH_MAX_ADDRESS_FLAG = 1;						//Sets the address flag to tell user that the MAX_ADDRESS has been passed and data overwrite is possible
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <FLASH_IncAddress+0x70>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
	}
	Current_Address[0] = (new_address&BYTE_Mask_MSB)>>16; //Reconstructs Address Array
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	141b      	asrs	r3, r3, #16
 8004748:	b2da      	uxtb	r2, r3
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <FLASH_IncAddress+0x64>)
 800474c:	701a      	strb	r2, [r3, #0]
	Current_Address[1] = (new_address&BYTE_Mask_MID)>>8;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	121b      	asrs	r3, r3, #8
 8004752:	b2da      	uxtb	r2, r3
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <FLASH_IncAddress+0x64>)
 8004756:	705a      	strb	r2, [r3, #1]
	Current_Address[2] = (new_address&BYTE_Mask_LSB);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <FLASH_IncAddress+0x64>)
 800475e:	709a      	strb	r2, [r3, #2]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20000530 	.word	0x20000530
 8004770:	007ffffe 	.word	0x007ffffe
 8004774:	ff800001 	.word	0xff800001
 8004778:	20000740 	.word	0x20000740

0800477c <FLASH_GetAddress>:

/**
  * @DESCRIPTION Returns a pointer to Current_Address array
  */
int FLASH_GetAddress()
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
	return (Current_Address[0]<<16)+(Current_Address[1]<<8)+(Current_Address[2]); //Return current Address as 24bit int
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <FLASH_GetAddress+0x24>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	041a      	lsls	r2, r3, #16
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <FLASH_GetAddress+0x24>)
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	4413      	add	r3, r2
 800478e:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <FLASH_GetAddress+0x24>)
 8004790:	7892      	ldrb	r2, [r2, #2]
 8004792:	4413      	add	r3, r2
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000530 	.word	0x20000530

080047a4 <FLASH_READ_BufferHF>:
/**
  * @DESCRIPTION READS one page of data from a buffer of the users choice.
  * HF in function name signifies High Frequency read and supports a SCK of 50 - 85 MHz
  */
uint8_t* FLASH_READ_BufferHF(int ChipNumber, int BUFFERx)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	//Define Command to be transmitted
	uint8_t OpCode;
	if (BUFFERx == BUFFER1){
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <FLASH_READ_BufferHF+0x16>
		OpCode = 0xD4;
 80047b4:	23d4      	movs	r3, #212	; 0xd4
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e004      	b.n	80047c4 <FLASH_READ_BufferHF+0x20>
	} else if (BUFFERx == BUFFER2){
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d101      	bne.n	80047c4 <FLASH_READ_BufferHF+0x20>
		OpCode = 0xD6;
 80047c0:	23d6      	movs	r3, #214	; 0xd6
 80047c2:	73fb      	strb	r3, [r7, #15]
	}
	uint8_t AddressByte = 0x00;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73bb      	strb	r3, [r7, #14]
	uint8_t command[5] = {OpCode, DUMMYBYTE, DUMMYBYTE, AddressByte, DUMMYBYTE};
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	723b      	strb	r3, [r7, #8]
 80047cc:	23ff      	movs	r3, #255	; 0xff
 80047ce:	727b      	strb	r3, [r7, #9]
 80047d0:	23ff      	movs	r3, #255	; 0xff
 80047d2:	72bb      	strb	r3, [r7, #10]
 80047d4:	7bbb      	ldrb	r3, [r7, #14]
 80047d6:	72fb      	strb	r3, [r7, #11]
 80047d8:	23ff      	movs	r3, #255	; 0xff
 80047da:	733b      	strb	r3, [r7, #12]

	//Delays if Flash chip is busy
	FLASH_Delay(ChipNumber);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ff3d 	bl	800465c <FLASH_Delay>

	//Select Slave
	FLASH_ChipSelect_setState(ChipNumber,CS_OPEN);
 80047e2:	2100      	movs	r1, #0
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fed9 	bl	800459c <FLASH_ChipSelect_setState>

	//Transmit Command
	HAL_SPI_Transmit(&hspi2, command, 5, 500);
 80047ea:	f107 0108 	add.w	r1, r7, #8
 80047ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80047f2:	2205      	movs	r2, #5
 80047f4:	480c      	ldr	r0, [pc, #48]	; (8004828 <FLASH_READ_BufferHF+0x84>)
 80047f6:	f7fd fe11 	bl	800241c <HAL_SPI_Transmit>

	//Receive Data
	HAL_SPI_Receive(&hspi2, Data_rx(), _264or256, HAL_MAX_DELAY);
 80047fa:	f7ff ff55 	bl	80046a8 <Data_rx>
 80047fe:	4601      	mov	r1, r0
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <FLASH_READ_BufferHF+0x88>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b29a      	uxth	r2, r3
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	4807      	ldr	r0, [pc, #28]	; (8004828 <FLASH_READ_BufferHF+0x84>)
 800480c:	f7fd ff6a 	bl	80026e4 <HAL_SPI_Receive>

	//Deselect Slave
	FLASH_ChipSelect_setState(ChipNumber, CS_CLOSED);
 8004810:	2101      	movs	r1, #1
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fec2 	bl	800459c <FLASH_ChipSelect_setState>

	//Return Correctly sized buffer using Data_rx()
	return Data_rx();
 8004818:	f7ff ff46 	bl	80046a8 <Data_rx>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200007c0 	.word	0x200007c0
 800482c:	20000008 	.word	0x20000008

08004830 <MX_SPI_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
HAL_StatusTypeDef MX_SPI_Init(SPI_TypeDef *SPIx, SPI_HandleTypeDef *hspi)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

	//For stm32L4 Nucleo 64 board there are 3 SPI peripherals
		/* SPI1 parameter configuration*/
		hspi->Instance = SPIx;										//Determines Which SPI is being used
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	601a      	str	r2, [r3, #0]
		hspi->Init.Mode = SPI_MODE;									//Determines if in Master or Slave Mode
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004846:	605a      	str	r2, [r3, #4]
		hspi->Init.Direction = SPI_DIRECTION;						//Determines if Full or Half Duplex is used
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
		hspi->Init.DataSize = SPI_DATASIZE;							//Determines Datasize to be sent across
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004854:	60da      	str	r2, [r3, #12]
		hspi->Init.CLKPolarity = SPI_CLKPolarity ;					//Determines if Clock idles High or Low
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_CLKPhase;							//Determines if signal sampled on Rising or falling edge of clock
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	615a      	str	r2, [r3, #20]
		hspi->Init.NSS = SPI_NSS;									//Determines if Slave select is Hardware or Software enabled
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004868:	619a      	str	r2, [r3, #24]
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER;		//Determines the SPI and therefore Slave clock speed
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	61da      	str	r2, [r3, #28]
		hspi->Init.FirstBit = SPI_FIRSTBIT;							//Determines if LSB or MSB first
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	621a      	str	r2, [r3, #32]
		hspi->Init.TIMode = SPI_TIMODE;								//Determines if TI mode is used
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
		hspi->Init.CRCCalculation = SPI_CRCCALCULATION;				//Enables CRC Calculation
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
		hspi->Init.CRCPolynomial = SPI_CRCPOLYNOMIAL;				//Sets the CRC Polynomial
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2207      	movs	r2, #7
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
		hspi->Init.CRCLength = SPI_CRCLENGTH;						//Sets the CRC length
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
		hspi->Init.NSSPMode = SPI_NSSPMODE;							//Sets the NSSP mode
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2208      	movs	r2, #8
 8004892:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_SPI_Init(hspi) != HAL_OK)
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	f7fd fd39 	bl	800230c <HAL_SPI_Init>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <MX_SPI_Init+0x74>
		{
			return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <MX_SPI_Init+0x76>
		}

		return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]

  //GPIO Ports Clock Enable
  GPIO_RCC_Init();
 80048c4:	f000 f832 	bl	800492c <GPIO_RCC_Init>

  //SET PIN STATE
  GPIO_PIN_STATE_Init();
 80048c8:	f000 f89c 	bl	8004a04 <GPIO_PIN_STATE_Init>
  /*Configure GPIO pins : PC0 PC1 PC3 */
  /*
   * Chips 1,2 have CS lines running to PC0 and PC1
   * All chips have wp on PC3
   */
  GPIO_InitStruct.Pin =  GPIO_CHIP_1_CS|GPIO_CHIP_2_CS|GPIO_CHIP_WP;
 80048cc:	230b      	movs	r3, #11
 80048ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048d0:	2301      	movs	r3, #1
 80048d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_CHIP_1_CS_PORT, &GPIO_InitStruct);
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4810      	ldr	r0, [pc, #64]	; (8004924 <MX_GPIO_Init+0x74>)
 80048e2:	f7fb ff9f 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 */
  //for Chip 4 CS
  GPIO_InitStruct.Pin = GPIO_CHIP_4_CS;
 80048e6:	2310      	movs	r3, #16
 80048e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ea:	2301      	movs	r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_CHIP_4_CS_PORT, &GPIO_InitStruct);
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048fe:	f7fb ff91 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  //for Chip 3 CS
  GPIO_InitStruct.Pin = GPIO_CHIP_3_CS;
 8004902:	2301      	movs	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004906:	2301      	movs	r3, #1
 8004908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_CHIP_3_CS_PORT, &GPIO_InitStruct);
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4804      	ldr	r0, [pc, #16]	; (8004928 <MX_GPIO_Init+0x78>)
 8004918:	f7fb ff84 	bl	8000824 <HAL_GPIO_Init>

}
 800491c:	bf00      	nop
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	48000800 	.word	0x48000800
 8004928:	48000400 	.word	0x48000400

0800492c <GPIO_RCC_Init>:

void GPIO_RCC_Init(void)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
	//GPIOA
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	4a33      	ldr	r2, [pc, #204]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004934:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	69fb      	ldr	r3, [r7, #28]
		  __HAL_RCC_GPIOA_CLK_DISABLE();
	  }

	  //GPIOB
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 800494a:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 800494c:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004956:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	69bb      	ldr	r3, [r7, #24]
		  __HAL_RCC_GPIOB_CLK_DISABLE();
	  }

	  //GPIOC
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004962:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004964:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]
		  __HAL_RCC_GPIOC_CLK_DISABLE();
	  }

	  //GPIOD
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 800497c:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f043 0308 	orr.w	r3, r3, #8
 8004984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004986:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
		  __HAL_RCC_GPIOD_CLK_DISABLE();
	  }

	  //GPIOE
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	f043 0310 	orr.w	r3, r3, #16
 800499c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800499e:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
		  __HAL_RCC_GPIOE_CLK_DISABLE();
	  }

	  //GPIOF
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049aa:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
		  __HAL_RCC_GPIOF_CLK_DISABLE();
	  }

	  //GPIOG
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049c2:	4a0f      	ldr	r2, [pc, #60]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
		  __HAL_RCC_GPIOG_CLK_DISABLE();
	  }

	  //GPIOH
	  if(RCC_GPIOA_CLK_ENABLE){
		  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <GPIO_RCC_Init+0xd4>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
	  } else {
		  __HAL_RCC_GPIOH_CLK_DISABLE();
	  }

}
 80049f2:	bf00      	nop
 80049f4:	3724      	adds	r7, #36	; 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <GPIO_PIN_STATE_Init>:

void GPIO_PIN_STATE_Init()
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
	/*Configure GPIOS pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIOA_PINS, GPIO_PIN_SET);
 8004a08:	2201      	movs	r2, #1
 8004a0a:	2110      	movs	r1, #16
 8004a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a10:	f7fc f8b0 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, ~GPIOA_PINS, GPIO_PIN_RESET);
 8004a14:	2200      	movs	r2, #0
 8004a16:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a1e:	f7fc f8a9 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOB pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, GPIOB_PINS, GPIO_PIN_SET);
 8004a22:	2201      	movs	r2, #1
 8004a24:	2101      	movs	r1, #1
 8004a26:	4826      	ldr	r0, [pc, #152]	; (8004ac0 <GPIO_PIN_STATE_Init+0xbc>)
 8004a28:	f7fc f8a4 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, ~GPIOB_PINS, GPIO_PIN_RESET);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8004a32:	4823      	ldr	r0, [pc, #140]	; (8004ac0 <GPIO_PIN_STATE_Init+0xbc>)
 8004a34:	f7fc f89e 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOC pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIOC_PINS, GPIO_PIN_SET);
 8004a38:	2201      	movs	r2, #1
 8004a3a:	210b      	movs	r1, #11
 8004a3c:	4821      	ldr	r0, [pc, #132]	; (8004ac4 <GPIO_PIN_STATE_Init+0xc0>)
 8004a3e:	f7fc f899 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, ~GPIOC_PINS, GPIO_PIN_RESET);
 8004a42:	2200      	movs	r2, #0
 8004a44:	f64f 71f4 	movw	r1, #65524	; 0xfff4
 8004a48:	481e      	ldr	r0, [pc, #120]	; (8004ac4 <GPIO_PIN_STATE_Init+0xc0>)
 8004a4a:	f7fc f893 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOD pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIOD_PINS, GPIO_PIN_SET);
 8004a4e:	2201      	movs	r2, #1
 8004a50:	2100      	movs	r1, #0
 8004a52:	481d      	ldr	r0, [pc, #116]	; (8004ac8 <GPIO_PIN_STATE_Init+0xc4>)
 8004a54:	f7fc f88e 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ~GPIOD_PINS, GPIO_PIN_RESET);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a5e:	481a      	ldr	r0, [pc, #104]	; (8004ac8 <GPIO_PIN_STATE_Init+0xc4>)
 8004a60:	f7fc f888 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOE pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIOE_PINS, GPIO_PIN_SET);
 8004a64:	2201      	movs	r2, #1
 8004a66:	2100      	movs	r1, #0
 8004a68:	4818      	ldr	r0, [pc, #96]	; (8004acc <GPIO_PIN_STATE_Init+0xc8>)
 8004a6a:	f7fc f883 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, ~GPIOE_PINS, GPIO_PIN_RESET);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a74:	4815      	ldr	r0, [pc, #84]	; (8004acc <GPIO_PIN_STATE_Init+0xc8>)
 8004a76:	f7fc f87d 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOF pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, GPIOF_PINS, GPIO_PIN_SET);
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4814      	ldr	r0, [pc, #80]	; (8004ad0 <GPIO_PIN_STATE_Init+0xcc>)
 8004a80:	f7fc f878 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, ~GPIOF_PINS, GPIO_PIN_RESET);
 8004a84:	2200      	movs	r2, #0
 8004a86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a8a:	4811      	ldr	r0, [pc, #68]	; (8004ad0 <GPIO_PIN_STATE_Init+0xcc>)
 8004a8c:	f7fc f872 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOG pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, GPIOG_PINS, GPIO_PIN_SET);
 8004a90:	2201      	movs	r2, #1
 8004a92:	2100      	movs	r1, #0
 8004a94:	480d      	ldr	r0, [pc, #52]	; (8004acc <GPIO_PIN_STATE_Init+0xc8>)
 8004a96:	f7fc f86d 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, ~GPIOG_PINS, GPIO_PIN_RESET);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004aa0:	480a      	ldr	r0, [pc, #40]	; (8004acc <GPIO_PIN_STATE_Init+0xc8>)
 8004aa2:	f7fc f867 	bl	8000b74 <HAL_GPIO_WritePin>

	  /*Configure GPIOH pin Output Level */
	  HAL_GPIO_WritePin(GPIOF, GPIOH_PINS, GPIO_PIN_SET);
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4809      	ldr	r0, [pc, #36]	; (8004ad0 <GPIO_PIN_STATE_Init+0xcc>)
 8004aac:	f7fc f862 	bl	8000b74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOF, ~GPIOH_PINS, GPIO_PIN_RESET);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ab6:	4806      	ldr	r0, [pc, #24]	; (8004ad0 <GPIO_PIN_STATE_Init+0xcc>)
 8004ab8:	f7fc f85c 	bl	8000b74 <HAL_GPIO_WritePin>

}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	48000400 	.word	0x48000400
 8004ac4:	48000800 	.word	0x48000800
 8004ac8:	48000c00 	.word	0x48000c00
 8004acc:	48001000 	.word	0x48001000
 8004ad0:	48001400 	.word	0x48001400

08004ad4 <Init_Debug>:


static uint8_t driftbuffer[DRIFTBUFFER_SIZE] = {0};

HAL_StatusTypeDef Init_Debug(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
	// set up clock output on GPIO Pin A8 for testing
#ifdef DEBUG_HSE_OUTPUT_ENABLE
	//configure pin
	/*Configure GPIO pin : PA8 */
	 GPIO_InitTypeDef GPIO_InitStruct;
	 GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ade:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
	 GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004af8:	f7fb fe94 	bl	8000824 <HAL_GPIO_Init>
	 //map clock output to PIN PA8
	 HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8004afc:	2200      	movs	r2, #0
 8004afe:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8004b02:	2000      	movs	r0, #0
 8004b04:	f7fc fd8a 	bl	800161c <HAL_RCC_MCOConfig>
#endif
	//initialise USART 2 for USB comms
#ifdef DEBUG_USART_ENABLE
	  huart2.Instance = USART2;
 8004b08:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <Init_Debug+0xd0>)
 8004b0a:	4a27      	ldr	r2, [pc, #156]	; (8004ba8 <Init_Debug+0xd4>)
 8004b0c:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <Init_Debug+0xd0>)
 8004b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b14:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b16:	4b23      	ldr	r3, [pc, #140]	; (8004ba4 <Init_Debug+0xd0>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b1c:	4b21      	ldr	r3, [pc, #132]	; (8004ba4 <Init_Debug+0xd0>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8004b22:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <Init_Debug+0xd0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <Init_Debug+0xd0>)
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <Init_Debug+0xd0>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <Init_Debug+0xd0>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <Init_Debug+0xd0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b40:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <Init_Debug+0xd0>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b46:	4817      	ldr	r0, [pc, #92]	; (8004ba4 <Init_Debug+0xd0>)
 8004b48:	f7fe fd4e 	bl	80035e8 <HAL_UART_Init>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <Init_Debug+0x82>
	  {
	    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e022      	b.n	8004b9c <Init_Debug+0xc8>
	  }
	  setbuf(stdout, NULL);
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <Init_Debug+0xd8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fc11 	bl	8005386 <setbuf>
#endif

#ifdef DEBUG_LED1_ENABLE
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004b64:	2200      	movs	r2, #0
 8004b66:	2120      	movs	r1, #32
 8004b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b6c:	f7fc f802 	bl	8000b74 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : PD2 */
	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004b70:	2304      	movs	r3, #4
 8004b72:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b74:	2303      	movs	r3, #3
 8004b76:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b7c:	1d3b      	adds	r3, r7, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	480b      	ldr	r0, [pc, #44]	; (8004bb0 <Init_Debug+0xdc>)
 8004b82:	f7fb fe4f 	bl	8000824 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8004b86:	2201      	movs	r2, #1
 8004b88:	2120      	movs	r1, #32
 8004b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b8e:	f7fb fff1 	bl	8000b74 <HAL_GPIO_WritePin>
#endif

#ifdef DEBUG_LP_ENABLE
	  HAL_DBGMCU_EnableDBGStandbyMode();	//enable for shutdown mode
 8004b92:	f7fb fd19 	bl	80005c8 <HAL_DBGMCU_EnableDBGStandbyMode>
	  HAL_DBGMCU_EnableDBGStopMode();
 8004b96:	f7fb fd07 	bl	80005a8 <HAL_DBGMCU_EnableDBGStopMode>

#endif

	  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000840 	.word	0x20000840
 8004ba8:	40004400 	.word	0x40004400
 8004bac:	20000010 	.word	0x20000010
 8004bb0:	48000c00 	.word	0x48000c00

08004bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
HAL_StatusTypeDef SystemClock_Config(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b0b8      	sub	sp, #224	; 0xe0
 8004bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bbe:	2244      	movs	r2, #68	; 0x44
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fbd7 	bl	8005376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004bd8:	463b      	mov	r3, r7
 8004bda:	2288      	movs	r2, #136	; 0x88
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fbc9 	bl	8005376 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004be4:	f7fb ffde 	bl	8000ba4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004be8:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <SystemClock_Config+0x128>)
 8004bea:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <SystemClock_Config+0x128>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f023 0318 	bic.w	r3, r3, #24
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8004bf8:	2316      	movs	r3, #22
 8004bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004c1e:	2360      	movs	r3, #96	; 0x60
 8004c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c24:	2302      	movs	r3, #2
 8004c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 26;
 8004c36:	231a      	movs	r3, #26
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004c3c:	2307      	movs	r3, #7
 8004c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004c42:	2302      	movs	r3, #2
 8004c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fc f81a 	bl	8000c8c <HAL_RCC_OscConfig>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <SystemClock_Config+0xae>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e037      	b.n	8004cd2 <SystemClock_Config+0x11e>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c62:	230f      	movs	r3, #15
 8004c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004c80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc fbe6 	bl	8001458 <HAL_RCC_ClockConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <SystemClock_Config+0xe2>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e01d      	b.n	8004cd2 <SystemClock_Config+0x11e>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8004c96:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8004c9a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ca8:	463b      	mov	r3, r7
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc fe3e 	bl	800192c <HAL_RCCEx_PeriphCLKConfig>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <SystemClock_Config+0x106>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00b      	b.n	8004cd2 <SystemClock_Config+0x11e>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004cba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004cbe:	f7fb ff8f 	bl	8000be0 <HAL_PWREx_ControlVoltageScaling>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <SystemClock_Config+0x118>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e002      	b.n	8004cd2 <SystemClock_Config+0x11e>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004ccc:	f7fd f914 	bl	8001ef8 <HAL_RCCEx_EnableMSIPLLMode>
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	37e0      	adds	r7, #224	; 0xe0
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <__io_putchar>:
   	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_6);
	__HAL_RCC_PWR_CLK_DISABLE();
}

PUTCHAR_PROTOTYPE
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) &ch,1,0xFFFF);
 8004ce8:	1d39      	adds	r1, r7, #4
 8004cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4803      	ldr	r0, [pc, #12]	; (8004d00 <__io_putchar+0x20>)
 8004cf2:	f7fe fcc7 	bl	8003684 <HAL_UART_Transmit>
	return ch;
 8004cf6:	687b      	ldr	r3, [r7, #4]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000840 	.word	0x20000840

08004d04 <GPIO_Set_Pin_LP>:

void GPIO_Set_Pin_LP(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	611a      	str	r2, [r3, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d1a:	4a3e      	ldr	r2, [pc, #248]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d1c:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d26:	4b3b      	ldr	r3, [pc, #236]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d32:	4a38      	ldr	r2, [pc, #224]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d3e:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d62:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d6e:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d7a:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d7c:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	f043 0308 	orr.w	r3, r3, #8
 8004d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d86:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <GPIO_Set_Pin_LP+0x110>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2120      	movs	r1, #32
 8004d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d9a:	f7fb feeb 	bl	8000b74 <HAL_GPIO_WritePin>
	  /*Configure GPIO pins : PC13 PC0 PC1 PC2
	                           PC3 PC4 PC5 PC6
	                           PC7 PC8 PC9 PC10
	                           PC11 PC12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8004d9e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8004da2:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
	                          |GPIO_PIN_11|GPIO_PIN_12;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004da4:	2303      	movs	r3, #3
 8004da6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	4619      	mov	r1, r3
 8004db2:	4819      	ldr	r0, [pc, #100]	; (8004e18 <GPIO_Set_Pin_LP+0x114>)
 8004db4:	f7fb fd36 	bl	8000824 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PA0 PA1 PA4 PA6
	                           PA7 PA9 PA10 PA11
	                           PA12 PA15 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8004db8:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 8004dbc:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
	                          |GPIO_PIN_12|GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc6:	f107 0314 	add.w	r3, r7, #20
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dd0:	f7fb fd28 	bl	8000824 <HAL_GPIO_Init>

	  /*Configure GPIO pin : LD2_Pin */
	  GPIO_InitStruct.Pin = LD2_Pin;
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de0:	2300      	movs	r3, #0
 8004de2:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004de4:	f107 0314 	add.w	r3, r7, #20
 8004de8:	4619      	mov	r1, r3
 8004dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dee:	f7fb fd19 	bl	8000824 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PB0 PB1 PB2 PB10
	                           PB11 PB12 PB13 PB14
	                           PB15 PB3 PB4 PB5
	                           PB6 PB7 PB8 PB9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8004df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004df6:	617b      	str	r3, [r7, #20]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4619      	mov	r1, r3
 8004e06:	4805      	ldr	r0, [pc, #20]	; (8004e1c <GPIO_Set_Pin_LP+0x118>)
 8004e08:	f7fb fd0c 	bl	8000824 <HAL_GPIO_Init>

}
 8004e0c:	bf00      	nop
 8004e0e:	3728      	adds	r7, #40	; 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	48000800 	.word	0x48000800
 8004e1c:	48000400 	.word	0x48000400

08004e20 <main>:
 **
 **===========================================================================
 **/

int main(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b0c4      	sub	sp, #272	; 0x110
 8004e24:	af00      	add	r7, sp, #0
//======================== 1. SYSTEM INIT & CLOCK CONFIG ========================//

	HAL_Init();				//Init Flash prefetch, systick timer, NVIC and LL functions
 8004e26:	f7fb fb5f 	bl	80004e8 <HAL_Init>
	SystemClock_Config();	//configure clock
 8004e2a:	f7ff fec3 	bl	8004bb4 <SystemClock_Config>
	GPIO_Set_Pin_LP();		//Configure all unused GPIO pins to low Power mode
 8004e2e:	f7ff ff69 	bl	8004d04 <GPIO_Set_Pin_LP>
	Init_Debug();			// initialize debug peripherals
 8004e32:	f7ff fe4f 	bl	8004ad4 <Init_Debug>
	printf("Loading Data...\r\n");
 8004e36:	482b      	ldr	r0, [pc, #172]	; (8004ee4 <main+0xc4>)
 8004e38:	f000 fa3c 	bl	80052b4 <puts>

	int i = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t statusbyte = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	Init_Flash_Chips(&statusbyte);
 8004e48:	f207 1307 	addw	r3, r7, #263	; 0x107
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fb27 	bl	80044a0 <Init_Flash_Chips>
	for (i = 0; i < 4; ++i)
 8004e52:	2300      	movs	r3, #0
 8004e54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e58:	e03e      	b.n	8004ed8 <main+0xb8>
	{
		uint8_t address[3] = {0,0,0};
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		FLASH_SetAddress(address[2],address[1],address[0]);
 8004e6c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8004e70:	f897 1105 	ldrb.w	r1, [r7, #261]	; 0x105
 8004e74:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fc2b 	bl	80046d4 <FLASH_SetAddress>
		uint32_t add = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		while(add < FLASH_MAX_ADDRESS)
 8004e84:	e01e      	b.n	8004ec4 <main+0xa4>
		{
			//load a page from memory
			uint8_t buffer[256] = {0};
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2100      	movs	r1, #0
 8004e92:	f000 fa70 	bl	8005376 <memset>
			memcpy(buffer,FLASH_READ_BufferHF(i,BUFFER1),256);
 8004e96:	2101      	movs	r1, #1
 8004e98:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8004e9c:	f7ff fc82 	bl	80047a4 <FLASH_READ_BufferHF>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eac:	461a      	mov	r2, r3
 8004eae:	f000 fa57 	bl	8005360 <memcpy>
			FLASH_IncAddress(256);
 8004eb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004eb6:	f7ff fc27 	bl	8004708 <FLASH_IncAddress>
			//increment address
			add = FLASH_GetAddress();
 8004eba:	f7ff fc5f 	bl	800477c <FLASH_GetAddress>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		while(add < FLASH_MAX_ADDRESS)
 8004ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ec8:	4a07      	ldr	r2, [pc, #28]	; (8004ee8 <main+0xc8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d9db      	bls.n	8004e86 <main+0x66>
	for (i = 0; i < 4; ++i)
 8004ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	ddbc      	ble.n	8004e5a <main+0x3a>
		}
	}
		while(1)
 8004ee0:	e7fe      	b.n	8004ee0 <main+0xc0>
 8004ee2:	bf00      	nop
 8004ee4:	080061c8 	.word	0x080061c8
 8004ee8:	007ffffe 	.word	0x007ffffe

08004eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ef0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ef2:	e003      	b.n	8004efc <LoopCopyDataInit>

08004ef4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ef6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ef8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004efa:	3104      	adds	r1, #4

08004efc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004efc:	480b      	ldr	r0, [pc, #44]	; (8004f2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004f00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004f02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004f04:	d3f6      	bcc.n	8004ef4 <CopyDataInit>
	ldr	r2, =_sbss
 8004f06:	4a0b      	ldr	r2, [pc, #44]	; (8004f34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004f08:	e002      	b.n	8004f10 <LoopFillZerobss>

08004f0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004f0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004f0c:	f842 3b04 	str.w	r3, [r2], #4

08004f10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <LoopForever+0x16>)
	cmp	r2, r3
 8004f12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004f14:	d3f9      	bcc.n	8004f0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f16:	f000 f997 	bl	8005248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f1a:	f000 f9fd 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f1e:	f7ff ff7f 	bl	8004e20 <main>

08004f22 <LoopForever>:

LoopForever:
    b LoopForever
 8004f22:	e7fe      	b.n	8004f22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004f24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004f28:	0800629c 	.word	0x0800629c
	ldr	r0, =_sdata
 8004f2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004f30:	20000514 	.word	0x20000514
	ldr	r2, =_sbss
 8004f34:	20000514 	.word	0x20000514
	ldr	r3, = _ebss
 8004f38:	200008f8 	.word	0x200008f8

08004f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f3c:	e7fe      	b.n	8004f3c <ADC1_2_IRQHandler>
	...

08004f40 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f46:	4a0f      	ldr	r2, [pc, #60]	; (8004f84 <HAL_MspInit+0x44>)
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <HAL_MspInit+0x44>)
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6613      	str	r3, [r2, #96]	; 0x60
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_MspInit+0x44>)
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <HAL_MspInit+0x44>)
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_MspInit+0x44>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f68:	6593      	str	r3, [r2, #88]	; 0x58
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_MspInit+0x44>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <HAL_UART_MspInit+0x8c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d130      	bne.n	800500c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004faa:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <HAL_UART_MspInit+0x90>)
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_UART_MspInit+0x90>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <HAL_UART_MspInit+0x90>)
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <HAL_UART_MspInit+0x90>)
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <HAL_UART_MspInit+0x90>)
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <HAL_UART_MspInit+0x90>)
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004fda:	230c      	movs	r3, #12
 8004fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fea:	2307      	movs	r3, #7
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff8:	f7fb fc14 	bl	8000824 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2100      	movs	r1, #0
 8005000:	2026      	movs	r0, #38	; 0x26
 8005002:	f7fb fba3 	bl	800074c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005006:	2026      	movs	r0, #38	; 0x26
 8005008:	f7fb fbbc 	bl	8000784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800500c:	bf00      	nop
 800500e:	3728      	adds	r7, #40	; 0x28
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40004400 	.word	0x40004400
 8005018:	40021000 	.word	0x40021000

0800501c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	611a      	str	r2, [r3, #16]
	  if(hspi->Instance==SPI2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a17      	ldr	r2, [pc, #92]	; (8005098 <HAL_SPI_MspInit+0x7c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d128      	bne.n	8005090 <HAL_SPI_MspInit+0x74>
	  {
	  /* USER CODE BEGIN SPI2_MspInit 0 */

	  /* USER CODE END SPI2_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_SPI2_CLK_ENABLE();
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <HAL_SPI_MspInit+0x80>)
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <HAL_SPI_MspInit+0x80>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005048:	6593      	str	r3, [r2, #88]	; 0x58
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <HAL_SPI_MspInit+0x80>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_SPI_MspInit+0x80>)
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_SPI_MspInit+0x80>)
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_SPI_MspInit+0x80>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
	    /**SPI2 GPIO Configuration
	    PB13     ------> SPI2_SCK
	    PB14     ------> SPI2_MISO
	    PB15     ------> SPI2_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800506e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005072:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005074:	2302      	movs	r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	2303      	movs	r3, #3
 800507e:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005080:	2305      	movs	r3, #5
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	4619      	mov	r1, r3
 800508a:	4805      	ldr	r0, [pc, #20]	; (80050a0 <HAL_SPI_MspInit+0x84>)
 800508c:	f7fb fbca 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005090:	bf00      	nop
 8005092:	3728      	adds	r7, #40	; 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40003800 	.word	0x40003800
 800509c:	40021000 	.word	0x40021000
 80050a0:	48000400 	.word	0x48000400

080050a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE NonMaskableInt_IRQn 0 */


}
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  /* USER CODE HardFault_IRQn 0 */


  while (1)
 80050b6:	e7fe      	b.n	80050b6 <HardFault_Handler+0x4>

080050b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE MemoryManagement_IRQn 0 */


  while (1)
 80050bc:	e7fe      	b.n	80050bc <MemManage_Handler+0x4>

080050be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */


  while (1)
 80050c2:	e7fe      	b.n	80050c2 <BusFault_Handler+0x4>

080050c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */


  while (1)
 80050c8:	e7fe      	b.n	80050c8 <UsageFault_Handler+0x4>

080050ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  /* USER CODE SVCall_IRQn 0 */


}
 80050ce:	bf00      	nop
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE DebugMonitor_IRQn 0 */


}
 80050dc:	bf00      	nop
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  /* USER CODE PendSV_IRQn 0 */


}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 80050f8:	f7fb fa16 	bl	8000528 <HAL_IncTick>

}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}

08005100 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005104:	4802      	ldr	r0, [pc, #8]	; (8005110 <RTC_WKUP_IRQHandler+0x10>)
 8005106:	f7fd f8d1 	bl	80022ac <HAL_RTCEx_WakeUpTimerIRQHandler>

}
 800510a:	bf00      	nop
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	200008c4 	.word	0x200008c4

08005114 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005118:	4802      	ldr	r0, [pc, #8]	; (8005124 <USART2_IRQHandler+0x10>)
 800511a:	f7fe fb47 	bl	80037ac <HAL_UART_IRQHandler>

}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000840 	.word	0x20000840

08005128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e00a      	b.n	8005150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800513a:	68bc      	ldr	r4, [r7, #8]
 800513c:	1c63      	adds	r3, r4, #1
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	f3af 8000 	nop.w
 8005144:	4603      	mov	r3, r0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	3301      	adds	r3, #1
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	dbf0      	blt.n	800513a <_read+0x12>
	}

return len;
 8005158:	687b      	ldr	r3, [r7, #4]
}
 800515a:	4618      	mov	r0, r3
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd90      	pop	{r4, r7, pc}

08005162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e009      	b.n	8005188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	60ba      	str	r2, [r7, #8]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fdaf 	bl	8004ce0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3301      	adds	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	dbf1      	blt.n	8005174 <_write+0x12>
	}
	return len;
 8005190:	687b      	ldr	r3, [r7, #4]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <_sbrk+0x50>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <_sbrk+0x16>
		heap_end = &end;
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <_sbrk+0x50>)
 80051ae:	4a10      	ldr	r2, [pc, #64]	; (80051f0 <_sbrk+0x54>)
 80051b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <_sbrk+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <_sbrk+0x50>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	466a      	mov	r2, sp
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d907      	bls.n	80051d6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80051c6:	f000 f8a1 	bl	800530c <__errno>
 80051ca:	4602      	mov	r2, r0
 80051cc:	230c      	movs	r3, #12
 80051ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80051d0:	f04f 33ff 	mov.w	r3, #4294967295
 80051d4:	e006      	b.n	80051e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <_sbrk+0x50>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	4a03      	ldr	r2, [pc, #12]	; (80051ec <_sbrk+0x50>)
 80051e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000744 	.word	0x20000744
 80051f0:	200008f8 	.word	0x200008f8

080051f4 <_close>:

int _close(int file)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	return -1;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800521c:	605a      	str	r2, [r3, #4]
	return 0;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
	return 0;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800524c:	4a17      	ldr	r2, [pc, #92]	; (80052ac <SystemInit+0x64>)
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <SystemInit+0x64>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800525c:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <SystemInit+0x68>)
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <SystemInit+0x68>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <SystemInit+0x68>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800526e:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <SystemInit+0x68>)
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <SystemInit+0x68>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005278:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800527c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <SystemInit+0x68>)
 8005280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005284:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005286:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <SystemInit+0x68>)
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <SystemInit+0x68>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005290:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005292:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <SystemInit+0x68>)
 8005294:	2200      	movs	r2, #0
 8005296:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <SystemInit+0x64>)
 800529a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800529e:	609a      	str	r2, [r3, #8]
#endif
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000ed00 	.word	0xe000ed00
 80052b0:	40021000 	.word	0x40021000

080052b4 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fa ff83 	bl	80001c8 <strlen>
 80052c2:	4603      	mov	r3, r0
 80052c4:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	2001      	movs	r0, #1
 80052d0:	f7ff ff47 	bl	8005162 <_write>
 80052d4:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80052d6:	2201      	movs	r2, #1
 80052d8:	490b      	ldr	r1, [pc, #44]	; (8005308 <puts+0x54>)
 80052da:	2001      	movs	r0, #1
 80052dc:	f7ff ff41 	bl	8005162 <_write>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d102      	bne.n	80052f8 <puts+0x44>
	{
		res = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e002      	b.n	80052fe <puts+0x4a>
	}
	else
	{
		res = EOF;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	617b      	str	r3, [r7, #20]
	}

	return res;
 80052fe:	697b      	ldr	r3, [r7, #20]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	080061dc 	.word	0x080061dc

0800530c <__errno>:
 800530c:	4b01      	ldr	r3, [pc, #4]	; (8005314 <__errno+0x8>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000010 	.word	0x20000010

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4e0d      	ldr	r6, [pc, #52]	; (8005350 <__libc_init_array+0x38>)
 800531c:	4c0d      	ldr	r4, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 800531e:	1ba4      	subs	r4, r4, r6
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	2500      	movs	r5, #0
 8005324:	42a5      	cmp	r5, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	4e0b      	ldr	r6, [pc, #44]	; (8005358 <__libc_init_array+0x40>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	; (800535c <__libc_init_array+0x44>)
 800532c:	f000 ff40 	bl	80061b0 <_init>
 8005330:	1ba4      	subs	r4, r4, r6
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	2500      	movs	r5, #0
 8005336:	42a5      	cmp	r5, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005340:	4798      	blx	r3
 8005342:	3501      	adds	r5, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800534a:	4798      	blx	r3
 800534c:	3501      	adds	r5, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	08006294 	.word	0x08006294
 8005354:	08006294 	.word	0x08006294
 8005358:	08006294 	.word	0x08006294
 800535c:	08006298 	.word	0x08006298

08005360 <memcpy>:
 8005360:	b510      	push	{r4, lr}
 8005362:	1e43      	subs	r3, r0, #1
 8005364:	440a      	add	r2, r1
 8005366:	4291      	cmp	r1, r2
 8005368:	d100      	bne.n	800536c <memcpy+0xc>
 800536a:	bd10      	pop	{r4, pc}
 800536c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005374:	e7f7      	b.n	8005366 <memcpy+0x6>

08005376 <memset>:
 8005376:	4402      	add	r2, r0
 8005378:	4603      	mov	r3, r0
 800537a:	4293      	cmp	r3, r2
 800537c:	d100      	bne.n	8005380 <memset+0xa>
 800537e:	4770      	bx	lr
 8005380:	f803 1b01 	strb.w	r1, [r3], #1
 8005384:	e7f9      	b.n	800537a <memset+0x4>

08005386 <setbuf>:
 8005386:	2900      	cmp	r1, #0
 8005388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538c:	bf0c      	ite	eq
 800538e:	2202      	moveq	r2, #2
 8005390:	2200      	movne	r2, #0
 8005392:	f000 b801 	b.w	8005398 <setvbuf>
	...

08005398 <setvbuf>:
 8005398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800539c:	461d      	mov	r5, r3
 800539e:	4b60      	ldr	r3, [pc, #384]	; (8005520 <setvbuf+0x188>)
 80053a0:	681e      	ldr	r6, [r3, #0]
 80053a2:	4604      	mov	r4, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	4690      	mov	r8, r2
 80053a8:	b126      	cbz	r6, 80053b4 <setvbuf+0x1c>
 80053aa:	69b3      	ldr	r3, [r6, #24]
 80053ac:	b913      	cbnz	r3, 80053b4 <setvbuf+0x1c>
 80053ae:	4630      	mov	r0, r6
 80053b0:	f000 f9e4 	bl	800577c <__sinit>
 80053b4:	4b5b      	ldr	r3, [pc, #364]	; (8005524 <setvbuf+0x18c>)
 80053b6:	429c      	cmp	r4, r3
 80053b8:	d166      	bne.n	8005488 <setvbuf+0xf0>
 80053ba:	6874      	ldr	r4, [r6, #4]
 80053bc:	f1b8 0f02 	cmp.w	r8, #2
 80053c0:	d006      	beq.n	80053d0 <setvbuf+0x38>
 80053c2:	f1b8 0f01 	cmp.w	r8, #1
 80053c6:	f200 80a7 	bhi.w	8005518 <setvbuf+0x180>
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	f2c0 80a4 	blt.w	8005518 <setvbuf+0x180>
 80053d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d2:	07da      	lsls	r2, r3, #31
 80053d4:	d405      	bmi.n	80053e2 <setvbuf+0x4a>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	059b      	lsls	r3, r3, #22
 80053da:	d402      	bmi.n	80053e2 <setvbuf+0x4a>
 80053dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053de:	f000 fb7f 	bl	8005ae0 <__retarget_lock_acquire_recursive>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4630      	mov	r0, r6
 80053e6:	f000 f935 	bl	8005654 <_fflush_r>
 80053ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ec:	b141      	cbz	r1, 8005400 <setvbuf+0x68>
 80053ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053f2:	4299      	cmp	r1, r3
 80053f4:	d002      	beq.n	80053fc <setvbuf+0x64>
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 fa96 	bl	8005928 <_free_r>
 80053fc:	2300      	movs	r3, #0
 80053fe:	6363      	str	r3, [r4, #52]	; 0x34
 8005400:	2300      	movs	r3, #0
 8005402:	61a3      	str	r3, [r4, #24]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	0618      	lsls	r0, r3, #24
 800540a:	d503      	bpl.n	8005414 <setvbuf+0x7c>
 800540c:	6921      	ldr	r1, [r4, #16]
 800540e:	4630      	mov	r0, r6
 8005410:	f000 fa8a 	bl	8005928 <_free_r>
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	f1b8 0f02 	cmp.w	r8, #2
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	d072      	beq.n	800550c <setvbuf+0x174>
 8005426:	ab01      	add	r3, sp, #4
 8005428:	466a      	mov	r2, sp
 800542a:	4621      	mov	r1, r4
 800542c:	4630      	mov	r0, r6
 800542e:	f000 fb59 	bl	8005ae4 <__swhatbuf_r>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	4318      	orrs	r0, r3
 8005436:	81a0      	strh	r0, [r4, #12]
 8005438:	2d00      	cmp	r5, #0
 800543a:	d12f      	bne.n	800549c <setvbuf+0x104>
 800543c:	9d00      	ldr	r5, [sp, #0]
 800543e:	4628      	mov	r0, r5
 8005440:	f000 fb7c 	bl	8005b3c <malloc>
 8005444:	4607      	mov	r7, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	d162      	bne.n	8005510 <setvbuf+0x178>
 800544a:	f8dd 9000 	ldr.w	r9, [sp]
 800544e:	45a9      	cmp	r9, r5
 8005450:	d150      	bne.n	80054f4 <setvbuf+0x15c>
 8005452:	f04f 35ff 	mov.w	r5, #4294967295
 8005456:	2200      	movs	r2, #0
 8005458:	60a2      	str	r2, [r4, #8]
 800545a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	6122      	str	r2, [r4, #16]
 8005462:	2201      	movs	r2, #1
 8005464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005468:	6162      	str	r2, [r4, #20]
 800546a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	07d1      	lsls	r1, r2, #31
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	d404      	bmi.n	8005480 <setvbuf+0xe8>
 8005476:	059b      	lsls	r3, r3, #22
 8005478:	d402      	bmi.n	8005480 <setvbuf+0xe8>
 800547a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800547c:	f000 fb31 	bl	8005ae2 <__retarget_lock_release_recursive>
 8005480:	4628      	mov	r0, r5
 8005482:	b003      	add	sp, #12
 8005484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <setvbuf+0x190>)
 800548a:	429c      	cmp	r4, r3
 800548c:	d101      	bne.n	8005492 <setvbuf+0xfa>
 800548e:	68b4      	ldr	r4, [r6, #8]
 8005490:	e794      	b.n	80053bc <setvbuf+0x24>
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <setvbuf+0x194>)
 8005494:	429c      	cmp	r4, r3
 8005496:	bf08      	it	eq
 8005498:	68f4      	ldreq	r4, [r6, #12]
 800549a:	e78f      	b.n	80053bc <setvbuf+0x24>
 800549c:	2f00      	cmp	r7, #0
 800549e:	d0ce      	beq.n	800543e <setvbuf+0xa6>
 80054a0:	69b3      	ldr	r3, [r6, #24]
 80054a2:	b913      	cbnz	r3, 80054aa <setvbuf+0x112>
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 f969 	bl	800577c <__sinit>
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	6127      	str	r7, [r4, #16]
 80054ae:	429d      	cmp	r5, r3
 80054b0:	bf18      	it	ne
 80054b2:	89a3      	ldrhne	r3, [r4, #12]
 80054b4:	6027      	str	r7, [r4, #0]
 80054b6:	bf1c      	itt	ne
 80054b8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 80054bc:	81a3      	strhne	r3, [r4, #12]
 80054be:	f1b8 0f01 	cmp.w	r8, #1
 80054c2:	bf08      	it	eq
 80054c4:	89a3      	ldrheq	r3, [r4, #12]
 80054c6:	6165      	str	r5, [r4, #20]
 80054c8:	bf04      	itt	eq
 80054ca:	f043 0301 	orreq.w	r3, r3, #1
 80054ce:	81a3      	strheq	r3, [r4, #12]
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	f013 0208 	ands.w	r2, r3, #8
 80054d6:	d01d      	beq.n	8005514 <setvbuf+0x17c>
 80054d8:	07da      	lsls	r2, r3, #31
 80054da:	bf41      	itttt	mi
 80054dc:	2200      	movmi	r2, #0
 80054de:	426d      	negmi	r5, r5
 80054e0:	60a2      	strmi	r2, [r4, #8]
 80054e2:	61a5      	strmi	r5, [r4, #24]
 80054e4:	bf58      	it	pl
 80054e6:	60a5      	strpl	r5, [r4, #8]
 80054e8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80054ea:	f015 0501 	ands.w	r5, r5, #1
 80054ee:	d0c2      	beq.n	8005476 <setvbuf+0xde>
 80054f0:	2500      	movs	r5, #0
 80054f2:	e7c5      	b.n	8005480 <setvbuf+0xe8>
 80054f4:	4648      	mov	r0, r9
 80054f6:	f000 fb21 	bl	8005b3c <malloc>
 80054fa:	4607      	mov	r7, r0
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d0a8      	beq.n	8005452 <setvbuf+0xba>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	464d      	mov	r5, r9
 800550a:	e7c9      	b.n	80054a0 <setvbuf+0x108>
 800550c:	2500      	movs	r5, #0
 800550e:	e7a2      	b.n	8005456 <setvbuf+0xbe>
 8005510:	46a9      	mov	r9, r5
 8005512:	e7f5      	b.n	8005500 <setvbuf+0x168>
 8005514:	60a2      	str	r2, [r4, #8]
 8005516:	e7e7      	b.n	80054e8 <setvbuf+0x150>
 8005518:	f04f 35ff 	mov.w	r5, #4294967295
 800551c:	e7b0      	b.n	8005480 <setvbuf+0xe8>
 800551e:	bf00      	nop
 8005520:	20000010 	.word	0x20000010
 8005524:	0800624c 	.word	0x0800624c
 8005528:	0800626c 	.word	0x0800626c
 800552c:	0800622c 	.word	0x0800622c

08005530 <__sflush_r>:
 8005530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005534:	b293      	uxth	r3, r2
 8005536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	4605      	mov	r5, r0
 800553c:	0718      	lsls	r0, r3, #28
 800553e:	460c      	mov	r4, r1
 8005540:	d461      	bmi.n	8005606 <__sflush_r+0xd6>
 8005542:	684b      	ldr	r3, [r1, #4]
 8005544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005548:	2b00      	cmp	r3, #0
 800554a:	818a      	strh	r2, [r1, #12]
 800554c:	dc05      	bgt.n	800555a <__sflush_r+0x2a>
 800554e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc02      	bgt.n	800555a <__sflush_r+0x2a>
 8005554:	2000      	movs	r0, #0
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800555c:	2e00      	cmp	r6, #0
 800555e:	d0f9      	beq.n	8005554 <__sflush_r+0x24>
 8005560:	2300      	movs	r3, #0
 8005562:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005566:	682f      	ldr	r7, [r5, #0]
 8005568:	602b      	str	r3, [r5, #0]
 800556a:	d037      	beq.n	80055dc <__sflush_r+0xac>
 800556c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	075a      	lsls	r2, r3, #29
 8005572:	d505      	bpl.n	8005580 <__sflush_r+0x50>
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	1ac0      	subs	r0, r0, r3
 8005578:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800557a:	b10b      	cbz	r3, 8005580 <__sflush_r+0x50>
 800557c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800557e:	1ac0      	subs	r0, r0, r3
 8005580:	2300      	movs	r3, #0
 8005582:	4602      	mov	r2, r0
 8005584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005586:	6a21      	ldr	r1, [r4, #32]
 8005588:	4628      	mov	r0, r5
 800558a:	47b0      	blx	r6
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	d106      	bne.n	80055a0 <__sflush_r+0x70>
 8005592:	6829      	ldr	r1, [r5, #0]
 8005594:	291d      	cmp	r1, #29
 8005596:	d84f      	bhi.n	8005638 <__sflush_r+0x108>
 8005598:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <__sflush_r+0x120>)
 800559a:	40ca      	lsrs	r2, r1
 800559c:	07d6      	lsls	r6, r2, #31
 800559e:	d54b      	bpl.n	8005638 <__sflush_r+0x108>
 80055a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a4:	b21b      	sxth	r3, r3
 80055a6:	2200      	movs	r2, #0
 80055a8:	6062      	str	r2, [r4, #4]
 80055aa:	04d9      	lsls	r1, r3, #19
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	d504      	bpl.n	80055be <__sflush_r+0x8e>
 80055b4:	1c42      	adds	r2, r0, #1
 80055b6:	d101      	bne.n	80055bc <__sflush_r+0x8c>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b903      	cbnz	r3, 80055be <__sflush_r+0x8e>
 80055bc:	6560      	str	r0, [r4, #84]	; 0x54
 80055be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c0:	602f      	str	r7, [r5, #0]
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d0c6      	beq.n	8005554 <__sflush_r+0x24>
 80055c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ca:	4299      	cmp	r1, r3
 80055cc:	d002      	beq.n	80055d4 <__sflush_r+0xa4>
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f9aa 	bl	8005928 <_free_r>
 80055d4:	2000      	movs	r0, #0
 80055d6:	6360      	str	r0, [r4, #52]	; 0x34
 80055d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055dc:	6a21      	ldr	r1, [r4, #32]
 80055de:	2301      	movs	r3, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	1c41      	adds	r1, r0, #1
 80055e6:	d1c2      	bne.n	800556e <__sflush_r+0x3e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0bf      	beq.n	800556e <__sflush_r+0x3e>
 80055ee:	2b1d      	cmp	r3, #29
 80055f0:	d001      	beq.n	80055f6 <__sflush_r+0xc6>
 80055f2:	2b16      	cmp	r3, #22
 80055f4:	d101      	bne.n	80055fa <__sflush_r+0xca>
 80055f6:	602f      	str	r7, [r5, #0]
 80055f8:	e7ac      	b.n	8005554 <__sflush_r+0x24>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005606:	690f      	ldr	r7, [r1, #16]
 8005608:	2f00      	cmp	r7, #0
 800560a:	d0a3      	beq.n	8005554 <__sflush_r+0x24>
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	680e      	ldr	r6, [r1, #0]
 8005610:	bf08      	it	eq
 8005612:	694b      	ldreq	r3, [r1, #20]
 8005614:	600f      	str	r7, [r1, #0]
 8005616:	bf18      	it	ne
 8005618:	2300      	movne	r3, #0
 800561a:	eba6 0807 	sub.w	r8, r6, r7
 800561e:	608b      	str	r3, [r1, #8]
 8005620:	f1b8 0f00 	cmp.w	r8, #0
 8005624:	dd96      	ble.n	8005554 <__sflush_r+0x24>
 8005626:	4643      	mov	r3, r8
 8005628:	463a      	mov	r2, r7
 800562a:	6a21      	ldr	r1, [r4, #32]
 800562c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800562e:	4628      	mov	r0, r5
 8005630:	47b0      	blx	r6
 8005632:	2800      	cmp	r0, #0
 8005634:	dc07      	bgt.n	8005646 <__sflush_r+0x116>
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563c:	81a3      	strh	r3, [r4, #12]
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005646:	4407      	add	r7, r0
 8005648:	eba8 0800 	sub.w	r8, r8, r0
 800564c:	e7e8      	b.n	8005620 <__sflush_r+0xf0>
 800564e:	bf00      	nop
 8005650:	20400001 	.word	0x20400001

08005654 <_fflush_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	b913      	cbnz	r3, 8005664 <_fflush_r+0x10>
 800565e:	2500      	movs	r5, #0
 8005660:	4628      	mov	r0, r5
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	b118      	cbz	r0, 800566e <_fflush_r+0x1a>
 8005666:	6983      	ldr	r3, [r0, #24]
 8005668:	b90b      	cbnz	r3, 800566e <_fflush_r+0x1a>
 800566a:	f000 f887 	bl	800577c <__sinit>
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <_fflush_r+0x6c>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d11b      	bne.n	80056ac <_fflush_r+0x58>
 8005674:	686c      	ldr	r4, [r5, #4]
 8005676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ef      	beq.n	800565e <_fflush_r+0xa>
 800567e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005680:	07d0      	lsls	r0, r2, #31
 8005682:	d404      	bmi.n	800568e <_fflush_r+0x3a>
 8005684:	0599      	lsls	r1, r3, #22
 8005686:	d402      	bmi.n	800568e <_fflush_r+0x3a>
 8005688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800568a:	f000 fa29 	bl	8005ae0 <__retarget_lock_acquire_recursive>
 800568e:	4628      	mov	r0, r5
 8005690:	4621      	mov	r1, r4
 8005692:	f7ff ff4d 	bl	8005530 <__sflush_r>
 8005696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005698:	07da      	lsls	r2, r3, #31
 800569a:	4605      	mov	r5, r0
 800569c:	d4e0      	bmi.n	8005660 <_fflush_r+0xc>
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	059b      	lsls	r3, r3, #22
 80056a2:	d4dd      	bmi.n	8005660 <_fflush_r+0xc>
 80056a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a6:	f000 fa1c 	bl	8005ae2 <__retarget_lock_release_recursive>
 80056aa:	e7d9      	b.n	8005660 <_fflush_r+0xc>
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <_fflush_r+0x70>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d101      	bne.n	80056b6 <_fflush_r+0x62>
 80056b2:	68ac      	ldr	r4, [r5, #8]
 80056b4:	e7df      	b.n	8005676 <_fflush_r+0x22>
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <_fflush_r+0x74>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	bf08      	it	eq
 80056bc:	68ec      	ldreq	r4, [r5, #12]
 80056be:	e7da      	b.n	8005676 <_fflush_r+0x22>
 80056c0:	0800624c 	.word	0x0800624c
 80056c4:	0800626c 	.word	0x0800626c
 80056c8:	0800622c 	.word	0x0800622c

080056cc <_cleanup_r>:
 80056cc:	4901      	ldr	r1, [pc, #4]	; (80056d4 <_cleanup_r+0x8>)
 80056ce:	f000 b9e7 	b.w	8005aa0 <_fwalk_reent>
 80056d2:	bf00      	nop
 80056d4:	0800606d 	.word	0x0800606d

080056d8 <std.isra.0>:
 80056d8:	2300      	movs	r3, #0
 80056da:	b510      	push	{r4, lr}
 80056dc:	4604      	mov	r4, r0
 80056de:	6003      	str	r3, [r0, #0]
 80056e0:	6043      	str	r3, [r0, #4]
 80056e2:	6083      	str	r3, [r0, #8]
 80056e4:	8181      	strh	r1, [r0, #12]
 80056e6:	6643      	str	r3, [r0, #100]	; 0x64
 80056e8:	81c2      	strh	r2, [r0, #14]
 80056ea:	6103      	str	r3, [r0, #16]
 80056ec:	6143      	str	r3, [r0, #20]
 80056ee:	6183      	str	r3, [r0, #24]
 80056f0:	4619      	mov	r1, r3
 80056f2:	2208      	movs	r2, #8
 80056f4:	305c      	adds	r0, #92	; 0x5c
 80056f6:	f7ff fe3e 	bl	8005376 <memset>
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <std.isra.0+0x38>)
 80056fc:	6263      	str	r3, [r4, #36]	; 0x24
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <std.isra.0+0x3c>)
 8005700:	62a3      	str	r3, [r4, #40]	; 0x28
 8005702:	4b05      	ldr	r3, [pc, #20]	; (8005718 <std.isra.0+0x40>)
 8005704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <std.isra.0+0x44>)
 8005708:	6224      	str	r4, [r4, #32]
 800570a:	6323      	str	r3, [r4, #48]	; 0x30
 800570c:	bd10      	pop	{r4, pc}
 800570e:	bf00      	nop
 8005710:	08005fa1 	.word	0x08005fa1
 8005714:	08005fc3 	.word	0x08005fc3
 8005718:	08005ffb 	.word	0x08005ffb
 800571c:	0800601f 	.word	0x0800601f

08005720 <__sfmoreglue>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	1e4a      	subs	r2, r1, #1
 8005724:	2568      	movs	r5, #104	; 0x68
 8005726:	4355      	muls	r5, r2
 8005728:	460e      	mov	r6, r1
 800572a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800572e:	f000 fa0d 	bl	8005b4c <_malloc_r>
 8005732:	4604      	mov	r4, r0
 8005734:	b140      	cbz	r0, 8005748 <__sfmoreglue+0x28>
 8005736:	2100      	movs	r1, #0
 8005738:	e880 0042 	stmia.w	r0, {r1, r6}
 800573c:	300c      	adds	r0, #12
 800573e:	60a0      	str	r0, [r4, #8]
 8005740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005744:	f7ff fe17 	bl	8005376 <memset>
 8005748:	4620      	mov	r0, r4
 800574a:	bd70      	pop	{r4, r5, r6, pc}

0800574c <__sfp_lock_acquire>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__sfp_lock_acquire+0x8>)
 800574e:	f000 b9c7 	b.w	8005ae0 <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	200008f0 	.word	0x200008f0

08005758 <__sfp_lock_release>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__sfp_lock_release+0x8>)
 800575a:	f000 b9c2 	b.w	8005ae2 <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	200008f0 	.word	0x200008f0

08005764 <__sinit_lock_acquire>:
 8005764:	4801      	ldr	r0, [pc, #4]	; (800576c <__sinit_lock_acquire+0x8>)
 8005766:	f000 b9bb 	b.w	8005ae0 <__retarget_lock_acquire_recursive>
 800576a:	bf00      	nop
 800576c:	200008eb 	.word	0x200008eb

08005770 <__sinit_lock_release>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__sinit_lock_release+0x8>)
 8005772:	f000 b9b6 	b.w	8005ae2 <__retarget_lock_release_recursive>
 8005776:	bf00      	nop
 8005778:	200008eb 	.word	0x200008eb

0800577c <__sinit>:
 800577c:	b510      	push	{r4, lr}
 800577e:	4604      	mov	r4, r0
 8005780:	f7ff fff0 	bl	8005764 <__sinit_lock_acquire>
 8005784:	69a3      	ldr	r3, [r4, #24]
 8005786:	b11b      	cbz	r3, 8005790 <__sinit+0x14>
 8005788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578c:	f7ff bff0 	b.w	8005770 <__sinit_lock_release>
 8005790:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005794:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8005798:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <__sinit+0x6c>)
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <__sinit+0x70>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	62a2      	str	r2, [r4, #40]	; 0x28
 80057a4:	429c      	cmp	r4, r3
 80057a6:	bf04      	itt	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	61a3      	streq	r3, [r4, #24]
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 f81f 	bl	80057f0 <__sfp>
 80057b2:	6060      	str	r0, [r4, #4]
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f81b 	bl	80057f0 <__sfp>
 80057ba:	60a0      	str	r0, [r4, #8]
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 f817 	bl	80057f0 <__sfp>
 80057c2:	2200      	movs	r2, #0
 80057c4:	60e0      	str	r0, [r4, #12]
 80057c6:	2104      	movs	r1, #4
 80057c8:	6860      	ldr	r0, [r4, #4]
 80057ca:	f7ff ff85 	bl	80056d8 <std.isra.0>
 80057ce:	2201      	movs	r2, #1
 80057d0:	2109      	movs	r1, #9
 80057d2:	68a0      	ldr	r0, [r4, #8]
 80057d4:	f7ff ff80 	bl	80056d8 <std.isra.0>
 80057d8:	2202      	movs	r2, #2
 80057da:	2112      	movs	r1, #18
 80057dc:	68e0      	ldr	r0, [r4, #12]
 80057de:	f7ff ff7b 	bl	80056d8 <std.isra.0>
 80057e2:	2301      	movs	r3, #1
 80057e4:	61a3      	str	r3, [r4, #24]
 80057e6:	e7cf      	b.n	8005788 <__sinit+0xc>
 80057e8:	08006228 	.word	0x08006228
 80057ec:	080056cd 	.word	0x080056cd

080057f0 <__sfp>:
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f2:	4607      	mov	r7, r0
 80057f4:	f7ff ffaa 	bl	800574c <__sfp_lock_acquire>
 80057f8:	4b1f      	ldr	r3, [pc, #124]	; (8005878 <__sfp+0x88>)
 80057fa:	681e      	ldr	r6, [r3, #0]
 80057fc:	69b3      	ldr	r3, [r6, #24]
 80057fe:	b913      	cbnz	r3, 8005806 <__sfp+0x16>
 8005800:	4630      	mov	r0, r6
 8005802:	f7ff ffbb 	bl	800577c <__sinit>
 8005806:	36d8      	adds	r6, #216	; 0xd8
 8005808:	68b4      	ldr	r4, [r6, #8]
 800580a:	6873      	ldr	r3, [r6, #4]
 800580c:	3b01      	subs	r3, #1
 800580e:	d503      	bpl.n	8005818 <__sfp+0x28>
 8005810:	6833      	ldr	r3, [r6, #0]
 8005812:	b133      	cbz	r3, 8005822 <__sfp+0x32>
 8005814:	6836      	ldr	r6, [r6, #0]
 8005816:	e7f7      	b.n	8005808 <__sfp+0x18>
 8005818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800581c:	b17d      	cbz	r5, 800583e <__sfp+0x4e>
 800581e:	3468      	adds	r4, #104	; 0x68
 8005820:	e7f4      	b.n	800580c <__sfp+0x1c>
 8005822:	2104      	movs	r1, #4
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ff7b 	bl	8005720 <__sfmoreglue>
 800582a:	4604      	mov	r4, r0
 800582c:	6030      	str	r0, [r6, #0]
 800582e:	2800      	cmp	r0, #0
 8005830:	d1f0      	bne.n	8005814 <__sfp+0x24>
 8005832:	f7ff ff91 	bl	8005758 <__sfp_lock_release>
 8005836:	230c      	movs	r3, #12
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4620      	mov	r0, r4
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005842:	81e3      	strh	r3, [r4, #14]
 8005844:	2301      	movs	r3, #1
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800584c:	6665      	str	r5, [r4, #100]	; 0x64
 800584e:	f000 f945 	bl	8005adc <__retarget_lock_init_recursive>
 8005852:	f7ff ff81 	bl	8005758 <__sfp_lock_release>
 8005856:	6025      	str	r5, [r4, #0]
 8005858:	60a5      	str	r5, [r4, #8]
 800585a:	6065      	str	r5, [r4, #4]
 800585c:	6125      	str	r5, [r4, #16]
 800585e:	6165      	str	r5, [r4, #20]
 8005860:	61a5      	str	r5, [r4, #24]
 8005862:	2208      	movs	r2, #8
 8005864:	4629      	mov	r1, r5
 8005866:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800586a:	f7ff fd84 	bl	8005376 <memset>
 800586e:	6365      	str	r5, [r4, #52]	; 0x34
 8005870:	63a5      	str	r5, [r4, #56]	; 0x38
 8005872:	64a5      	str	r5, [r4, #72]	; 0x48
 8005874:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005876:	e7e0      	b.n	800583a <__sfp+0x4a>
 8005878:	08006228 	.word	0x08006228

0800587c <_malloc_trim_r>:
 800587c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005880:	4f25      	ldr	r7, [pc, #148]	; (8005918 <_malloc_trim_r+0x9c>)
 8005882:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005924 <_malloc_trim_r+0xa8>
 8005886:	4689      	mov	r9, r1
 8005888:	4606      	mov	r6, r0
 800588a:	f000 fb6d 	bl	8005f68 <__malloc_lock>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685d      	ldr	r5, [r3, #4]
 8005892:	f1a8 0411 	sub.w	r4, r8, #17
 8005896:	f025 0503 	bic.w	r5, r5, #3
 800589a:	eba4 0409 	sub.w	r4, r4, r9
 800589e:	442c      	add	r4, r5
 80058a0:	fbb4 f4f8 	udiv	r4, r4, r8
 80058a4:	3c01      	subs	r4, #1
 80058a6:	fb08 f404 	mul.w	r4, r8, r4
 80058aa:	4544      	cmp	r4, r8
 80058ac:	da05      	bge.n	80058ba <_malloc_trim_r+0x3e>
 80058ae:	4630      	mov	r0, r6
 80058b0:	f000 fb60 	bl	8005f74 <__malloc_unlock>
 80058b4:	2000      	movs	r0, #0
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	2100      	movs	r1, #0
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 fb5f 	bl	8005f80 <_sbrk_r>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	442b      	add	r3, r5
 80058c6:	4298      	cmp	r0, r3
 80058c8:	d1f1      	bne.n	80058ae <_malloc_trim_r+0x32>
 80058ca:	4261      	negs	r1, r4
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 fb57 	bl	8005f80 <_sbrk_r>
 80058d2:	3001      	adds	r0, #1
 80058d4:	d110      	bne.n	80058f8 <_malloc_trim_r+0x7c>
 80058d6:	2100      	movs	r1, #0
 80058d8:	4630      	mov	r0, r6
 80058da:	f000 fb51 	bl	8005f80 <_sbrk_r>
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	1a83      	subs	r3, r0, r2
 80058e2:	2b0f      	cmp	r3, #15
 80058e4:	dde3      	ble.n	80058ae <_malloc_trim_r+0x32>
 80058e6:	490d      	ldr	r1, [pc, #52]	; (800591c <_malloc_trim_r+0xa0>)
 80058e8:	6809      	ldr	r1, [r1, #0]
 80058ea:	1a40      	subs	r0, r0, r1
 80058ec:	490c      	ldr	r1, [pc, #48]	; (8005920 <_malloc_trim_r+0xa4>)
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	6008      	str	r0, [r1, #0]
 80058f4:	6053      	str	r3, [r2, #4]
 80058f6:	e7da      	b.n	80058ae <_malloc_trim_r+0x32>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4a09      	ldr	r2, [pc, #36]	; (8005920 <_malloc_trim_r+0xa4>)
 80058fc:	1b2d      	subs	r5, r5, r4
 80058fe:	f045 0501 	orr.w	r5, r5, #1
 8005902:	605d      	str	r5, [r3, #4]
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	4630      	mov	r0, r6
 8005908:	1b1c      	subs	r4, r3, r4
 800590a:	6014      	str	r4, [r2, #0]
 800590c:	f000 fb32 	bl	8005f74 <__malloc_unlock>
 8005910:	2001      	movs	r0, #1
 8005912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005916:	bf00      	nop
 8005918:	20000104 	.word	0x20000104
 800591c:	2000050c 	.word	0x2000050c
 8005920:	20000748 	.word	0x20000748
 8005924:	00000080 	.word	0x00000080

08005928 <_free_r>:
 8005928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592c:	4604      	mov	r4, r0
 800592e:	4688      	mov	r8, r1
 8005930:	2900      	cmp	r1, #0
 8005932:	f000 80ab 	beq.w	8005a8c <_free_r+0x164>
 8005936:	f000 fb17 	bl	8005f68 <__malloc_lock>
 800593a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800593e:	4d54      	ldr	r5, [pc, #336]	; (8005a90 <_free_r+0x168>)
 8005940:	f022 0001 	bic.w	r0, r2, #1
 8005944:	f1a8 0308 	sub.w	r3, r8, #8
 8005948:	181f      	adds	r7, r3, r0
 800594a:	68a9      	ldr	r1, [r5, #8]
 800594c:	687e      	ldr	r6, [r7, #4]
 800594e:	428f      	cmp	r7, r1
 8005950:	f026 0603 	bic.w	r6, r6, #3
 8005954:	f002 0201 	and.w	r2, r2, #1
 8005958:	d11b      	bne.n	8005992 <_free_r+0x6a>
 800595a:	4430      	add	r0, r6
 800595c:	b93a      	cbnz	r2, 800596e <_free_r+0x46>
 800595e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	4410      	add	r0, r2
 8005966:	6899      	ldr	r1, [r3, #8]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	60ca      	str	r2, [r1, #12]
 800596c:	6091      	str	r1, [r2, #8]
 800596e:	f040 0201 	orr.w	r2, r0, #1
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	60ab      	str	r3, [r5, #8]
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <_free_r+0x16c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4298      	cmp	r0, r3
 800597c:	d304      	bcc.n	8005988 <_free_r+0x60>
 800597e:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <_free_r+0x170>)
 8005980:	4620      	mov	r0, r4
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	f7ff ff7a 	bl	800587c <_malloc_trim_r>
 8005988:	4620      	mov	r0, r4
 800598a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800598e:	f000 baf1 	b.w	8005f74 <__malloc_unlock>
 8005992:	607e      	str	r6, [r7, #4]
 8005994:	2a00      	cmp	r2, #0
 8005996:	d139      	bne.n	8005a0c <_free_r+0xe4>
 8005998:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800599c:	1a5b      	subs	r3, r3, r1
 800599e:	4408      	add	r0, r1
 80059a0:	6899      	ldr	r1, [r3, #8]
 80059a2:	f105 0e08 	add.w	lr, r5, #8
 80059a6:	4571      	cmp	r1, lr
 80059a8:	d032      	beq.n	8005a10 <_free_r+0xe8>
 80059aa:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80059ae:	f8c1 e00c 	str.w	lr, [r1, #12]
 80059b2:	f8ce 1008 	str.w	r1, [lr, #8]
 80059b6:	19b9      	adds	r1, r7, r6
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	07c9      	lsls	r1, r1, #31
 80059bc:	d40a      	bmi.n	80059d4 <_free_r+0xac>
 80059be:	4430      	add	r0, r6
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	bb3a      	cbnz	r2, 8005a14 <_free_r+0xec>
 80059c4:	4e35      	ldr	r6, [pc, #212]	; (8005a9c <_free_r+0x174>)
 80059c6:	42b1      	cmp	r1, r6
 80059c8:	d124      	bne.n	8005a14 <_free_r+0xec>
 80059ca:	616b      	str	r3, [r5, #20]
 80059cc:	612b      	str	r3, [r5, #16]
 80059ce:	2201      	movs	r2, #1
 80059d0:	60d9      	str	r1, [r3, #12]
 80059d2:	6099      	str	r1, [r3, #8]
 80059d4:	f040 0101 	orr.w	r1, r0, #1
 80059d8:	6059      	str	r1, [r3, #4]
 80059da:	5018      	str	r0, [r3, r0]
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d1d3      	bne.n	8005988 <_free_r+0x60>
 80059e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80059e4:	d21a      	bcs.n	8005a1c <_free_r+0xf4>
 80059e6:	08c0      	lsrs	r0, r0, #3
 80059e8:	1081      	asrs	r1, r0, #2
 80059ea:	2201      	movs	r2, #1
 80059ec:	408a      	lsls	r2, r1
 80059ee:	6869      	ldr	r1, [r5, #4]
 80059f0:	3001      	adds	r0, #1
 80059f2:	430a      	orrs	r2, r1
 80059f4:	606a      	str	r2, [r5, #4]
 80059f6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80059fa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80059fe:	6099      	str	r1, [r3, #8]
 8005a00:	3a08      	subs	r2, #8
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005a08:	60cb      	str	r3, [r1, #12]
 8005a0a:	e7bd      	b.n	8005988 <_free_r+0x60>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	e7d2      	b.n	80059b6 <_free_r+0x8e>
 8005a10:	2201      	movs	r2, #1
 8005a12:	e7d0      	b.n	80059b6 <_free_r+0x8e>
 8005a14:	68fe      	ldr	r6, [r7, #12]
 8005a16:	60ce      	str	r6, [r1, #12]
 8005a18:	60b1      	str	r1, [r6, #8]
 8005a1a:	e7db      	b.n	80059d4 <_free_r+0xac>
 8005a1c:	0a42      	lsrs	r2, r0, #9
 8005a1e:	2a04      	cmp	r2, #4
 8005a20:	d813      	bhi.n	8005a4a <_free_r+0x122>
 8005a22:	0982      	lsrs	r2, r0, #6
 8005a24:	3238      	adds	r2, #56	; 0x38
 8005a26:	1c51      	adds	r1, r2, #1
 8005a28:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005a2c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005a30:	428e      	cmp	r6, r1
 8005a32:	d124      	bne.n	8005a7e <_free_r+0x156>
 8005a34:	2001      	movs	r0, #1
 8005a36:	1092      	asrs	r2, r2, #2
 8005a38:	fa00 f202 	lsl.w	r2, r0, r2
 8005a3c:	6868      	ldr	r0, [r5, #4]
 8005a3e:	4302      	orrs	r2, r0
 8005a40:	606a      	str	r2, [r5, #4]
 8005a42:	60de      	str	r6, [r3, #12]
 8005a44:	6099      	str	r1, [r3, #8]
 8005a46:	60b3      	str	r3, [r6, #8]
 8005a48:	e7de      	b.n	8005a08 <_free_r+0xe0>
 8005a4a:	2a14      	cmp	r2, #20
 8005a4c:	d801      	bhi.n	8005a52 <_free_r+0x12a>
 8005a4e:	325b      	adds	r2, #91	; 0x5b
 8005a50:	e7e9      	b.n	8005a26 <_free_r+0xfe>
 8005a52:	2a54      	cmp	r2, #84	; 0x54
 8005a54:	d802      	bhi.n	8005a5c <_free_r+0x134>
 8005a56:	0b02      	lsrs	r2, r0, #12
 8005a58:	326e      	adds	r2, #110	; 0x6e
 8005a5a:	e7e4      	b.n	8005a26 <_free_r+0xfe>
 8005a5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a60:	d802      	bhi.n	8005a68 <_free_r+0x140>
 8005a62:	0bc2      	lsrs	r2, r0, #15
 8005a64:	3277      	adds	r2, #119	; 0x77
 8005a66:	e7de      	b.n	8005a26 <_free_r+0xfe>
 8005a68:	f240 5154 	movw	r1, #1364	; 0x554
 8005a6c:	428a      	cmp	r2, r1
 8005a6e:	bf9a      	itte	ls
 8005a70:	0c82      	lsrls	r2, r0, #18
 8005a72:	327c      	addls	r2, #124	; 0x7c
 8005a74:	227e      	movhi	r2, #126	; 0x7e
 8005a76:	e7d6      	b.n	8005a26 <_free_r+0xfe>
 8005a78:	6889      	ldr	r1, [r1, #8]
 8005a7a:	428e      	cmp	r6, r1
 8005a7c:	d004      	beq.n	8005a88 <_free_r+0x160>
 8005a7e:	684a      	ldr	r2, [r1, #4]
 8005a80:	f022 0203 	bic.w	r2, r2, #3
 8005a84:	4290      	cmp	r0, r2
 8005a86:	d3f7      	bcc.n	8005a78 <_free_r+0x150>
 8005a88:	68ce      	ldr	r6, [r1, #12]
 8005a8a:	e7da      	b.n	8005a42 <_free_r+0x11a>
 8005a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a90:	20000104 	.word	0x20000104
 8005a94:	20000510 	.word	0x20000510
 8005a98:	20000778 	.word	0x20000778
 8005a9c:	2000010c 	.word	0x2000010c

08005aa0 <_fwalk_reent>:
 8005aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005aac:	2600      	movs	r6, #0
 8005aae:	b914      	cbnz	r4, 8005ab6 <_fwalk_reent+0x16>
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	68a5      	ldr	r5, [r4, #8]
 8005ab8:	6867      	ldr	r7, [r4, #4]
 8005aba:	3f01      	subs	r7, #1
 8005abc:	d501      	bpl.n	8005ac2 <_fwalk_reent+0x22>
 8005abe:	6824      	ldr	r4, [r4, #0]
 8005ac0:	e7f5      	b.n	8005aae <_fwalk_reent+0xe>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d907      	bls.n	8005ad8 <_fwalk_reent+0x38>
 8005ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005acc:	3301      	adds	r3, #1
 8005ace:	d003      	beq.n	8005ad8 <_fwalk_reent+0x38>
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	47c8      	blx	r9
 8005ad6:	4306      	orrs	r6, r0
 8005ad8:	3568      	adds	r5, #104	; 0x68
 8005ada:	e7ee      	b.n	8005aba <_fwalk_reent+0x1a>

08005adc <__retarget_lock_init_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__retarget_lock_close_recursive>:
 8005ade:	4770      	bx	lr

08005ae0 <__retarget_lock_acquire_recursive>:
 8005ae0:	4770      	bx	lr

08005ae2 <__retarget_lock_release_recursive>:
 8005ae2:	4770      	bx	lr

08005ae4 <__swhatbuf_r>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	460e      	mov	r6, r1
 8005ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aec:	2900      	cmp	r1, #0
 8005aee:	b090      	sub	sp, #64	; 0x40
 8005af0:	4614      	mov	r4, r2
 8005af2:	461d      	mov	r5, r3
 8005af4:	da09      	bge.n	8005b0a <__swhatbuf_r+0x26>
 8005af6:	89b3      	ldrh	r3, [r6, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005afe:	602a      	str	r2, [r5, #0]
 8005b00:	d116      	bne.n	8005b30 <__swhatbuf_r+0x4c>
 8005b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e015      	b.n	8005b36 <__swhatbuf_r+0x52>
 8005b0a:	aa01      	add	r2, sp, #4
 8005b0c:	f000 fb1a 	bl	8006144 <_fstat_r>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	dbf0      	blt.n	8005af6 <__swhatbuf_r+0x12>
 8005b14:	9a02      	ldr	r2, [sp, #8]
 8005b16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b1e:	425a      	negs	r2, r3
 8005b20:	415a      	adcs	r2, r3
 8005b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b26:	602a      	str	r2, [r5, #0]
 8005b28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	e002      	b.n	8005b36 <__swhatbuf_r+0x52>
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	4610      	mov	r0, r2
 8005b36:	b010      	add	sp, #64	; 0x40
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b3c <malloc>:
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <malloc+0xc>)
 8005b3e:	4601      	mov	r1, r0
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	f000 b803 	b.w	8005b4c <_malloc_r>
 8005b46:	bf00      	nop
 8005b48:	20000010 	.word	0x20000010

08005b4c <_malloc_r>:
 8005b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	f101 040b 	add.w	r4, r1, #11
 8005b54:	2c16      	cmp	r4, #22
 8005b56:	4681      	mov	r9, r0
 8005b58:	d907      	bls.n	8005b6a <_malloc_r+0x1e>
 8005b5a:	f034 0407 	bics.w	r4, r4, #7
 8005b5e:	d505      	bpl.n	8005b6c <_malloc_r+0x20>
 8005b60:	230c      	movs	r3, #12
 8005b62:	f8c9 3000 	str.w	r3, [r9]
 8005b66:	2600      	movs	r6, #0
 8005b68:	e131      	b.n	8005dce <_malloc_r+0x282>
 8005b6a:	2410      	movs	r4, #16
 8005b6c:	428c      	cmp	r4, r1
 8005b6e:	d3f7      	bcc.n	8005b60 <_malloc_r+0x14>
 8005b70:	4648      	mov	r0, r9
 8005b72:	f000 f9f9 	bl	8005f68 <__malloc_lock>
 8005b76:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005b7a:	4d9c      	ldr	r5, [pc, #624]	; (8005dec <_malloc_r+0x2a0>)
 8005b7c:	d236      	bcs.n	8005bec <_malloc_r+0xa0>
 8005b7e:	f104 0208 	add.w	r2, r4, #8
 8005b82:	442a      	add	r2, r5
 8005b84:	f1a2 0108 	sub.w	r1, r2, #8
 8005b88:	6856      	ldr	r6, [r2, #4]
 8005b8a:	428e      	cmp	r6, r1
 8005b8c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005b90:	d102      	bne.n	8005b98 <_malloc_r+0x4c>
 8005b92:	68d6      	ldr	r6, [r2, #12]
 8005b94:	42b2      	cmp	r2, r6
 8005b96:	d010      	beq.n	8005bba <_malloc_r+0x6e>
 8005b98:	6873      	ldr	r3, [r6, #4]
 8005b9a:	68f2      	ldr	r2, [r6, #12]
 8005b9c:	68b1      	ldr	r1, [r6, #8]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	60ca      	str	r2, [r1, #12]
 8005ba4:	4433      	add	r3, r6
 8005ba6:	6091      	str	r1, [r2, #8]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	4648      	mov	r0, r9
 8005bb2:	f000 f9df 	bl	8005f74 <__malloc_unlock>
 8005bb6:	3608      	adds	r6, #8
 8005bb8:	e109      	b.n	8005dce <_malloc_r+0x282>
 8005bba:	3302      	adds	r3, #2
 8005bbc:	4a8c      	ldr	r2, [pc, #560]	; (8005df0 <_malloc_r+0x2a4>)
 8005bbe:	692e      	ldr	r6, [r5, #16]
 8005bc0:	4296      	cmp	r6, r2
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	d06d      	beq.n	8005ca2 <_malloc_r+0x156>
 8005bc6:	6870      	ldr	r0, [r6, #4]
 8005bc8:	f020 0003 	bic.w	r0, r0, #3
 8005bcc:	1b07      	subs	r7, r0, r4
 8005bce:	2f0f      	cmp	r7, #15
 8005bd0:	dd47      	ble.n	8005c62 <_malloc_r+0x116>
 8005bd2:	1933      	adds	r3, r6, r4
 8005bd4:	f044 0401 	orr.w	r4, r4, #1
 8005bd8:	6074      	str	r4, [r6, #4]
 8005bda:	616b      	str	r3, [r5, #20]
 8005bdc:	612b      	str	r3, [r5, #16]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	609a      	str	r2, [r3, #8]
 8005be2:	f047 0201 	orr.w	r2, r7, #1
 8005be6:	605a      	str	r2, [r3, #4]
 8005be8:	5037      	str	r7, [r6, r0]
 8005bea:	e7e1      	b.n	8005bb0 <_malloc_r+0x64>
 8005bec:	0a63      	lsrs	r3, r4, #9
 8005bee:	d02a      	beq.n	8005c46 <_malloc_r+0xfa>
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d812      	bhi.n	8005c1a <_malloc_r+0xce>
 8005bf4:	09a3      	lsrs	r3, r4, #6
 8005bf6:	3338      	adds	r3, #56	; 0x38
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005bfe:	f1a2 0008 	sub.w	r0, r2, #8
 8005c02:	6856      	ldr	r6, [r2, #4]
 8005c04:	4286      	cmp	r6, r0
 8005c06:	d006      	beq.n	8005c16 <_malloc_r+0xca>
 8005c08:	6872      	ldr	r2, [r6, #4]
 8005c0a:	f022 0203 	bic.w	r2, r2, #3
 8005c0e:	1b11      	subs	r1, r2, r4
 8005c10:	290f      	cmp	r1, #15
 8005c12:	dd1c      	ble.n	8005c4e <_malloc_r+0x102>
 8005c14:	3b01      	subs	r3, #1
 8005c16:	3301      	adds	r3, #1
 8005c18:	e7d0      	b.n	8005bbc <_malloc_r+0x70>
 8005c1a:	2b14      	cmp	r3, #20
 8005c1c:	d801      	bhi.n	8005c22 <_malloc_r+0xd6>
 8005c1e:	335b      	adds	r3, #91	; 0x5b
 8005c20:	e7ea      	b.n	8005bf8 <_malloc_r+0xac>
 8005c22:	2b54      	cmp	r3, #84	; 0x54
 8005c24:	d802      	bhi.n	8005c2c <_malloc_r+0xe0>
 8005c26:	0b23      	lsrs	r3, r4, #12
 8005c28:	336e      	adds	r3, #110	; 0x6e
 8005c2a:	e7e5      	b.n	8005bf8 <_malloc_r+0xac>
 8005c2c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005c30:	d802      	bhi.n	8005c38 <_malloc_r+0xec>
 8005c32:	0be3      	lsrs	r3, r4, #15
 8005c34:	3377      	adds	r3, #119	; 0x77
 8005c36:	e7df      	b.n	8005bf8 <_malloc_r+0xac>
 8005c38:	f240 5254 	movw	r2, #1364	; 0x554
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d804      	bhi.n	8005c4a <_malloc_r+0xfe>
 8005c40:	0ca3      	lsrs	r3, r4, #18
 8005c42:	337c      	adds	r3, #124	; 0x7c
 8005c44:	e7d8      	b.n	8005bf8 <_malloc_r+0xac>
 8005c46:	233f      	movs	r3, #63	; 0x3f
 8005c48:	e7d6      	b.n	8005bf8 <_malloc_r+0xac>
 8005c4a:	237e      	movs	r3, #126	; 0x7e
 8005c4c:	e7d4      	b.n	8005bf8 <_malloc_r+0xac>
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	68f1      	ldr	r1, [r6, #12]
 8005c52:	db04      	blt.n	8005c5e <_malloc_r+0x112>
 8005c54:	68b3      	ldr	r3, [r6, #8]
 8005c56:	60d9      	str	r1, [r3, #12]
 8005c58:	608b      	str	r3, [r1, #8]
 8005c5a:	18b3      	adds	r3, r6, r2
 8005c5c:	e7a4      	b.n	8005ba8 <_malloc_r+0x5c>
 8005c5e:	460e      	mov	r6, r1
 8005c60:	e7d0      	b.n	8005c04 <_malloc_r+0xb8>
 8005c62:	2f00      	cmp	r7, #0
 8005c64:	616a      	str	r2, [r5, #20]
 8005c66:	612a      	str	r2, [r5, #16]
 8005c68:	db05      	blt.n	8005c76 <_malloc_r+0x12a>
 8005c6a:	4430      	add	r0, r6
 8005c6c:	6843      	ldr	r3, [r0, #4]
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	6043      	str	r3, [r0, #4]
 8005c74:	e79c      	b.n	8005bb0 <_malloc_r+0x64>
 8005c76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005c7a:	d244      	bcs.n	8005d06 <_malloc_r+0x1ba>
 8005c7c:	08c0      	lsrs	r0, r0, #3
 8005c7e:	1087      	asrs	r7, r0, #2
 8005c80:	2201      	movs	r2, #1
 8005c82:	fa02 f707 	lsl.w	r7, r2, r7
 8005c86:	686a      	ldr	r2, [r5, #4]
 8005c88:	3001      	adds	r0, #1
 8005c8a:	433a      	orrs	r2, r7
 8005c8c:	606a      	str	r2, [r5, #4]
 8005c8e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005c92:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005c96:	60b7      	str	r7, [r6, #8]
 8005c98:	3a08      	subs	r2, #8
 8005c9a:	60f2      	str	r2, [r6, #12]
 8005c9c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005ca0:	60fe      	str	r6, [r7, #12]
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	109a      	asrs	r2, r3, #2
 8005ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8005caa:	6868      	ldr	r0, [r5, #4]
 8005cac:	4282      	cmp	r2, r0
 8005cae:	f200 80a1 	bhi.w	8005df4 <_malloc_r+0x2a8>
 8005cb2:	4202      	tst	r2, r0
 8005cb4:	d106      	bne.n	8005cc4 <_malloc_r+0x178>
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	0052      	lsls	r2, r2, #1
 8005cbc:	4202      	tst	r2, r0
 8005cbe:	f103 0304 	add.w	r3, r3, #4
 8005cc2:	d0fa      	beq.n	8005cba <_malloc_r+0x16e>
 8005cc4:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005cc8:	46e0      	mov	r8, ip
 8005cca:	469e      	mov	lr, r3
 8005ccc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005cd0:	4546      	cmp	r6, r8
 8005cd2:	d153      	bne.n	8005d7c <_malloc_r+0x230>
 8005cd4:	f10e 0e01 	add.w	lr, lr, #1
 8005cd8:	f01e 0f03 	tst.w	lr, #3
 8005cdc:	f108 0808 	add.w	r8, r8, #8
 8005ce0:	d1f4      	bne.n	8005ccc <_malloc_r+0x180>
 8005ce2:	0798      	lsls	r0, r3, #30
 8005ce4:	d179      	bne.n	8005dda <_malloc_r+0x28e>
 8005ce6:	686b      	ldr	r3, [r5, #4]
 8005ce8:	ea23 0302 	bic.w	r3, r3, r2
 8005cec:	606b      	str	r3, [r5, #4]
 8005cee:	6868      	ldr	r0, [r5, #4]
 8005cf0:	0052      	lsls	r2, r2, #1
 8005cf2:	4282      	cmp	r2, r0
 8005cf4:	d87e      	bhi.n	8005df4 <_malloc_r+0x2a8>
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	d07c      	beq.n	8005df4 <_malloc_r+0x2a8>
 8005cfa:	4673      	mov	r3, lr
 8005cfc:	4202      	tst	r2, r0
 8005cfe:	d1e1      	bne.n	8005cc4 <_malloc_r+0x178>
 8005d00:	3304      	adds	r3, #4
 8005d02:	0052      	lsls	r2, r2, #1
 8005d04:	e7fa      	b.n	8005cfc <_malloc_r+0x1b0>
 8005d06:	0a42      	lsrs	r2, r0, #9
 8005d08:	2a04      	cmp	r2, #4
 8005d0a:	d815      	bhi.n	8005d38 <_malloc_r+0x1ec>
 8005d0c:	0982      	lsrs	r2, r0, #6
 8005d0e:	3238      	adds	r2, #56	; 0x38
 8005d10:	1c57      	adds	r7, r2, #1
 8005d12:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005d16:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005d1a:	45be      	cmp	lr, r7
 8005d1c:	d126      	bne.n	8005d6c <_malloc_r+0x220>
 8005d1e:	2001      	movs	r0, #1
 8005d20:	1092      	asrs	r2, r2, #2
 8005d22:	fa00 f202 	lsl.w	r2, r0, r2
 8005d26:	6868      	ldr	r0, [r5, #4]
 8005d28:	4310      	orrs	r0, r2
 8005d2a:	6068      	str	r0, [r5, #4]
 8005d2c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005d30:	60b7      	str	r7, [r6, #8]
 8005d32:	f8ce 6008 	str.w	r6, [lr, #8]
 8005d36:	e7b3      	b.n	8005ca0 <_malloc_r+0x154>
 8005d38:	2a14      	cmp	r2, #20
 8005d3a:	d801      	bhi.n	8005d40 <_malloc_r+0x1f4>
 8005d3c:	325b      	adds	r2, #91	; 0x5b
 8005d3e:	e7e7      	b.n	8005d10 <_malloc_r+0x1c4>
 8005d40:	2a54      	cmp	r2, #84	; 0x54
 8005d42:	d802      	bhi.n	8005d4a <_malloc_r+0x1fe>
 8005d44:	0b02      	lsrs	r2, r0, #12
 8005d46:	326e      	adds	r2, #110	; 0x6e
 8005d48:	e7e2      	b.n	8005d10 <_malloc_r+0x1c4>
 8005d4a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005d4e:	d802      	bhi.n	8005d56 <_malloc_r+0x20a>
 8005d50:	0bc2      	lsrs	r2, r0, #15
 8005d52:	3277      	adds	r2, #119	; 0x77
 8005d54:	e7dc      	b.n	8005d10 <_malloc_r+0x1c4>
 8005d56:	f240 5754 	movw	r7, #1364	; 0x554
 8005d5a:	42ba      	cmp	r2, r7
 8005d5c:	bf9a      	itte	ls
 8005d5e:	0c82      	lsrls	r2, r0, #18
 8005d60:	327c      	addls	r2, #124	; 0x7c
 8005d62:	227e      	movhi	r2, #126	; 0x7e
 8005d64:	e7d4      	b.n	8005d10 <_malloc_r+0x1c4>
 8005d66:	68bf      	ldr	r7, [r7, #8]
 8005d68:	45be      	cmp	lr, r7
 8005d6a:	d004      	beq.n	8005d76 <_malloc_r+0x22a>
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	f022 0203 	bic.w	r2, r2, #3
 8005d72:	4290      	cmp	r0, r2
 8005d74:	d3f7      	bcc.n	8005d66 <_malloc_r+0x21a>
 8005d76:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005d7a:	e7d7      	b.n	8005d2c <_malloc_r+0x1e0>
 8005d7c:	6870      	ldr	r0, [r6, #4]
 8005d7e:	68f7      	ldr	r7, [r6, #12]
 8005d80:	f020 0003 	bic.w	r0, r0, #3
 8005d84:	eba0 0a04 	sub.w	sl, r0, r4
 8005d88:	f1ba 0f0f 	cmp.w	sl, #15
 8005d8c:	dd10      	ble.n	8005db0 <_malloc_r+0x264>
 8005d8e:	68b2      	ldr	r2, [r6, #8]
 8005d90:	1933      	adds	r3, r6, r4
 8005d92:	f044 0401 	orr.w	r4, r4, #1
 8005d96:	6074      	str	r4, [r6, #4]
 8005d98:	60d7      	str	r7, [r2, #12]
 8005d9a:	60ba      	str	r2, [r7, #8]
 8005d9c:	f04a 0201 	orr.w	r2, sl, #1
 8005da0:	616b      	str	r3, [r5, #20]
 8005da2:	612b      	str	r3, [r5, #16]
 8005da4:	60d9      	str	r1, [r3, #12]
 8005da6:	6099      	str	r1, [r3, #8]
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	f846 a000 	str.w	sl, [r6, r0]
 8005dae:	e6ff      	b.n	8005bb0 <_malloc_r+0x64>
 8005db0:	f1ba 0f00 	cmp.w	sl, #0
 8005db4:	db0f      	blt.n	8005dd6 <_malloc_r+0x28a>
 8005db6:	4430      	add	r0, r6
 8005db8:	6843      	ldr	r3, [r0, #4]
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	6043      	str	r3, [r0, #4]
 8005dc0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005dc4:	4648      	mov	r0, r9
 8005dc6:	60df      	str	r7, [r3, #12]
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	f000 f8d3 	bl	8005f74 <__malloc_unlock>
 8005dce:	4630      	mov	r0, r6
 8005dd0:	b003      	add	sp, #12
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	463e      	mov	r6, r7
 8005dd8:	e77a      	b.n	8005cd0 <_malloc_r+0x184>
 8005dda:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005dde:	4584      	cmp	ip, r0
 8005de0:	f103 33ff 	add.w	r3, r3, #4294967295
 8005de4:	f43f af7d 	beq.w	8005ce2 <_malloc_r+0x196>
 8005de8:	e781      	b.n	8005cee <_malloc_r+0x1a2>
 8005dea:	bf00      	nop
 8005dec:	20000104 	.word	0x20000104
 8005df0:	2000010c 	.word	0x2000010c
 8005df4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005df8:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005dfc:	f026 0603 	bic.w	r6, r6, #3
 8005e00:	42b4      	cmp	r4, r6
 8005e02:	d803      	bhi.n	8005e0c <_malloc_r+0x2c0>
 8005e04:	1b33      	subs	r3, r6, r4
 8005e06:	2b0f      	cmp	r3, #15
 8005e08:	f300 8096 	bgt.w	8005f38 <_malloc_r+0x3ec>
 8005e0c:	4a4f      	ldr	r2, [pc, #316]	; (8005f4c <_malloc_r+0x400>)
 8005e0e:	6817      	ldr	r7, [r2, #0]
 8005e10:	4a4f      	ldr	r2, [pc, #316]	; (8005f50 <_malloc_r+0x404>)
 8005e12:	6811      	ldr	r1, [r2, #0]
 8005e14:	3710      	adds	r7, #16
 8005e16:	3101      	adds	r1, #1
 8005e18:	eb0b 0306 	add.w	r3, fp, r6
 8005e1c:	4427      	add	r7, r4
 8005e1e:	d005      	beq.n	8005e2c <_malloc_r+0x2e0>
 8005e20:	494c      	ldr	r1, [pc, #304]	; (8005f54 <_malloc_r+0x408>)
 8005e22:	3901      	subs	r1, #1
 8005e24:	440f      	add	r7, r1
 8005e26:	3101      	adds	r1, #1
 8005e28:	4249      	negs	r1, r1
 8005e2a:	400f      	ands	r7, r1
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	4648      	mov	r0, r9
 8005e30:	9201      	str	r2, [sp, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	f000 f8a4 	bl	8005f80 <_sbrk_r>
 8005e38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	d056      	beq.n	8005eee <_malloc_r+0x3a2>
 8005e40:	9b00      	ldr	r3, [sp, #0]
 8005e42:	9a01      	ldr	r2, [sp, #4]
 8005e44:	4283      	cmp	r3, r0
 8005e46:	d901      	bls.n	8005e4c <_malloc_r+0x300>
 8005e48:	45ab      	cmp	fp, r5
 8005e4a:	d150      	bne.n	8005eee <_malloc_r+0x3a2>
 8005e4c:	4842      	ldr	r0, [pc, #264]	; (8005f58 <_malloc_r+0x40c>)
 8005e4e:	6801      	ldr	r1, [r0, #0]
 8005e50:	4543      	cmp	r3, r8
 8005e52:	eb07 0e01 	add.w	lr, r7, r1
 8005e56:	f8c0 e000 	str.w	lr, [r0]
 8005e5a:	4940      	ldr	r1, [pc, #256]	; (8005f5c <_malloc_r+0x410>)
 8005e5c:	4682      	mov	sl, r0
 8005e5e:	d113      	bne.n	8005e88 <_malloc_r+0x33c>
 8005e60:	420b      	tst	r3, r1
 8005e62:	d111      	bne.n	8005e88 <_malloc_r+0x33c>
 8005e64:	68ab      	ldr	r3, [r5, #8]
 8005e66:	443e      	add	r6, r7
 8005e68:	f046 0601 	orr.w	r6, r6, #1
 8005e6c:	605e      	str	r6, [r3, #4]
 8005e6e:	4a3c      	ldr	r2, [pc, #240]	; (8005f60 <_malloc_r+0x414>)
 8005e70:	f8da 3000 	ldr.w	r3, [sl]
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	428b      	cmp	r3, r1
 8005e78:	bf88      	it	hi
 8005e7a:	6013      	strhi	r3, [r2, #0]
 8005e7c:	4a39      	ldr	r2, [pc, #228]	; (8005f64 <_malloc_r+0x418>)
 8005e7e:	6811      	ldr	r1, [r2, #0]
 8005e80:	428b      	cmp	r3, r1
 8005e82:	bf88      	it	hi
 8005e84:	6013      	strhi	r3, [r2, #0]
 8005e86:	e032      	b.n	8005eee <_malloc_r+0x3a2>
 8005e88:	6810      	ldr	r0, [r2, #0]
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	bf1b      	ittet	ne
 8005e8e:	eba8 0303 	subne.w	r3, r8, r3
 8005e92:	4473      	addne	r3, lr
 8005e94:	f8c2 8000 	streq.w	r8, [r2]
 8005e98:	f8ca 3000 	strne.w	r3, [sl]
 8005e9c:	f018 0007 	ands.w	r0, r8, #7
 8005ea0:	bf1c      	itt	ne
 8005ea2:	f1c0 0008 	rsbne	r0, r0, #8
 8005ea6:	4480      	addne	r8, r0
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <_malloc_r+0x408>)
 8005eaa:	4447      	add	r7, r8
 8005eac:	4418      	add	r0, r3
 8005eae:	400f      	ands	r7, r1
 8005eb0:	1bc7      	subs	r7, r0, r7
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	f000 f863 	bl	8005f80 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	bf08      	it	eq
 8005ebe:	4640      	moveq	r0, r8
 8005ec0:	f8da 3000 	ldr.w	r3, [sl]
 8005ec4:	f8c5 8008 	str.w	r8, [r5, #8]
 8005ec8:	bf08      	it	eq
 8005eca:	2700      	moveq	r7, #0
 8005ecc:	eba0 0008 	sub.w	r0, r0, r8
 8005ed0:	443b      	add	r3, r7
 8005ed2:	4407      	add	r7, r0
 8005ed4:	f047 0701 	orr.w	r7, r7, #1
 8005ed8:	45ab      	cmp	fp, r5
 8005eda:	f8ca 3000 	str.w	r3, [sl]
 8005ede:	f8c8 7004 	str.w	r7, [r8, #4]
 8005ee2:	d0c4      	beq.n	8005e6e <_malloc_r+0x322>
 8005ee4:	2e0f      	cmp	r6, #15
 8005ee6:	d810      	bhi.n	8005f0a <_malloc_r+0x3be>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f8c8 3004 	str.w	r3, [r8, #4]
 8005eee:	68ab      	ldr	r3, [r5, #8]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	f022 0203 	bic.w	r2, r2, #3
 8005ef6:	4294      	cmp	r4, r2
 8005ef8:	eba2 0304 	sub.w	r3, r2, r4
 8005efc:	d801      	bhi.n	8005f02 <_malloc_r+0x3b6>
 8005efe:	2b0f      	cmp	r3, #15
 8005f00:	dc1a      	bgt.n	8005f38 <_malloc_r+0x3ec>
 8005f02:	4648      	mov	r0, r9
 8005f04:	f000 f836 	bl	8005f74 <__malloc_unlock>
 8005f08:	e62d      	b.n	8005b66 <_malloc_r+0x1a>
 8005f0a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005f0e:	3e0c      	subs	r6, #12
 8005f10:	f026 0607 	bic.w	r6, r6, #7
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	4333      	orrs	r3, r6
 8005f1a:	f8cb 3004 	str.w	r3, [fp, #4]
 8005f1e:	eb0b 0306 	add.w	r3, fp, r6
 8005f22:	2205      	movs	r2, #5
 8005f24:	2e0f      	cmp	r6, #15
 8005f26:	605a      	str	r2, [r3, #4]
 8005f28:	609a      	str	r2, [r3, #8]
 8005f2a:	d9a0      	bls.n	8005e6e <_malloc_r+0x322>
 8005f2c:	f10b 0108 	add.w	r1, fp, #8
 8005f30:	4648      	mov	r0, r9
 8005f32:	f7ff fcf9 	bl	8005928 <_free_r>
 8005f36:	e79a      	b.n	8005e6e <_malloc_r+0x322>
 8005f38:	68ae      	ldr	r6, [r5, #8]
 8005f3a:	f044 0201 	orr.w	r2, r4, #1
 8005f3e:	4434      	add	r4, r6
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	6072      	str	r2, [r6, #4]
 8005f46:	60ac      	str	r4, [r5, #8]
 8005f48:	6063      	str	r3, [r4, #4]
 8005f4a:	e631      	b.n	8005bb0 <_malloc_r+0x64>
 8005f4c:	20000778 	.word	0x20000778
 8005f50:	2000050c 	.word	0x2000050c
 8005f54:	00000080 	.word	0x00000080
 8005f58:	20000748 	.word	0x20000748
 8005f5c:	0000007f 	.word	0x0000007f
 8005f60:	20000770 	.word	0x20000770
 8005f64:	20000774 	.word	0x20000774

08005f68 <__malloc_lock>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__malloc_lock+0x8>)
 8005f6a:	f7ff bdb9 	b.w	8005ae0 <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	200008ec 	.word	0x200008ec

08005f74 <__malloc_unlock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__malloc_unlock+0x8>)
 8005f76:	f7ff bdb4 	b.w	8005ae2 <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	200008ec 	.word	0x200008ec

08005f80 <_sbrk_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4c06      	ldr	r4, [pc, #24]	; (8005f9c <_sbrk_r+0x1c>)
 8005f84:	2300      	movs	r3, #0
 8005f86:	4605      	mov	r5, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	f7ff f906 	bl	800519c <_sbrk>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_sbrk_r+0x1a>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_sbrk_r+0x1a>
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	200008f4 	.word	0x200008f4

08005fa0 <__sread>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa8:	f000 f8f0 	bl	800618c <_read_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	bfab      	itete	ge
 8005fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8005fb4:	181b      	addge	r3, r3, r0
 8005fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fba:	bfac      	ite	ge
 8005fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fbe:	81a3      	strhlt	r3, [r4, #12]
 8005fc0:	bd10      	pop	{r4, pc}

08005fc2 <__swrite>:
 8005fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc6:	461f      	mov	r7, r3
 8005fc8:	898b      	ldrh	r3, [r1, #12]
 8005fca:	05db      	lsls	r3, r3, #23
 8005fcc:	4605      	mov	r5, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	d505      	bpl.n	8005fe0 <__swrite+0x1e>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fdc:	f000 f8c4 	bl	8006168 <_lseek_r>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff6:	f000 b817 	b.w	8006028 <_write_r>

08005ffa <__sseek>:
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006002:	f000 f8b1 	bl	8006168 <_lseek_r>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	bf15      	itete	ne
 800600c:	6560      	strne	r0, [r4, #84]	; 0x54
 800600e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006016:	81a3      	strheq	r3, [r4, #12]
 8006018:	bf18      	it	ne
 800601a:	81a3      	strhne	r3, [r4, #12]
 800601c:	bd10      	pop	{r4, pc}

0800601e <__sclose>:
 800601e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006022:	f000 b813 	b.w	800604c <_close_r>
	...

08006028 <_write_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4c07      	ldr	r4, [pc, #28]	; (8006048 <_write_r+0x20>)
 800602c:	4605      	mov	r5, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	6022      	str	r2, [r4, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7ff f893 	bl	8005162 <_write>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_write_r+0x1e>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	b103      	cbz	r3, 8006046 <_write_r+0x1e>
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	200008f4 	.word	0x200008f4

0800604c <_close_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4c06      	ldr	r4, [pc, #24]	; (8006068 <_close_r+0x1c>)
 8006050:	2300      	movs	r3, #0
 8006052:	4605      	mov	r5, r0
 8006054:	4608      	mov	r0, r1
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	f7ff f8cc 	bl	80051f4 <_close>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_close_r+0x1a>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	b103      	cbz	r3, 8006066 <_close_r+0x1a>
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	200008f4 	.word	0x200008f4

0800606c <_fclose_r>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4605      	mov	r5, r0
 8006070:	460c      	mov	r4, r1
 8006072:	b911      	cbnz	r1, 800607a <_fclose_r+0xe>
 8006074:	2600      	movs	r6, #0
 8006076:	4630      	mov	r0, r6
 8006078:	bd70      	pop	{r4, r5, r6, pc}
 800607a:	b118      	cbz	r0, 8006084 <_fclose_r+0x18>
 800607c:	6983      	ldr	r3, [r0, #24]
 800607e:	b90b      	cbnz	r3, 8006084 <_fclose_r+0x18>
 8006080:	f7ff fb7c 	bl	800577c <__sinit>
 8006084:	4b2c      	ldr	r3, [pc, #176]	; (8006138 <_fclose_r+0xcc>)
 8006086:	429c      	cmp	r4, r3
 8006088:	d114      	bne.n	80060b4 <_fclose_r+0x48>
 800608a:	686c      	ldr	r4, [r5, #4]
 800608c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800608e:	07d8      	lsls	r0, r3, #31
 8006090:	d405      	bmi.n	800609e <_fclose_r+0x32>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	0599      	lsls	r1, r3, #22
 8006096:	d402      	bmi.n	800609e <_fclose_r+0x32>
 8006098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800609a:	f7ff fd21 	bl	8005ae0 <__retarget_lock_acquire_recursive>
 800609e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a2:	b98b      	cbnz	r3, 80060c8 <_fclose_r+0x5c>
 80060a4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80060a6:	f016 0601 	ands.w	r6, r6, #1
 80060aa:	d1e3      	bne.n	8006074 <_fclose_r+0x8>
 80060ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ae:	f7ff fd18 	bl	8005ae2 <__retarget_lock_release_recursive>
 80060b2:	e7e0      	b.n	8006076 <_fclose_r+0xa>
 80060b4:	4b21      	ldr	r3, [pc, #132]	; (800613c <_fclose_r+0xd0>)
 80060b6:	429c      	cmp	r4, r3
 80060b8:	d101      	bne.n	80060be <_fclose_r+0x52>
 80060ba:	68ac      	ldr	r4, [r5, #8]
 80060bc:	e7e6      	b.n	800608c <_fclose_r+0x20>
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <_fclose_r+0xd4>)
 80060c0:	429c      	cmp	r4, r3
 80060c2:	bf08      	it	eq
 80060c4:	68ec      	ldreq	r4, [r5, #12]
 80060c6:	e7e1      	b.n	800608c <_fclose_r+0x20>
 80060c8:	4621      	mov	r1, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7ff fa30 	bl	8005530 <__sflush_r>
 80060d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060d2:	4606      	mov	r6, r0
 80060d4:	b133      	cbz	r3, 80060e4 <_fclose_r+0x78>
 80060d6:	6a21      	ldr	r1, [r4, #32]
 80060d8:	4628      	mov	r0, r5
 80060da:	4798      	blx	r3
 80060dc:	2800      	cmp	r0, #0
 80060de:	bfb8      	it	lt
 80060e0:	f04f 36ff 	movlt.w	r6, #4294967295
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	061a      	lsls	r2, r3, #24
 80060e8:	d503      	bpl.n	80060f2 <_fclose_r+0x86>
 80060ea:	6921      	ldr	r1, [r4, #16]
 80060ec:	4628      	mov	r0, r5
 80060ee:	f7ff fc1b 	bl	8005928 <_free_r>
 80060f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060f4:	b141      	cbz	r1, 8006108 <_fclose_r+0x9c>
 80060f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060fa:	4299      	cmp	r1, r3
 80060fc:	d002      	beq.n	8006104 <_fclose_r+0x98>
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fc12 	bl	8005928 <_free_r>
 8006104:	2300      	movs	r3, #0
 8006106:	6363      	str	r3, [r4, #52]	; 0x34
 8006108:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800610a:	b121      	cbz	r1, 8006116 <_fclose_r+0xaa>
 800610c:	4628      	mov	r0, r5
 800610e:	f7ff fc0b 	bl	8005928 <_free_r>
 8006112:	2300      	movs	r3, #0
 8006114:	64a3      	str	r3, [r4, #72]	; 0x48
 8006116:	f7ff fb19 	bl	800574c <__sfp_lock_acquire>
 800611a:	2300      	movs	r3, #0
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006120:	07db      	lsls	r3, r3, #31
 8006122:	d402      	bmi.n	800612a <_fclose_r+0xbe>
 8006124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006126:	f7ff fcdc 	bl	8005ae2 <__retarget_lock_release_recursive>
 800612a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800612c:	f7ff fcd7 	bl	8005ade <__retarget_lock_close_recursive>
 8006130:	f7ff fb12 	bl	8005758 <__sfp_lock_release>
 8006134:	e79f      	b.n	8006076 <_fclose_r+0xa>
 8006136:	bf00      	nop
 8006138:	0800624c 	.word	0x0800624c
 800613c:	0800626c 	.word	0x0800626c
 8006140:	0800622c 	.word	0x0800622c

08006144 <_fstat_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4c07      	ldr	r4, [pc, #28]	; (8006164 <_fstat_r+0x20>)
 8006148:	2300      	movs	r3, #0
 800614a:	4605      	mov	r5, r0
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	f7ff f85b 	bl	800520c <_fstat>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	d102      	bne.n	8006160 <_fstat_r+0x1c>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	b103      	cbz	r3, 8006160 <_fstat_r+0x1c>
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	bd38      	pop	{r3, r4, r5, pc}
 8006162:	bf00      	nop
 8006164:	200008f4 	.word	0x200008f4

08006168 <_lseek_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4c07      	ldr	r4, [pc, #28]	; (8006188 <_lseek_r+0x20>)
 800616c:	4605      	mov	r5, r0
 800616e:	4608      	mov	r0, r1
 8006170:	4611      	mov	r1, r2
 8006172:	2200      	movs	r2, #0
 8006174:	6022      	str	r2, [r4, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	f7ff f858 	bl	800522c <_lseek>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_lseek_r+0x1e>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	b103      	cbz	r3, 8006186 <_lseek_r+0x1e>
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	200008f4 	.word	0x200008f4

0800618c <_read_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4c07      	ldr	r4, [pc, #28]	; (80061ac <_read_r+0x20>)
 8006190:	4605      	mov	r5, r0
 8006192:	4608      	mov	r0, r1
 8006194:	4611      	mov	r1, r2
 8006196:	2200      	movs	r2, #0
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	f7fe ffc4 	bl	8005128 <_read>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_read_r+0x1e>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_read_r+0x1e>
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	200008f4 	.word	0x200008f4

080061b0 <_init>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr

080061bc <_fini>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr
