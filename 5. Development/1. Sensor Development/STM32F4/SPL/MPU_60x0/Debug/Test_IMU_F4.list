
Test_IMU_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002168  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000034  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
  6 .bss          00000144  20000034  20000034  00020034  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000178  20000178  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  9 .debug_info   000091b1  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001854  00000000  00000000  00029215  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ab8  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c0  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003b12  00000000  00000000  0002bee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000034ec  00000000  00000000  0002f9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00032ee6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002cd8  00000000  00000000  00032f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022d8 	.word	0x080022d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	080022d8 	.word	0x080022d8

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <FLASH_Unlock+0x24>)
 8000292:	691b      	ldr	r3, [r3, #16]
 8000294:	2b00      	cmp	r3, #0
 8000296:	da05      	bge.n	80002a4 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <FLASH_Unlock+0x24>)
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <FLASH_Unlock+0x28>)
 800029c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <FLASH_Unlock+0x24>)
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <FLASH_Unlock+0x2c>)
 80002a2:	605a      	str	r2, [r3, #4]
  }  
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023c00 	.word	0x40023c00
 80002b4:	45670123 	.word	0x45670123
 80002b8:	cdef89ab 	.word	0xcdef89ab

080002bc <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80002cc:	2308      	movs	r3, #8
 80002ce:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d102      	bne.n	80002dc <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e010      	b.n	80002fe <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 80002dc:	78fb      	ldrb	r3, [r7, #3]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d103      	bne.n	80002ea <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80002e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	e009      	b.n	80002fe <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 80002ea:	78fb      	ldrb	r3, [r7, #3]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d103      	bne.n	80002f8 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80002f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80002f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80002fc:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80002fe:	f000 f8a9 	bl	8000454 <FLASH_WaitForLastOperation>
 8000302:	4603      	mov	r3, r0
 8000304:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8000306:	7afb      	ldrb	r3, [r7, #11]
 8000308:	2b08      	cmp	r3, #8
 800030a:	d12f      	bne.n	800036c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800030c:	4a1a      	ldr	r2, [pc, #104]	; (8000378 <FLASH_EraseSector+0xbc>)
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000316:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8000318:	4917      	ldr	r1, [pc, #92]	; (8000378 <FLASH_EraseSector+0xbc>)
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <FLASH_EraseSector+0xbc>)
 800031c:	691a      	ldr	r2, [r3, #16]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	4313      	orrs	r3, r2
 8000322:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800032e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8000330:	4911      	ldr	r1, [pc, #68]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000334:	691a      	ldr	r2, [r3, #16]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4313      	orrs	r3, r2
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034a:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800034c:	f000 f882 	bl	8000454 <FLASH_WaitForLastOperation>
 8000350:	4603      	mov	r3, r0
 8000352:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8000354:	4a08      	ldr	r2, [pc, #32]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000358:	691b      	ldr	r3, [r3, #16]
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8000360:	4a05      	ldr	r2, [pc, #20]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <FLASH_EraseSector+0xbc>)
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800036a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 800036c:	7afb      	ldrb	r3, [r7, #11]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40023c00 	.word	0x40023c00

0800037c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8000388:	2308      	movs	r3, #8
 800038a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800038c:	f000 f862 	bl	8000454 <FLASH_WaitForLastOperation>
 8000390:	4603      	mov	r3, r0
 8000392:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	2b08      	cmp	r3, #8
 8000398:	d11e      	bne.n	80003d8 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800039a:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003a4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80003a6:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 80003aa:	691b      	ldr	r3, [r3, #16]
 80003ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 80003b2:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	887a      	ldrh	r2, [r7, #2]
 80003c2:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80003c4:	f000 f846 	bl	8000454 <FLASH_WaitForLastOperation>
 80003c8:	4603      	mov	r3, r0
 80003ca:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80003cc:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <FLASH_ProgramHalfWord+0x68>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	f023 0301 	bic.w	r3, r3, #1
 80003d6:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 80003ee:	2308      	movs	r3, #8
 80003f0:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <FLASH_GetStatus+0x68>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003fe:	d102      	bne.n	8000406 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 8000400:	2301      	movs	r3, #1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	e01c      	b.n	8000440 <FLASH_GetStatus+0x58>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <FLASH_GetStatus+0x68>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f003 0310 	and.w	r3, r3, #16
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000412:	2305      	movs	r3, #5
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	e013      	b.n	8000440 <FLASH_GetStatus+0x58>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <FLASH_GetStatus+0x68>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <FLASH_GetStatus+0x42>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8000424:	2306      	movs	r3, #6
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	e00a      	b.n	8000440 <FLASH_GetStatus+0x58>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <FLASH_GetStatus+0x68>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8000436:	2307      	movs	r3, #7
 8000438:	71fb      	strb	r3, [r7, #7]
 800043a:	e001      	b.n	8000440 <FLASH_GetStatus+0x58>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 800043c:	2308      	movs	r3, #8
 800043e:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8000440:	79fb      	ldrb	r3, [r7, #7]
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40023c00 	.word	0x40023c00

08000454 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800045a:	2308      	movs	r3, #8
 800045c:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800045e:	f7ff ffc3 	bl	80003e8 <FLASH_GetStatus>
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000466:	e003      	b.n	8000470 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8000468:	f7ff ffbe 	bl	80003e8 <FLASH_GetStatus>
 800046c:	4603      	mov	r3, r0
 800046e:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b01      	cmp	r3, #1
 8000476:	d0f7      	beq.n	8000468 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	b2db      	uxtb	r3, r3
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000484:	b480      	push	{r7}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	e076      	b.n	800058e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004a0:	2201      	movs	r2, #1
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d165      	bne.n	8000588 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	2103      	movs	r1, #3
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	43db      	mvns	r3, r3
 80004cc:	401a      	ands	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	4619      	mov	r1, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	fa01 f303 	lsl.w	r3, r1, r3
 80004e4:	431a      	orrs	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d003      	beq.n	80004fa <GPIO_Init+0x76>
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d12e      	bne.n	8000558 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	2103      	movs	r1, #3
 8000504:	fa01 f303 	lsl.w	r3, r1, r3
 8000508:	43db      	mvns	r3, r3
 800050a:	401a      	ands	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	4619      	mov	r1, r3
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	b29b      	uxth	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	2301      	movs	r3, #1
 8000534:	408b      	lsls	r3, r1
 8000536:	43db      	mvns	r3, r3
 8000538:	401a      	ands	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	7992      	ldrb	r2, [r2, #6]
 8000546:	4611      	mov	r1, r2
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	b292      	uxth	r2, r2
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	b292      	uxth	r2, r2
 8000552:	431a      	orrs	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	b29b      	uxth	r3, r3
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	2103      	movs	r1, #3
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	401a      	ands	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	79db      	ldrb	r3, [r3, #7]
 8000578:	4619      	mov	r1, r3
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	431a      	orrs	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	3301      	adds	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d985      	bls.n	80004a0 <GPIO_Init+0x1c>
    }
  }
}
 8000594:	bf00      	nop
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005ae:	2300      	movs	r3, #0
 80005b0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80005b2:	2304      	movs	r3, #4
 80005b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80005b6:	4b57      	ldr	r3, [pc, #348]	; (8000714 <I2C_Init+0x174>)
 80005b8:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	889b      	ldrh	r3, [r3, #4]
 80005be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80005c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005c6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f8d9 	bl	8000784 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	4a4f      	ldr	r2, [pc, #316]	; (8000718 <I2C_Init+0x178>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	0c9b      	lsrs	r3, r3, #18
 80005e0:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80005e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80005e6:	4313      	orrs	r3, r2
 80005e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005ee:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	f023 0301 	bic.w	r3, r3, #1
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a44      	ldr	r2, [pc, #272]	; (800071c <I2C_Init+0x17c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d815      	bhi.n	800063a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	69fa      	ldr	r2, [r7, #28]
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800061c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800061e:	2b03      	cmp	r3, #3
 8000620:	d801      	bhi.n	8000626 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000622:	2304      	movs	r3, #4
 8000624:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800062a:	4313      	orrs	r3, r2
 800062c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800062e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000630:	3301      	adds	r3, #1
 8000632:	b29a      	uxth	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	841a      	strh	r2, [r3, #32]
 8000638:	e040      	b.n	80006bc <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	88db      	ldrh	r3, [r3, #6]
 800063e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000642:	4293      	cmp	r3, r2
 8000644:	d109      	bne.n	800065a <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	69fa      	ldr	r2, [r7, #28]
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000658:	e00e      	b.n	8000678 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	009a      	lsls	r2, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	69fa      	ldr	r2, [r7, #28]
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800067a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800067e:	2b00      	cmp	r3, #0
 8000680:	d103      	bne.n	800068a <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800068a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800068c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800068e:	4313      	orrs	r3, r2
 8000690:	b29b      	uxth	r3, r3
 8000692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800069a:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800069c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800069e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <I2C_Init+0x180>)
 80006a8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ac:	1192      	asrs	r2, r2, #6
 80006ae:	17db      	asrs	r3, r3, #31
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	3301      	adds	r3, #1
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006c0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80006d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006da:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80006de:	f023 0302 	bic.w	r3, r3, #2
 80006e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	889a      	ldrh	r2, [r3, #4]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	895b      	ldrh	r3, [r3, #10]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006f2:	4313      	orrs	r3, r2
 80006f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006fa:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	899a      	ldrh	r2, [r3, #12]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	891b      	ldrh	r3, [r3, #8]
 8000704:	4313      	orrs	r3, r2
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	811a      	strh	r2, [r3, #8]
}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	007a1200 	.word	0x007a1200
 8000718:	431bde83 	.word	0x431bde83
 800071c:	000186a0 	.word	0x000186a0
 8000720:	10624dd3 	.word	0x10624dd3

08000724 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800073a:	2300      	movs	r3, #0
 800073c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	8a9b      	ldrh	r3, [r3, #20]
 8000742:	b29b      	uxth	r3, r3
 8000744:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8b1b      	ldrh	r3, [r3, #24]
 800074a:	b29b      	uxth	r3, r3
 800074c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	4313      	orrs	r3, r2
 800075a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800075e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	401a      	ands	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	429a      	cmp	r2, r3
 800076a:	d102      	bne.n	8000772 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800076c:	2301      	movs	r3, #1
 800076e:	75fb      	strb	r3, [r7, #23]
 8000770:	e001      	b.n	8000776 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000772:	2300      	movs	r3, #0
 8000774:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000776:	7dfb      	ldrb	r3, [r7, #23]
}
 8000778:	4618      	mov	r0, r3
 800077a:	371c      	adds	r7, #28
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	2302      	movs	r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 030c 	and.w	r3, r3, #12
 80007ac:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d007      	beq.n	80007c4 <RCC_GetClocksFreq+0x40>
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d009      	beq.n	80007cc <RCC_GetClocksFreq+0x48>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d13d      	bne.n	8000838 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a42      	ldr	r2, [pc, #264]	; (80008c8 <RCC_GetClocksFreq+0x144>)
 80007c0:	601a      	str	r2, [r3, #0]
      break;
 80007c2:	e03d      	b.n	8000840 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a41      	ldr	r2, [pc, #260]	; (80008cc <RCC_GetClocksFreq+0x148>)
 80007c8:	601a      	str	r2, [r3, #0]
      break;
 80007ca:	e039      	b.n	8000840 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007cc:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	0d9b      	lsrs	r3, r3, #22
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007d8:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007e0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00c      	beq.n	8000802 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007e8:	4a38      	ldr	r2, [pc, #224]	; (80008cc <RCC_GetClocksFreq+0x148>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f0:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 80007f2:	6852      	ldr	r2, [r2, #4]
 80007f4:	0992      	lsrs	r2, r2, #6
 80007f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	e00b      	b.n	800081a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000802:	4a31      	ldr	r2, [pc, #196]	; (80008c8 <RCC_GetClocksFreq+0x144>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4a2e      	ldr	r2, [pc, #184]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 800080c:	6852      	ldr	r2, [r2, #4]
 800080e:	0992      	lsrs	r2, r2, #6
 8000810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000814:	fb02 f303 	mul.w	r3, r2, r3
 8000818:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	3301      	adds	r3, #1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
      break;
 8000836:	e003      	b.n	8000840 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <RCC_GetClocksFreq+0x144>)
 800083c:	601a      	str	r2, [r3, #0]
      break;
 800083e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000848:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	091b      	lsrs	r3, r3, #4
 800084e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000850:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <RCC_GetClocksFreq+0x14c>)
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	40da      	lsrs	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000870:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	0a9b      	lsrs	r3, r3, #10
 8000876:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <RCC_GetClocksFreq+0x14c>)
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	40da      	lsrs	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <RCC_GetClocksFreq+0x140>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000898:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	0b5b      	lsrs	r3, r3, #13
 800089e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008a0:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <RCC_GetClocksFreq+0x14c>)
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	40da      	lsrs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3724      	adds	r7, #36	; 0x24
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40023800 	.word	0x40023800
 80008c8:	00f42400 	.word	0x00f42400
 80008cc:	007a1200 	.word	0x007a1200
 80008d0:	20000000 	.word	0x20000000

080008d4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d006      	beq.n	80008f4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008e6:	490a      	ldr	r1, [pc, #40]	; (8000910 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008f2:	e006      	b.n	8000902 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4013      	ands	r3, r2
 8000900:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000926:	490a      	ldr	r1, [pc, #40]	; (8000950 <RCC_APB1PeriphClockCmd+0x3c>)
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <RCC_APB1PeriphClockCmd+0x3c>)
 800092a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4313      	orrs	r3, r2
 8000930:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000932:	e006      	b.n	8000942 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <RCC_APB1PeriphClockCmd+0x3c>)
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <RCC_APB1PeriphClockCmd+0x3c>)
 8000938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	43db      	mvns	r3, r3
 800093e:	4013      	ands	r3, r2
 8000940:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <TIM_TimeBaseInit+0xbc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d013      	beq.n	8000998 <TIM_TimeBaseInit+0x44>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <TIM_TimeBaseInit+0xc0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d00f      	beq.n	8000998 <TIM_TimeBaseInit+0x44>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800097e:	d00b      	beq.n	8000998 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <TIM_TimeBaseInit+0xc4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d007      	beq.n	8000998 <TIM_TimeBaseInit+0x44>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <TIM_TimeBaseInit+0xc8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d003      	beq.n	8000998 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <TIM_TimeBaseInit+0xcc>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d108      	bne.n	80009aa <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000998:	89fb      	ldrh	r3, [r7, #14]
 800099a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800099e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	885a      	ldrh	r2, [r3, #2]
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <TIM_TimeBaseInit+0xd0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00c      	beq.n	80009cc <TIM_TimeBaseInit+0x78>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <TIM_TimeBaseInit+0xd4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d008      	beq.n	80009cc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009c0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	891a      	ldrh	r2, [r3, #8]
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	89fa      	ldrh	r2, [r7, #14]
 80009d0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	881a      	ldrh	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <TIM_TimeBaseInit+0xbc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d003      	beq.n	80009f2 <TIM_TimeBaseInit+0x9e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <TIM_TimeBaseInit+0xc0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d104      	bne.n	80009fc <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	7a9b      	ldrb	r3, [r3, #10]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	829a      	strh	r2, [r3, #20]
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40010000 	.word	0x40010000
 8000a14:	40010400 	.word	0x40010400
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	40000800 	.word	0x40000800
 8000a20:	40000c00 	.word	0x40000c00
 8000a24:	40001000 	.word	0x40001000
 8000a28:	40001400 	.word	0x40001400

08000a2c <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d008      	beq.n	8000a50 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 8000a4e:	e007      	b.n	8000a60 <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f023 0304 	bic.w	r3, r3, #4
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	801a      	strh	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d008      	beq.n	8000a90 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000a8e:	e007      	b.n	8000aa0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f023 0301 	bic.w	r3, r3, #1
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	801a      	strh	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d008      	beq.n	8000ad4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	899b      	ldrh	r3, [r3, #12]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000ad2:	e009      	b.n	8000ae8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	899b      	ldrh	r3, [r3, #12]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	819a      	strh	r2, [r3, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	821a      	strh	r2, [r3, #16]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <TIM2_IRQHandler>:
	Delay_Timer->ARR = arr_value;
	TIM_Cmd(Delay_Timer, ENABLE);
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,ENABLE);
}
void Delay_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	//set timeout flag
	timeout = 1;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <TIM2_IRQHandler+0x1c>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
	//disable timer
	TIM_ClearITPendingBit(Delay_Timer, TIM_IT_Update);
 8000b22:	2101      	movs	r1, #1
 8000b24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b28:	f7ff ffe4 	bl	8000af4 <TIM_ClearITPendingBit>
	Delay_Disable();
 8000b2c:	f000 f804 	bl	8000b38 <Delay_Disable>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000074 	.word	0x20000074

08000b38 <Delay_Disable>:

void Delay_Disable(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	//turn off timer
	TIM_ITConfig(Delay_Timer,TIM_IT_Update,DISABLE);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2101      	movs	r1, #1
 8000b40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b44:	f7ff ffb2 	bl	8000aac <TIM_ITConfig>
	TIM_Cmd(Delay_Timer, DISABLE);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b4e:	f7ff ff8d 	bl	8000a6c <TIM_Cmd>
	//clear counter
	assert_param(IS_TIM_ALL_PERIPH(Delay_Timer));
	Delay_Timer->CNT = 0;
 8000b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <init_Timer>:
int16_t count = 0;
uint16_t VirtIMUAdd[6] = {0x04,0x0964,0x12C4,0x1C24,0x2584,0x2EE4};
uint16_t VirtAddVarTab;
/* Private Function Definitions*/
void init_Timer(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,ENABLE);
 8000b66:	2101      	movs	r1, #1
 8000b68:	2020      	movs	r0, #32
 8000b6a:	f7ff fed3 	bl	8000914 <RCC_APB1PeriphClockCmd>

		TIM_TimeBaseInitTypeDef timerInitStructure; //create a 1ms delay
		RCC_ClocksTypeDef rcc;
		RCC_GetClocksFreq(&rcc);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe07 	bl	8000784 <RCC_GetClocksFreq>

		timerInitStructure.TIM_Prescaler = Sample_PSC;
 8000b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b7a:	82bb      	strh	r3, [r7, #20]
		timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	82fb      	strh	r3, [r7, #22]
		timerInitStructure.TIM_Period= rcc.HCLK_Frequency/(2*SAMPLE_RATE*Sample_PSC);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <init_Timer+0x84>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	0cdb      	lsrs	r3, r3, #19
 8000b8a:	61bb      	str	r3, [r7, #24]
		timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	83bb      	strh	r3, [r7, #28]
		timerInitStructure.TIM_RepetitionCounter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	77bb      	strb	r3, [r7, #30]
		TIM_TimeBaseInit(Sample_Timer, &timerInitStructure);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4813      	ldr	r0, [pc, #76]	; (8000be8 <init_Timer+0x88>)
 8000b9c:	f7ff feda 	bl	8000954 <TIM_TimeBaseInit>

		/* Prevent interrupt from triggering*/
		TIM_ClearITPendingBit(Sample_Timer,TIM_IT_Update);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <init_Timer+0x88>)
 8000ba4:	f7ff ffa6 	bl	8000af4 <TIM_ClearITPendingBit>
		TIM_UpdateRequestConfig(TIM2,TIM_UpdateSource_Regular);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bae:	f7ff ff3d 	bl	8000a2c <TIM_UpdateRequestConfig>
		TIM_ITConfig(Sample_Timer, TIM_IT_Update,ENABLE);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <init_Timer+0x88>)
 8000bb8:	f7ff ff78 	bl	8000aac <TIM_ITConfig>

		NVIC_InitTypeDef nvicStructure;
	    nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8000bbc:	2337      	movs	r3, #55	; 0x37
 8000bbe:	703b      	strb	r3, [r7, #0]
		nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	707b      	strb	r3, [r7, #1]
		nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	70bb      	strb	r3, [r7, #2]
		nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	70fb      	strb	r3, [r7, #3]
		NVIC_Init(&nvicStructure);
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fafa 	bl	80001c8 <NVIC_Init>
		TIM_Cmd(Sample_Timer,ENABLE);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4804      	ldr	r0, [pc, #16]	; (8000be8 <init_Timer+0x88>)
 8000bd8:	f7ff ff48 	bl	8000a6c <TIM_Cmd>
		//enable interrupts

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	cccd999b 	.word	0xcccd999b
 8000be8:	40001400 	.word	0x40001400

08000bec <init_IMU>:

uint8_t init_IMU(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	flag = (TM_MPU6050_Init(&MPU6050_Data0, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_4G, TM_MPU6050_Gyroscope_250s) == TM_MPU6050_Result_Ok);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <init_IMU+0x30>)
 8000bfe:	f001 fa25 	bl	800204c <TM_MPU6050_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	bf0c      	ite	eq
 8000c08:	2301      	moveq	r3, #1
 8000c0a:	2300      	movne	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	71fb      	strb	r3, [r7, #7]

	return flag;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000150 	.word	0x20000150

08000c20 <read_IMU_Data>:
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,DISABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,DISABLE);

}
void read_IMU_Data(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	TM_MPU6050_ReadAccelerometer(&MPU6050_Data0);
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <read_IMU_Data+0x14>)
 8000c26:	f001 facf 	bl	80021c8 <TM_MPU6050_ReadAccelerometer>
	TM_MPU6050_ReadGyroscope(&MPU6050_Data0);
 8000c2a:	4802      	ldr	r0, [pc, #8]	; (8000c34 <read_IMU_Data+0x14>)
 8000c2c:	f001 fafe 	bl	800222c <TM_MPU6050_ReadGyroscope>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000150 	.word	0x20000150

08000c38 <TIM7_IRQHandler>:
	NVIC_DisableIRQ(TIM7_IRQn);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7,DISABLE);
}
/****** IRQ HANDLER **************/
void TIM7_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	read_IMU_Data();
 8000c3c:	f7ff fff0 	bl	8000c20 <read_IMU_Data>
	/* Store Data in Flash */

	EE_WriteVariable(VirtIMUAdd[0],MPU6050_Data0.Accelerometer_X);
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <TIM7_IRQHandler+0xc4>)
 8000c42:	881a      	ldrh	r2, [r3, #0]
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <TIM7_IRQHandler+0xc8>)
 8000c46:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4610      	mov	r0, r2
 8000c50:	f000 fa08 	bl	8001064 <EE_WriteVariable>
	EE_WriteVariable(VirtIMUAdd[1],MPU6050_Data0.Accelerometer_Y);
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <TIM7_IRQHandler+0xc4>)
 8000c56:	885a      	ldrh	r2, [r3, #2]
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <TIM7_IRQHandler+0xc8>)
 8000c5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	4610      	mov	r0, r2
 8000c64:	f000 f9fe 	bl	8001064 <EE_WriteVariable>
	EE_WriteVariable(VirtIMUAdd[2],MPU6050_Data0.Accelerometer_Z);
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <TIM7_IRQHandler+0xc4>)
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <TIM7_IRQHandler+0xc8>)
 8000c6e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	4610      	mov	r0, r2
 8000c78:	f000 f9f4 	bl	8001064 <EE_WriteVariable>
	EE_WriteVariable(VirtIMUAdd[3],MPU6050_Data0.Gyroscope_X);
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <TIM7_IRQHandler+0xc4>)
 8000c7e:	88da      	ldrh	r2, [r3, #6]
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <TIM7_IRQHandler+0xc8>)
 8000c82:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f000 f9ea 	bl	8001064 <EE_WriteVariable>
	EE_WriteVariable(VirtIMUAdd[4],MPU6050_Data0.Gyroscope_Y);
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <TIM7_IRQHandler+0xc4>)
 8000c92:	891a      	ldrh	r2, [r3, #8]
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <TIM7_IRQHandler+0xc8>)
 8000c96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f000 f9e0 	bl	8001064 <EE_WriteVariable>
	EE_WriteVariable(VirtIMUAdd[5],MPU6050_Data0.Gyroscope_Y);
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <TIM7_IRQHandler+0xc4>)
 8000ca6:	895a      	ldrh	r2, [r3, #10]
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <TIM7_IRQHandler+0xc8>)
 8000caa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	f000 f9d6 	bl	8001064 <EE_WriteVariable>

	/* End */

	if(count == __numSamples())
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <TIM7_IRQHandler+0xcc>)
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	f241 7270 	movw	r2, #6000	; 0x1770
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10b      	bne.n	8000cde <TIM7_IRQHandler+0xa6>
	{
		sample_finished = 1;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <TIM7_IRQHandler+0xd0>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
		TIM_ClearITPendingBit(Sample_Timer,TIM_IT_Update);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	480f      	ldr	r0, [pc, #60]	; (8000d0c <TIM7_IRQHandler+0xd4>)
 8000cd0:	f7ff ff10 	bl	8000af4 <TIM_ClearITPendingBit>
		TIM_Cmd(TIM7,DISABLE);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <TIM7_IRQHandler+0xd4>)
 8000cd8:	f7ff fec8 	bl	8000a6c <TIM_Cmd>
 8000cdc:	e008      	b.n	8000cf0 <TIM7_IRQHandler+0xb8>

	}else
	{
		count++;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <TIM7_IRQHandler+0xcc>)
 8000ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <TIM7_IRQHandler+0xcc>)
 8000cee:	801a      	strh	r2, [r3, #0]
	}
	TIM_ClearITPendingBit(Sample_Timer,TIM_IT_Update);
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <TIM7_IRQHandler+0xd4>)
 8000cf4:	f7ff fefe 	bl	8000af4 <TIM_ClearITPendingBit>

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	20000150 	.word	0x20000150
 8000d04:	20000050 	.word	0x20000050
 8000d08:	2000014c 	.word	0x2000014c
 8000d0c:	40001400 	.word	0x40001400

08000d10 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d16:	2306      	movs	r3, #6
 8000d18:	817b      	strh	r3, [r7, #10]
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	813b      	strh	r3, [r7, #8]
  uint16_t VarIdx = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	81fb      	strh	r3, [r7, #14]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	2300      	movs	r3, #0
 8000d28:	80bb      	strh	r3, [r7, #4]
  int16_t x = -1;
 8000d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2e:	81bb      	strh	r3, [r7, #12]
  uint16_t  FlashStatus;

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000d30:	4b9d      	ldr	r3, [pc, #628]	; (8000fa8 <EE_Init+0x298>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	817b      	strh	r3, [r7, #10]
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000d36:	4b9d      	ldr	r3, [pc, #628]	; (8000fac <EE_Init+0x29c>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	813b      	strh	r3, [r7, #8]

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000d3c:	897b      	ldrh	r3, [r7, #10]
 8000d3e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d03c      	beq.n	8000dc0 <EE_Init+0xb0>
 8000d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d003      	beq.n	8000d56 <EE_Init+0x46>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 80ab 	beq.w	8000eaa <EE_Init+0x19a>
 8000d54:	e112      	b.n	8000f7c <EE_Init+0x26c>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000d56:	893b      	ldrh	r3, [r7, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10b      	bne.n	8000d74 <EE_Init+0x64>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_EraseSector(PAGE0_ID,VOLTAGE_RANGE);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	2010      	movs	r0, #16
 8000d60:	f7ff faac 	bl	80002bc <FLASH_EraseSector>
 8000d64:	4603      	mov	r3, r0
 8000d66:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	f000 810f 	beq.w	8000f8e <EE_Init+0x27e>
        {
          return FlashStatus;
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	e114      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000d74:	893b      	ldrh	r3, [r7, #8]
 8000d76:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d116      	bne.n	8000dac <EE_Init+0x9c>
      {
        /* Erase Page0 */
        FlashStatus = FLASH_EraseSector(PAGE0_ID, VOLTAGE_RANGE);
 8000d7e:	2102      	movs	r1, #2
 8000d80:	2010      	movs	r0, #16
 8000d82:	f7ff fa9b 	bl	80002bc <FLASH_EraseSector>
 8000d86:	4603      	mov	r3, r0
 8000d88:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d001      	beq.n	8000d94 <EE_Init+0x84>
        {
          return FlashStatus;
 8000d90:	887b      	ldrh	r3, [r7, #2]
 8000d92:	e104      	b.n	8000f9e <EE_Init+0x28e>
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4885      	ldr	r0, [pc, #532]	; (8000fac <EE_Init+0x29c>)
 8000d98:	f7ff faf0 	bl	800037c <FLASH_ProgramHalfWord>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	f000 80f3 	beq.w	8000f8e <EE_Init+0x27e>
        {
          return FlashStatus;
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	e0f8      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000dac:	f000 f97c 	bl	80010a8 <EE_Format>
 8000db0:	4603      	mov	r3, r0
 8000db2:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	f000 80e9 	beq.w	8000f8e <EE_Init+0x27e>
        {
          return FlashStatus;
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	e0ee      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000dc0:	893b      	ldrh	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d14d      	bne.n	8000e62 <EE_Init+0x152>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81fb      	strh	r3, [r7, #14]
 8000dca:	e030      	b.n	8000e2e <EE_Init+0x11e>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000dcc:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <EE_Init+0x2a0>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	4977      	ldr	r1, [pc, #476]	; (8000fb4 <EE_Init+0x2a4>)
 8000dd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d101      	bne.n	8000de2 <EE_Init+0xd2>
          {
            x = VarIdx;
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 8000de2:	89fa      	ldrh	r2, [r7, #14]
 8000de4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d01d      	beq.n	8000e28 <EE_Init+0x118>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	4a71      	ldr	r2, [pc, #452]	; (8000fb4 <EE_Init+0x2a4>)
 8000df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df4:	4970      	ldr	r1, [pc, #448]	; (8000fb8 <EE_Init+0x2a8>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f8e2 	bl	8000fc0 <EE_ReadVariable>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d010      	beq.n	8000e28 <EE_Init+0x118>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	4a6a      	ldr	r2, [pc, #424]	; (8000fb4 <EE_Init+0x2a4>)
 8000e0a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e0e:	4b6a      	ldr	r3, [pc, #424]	; (8000fb8 <EE_Init+0x2a8>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4610      	mov	r0, r2
 8000e16:	f000 f9b5 	bl	8001184 <EE_VerifyPageFullWriteVariable>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	d001      	beq.n	8000e28 <EE_Init+0x118>
              {
                return EepromStatus;
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	e0ba      	b.n	8000f9e <EE_Init+0x28e>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	81fb      	strh	r3, [r7, #14]
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d9cb      	bls.n	8000dcc <EE_Init+0xbc>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000e34:	2100      	movs	r1, #0
 8000e36:	485c      	ldr	r0, [pc, #368]	; (8000fa8 <EE_Init+0x298>)
 8000e38:	f7ff faa0 	bl	800037c <FLASH_ProgramHalfWord>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d001      	beq.n	8000e4a <EE_Init+0x13a>
        {
          return FlashStatus;
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	e0a9      	b.n	8000f9e <EE_Init+0x28e>
        }
        /* Erase Page1 */
        FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	2018      	movs	r0, #24
 8000e4e:	f7ff fa35 	bl	80002bc <FLASH_EraseSector>
 8000e52:	4603      	mov	r3, r0
 8000e54:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	f000 809a 	beq.w	8000f92 <EE_Init+0x282>
        {
          return FlashStatus;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	e09d      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000e62:	893b      	ldrh	r3, [r7, #8]
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d115      	bne.n	8000e98 <EE_Init+0x188>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	2018      	movs	r0, #24
 8000e70:	f7ff fa24 	bl	80002bc <FLASH_EraseSector>
 8000e74:	4603      	mov	r3, r0
 8000e76:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d001      	beq.n	8000e82 <EE_Init+0x172>
        {
          return FlashStatus;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	e08d      	b.n	8000f9e <EE_Init+0x28e>
        }
        /* Mark Page0 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000e82:	2100      	movs	r1, #0
 8000e84:	4848      	ldr	r0, [pc, #288]	; (8000fa8 <EE_Init+0x298>)
 8000e86:	f7ff fa79 	bl	800037c <FLASH_ProgramHalfWord>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d07e      	beq.n	8000f92 <EE_Init+0x282>
        {
          return FlashStatus;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	e082      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000e98:	f000 f906 	bl	80010a8 <EE_Format>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d075      	beq.n	8000f92 <EE_Init+0x282>
        {
          return FlashStatus;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	e079      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000eaa:	893b      	ldrh	r3, [r7, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d108      	bne.n	8000ec2 <EE_Init+0x1b2>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000eb0:	f000 f8fa 	bl	80010a8 <EE_Format>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	807b      	strh	r3, [r7, #2]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d06b      	beq.n	8000f96 <EE_Init+0x286>
        {
          return FlashStatus;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	e06d      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000ec2:	893b      	ldrh	r3, [r7, #8]
 8000ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d10a      	bne.n	8000ee2 <EE_Init+0x1d2>
      {
        /* Erase Page1 */
        FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 8000ecc:	2102      	movs	r1, #2
 8000ece:	2018      	movs	r0, #24
 8000ed0:	f7ff f9f4 	bl	80002bc <FLASH_EraseSector>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d05b      	beq.n	8000f96 <EE_Init+0x286>
        {
          return FlashStatus;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	e05d      	b.n	8000f9e <EE_Init+0x28e>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	81fb      	strh	r3, [r7, #14]
 8000ee6:	e030      	b.n	8000f4a <EE_Init+0x23a>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <EE_Init+0x2ac>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	4930      	ldr	r1, [pc, #192]	; (8000fb4 <EE_Init+0x2a4>)
 8000ef2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d101      	bne.n	8000efe <EE_Init+0x1ee>
          {
            x = VarIdx;
 8000efa:	89fb      	ldrh	r3, [r7, #14]
 8000efc:	81bb      	strh	r3, [r7, #12]
          }
          if (VarIdx != x)
 8000efe:	89fa      	ldrh	r2, [r7, #14]
 8000f00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d01d      	beq.n	8000f44 <EE_Init+0x234>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <EE_Init+0x2a4>)
 8000f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f10:	4929      	ldr	r1, [pc, #164]	; (8000fb8 <EE_Init+0x2a8>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f854 	bl	8000fc0 <EE_ReadVariable>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	80bb      	strh	r3, [r7, #4]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d010      	beq.n	8000f44 <EE_Init+0x234>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <EE_Init+0x2a4>)
 8000f26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <EE_Init+0x2a8>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4610      	mov	r0, r2
 8000f32:	f000 f927 	bl	8001184 <EE_VerifyPageFullWriteVariable>
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != FLASH_COMPLETE)
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d001      	beq.n	8000f44 <EE_Init+0x234>
              {
                return EepromStatus;
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	e02c      	b.n	8000f9e <EE_Init+0x28e>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	3301      	adds	r3, #1
 8000f48:	81fb      	strh	r3, [r7, #14]
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d9cb      	bls.n	8000ee8 <EE_Init+0x1d8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <EE_Init+0x29c>)
 8000f54:	f7ff fa12 	bl	800037c <FLASH_ProgramHalfWord>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	807b      	strh	r3, [r7, #2]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d001      	beq.n	8000f66 <EE_Init+0x256>
        {
          return FlashStatus;
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	e01b      	b.n	8000f9e <EE_Init+0x28e>
        }
        /* Erase Page0 */
        FlashStatus = FLASH_EraseSector(PAGE0_ID, VOLTAGE_RANGE);
 8000f66:	2102      	movs	r1, #2
 8000f68:	2010      	movs	r0, #16
 8000f6a:	f7ff f9a7 	bl	80002bc <FLASH_EraseSector>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	807b      	strh	r3, [r7, #2]
        /* If erase operation was failed, a Flash error code is returned */
        if (FlashStatus != FLASH_COMPLETE)
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d00e      	beq.n	8000f96 <EE_Init+0x286>
        {
          return FlashStatus;
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	e010      	b.n	8000f9e <EE_Init+0x28e>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8000f7c:	f000 f894 	bl	80010a8 <EE_Format>
 8000f80:	4603      	mov	r3, r0
 8000f82:	807b      	strh	r3, [r7, #2]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d007      	beq.n	8000f9a <EE_Init+0x28a>
      {
        return FlashStatus;
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	e007      	b.n	8000f9e <EE_Init+0x28e>
      break;
 8000f8e:	bf00      	nop
 8000f90:	e004      	b.n	8000f9c <EE_Init+0x28c>
      break;
 8000f92:	bf00      	nop
 8000f94:	e002      	b.n	8000f9c <EE_Init+0x28c>
      break;
 8000f96:	bf00      	nop
 8000f98:	e000      	b.n	8000f9c <EE_Init+0x28c>
      }
      break;
 8000f9a:	bf00      	nop
  }

  return FLASH_COMPLETE;
 8000f9c:	2308      	movs	r3, #8
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08020000 	.word	0x08020000
 8000fac:	0803f400 	.word	0x0803f400
 8000fb0:	08020006 	.word	0x08020006
 8000fb4:	20000080 	.word	0x20000080
 8000fb8:	20000052 	.word	0x20000052
 8000fbc:	0803f406 	.word	0x0803f406

08000fc0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000fd0:	f245 5355 	movw	r3, #21845	; 0x5555
 8000fd4:	81bb      	strh	r3, [r7, #12]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <EE_ReadVariable+0x9c>)
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <EE_ReadVariable+0x9c>)
 8000fe0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f888 	bl	80010f8 <EE_FindValidPage>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	2bab      	cmp	r3, #171	; 0xab
 8000ff0:	d101      	bne.n	8000ff6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000ff2:	23ab      	movs	r3, #171	; 0xab
 8000ff4:	e02d      	b.n	8001052 <EE_ReadVariable+0x92>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001004:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	3301      	adds	r3, #1
 800100e:	461a      	mov	r2, r3
 8001010:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 8001014:	fb03 f202 	mul.w	r2, r3, r2
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <EE_ReadVariable+0xa0>)
 800101a:	4413      	add	r3, r2
 800101c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800101e:	e012      	b.n	8001046 <EE_ReadVariable+0x86>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8001026:	89ba      	ldrh	r2, [r7, #12]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	429a      	cmp	r2, r3
 800102c:	d108      	bne.n	8001040 <EE_ReadVariable+0x80>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3b02      	subs	r3, #2
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29a      	uxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	82fb      	strh	r3, [r7, #22]

      break;
 800103e:	e007      	b.n	8001050 <EE_ReadVariable+0x90>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	3b04      	subs	r3, #4
 8001044:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1c9a      	adds	r2, r3, #2
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3e7      	bcc.n	8001020 <EE_ReadVariable+0x60>
    }
  }
  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001050:	8afb      	ldrh	r3, [r7, #22]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	08020000 	.word	0x08020000
 8001060:	0801fffe 	.word	0x0801fffe

08001064 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	80fb      	strh	r3, [r7, #6]
 8001070:	4613      	mov	r3, r2
 8001072:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f880 	bl	8001184 <EE_VerifyPageFullWriteVariable>
 8001084:	4603      	mov	r3, r0
 8001086:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	2b80      	cmp	r3, #128	; 0x80
 800108c:	d107      	bne.n	800109e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f8d5 	bl	8001244 <EE_PageTransfer>
 800109a:	4603      	mov	r3, r0
 800109c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800109e:	89fb      	ldrh	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
FLASH_Status EE_Format(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 80010ae:	2308      	movs	r3, #8
 80010b0:	71fb      	strb	r3, [r7, #7]

  /* Erase Page0 */
  FlashStatus = FLASH_EraseSector(PAGE0_ID, VOLTAGE_RANGE);
 80010b2:	2102      	movs	r1, #2
 80010b4:	2010      	movs	r0, #16
 80010b6:	f7ff f901 	bl	80002bc <FLASH_EraseSector>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]

  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d001      	beq.n	80010c8 <EE_Format+0x20>
  {
    return FlashStatus;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	e011      	b.n	80010ec <EE_Format+0x44>
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80010c8:	2100      	movs	r1, #0
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <EE_Format+0x4c>)
 80010cc:	f7ff f956 	bl	800037c <FLASH_ProgramHalfWord>
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d001      	beq.n	80010de <EE_Format+0x36>
  {
    return FlashStatus;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	e006      	b.n	80010ec <EE_Format+0x44>
  }

  /* Erase Page1 */
  FlashStatus = FLASH_EraseSector(PAGE1_ID, VOLTAGE_RANGE);
 80010de:	2102      	movs	r1, #2
 80010e0:	2018      	movs	r0, #24
 80010e2:	f7ff f8eb 	bl	80002bc <FLASH_EraseSector>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]

  /* Return Page1 erase operation status */
  return FlashStatus;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08020000 	.word	0x08020000

080010f8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001102:	2306      	movs	r3, #6
 8001104:	81fb      	strh	r3, [r7, #14]
 8001106:	2306      	movs	r3, #6
 8001108:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <EE_FindValidPage+0x84>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <EE_FindValidPage+0x88>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01b      	beq.n	8001154 <EE_FindValidPage+0x5c>
 800111c:	2b01      	cmp	r3, #1
 800111e:	d125      	bne.n	800116c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001120:	89bb      	ldrh	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d108      	bne.n	8001138 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001130:	2300      	movs	r3, #0
 8001132:	e01c      	b.n	800116e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001134:	2301      	movs	r3, #1
 8001136:	e01a      	b.n	800116e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001148:	2301      	movs	r3, #1
 800114a:	e010      	b.n	800116e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800114c:	2300      	movs	r3, #0
 800114e:	e00e      	b.n	800116e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001150:	23ab      	movs	r3, #171	; 0xab
 8001152:	e00c      	b.n	800116e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800115a:	2300      	movs	r3, #0
 800115c:	e007      	b.n	800116e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800115e:	89bb      	ldrh	r3, [r7, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001164:	2301      	movs	r3, #1
 8001166:	e002      	b.n	800116e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001168:	23ab      	movs	r3, #171	; 0xab
 800116a:	e000      	b.n	800116e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800116c:	2300      	movs	r3, #0
  }
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	08020000 	.word	0x08020000
 8001180:	0803f400 	.word	0x0803f400

08001184 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	80fb      	strh	r3, [r7, #6]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8001194:	2308      	movs	r3, #8
 8001196:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8001198:	2300      	movs	r3, #0
 800119a:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <EE_VerifyPageFullWriteVariable+0xb4>)
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <EE_VerifyPageFullWriteVariable+0xb8>)
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff ffa7 	bl	80010f8 <EE_FindValidPage>
 80011aa:	4603      	mov	r3, r0
 80011ac:	823b      	strh	r3, [r7, #16]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80011ae:	8a3b      	ldrh	r3, [r7, #16]
 80011b0:	2bab      	cmp	r3, #171	; 0xab
 80011b2:	d101      	bne.n	80011b8 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80011b4:	23ab      	movs	r3, #171	; 0xab
 80011b6:	e03a      	b.n	800122e <EE_VerifyPageFullWriteVariable+0xaa>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80011b8:	8a3b      	ldrh	r3, [r7, #16]
 80011ba:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011ca:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80011cc:	8a3b      	ldrh	r3, [r7, #16]
 80011ce:	3301      	adds	r3, #1
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 80011d6:	fb03 f202 	mul.w	r2, r3, r2
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <EE_VerifyPageFullWriteVariable+0xbc>)
 80011dc:	4413      	add	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80011e0:	e020      	b.n	8001224 <EE_VerifyPageFullWriteVariable+0xa0>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ea:	d118      	bne.n	800121e <EE_VerifyPageFullWriteVariable+0x9a>
    {
      /* Set variable data */
      FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	4619      	mov	r1, r3
 80011f0:	6978      	ldr	r0, [r7, #20]
 80011f2:	f7ff f8c3 	bl	800037c <FLASH_ProgramHalfWord>
 80011f6:	4603      	mov	r3, r0
 80011f8:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != FLASH_COMPLETE)
 80011fa:	7cfb      	ldrb	r3, [r7, #19]
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d002      	beq.n	8001206 <EE_VerifyPageFullWriteVariable+0x82>
      {
        return FlashStatus;
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	b29b      	uxth	r3, r3
 8001204:	e013      	b.n	800122e <EE_VerifyPageFullWriteVariable+0xaa>
      }
      /* Set variable virtual address */
      FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3302      	adds	r3, #2
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8b4 	bl	800037c <FLASH_ProgramHalfWord>
 8001214:	4603      	mov	r3, r0
 8001216:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8001218:	7cfb      	ldrb	r3, [r7, #19]
 800121a:	b29b      	uxth	r3, r3
 800121c:	e007      	b.n	800122e <EE_VerifyPageFullWriteVariable+0xaa>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3304      	adds	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3da      	bcc.n	80011e2 <EE_VerifyPageFullWriteVariable+0x5e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800122c:	2380      	movs	r3, #128	; 0x80
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	08020000 	.word	0x08020000
 800123c:	0803f400 	.word	0x0803f400
 8001240:	0801fffe 	.word	0x0801fffe

08001244 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
  FLASH_Status FlashStatus = FLASH_COMPLETE;
 8001254:	2308      	movs	r3, #8
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001258:	4b44      	ldr	r3, [pc, #272]	; (800136c <EE_PageTransfer+0x128>)
 800125a:	617b      	str	r3, [r7, #20]
  uint16_t OldPageId=0;
 800125c:	2300      	movs	r3, #0
 800125e:	827b      	strh	r3, [r7, #18]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	81bb      	strh	r3, [r7, #12]
 8001264:	2300      	movs	r3, #0
 8001266:	823b      	strh	r3, [r7, #16]
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	817b      	strh	r3, [r7, #10]
 800126c:	2300      	movs	r3, #0
 800126e:	813b      	strh	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff41 	bl	80010f8 <EE_FindValidPage>
 8001276:	4603      	mov	r3, r0
 8001278:	81bb      	strh	r3, [r7, #12]

  if (ValidPage == PAGE1)       /* Page1 valid */
 800127a:	89bb      	ldrh	r3, [r7, #12]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d104      	bne.n	800128a <EE_PageTransfer+0x46>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <EE_PageTransfer+0x128>)
 8001282:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001284:	2318      	movs	r3, #24
 8001286:	827b      	strh	r3, [r7, #18]
 8001288:	e009      	b.n	800129e <EE_PageTransfer+0x5a>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800128a:	89bb      	ldrh	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d104      	bne.n	800129a <EE_PageTransfer+0x56>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <EE_PageTransfer+0x12c>)
 8001292:	617b      	str	r3, [r7, #20]

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001294:	2310      	movs	r3, #16
 8001296:	827b      	strh	r3, [r7, #18]
 8001298:	e001      	b.n	800129e <EE_PageTransfer+0x5a>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800129a:	23ab      	movs	r3, #171	; 0xab
 800129c:	e062      	b.n	8001364 <EE_PageTransfer+0x120>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
 800129e:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff f86a 	bl	800037c <FLASH_ProgramHalfWord>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d002      	beq.n	80012b8 <EE_PageTransfer+0x74>
  {
    return FlashStatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	e055      	b.n	8001364 <EE_PageTransfer+0x120>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80012b8:	88ba      	ldrh	r2, [r7, #4]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff60 	bl	8001184 <EE_VerifyPageFullWriteVariable>
 80012c4:	4603      	mov	r3, r0
 80012c6:	817b      	strh	r3, [r7, #10]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != FLASH_COMPLETE)
 80012c8:	897b      	ldrh	r3, [r7, #10]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d001      	beq.n	80012d2 <EE_PageTransfer+0x8e>
  {
    return EepromStatus;
 80012ce:	897b      	ldrh	r3, [r7, #10]
 80012d0:	e048      	b.n	8001364 <EE_PageTransfer+0x120>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	823b      	strh	r3, [r7, #16]
 80012d6:	e027      	b.n	8001328 <EE_PageTransfer+0xe4>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80012d8:	8a3b      	ldrh	r3, [r7, #16]
 80012da:	4a26      	ldr	r2, [pc, #152]	; (8001374 <EE_PageTransfer+0x130>)
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d01d      	beq.n	8001322 <EE_PageTransfer+0xde>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80012e6:	8a3b      	ldrh	r3, [r7, #16]
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <EE_PageTransfer+0x130>)
 80012ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ee:	4922      	ldr	r1, [pc, #136]	; (8001378 <EE_PageTransfer+0x134>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe65 	bl	8000fc0 <EE_ReadVariable>
 80012f6:	4603      	mov	r3, r0
 80012f8:	813b      	strh	r3, [r7, #8]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80012fa:	893b      	ldrh	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d010      	beq.n	8001322 <EE_PageTransfer+0xde>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001300:	8a3b      	ldrh	r3, [r7, #16]
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <EE_PageTransfer+0x130>)
 8001304:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <EE_PageTransfer+0x134>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f7ff ff38 	bl	8001184 <EE_VerifyPageFullWriteVariable>
 8001314:	4603      	mov	r3, r0
 8001316:	817b      	strh	r3, [r7, #10]
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != FLASH_COMPLETE)
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b08      	cmp	r3, #8
 800131c:	d001      	beq.n	8001322 <EE_PageTransfer+0xde>
        {
          return EepromStatus;
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	e020      	b.n	8001364 <EE_PageTransfer+0x120>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001322:	8a3b      	ldrh	r3, [r7, #16]
 8001324:	3301      	adds	r3, #1
 8001326:	823b      	strh	r3, [r7, #16]
 8001328:	8a3b      	ldrh	r3, [r7, #16]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d9d4      	bls.n	80012d8 <EE_PageTransfer+0x94>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = FLASH_EraseSector(OldPageId, VOLTAGE_RANGE);
 800132e:	8a7b      	ldrh	r3, [r7, #18]
 8001330:	2102      	movs	r1, #2
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffc2 	bl	80002bc <FLASH_EraseSector>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d002      	beq.n	8001348 <EE_PageTransfer+0x104>
  {
    return FlashStatus;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	b29b      	uxth	r3, r3
 8001346:	e00d      	b.n	8001364 <EE_PageTransfer+0x120>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
 8001348:	2100      	movs	r1, #0
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff f816 	bl	800037c <FLASH_ProgramHalfWord>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != FLASH_COMPLETE)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d002      	beq.n	8001360 <EE_PageTransfer+0x11c>
  {
    return FlashStatus;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	b29b      	uxth	r3, r3
 800135e:	e001      	b.n	8001364 <EE_PageTransfer+0x120>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	b29b      	uxth	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	08020000 	.word	0x08020000
 8001370:	0803f400 	.word	0x0803f400
 8001374:	20000080 	.word	0x20000080
 8001378:	20000052 	.word	0x20000052

0800137c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	f5ad 4d0c 	sub.w	sp, sp, #35840	; 0x8c00
 8001382:	b0ac      	sub	sp, #176	; 0xb0
 8001384:	af00      	add	r7, sp, #0
	init_LED();
 8001386:	f000 f8d9 	bl	800153c <init_LED>
int16_t imu_val[3][__numSamples()];
if(init_IMU())
 800138a:	f7ff fc2f 	bl	8000bec <init_IMU>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80ce 	beq.w	8001532 <main+0x1b6>
{
	FLASH_Unlock();
 8001396:	f7fe ff79 	bl	800028c <FLASH_Unlock>
	EE_Init();
 800139a:	f7ff fcb9 	bl	8000d10 <EE_Init>
	init_Timer();
 800139e:	f7ff fbdf 	bl	8000b60 <init_Timer>
	set_LED(ON);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 f8e0 	bl	8001568 <set_LED>

	//wait for imu to finish sampling
	while(!sample_finished);
 80013a8:	bf00      	nop
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <main+0x1b8>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0fb      	beq.n	80013aa <main+0x2e>
	//read

	for (int var = 0; var < __numSamples(); ++var)
 80013b2:	2300      	movs	r3, #0
 80013b4:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 80013b8:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e0ae      	b.n	800151e <main+0x1a2>
	{
		uint16_t temp[6];
		EE_ReadVariable(VIA[0],&temp[0]);
 80013c0:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <main+0x1bc>)
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013c8:	3bb0      	subs	r3, #176	; 0xb0
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7ff fdf7 	bl	8000fc0 <EE_ReadVariable>
		EE_ReadVariable(VIA[1],&temp[1]);
 80013d2:	4b59      	ldr	r3, [pc, #356]	; (8001538 <main+0x1bc>)
 80013d4:	885a      	ldrh	r2, [r3, #2]
 80013d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013da:	3bb0      	subs	r3, #176	; 0xb0
 80013dc:	3302      	adds	r3, #2
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f7ff fded 	bl	8000fc0 <EE_ReadVariable>
		EE_ReadVariable(VIA[2],&temp[2]);
 80013e6:	4b54      	ldr	r3, [pc, #336]	; (8001538 <main+0x1bc>)
 80013e8:	889a      	ldrh	r2, [r3, #4]
 80013ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013ee:	3bb0      	subs	r3, #176	; 0xb0
 80013f0:	3304      	adds	r3, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4610      	mov	r0, r2
 80013f6:	f7ff fde3 	bl	8000fc0 <EE_ReadVariable>
		EE_ReadVariable(VIA[3],&temp[3]);
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <main+0x1bc>)
 80013fc:	88da      	ldrh	r2, [r3, #6]
 80013fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001402:	3bb0      	subs	r3, #176	; 0xb0
 8001404:	3306      	adds	r3, #6
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f7ff fdd9 	bl	8000fc0 <EE_ReadVariable>
		EE_ReadVariable(VIA[4],&temp[4]);
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <main+0x1bc>)
 8001410:	891a      	ldrh	r2, [r3, #8]
 8001412:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001416:	3bb0      	subs	r3, #176	; 0xb0
 8001418:	3308      	adds	r3, #8
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff fdcf 	bl	8000fc0 <EE_ReadVariable>
		EE_ReadVariable(VIA[5],&temp[5]);
 8001422:	4b45      	ldr	r3, [pc, #276]	; (8001538 <main+0x1bc>)
 8001424:	895a      	ldrh	r2, [r3, #10]
 8001426:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800142a:	3bb0      	subs	r3, #176	; 0xb0
 800142c:	330a      	adds	r3, #10
 800142e:	4619      	mov	r1, r3
 8001430:	4610      	mov	r0, r2
 8001432:	f7ff fdc5 	bl	8000fc0 <EE_ReadVariable>
		imu_val[0][var] = (int16_t)temp[0];
 8001436:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800143a:	3bb0      	subs	r3, #176	; 0xb0
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b219      	sxth	r1, r3
 8001440:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001444:	3ba4      	subs	r3, #164	; 0xa4
 8001446:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 800144a:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		imu_val[1][var] = (int16_t)temp[1];
 8001454:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001458:	3bb0      	subs	r3, #176	; 0xb0
 800145a:	885b      	ldrh	r3, [r3, #2]
 800145c:	b219      	sxth	r1, r3
 800145e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001462:	3ba4      	subs	r3, #164	; 0xa4
 8001464:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 8001468:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f502 52bb 	add.w	r2, r2, #5984	; 0x1760
 8001472:	3210      	adds	r2, #16
 8001474:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		imu_val[2][var] = (int16_t)temp[2];
 8001478:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800147c:	3bb0      	subs	r3, #176	; 0xb0
 800147e:	889b      	ldrh	r3, [r3, #4]
 8001480:	b219      	sxth	r1, r3
 8001482:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001486:	3ba4      	subs	r3, #164	; 0xa4
 8001488:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 800148c:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	f502 523b 	add.w	r2, r2, #11968	; 0x2ec0
 8001496:	3220      	adds	r2, #32
 8001498:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		imu_val[3][var] = (int16_t)temp[3];
 800149c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014a0:	3bb0      	subs	r3, #176	; 0xb0
 80014a2:	88db      	ldrh	r3, [r3, #6]
 80014a4:	b219      	sxth	r1, r3
 80014a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014aa:	3ba4      	subs	r3, #164	; 0xa4
 80014ac:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 80014b0:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f502 428c 	add.w	r2, r2, #17920	; 0x4600
 80014ba:	3250      	adds	r2, #80	; 0x50
 80014bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		imu_val[4][var] = (int16_t)temp[4];
 80014c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014c4:	3bb0      	subs	r3, #176	; 0xb0
 80014c6:	891b      	ldrh	r3, [r3, #8]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014ce:	3ba4      	subs	r3, #164	; 0xa4
 80014d0:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 80014d4:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	f502 42bb 	add.w	r2, r2, #23936	; 0x5d80
 80014de:	3240      	adds	r2, #64	; 0x40
 80014e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		imu_val[5][var] = (int16_t)temp[5];
 80014e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014e8:	3bb0      	subs	r3, #176	; 0xb0
 80014ea:	895b      	ldrh	r3, [r3, #10]
 80014ec:	b219      	sxth	r1, r3
 80014ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014f2:	3ba4      	subs	r3, #164	; 0xa4
 80014f4:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 80014f8:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	f502 42ea 	add.w	r2, r2, #29952	; 0x7500
 8001502:	3230      	adds	r2, #48	; 0x30
 8001504:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int var = 0; var < __numSamples(); ++var)
 8001508:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 800150c:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	f507 420c 	add.w	r2, r7, #35840	; 0x8c00
 8001518:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	f507 430c 	add.w	r3, r7, #35840	; 0x8c00
 8001522:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f241 726f 	movw	r2, #5999	; 0x176f
 800152c:	4293      	cmp	r3, r2
 800152e:	f77f af47 	ble.w	80013c0 <main+0x44>
	}
}
	while(1)
 8001532:	e7fe      	b.n	8001532 <main+0x1b6>
 8001534:	2000014c 	.word	0x2000014c
 8001538:	2000001c 	.word	0x2000001c

0800153c <init_LED>:

  }
}

void init_LED()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8001542:	2101      	movs	r1, #1
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff f9c5 	bl	80008d4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef led;
	led.GPIO_Mode = GPIO_Mode_OUT;
 800154a:	2301      	movs	r3, #1
 800154c:	713b      	strb	r3, [r7, #4]
	led.GPIO_Pin = GPIO_Pin_5;
 800154e:	2320      	movs	r3, #32
 8001550:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA,&led);
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <init_LED+0x28>)
 8001558:	f7fe ff94 	bl	8000484 <GPIO_Init>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020000 	.word	0x40020000

08001568 <set_LED>:

void set_LED(led_t val)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	if(val)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <set_LED+0x1e>
	{
		GPIOA->ODR |= GPIO_ODR_ODR_5;
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <set_LED+0x38>)
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <set_LED+0x38>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f043 0320 	orr.w	r3, r3, #32
 8001582:	6153      	str	r3, [r2, #20]
	}else
	{
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
	}
}
 8001584:	e005      	b.n	8001592 <set_LED+0x2a>
		GPIOA->ODR &= ~GPIO_ODR_ODR_5;
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <set_LED+0x38>)
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <set_LED+0x38>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f023 0320 	bic.w	r3, r3, #32
 8001590:	6153      	str	r3, [r2, #20]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40020000 	.word	0x40020000

080015a4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015a6:	e003      	b.n	80015b0 <LoopCopyDataInit>

080015a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80015aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ae:	3104      	adds	r1, #4

080015b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80015b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015b8:	d3f6      	bcc.n	80015a8 <CopyDataInit>
  ldr  r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80015bc:	e002      	b.n	80015c4 <LoopFillZerobss>

080015be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015c0:	f842 3b04 	str.w	r3, [r2], #4

080015c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80015c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015c8:	d3f9      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ca:	f000 f83f 	bl	800164c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f000 fe5f 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fed3 	bl	800137c <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr  r3, =_sidata
 80015d8:	080022f8 	.word	0x080022f8
  ldr  r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e0:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 80015e4:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 80015e8:	20000178 	.word	0x20000178

080015ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC_IRQHandler>

080015ee <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001600:	e7fe      	b.n	8001600 <HardFault_Handler+0x4>

08001602 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001606:	e7fe      	b.n	8001606 <MemManage_Handler+0x4>

08001608 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800160c:	e7fe      	b.n	800160c <BusFault_Handler+0x4>

0800160e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001612:	e7fe      	b.n	8001612 <UsageFault_Handler+0x4>

08001614 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <SystemInit+0x60>)
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <SystemInit+0x60>)
 8001654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <SystemInit+0x64>)
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <SystemInit+0x64>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <SystemInit+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <SystemInit+0x64>)
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <SystemInit+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <SystemInit+0x64>)
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <SystemInit+0x68>)
 8001686:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001688:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <SystemInit+0x64>)
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <SystemInit+0x64>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800169a:	f000 f80d 	bl	80016b8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <SystemInit+0x60>)
 80016a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a4:	609a      	str	r2, [r3, #8]
#endif
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	24003010 	.word	0x24003010

080016b8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80016c6:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <SetSysClock+0xe8>)
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <SetSysClock+0xe8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <SetSysClock+0xe8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <SetSysClock+0x38>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80016ee:	d1f0      	bne.n	80016d2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <SetSysClock+0xe8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80016fc:	2301      	movs	r3, #1
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	e001      	b.n	8001706 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d142      	bne.n	8001792 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800170c:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <SetSysClock+0xe8>)
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <SetSysClock+0xe8>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <SetSysClock+0xec>)
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <SetSysClock+0xec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001724:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <SetSysClock+0xe8>)
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <SetSysClock+0xe8>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <SetSysClock+0xe8>)
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <SetSysClock+0xe8>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001736:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <SetSysClock+0xe8>)
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <SetSysClock+0xe8>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001742:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <SetSysClock+0xe8>)
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <SetSysClock+0xf0>)
 8001748:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <SetSysClock+0xe8>)
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <SetSysClock+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001754:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001756:	bf00      	nop
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <SetSysClock+0xe8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f9      	beq.n	8001758 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <SetSysClock+0xf4>)
 8001766:	f240 6205 	movw	r2, #1541	; 0x605
 800176a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <SetSysClock+0xe8>)
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <SetSysClock+0xe8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <SetSysClock+0xe8>)
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <SetSysClock+0xe8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001784:	bf00      	nop
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SetSysClock+0xe8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d1f9      	bne.n	8001786 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000
 80017a8:	07405408 	.word	0x07405408
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	807b      	strh	r3, [r7, #2]
 80017c2:	460b      	mov	r3, r1
 80017c4:	707b      	strb	r3, [r7, #1]
 80017c6:	4613      	mov	r3, r2
 80017c8:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03e      	beq.n	800184e <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f851 	bl	8001878 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e029      	b.n	8001830 <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	fa42 f303 	asr.w	r3, r2, r3
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01d      	beq.n	8001828 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	08d9      	lsrs	r1, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3108      	adds	r1, #8
 80017f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	f001 0107 	and.w	r1, r1, #7
 8001802:	0089      	lsls	r1, r1, #2
 8001804:	200f      	movs	r0, #15
 8001806:	fa00 f101 	lsl.w	r1, r0, r1
 800180a:	43c9      	mvns	r1, r1
 800180c:	400b      	ands	r3, r1
 800180e:	7f38      	ldrb	r0, [r7, #28]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	f001 0107 	and.w	r1, r1, #7
 8001816:	0089      	lsls	r1, r1, #2
 8001818:	fa00 f101 	lsl.w	r1, r0, r1
 800181c:	4319      	orrs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001826:	e000      	b.n	800182a <TM_GPIO_InitAlternate+0x7a>
			continue;
 8001828:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	d9d2      	bls.n	80017dc <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001836:	787a      	ldrb	r2, [r7, #1]
 8001838:	8879      	ldrh	r1, [r7, #2]
 800183a:	7e3b      	ldrb	r3, [r7, #24]
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	783b      	ldrb	r3, [r7, #0]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	4613      	mov	r3, r2
 8001844:	2202      	movs	r2, #2
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f82e 	bl	80018a8 <TM_GPIO_INT_Init>
 800184c:	e000      	b.n	8001850 <TM_GPIO_InitAlternate+0xa0>
		return;
 800184e:	bf00      	nop
}
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001864:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001868:	0a9b      	lsrs	r3, r3, #10
 800186a:	b29b      	uxth	r3, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe8 	bl	8001856 <TM_GPIO_GetPortSource>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	2301      	movs	r3, #1
 800188c:	fa03 f102 	lsl.w	r1, r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <TM_GPIO_INT_EnableClock+0x2c>)
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <TM_GPIO_INT_EnableClock+0x2c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	430b      	orrs	r3, r1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	807b      	strh	r3, [r7, #2]
 80018ba:	460b      	mov	r3, r1
 80018bc:	707b      	strb	r3, [r7, #1]
 80018be:	4613      	mov	r3, r2
 80018c0:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffc7 	bl	8001856 <TM_GPIO_GetPortSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e067      	b.n	80019a2 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	fa42 f303 	asr.w	r3, r2, r3
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d05b      	beq.n	800199a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	7bba      	ldrb	r2, [r7, #14]
 80018e6:	4932      	ldr	r1, [pc, #200]	; (80019b0 <TM_GPIO_INT_Init+0x108>)
 80018e8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80018ec:	b211      	sxth	r1, r2
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	b212      	sxth	r2, r2
 80018f8:	430a      	orrs	r2, r1
 80018fa:	b212      	sxth	r2, r2
 80018fc:	b291      	uxth	r1, r2
 80018fe:	4a2c      	ldr	r2, [pc, #176]	; (80019b0 <TM_GPIO_INT_Init+0x108>)
 8001900:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	0052      	lsls	r2, r2, #1
 800190c:	2103      	movs	r1, #3
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	43d2      	mvns	r2, r2
 8001914:	4013      	ands	r3, r2
 8001916:	7e39      	ldrb	r1, [r7, #24]
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	0052      	lsls	r2, r2, #1
 800191c:	fa01 f202 	lsl.w	r2, r1, r2
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2103      	movs	r1, #3
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	4013      	ands	r3, r2
 8001938:	7879      	ldrb	r1, [r7, #1]
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	0052      	lsls	r2, r2, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d002      	beq.n	8001954 <TM_GPIO_INT_Init+0xac>
 800194e:	787b      	ldrb	r3, [r7, #1]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	b292      	uxth	r2, r2
 8001962:	43d2      	mvns	r2, r2
 8001964:	4013      	ands	r3, r2
 8001966:	7839      	ldrb	r1, [r7, #0]
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	b292      	uxth	r2, r2
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2103      	movs	r1, #3
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	4013      	ands	r3, r2
 8001988:	7f39      	ldrb	r1, [r7, #28]
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	0052      	lsls	r2, r2, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	e000      	b.n	800199c <TM_GPIO_INT_Init+0xf4>
			continue;
 800199a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d994      	bls.n	80018d2 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000054 	.word	0x20000054

080019b4 <TM_I2C_Init>:
/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	460b      	mov	r3, r1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <TM_I2C_Init+0x124>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d121      	bne.n	8001a0e <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80019ca:	4a44      	ldr	r2, [pc, #272]	; (8001adc <TM_I2C_Init+0x128>)
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <TM_I2C_Init+0x128>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fa79 	bl	8001ed0 <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 80019de:	4b40      	ldr	r3, [pc, #256]	; (8001ae0 <TM_I2C_Init+0x12c>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d902      	bls.n	80019ee <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 80019e8:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <TM_I2C_Init+0x12c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <TM_I2C_Init+0x12c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 80019f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019f8:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 80019fe:	2300      	movs	r3, #0
 8001a00:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 8001a06:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001a0a:	82fb      	strh	r3, [r7, #22]
 8001a0c:	e04a      	b.n	8001aa4 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <TM_I2C_Init+0x130>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d121      	bne.n	8001a5a <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001a16:	4a31      	ldr	r2, [pc, #196]	; (8001adc <TM_I2C_Init+0x128>)
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <TM_I2C_Init+0x128>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fa91 	bl	8001f4c <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <TM_I2C_Init+0x12c>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d902      	bls.n	8001a3a <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8001a34:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <TM_I2C_Init+0x12c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <TM_I2C_Init+0x12c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 8001a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a44:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 8001a52:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001a56:	82fb      	strh	r3, [r7, #22]
 8001a58:	e024      	b.n	8001aa4 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <TM_I2C_Init+0x134>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d120      	bne.n	8001aa4 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <TM_I2C_Init+0x128>)
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <TM_I2C_Init+0x128>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 faab 	bl	8001fcc <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <TM_I2C_Init+0x12c>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d902      	bls.n	8001a86 <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <TM_I2C_Init+0x12c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <TM_I2C_Init+0x12c>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 8001a8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a90:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 8001a96:	2300      	movs	r3, #0
 8001a98:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 8001a9e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001aa2:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7fe fd70 	bl	80005a0 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	801a      	strh	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	20000028 	.word	0x20000028
 8001ae4:	40005800 	.word	0x40005800
 8001ae8:	40005c00 	.word	0x40005c00

08001aec <TM_I2C_Read>:

uint8_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
 8001af8:	4613      	mov	r3, r2
 8001afa:	70bb      	strb	r3, [r7, #2]
	uint8_t received_data;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001afc:	78f9      	ldrb	r1, [r7, #3]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2200      	movs	r2, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f89c 	bl	8001c40 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8001b08:	78bb      	ldrb	r3, [r7, #2]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f91b 	bl	8001d48 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f9a8 	bl	8001e68 <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8001b18:	78f9      	ldrb	r1, [r7, #3]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f88e 	bl	8001c40 <TM_I2C_Start>
	received_data = TM_I2C_ReadNack(I2Cx);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f967 	bl	8001df8 <TM_I2C_ReadNack>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73fb      	strb	r3, [r7, #15]
	return received_data;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <TM_I2C_ReadMulti>:

void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	72fb      	strb	r3, [r7, #11]
 8001b46:	4613      	mov	r3, r2
 8001b48:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 8001b4a:	7af9      	ldrb	r1, [r7, #11]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2200      	movs	r2, #0
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f875 	bl	8001c40 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8001b56:	7abb      	ldrb	r3, [r7, #10]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f8f4 	bl	8001d48 <TM_I2C_WriteData>
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 8001b60:	7af9      	ldrb	r1, [r7, #11]
 8001b62:	2301      	movs	r3, #1
 8001b64:	2201      	movs	r2, #1
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f86a 	bl	8001c40 <TM_I2C_Start>
	while (count--) {
 8001b6c:	e013      	b.n	8001b96 <TM_I2C_ReadMulti+0x5e>
		if (!count) {
 8001b6e:	8c3b      	ldrh	r3, [r7, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d108      	bne.n	8001b86 <TM_I2C_ReadMulti+0x4e>
			/* Last byte */
			*data++ = TM_I2C_ReadNack(I2Cx);
 8001b74:	687c      	ldr	r4, [r7, #4]
 8001b76:	1c63      	adds	r3, r4, #1
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f93c 	bl	8001df8 <TM_I2C_ReadNack>
 8001b80:	4603      	mov	r3, r0
 8001b82:	7023      	strb	r3, [r4, #0]
 8001b84:	e007      	b.n	8001b96 <TM_I2C_ReadMulti+0x5e>
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
 8001b86:	687c      	ldr	r4, [r7, #4]
 8001b88:	1c63      	adds	r3, r4, #1
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f903 	bl	8001d98 <TM_I2C_ReadAck>
 8001b92:	4603      	mov	r3, r0
 8001b94:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001b96:	8c3b      	ldrh	r3, [r7, #32]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	843a      	strh	r2, [r7, #32]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e6      	bne.n	8001b6e <TM_I2C_ReadMulti+0x36>
		}
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <TM_I2C_Write>:
			*data = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	70fb      	strb	r3, [r7, #3]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	70bb      	strb	r3, [r7, #2]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8001bc2:	78f9      	ldrb	r1, [r7, #3]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f839 	bl	8001c40 <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8001bce:	78bb      	ldrb	r3, [r7, #2]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8b8 	bl	8001d48 <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8b3 	bl	8001d48 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f940 	bl	8001e68 <TM_I2C_Stop>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <TM_I2C_IsDeviceConnected>:
	}
	TM_I2C_Stop(I2Cx);
}


uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 8001c00:	78f9      	ldrb	r1, [r7, #3]
 8001c02:	2301      	movs	r3, #1
 8001c04:	2200      	movs	r2, #0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f81a 	bl	8001c40 <TM_I2C_Start>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <TM_I2C_IsDeviceConnected+0x26>
		connected = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f926 	bl	8001e68 <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <TM_I2C_InitCustomPinsCallback>:

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <TM_I2C_Start>:

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	70fb      	strb	r3, [r7, #3]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70bb      	strb	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <TM_I2C_Start+0x100>)
 8001c6c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c70:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001c72:	e00a      	b.n	8001c8a <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <TM_I2C_Start+0x100>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	4a31      	ldr	r2, [pc, #196]	; (8001d40 <TM_I2C_Start+0x100>)
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <TM_I2C_Start+0x100>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <TM_I2C_Start+0x4a>
			return 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e056      	b.n	8001d38 <TM_I2C_Start+0xf8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	8a9b      	ldrh	r3, [r3, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ed      	beq.n	8001c74 <TM_I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 8001cae:	78bb      	ldrb	r3, [r7, #2]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11d      	bne.n	8001cf0 <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <TM_I2C_Start+0x100>)
 8001cc4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001cc8:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001cca:	e00a      	b.n	8001ce2 <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <TM_I2C_Start+0x100>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <TM_I2C_Start+0x100>)
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <TM_I2C_Start+0x100>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <TM_I2C_Start+0xa2>
				return 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e02a      	b.n	8001d38 <TM_I2C_Start+0xf8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	8a9b      	ldrh	r3, [r3, #20]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ed      	beq.n	8001ccc <TM_I2C_Start+0x8c>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8001cf0:	78bb      	ldrb	r3, [r7, #2]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d11d      	bne.n	8001d32 <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <TM_I2C_Start+0x100>)
 8001d06:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d0a:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8001d0c:	e00a      	b.n	8001d24 <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <TM_I2C_Start+0x100>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <TM_I2C_Start+0x100>)
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <TM_I2C_Start+0x100>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <TM_I2C_Start+0xe4>
				return 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e009      	b.n	8001d38 <TM_I2C_Start+0xf8>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <TM_I2C_Start+0x104>)
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fcfc 	bl	8000724 <I2C_CheckEvent>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ed      	beq.n	8001d0e <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000006c 	.word	0x2000006c
 8001d44:	00030002 	.word	0x00030002

08001d48 <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <TM_I2C_WriteData+0x4c>)
 8001d56:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d5a:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8001d5c:	e004      	b.n	8001d68 <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <TM_I2C_WriteData+0x4c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	4a0b      	ldr	r2, [pc, #44]	; (8001d94 <TM_I2C_WriteData+0x4c>)
 8001d66:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8a9b      	ldrh	r3, [r3, #20]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <TM_I2C_WriteData+0x36>
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <TM_I2C_WriteData+0x4c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ef      	bne.n	8001d5e <TM_I2C_WriteData+0x16>
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	821a      	strh	r2, [r3, #16]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2000006c 	.word	0x2000006c

08001d98 <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <TM_I2C_ReadAck+0x58>)
 8001db2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001db6:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001db8:	e00a      	b.n	8001dd0 <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <TM_I2C_ReadAck+0x58>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <TM_I2C_ReadAck+0x58>)
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <TM_I2C_ReadAck+0x58>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <TM_I2C_ReadAck+0x38>
			return 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e00b      	b.n	8001de8 <TM_I2C_ReadAck+0x50>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001dd0:	4908      	ldr	r1, [pc, #32]	; (8001df4 <TM_I2C_ReadAck+0x5c>)
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fca6 	bl	8000724 <I2C_CheckEvent>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0ed      	beq.n	8001dba <TM_I2C_ReadAck+0x22>
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8a1b      	ldrh	r3, [r3, #16]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000006c 	.word	0x2000006c
 8001df4:	00030040 	.word	0x00030040

08001df8 <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <TM_I2C_ReadNack+0x68>)
 8001e22:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e26:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001e28:	e00a      	b.n	8001e40 <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <TM_I2C_ReadNack+0x68>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <TM_I2C_ReadNack+0x68>)
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <TM_I2C_ReadNack+0x68>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <TM_I2C_ReadNack+0x48>
			return 1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e00b      	b.n	8001e58 <TM_I2C_ReadNack+0x60>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8001e40:	4908      	ldr	r1, [pc, #32]	; (8001e64 <TM_I2C_ReadNack+0x6c>)
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fc6e 	bl	8000724 <I2C_CheckEvent>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ed      	beq.n	8001e2a <TM_I2C_ReadNack+0x32>
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8a1b      	ldrh	r3, [r3, #16]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000006c 	.word	0x2000006c
 8001e64:	00030040 	.word	0x00030040

08001e68 <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <TM_I2C_Stop+0x64>)
 8001e72:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e76:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001e78:	e00a      	b.n	8001e90 <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <TM_I2C_Stop+0x64>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <TM_I2C_Stop+0x64>)
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <TM_I2C_Stop+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <TM_I2C_Stop+0x28>
			return 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e016      	b.n	8001ebe <TM_I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8a9b      	ldrh	r3, [r3, #20]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0ed      	beq.n	8001e7a <TM_I2C_Stop+0x12>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8a9b      	ldrh	r3, [r3, #20]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0e6      	beq.n	8001e7a <TM_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000006c 	.word	0x2000006c

08001ed0 <TM_I2C1_INT_InitPins>:




/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	2201      	movs	r2, #1
 8001eec:	21c0      	movs	r1, #192	; 0xc0
 8001eee:	4815      	ldr	r0, [pc, #84]	; (8001f44 <TM_I2C1_INT_InitPins+0x74>)
 8001ef0:	f7ff fc5e 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10a      	bne.n	8001f10 <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8001efa:	2304      	movs	r3, #4
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f0a:	480e      	ldr	r0, [pc, #56]	; (8001f44 <TM_I2C1_INT_InitPins+0x74>)
 8001f0c:	f7ff fc50 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d10a      	bne.n	8001f2c <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8001f16:	2304      	movs	r3, #4
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <TM_I2C1_INT_InitPins+0x74>)
 8001f28:	f7ff fc42 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d103      	bne.n	8001f3a <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 8001f32:	2104      	movs	r1, #4
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <TM_I2C1_INT_InitPins+0x78>)
 8001f36:	f7ff fe76 	bl	8001c26 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40005400 	.word	0x40005400

08001f4c <TM_I2C2_INT_InitPins>:

static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2301      	movs	r3, #1
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001f6c:	4813      	ldr	r0, [pc, #76]	; (8001fbc <TM_I2C2_INT_InitPins+0x70>)
 8001f6e:	f7ff fc1f 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d109      	bne.n	8001f8c <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001f78:	2304      	movs	r3, #4
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2301      	movs	r3, #1
 8001f82:	2201      	movs	r2, #1
 8001f84:	2103      	movs	r1, #3
 8001f86:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <TM_I2C2_INT_InitPins+0x74>)
 8001f88:	f7ff fc12 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d109      	bne.n	8001fa6 <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8001f92:	2304      	movs	r3, #4
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2301      	movs	r3, #1
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2130      	movs	r1, #48	; 0x30
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <TM_I2C2_INT_InitPins+0x78>)
 8001fa2:	f7ff fc05 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d103      	bne.n	8001fb4 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8001fac:	2104      	movs	r1, #4
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <TM_I2C2_INT_InitPins+0x7c>)
 8001fb0:	f7ff fe39 	bl	8001c26 <TM_I2C_InitCustomPinsCallback>
	}
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40021400 	.word	0x40021400
 8001fc4:	40021c00 	.word	0x40021c00
 8001fc8:	40005800 	.word	0x40005800

08001fcc <TM_I2C3_INT_InitPins>:

static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d115      	bne.n	8002008 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8001fdc:	2304      	movs	r3, #4
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	4813      	ldr	r0, [pc, #76]	; (800203c <TM_I2C3_INT_InitPins+0x70>)
 8001fee:	f7ff fbdf 	bl	80017b0 <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	480f      	ldr	r0, [pc, #60]	; (8002040 <TM_I2C3_INT_InitPins+0x74>)
 8002004:	f7ff fbd4 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10a      	bne.n	8002024 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 800200e:	2304      	movs	r3, #4
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2301      	movs	r3, #1
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2301      	movs	r3, #1
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800201e:	4809      	ldr	r0, [pc, #36]	; (8002044 <TM_I2C3_INT_InitPins+0x78>)
 8002020:	f7ff fbc6 	bl	80017b0 <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d103      	bne.n	8002032 <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 800202a:	2104      	movs	r1, #4
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <TM_I2C3_INT_InitPins+0x7c>)
 800202e:	f7ff fdfa 	bl	8001c26 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40020000 	.word	0x40020000
 8002040:	40020800 	.word	0x40020800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	40005c00 	.word	0x40005c00

0800204c <TM_MPU6050_Init>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_mpu6050.h"

TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct, TM_MPU6050_Device_t DeviceNumber, TM_MPU6050_Accelerometer_t AccelerometerSensitivity, TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4603      	mov	r3, r0
 800205c:	70fb      	strb	r3, [r7, #3]
 800205e:	460b      	mov	r3, r1
 8002060:	70bb      	strb	r3, [r7, #2]
 8002062:	4613      	mov	r3, r2
 8002064:	707b      	strb	r3, [r7, #1]
	uint8_t temp;
	
	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800206c:	b2da      	uxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	701a      	strb	r2, [r3, #0]
	
	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 8002072:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <TM_MPU6050_Init+0x164>)
 8002074:	2101      	movs	r1, #1
 8002076:	484f      	ldr	r0, [pc, #316]	; (80021b4 <TM_MPU6050_Init+0x168>)
 8002078:	f7ff fc9c 	bl	80019b4 <TM_I2C_Init>
	
	/* Check if device is connected */
	if (!TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address)) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	484c      	ldr	r0, [pc, #304]	; (80021b4 <TM_MPU6050_Init+0x168>)
 8002084:	f7ff fdb4 	bl	8001bf0 <TM_I2C_IsDeviceConnected>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <TM_MPU6050_Init+0x46>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 800208e:	2301      	movs	r3, #1
 8002090:	e089      	b.n	80021a6 <TM_MPU6050_Init+0x15a>
	}
	
	/* Check who I am */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_WHO_AM_I) != MPU6050_I_AM) {
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2275      	movs	r2, #117	; 0x75
 8002098:	4619      	mov	r1, r3
 800209a:	4846      	ldr	r0, [pc, #280]	; (80021b4 <TM_MPU6050_Init+0x168>)
 800209c:	f7ff fd26 	bl	8001aec <TM_I2C_Read>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b68      	cmp	r3, #104	; 0x68
 80020a4:	d001      	beq.n	80020aa <TM_MPU6050_Init+0x5e>
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 80020a6:	2302      	movs	r3, #2
 80020a8:	e07d      	b.n	80021a6 <TM_MPU6050_Init+0x15a>
	}
	
	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7819      	ldrb	r1, [r3, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	226b      	movs	r2, #107	; 0x6b
 80020b2:	4840      	ldr	r0, [pc, #256]	; (80021b4 <TM_MPU6050_Init+0x168>)
 80020b4:	f7ff fd78 	bl	8001ba8 <TM_I2C_Write>
	
	/* Config accelerometer */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	221c      	movs	r2, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	483c      	ldr	r0, [pc, #240]	; (80021b4 <TM_MPU6050_Init+0x168>)
 80020c2:	f7ff fd13 	bl	8001aec <TM_I2C_Read>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	f023 0318 	bic.w	r3, r3, #24
 80020d2:	b25a      	sxtb	r2, r3
 80020d4:	78bb      	ldrb	r3, [r7, #2]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7819      	ldrb	r1, [r3, #0]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	221c      	movs	r2, #28
 80020e8:	4832      	ldr	r0, [pc, #200]	; (80021b4 <TM_MPU6050_Init+0x168>)
 80020ea:	f7ff fd5d 	bl	8001ba8 <TM_I2C_Write>
	
	/* Config gyroscope */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	221b      	movs	r2, #27
 80020f4:	4619      	mov	r1, r3
 80020f6:	482f      	ldr	r0, [pc, #188]	; (80021b4 <TM_MPU6050_Init+0x168>)
 80020f8:	f7ff fcf8 	bl	8001aec <TM_I2C_Read>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8002100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002104:	f023 0318 	bic.w	r3, r3, #24
 8002108:	b25a      	sxtb	r2, r3
 800210a:	787b      	ldrb	r3, [r7, #1]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	b25b      	sxtb	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b25b      	sxtb	r3, r3
 8002114:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7819      	ldrb	r1, [r3, #0]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	221b      	movs	r2, #27
 800211e:	4825      	ldr	r0, [pc, #148]	; (80021b4 <TM_MPU6050_Init+0x168>)
 8002120:	f7ff fd42 	bl	8001ba8 <TM_I2C_Write>
	
	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002124:	78bb      	ldrb	r3, [r7, #2]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d81d      	bhi.n	8002166 <TM_MPU6050_Init+0x11a>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <TM_MPU6050_Init+0xe4>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002141 	.word	0x08002141
 8002134:	0800214b 	.word	0x0800214b
 8002138:	08002155 	.word	0x08002155
 800213c:	0800215f 	.word	0x0800215f
		case TM_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2; 
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002146:	609a      	str	r2, [r3, #8]
			break;
 8002148:	e00e      	b.n	8002168 <TM_MPU6050_Init+0x11c>
		case TM_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4; 
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002150:	609a      	str	r2, [r3, #8]
			break;
 8002152:	e009      	b.n	8002168 <TM_MPU6050_Init+0x11c>
		case TM_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8; 
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800215a:	609a      	str	r2, [r3, #8]
			break;
 800215c:	e004      	b.n	8002168 <TM_MPU6050_Init+0x11c>
		case TM_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16; 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002164:	609a      	str	r2, [r3, #8]
		default:
			break;
 8002166:	bf00      	nop
	}
	
	switch (GyroscopeSensitivity) {
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d819      	bhi.n	80021a2 <TM_MPU6050_Init+0x156>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <TM_MPU6050_Init+0x128>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002185 	.word	0x08002185
 8002178:	0800218d 	.word	0x0800218d
 800217c:	08002195 	.word	0x08002195
 8002180:	0800219d 	.word	0x0800219d
		case TM_MPU6050_Gyroscope_250s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250; 
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <TM_MPU6050_Init+0x16c>)
 8002188:	605a      	str	r2, [r3, #4]
			break;
 800218a:	e00b      	b.n	80021a4 <TM_MPU6050_Init+0x158>
		case TM_MPU6050_Gyroscope_500s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500; 
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <TM_MPU6050_Init+0x170>)
 8002190:	605a      	str	r2, [r3, #4]
			break;
 8002192:	e007      	b.n	80021a4 <TM_MPU6050_Init+0x158>
		case TM_MPU6050_Gyroscope_1000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000; 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <TM_MPU6050_Init+0x174>)
 8002198:	605a      	str	r2, [r3, #4]
			break;
 800219a:	e003      	b.n	80021a4 <TM_MPU6050_Init+0x158>
		case TM_MPU6050_Gyroscope_2000s:
			DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000; 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <TM_MPU6050_Init+0x178>)
 80021a0:	605a      	str	r2, [r3, #4]
		default:
			break;
 80021a2:	bf00      	nop
	}
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	00061a80 	.word	0x00061a80
 80021b4:	40005400 	.word	0x40005400
 80021b8:	3bfa232d 	.word	0x3bfa232d
 80021bc:	3c7a232d 	.word	0x3c7a232d
 80021c0:	3cf9c190 	.word	0x3cf9c190
 80021c4:	3d79c190 	.word	0x3d79c190

080021c8 <TM_MPU6050_ReadAccelerometer>:

TM_MPU6050_Result_t TM_MPU6050_ReadAccelerometer(TM_MPU6050_t* DataStruct) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	
	/* Read accelerometer data */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H, data, 6);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7819      	ldrb	r1, [r3, #0]
 80021d4:	f107 0208 	add.w	r2, r7, #8
 80021d8:	2306      	movs	r3, #6
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	223b      	movs	r2, #59	; 0x3b
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <TM_MPU6050_ReadAccelerometer+0x60>)
 80021e2:	f7ff fca9 	bl	8001b38 <TM_I2C_ReadMulti>
	
	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);	
 80021e6:	7a3b      	ldrb	r3, [r7, #8]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	7a7b      	ldrb	r3, [r7, #9]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 80021f8:	7abb      	ldrb	r3, [r7, #10]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 800220a:	7b3b      	ldrb	r3, [r7, #12]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	7b7b      	ldrb	r3, [r7, #13]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21a      	sxth	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	821a      	strh	r2, [r3, #16]
	
	/* Return OK */
	return TM_MPU6050_Result_Ok;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40005400 	.word	0x40005400

0800222c <TM_MPU6050_ReadGyroscope>:

TM_MPU6050_Result_t TM_MPU6050_ReadGyroscope(TM_MPU6050_t* DataStruct) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af02      	add	r7, sp, #8
 8002232:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	
	/* Read gyroscope data */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_XOUT_H, data, 6);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7819      	ldrb	r1, [r3, #0]
 8002238:	f107 0208 	add.w	r2, r7, #8
 800223c:	2306      	movs	r3, #6
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	2243      	movs	r2, #67	; 0x43
 8002244:	4811      	ldr	r0, [pc, #68]	; (800228c <TM_MPU6050_ReadGyroscope+0x60>)
 8002246:	f7ff fc77 	bl	8001b38 <TM_I2C_ReadMulti>
	
	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 800224a:	7a3b      	ldrb	r3, [r7, #8]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	b21a      	sxth	r2, r3
 8002250:	7a7b      	ldrb	r3, [r7, #9]
 8002252:	b21b      	sxth	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	b21a      	sxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21a      	sxth	r2, r3
 8002262:	7afb      	ldrb	r3, [r7, #11]
 8002264:	b21b      	sxth	r3, r3
 8002266:	4313      	orrs	r3, r2
 8002268:	b21a      	sxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 800226e:	7b3b      	ldrb	r3, [r7, #12]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b21a      	sxth	r2, r3
 8002274:	7b7b      	ldrb	r3, [r7, #13]
 8002276:	b21b      	sxth	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b21a      	sxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40005400 	.word	0x40005400

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4e0d      	ldr	r6, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1ba4      	subs	r4, r4, r6
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2500      	movs	r5, #0
 800229c:	42a5      	cmp	r5, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4e0b      	ldr	r6, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 f818 	bl	80022d8 <_init>
 80022a8:	1ba4      	subs	r4, r4, r6
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2500      	movs	r5, #0
 80022ae:	42a5      	cmp	r5, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b8:	4798      	blx	r3
 80022ba:	3501      	adds	r5, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022c2:	4798      	blx	r3
 80022c4:	3501      	adds	r5, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	080022f0 	.word	0x080022f0
 80022cc:	080022f0 	.word	0x080022f0
 80022d0:	080022f0 	.word	0x080022f0
 80022d4:	080022f4 	.word	0x080022f4

080022d8 <_init>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr

080022e4 <_fini>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	bf00      	nop
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr
